/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_web3auth_ethereum-provider_dist_ethereumProvider_esm_js"],{

/***/ "./node_modules/@ethereumjs/rlp/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@ethereumjs/rlp/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nexports.RLP = { encode, decode };\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/rlp/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/account.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/account.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst rlp_1 = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@ethereumjs/rlp/dist/index.js\");\nconst keccak_1 = __webpack_require__(/*! ethereum-cryptography/keccak */ \"./node_modules/ethereum-cryptography/keccak.js\");\nconst secp256k1_1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"./node_modules/ethereum-cryptography/secp256k1.js\");\nconst utils_1 = __webpack_require__(/*! ethereum-cryptography/utils */ \"./node_modules/ethereum-cryptography/utils.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@ethereumjs/util/dist/constants.js\");\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@ethereumjs/util/dist/helpers.js\");\nconst internal_1 = __webpack_require__(/*! ./internal */ \"./node_modules/@ethereumjs/util/dist/internal.js\");\nconst _0n = BigInt(0);\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    constructor(nonce = _0n, balance = _0n, storageRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL) {\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(nonce)) : undefined, balance !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_1.toBuffer)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = (0, bytes_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0, bytes_1.bufferToBigInt)(nonce), (0, bytes_1.bufferToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _0n) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance < _0n) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error('storageRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    raw() {\n        return [\n            (0, bytes_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, bytes_1.bigIntToUnpaddedBuffer)(this.balance),\n            this.storageRoot,\n            this.codeHash,\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    serialize() {\n        return Buffer.from(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)(this.raw())));\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0, helpers_1.assertIsHexString)(hexAddress);\n    const address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(eip1191ChainId));\n        prefix = chainId.toString() + '0x';\n    }\n    const buf = Buffer.from(prefix + address, 'utf8');\n    const hash = (0, utils_1.bytesToHex)((0, keccak_1.keccak256)(buf));\n    let ret = '0x';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(nonce);\n    if ((0, bytes_1.bufferToBigInt)(nonce) === BigInt(0)) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, null])))).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, nonce])))).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(salt);\n    (0, helpers_1.assertIsBuffer)(initCode);\n    if (from.length !== 20) {\n        throw new Error('Expected from to be of length 20');\n    }\n    if (salt.length !== 32) {\n        throw new Error('Expected salt to be of length 32');\n    }\n    const address = (0, keccak_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, keccak_1.keccak256)(initCode)]));\n    return (0, bytes_1.toBuffer)(address).slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n    return secp256k1_1.secp256k1.utils.isValidPrivateKey(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey, sanitize = false) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            secp256k1_1.secp256k1.ProjectivePoint.fromHex(Buffer.concat([Buffer.from([4]), publicKey]));\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey, sanitize = false) {\n    (0, helpers_1.assertIsBuffer)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));\n    }\n    if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return Buffer.from((0, keccak_1.keccak256)(pubKey)).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n    (0, helpers_1.assertIsBuffer)(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n    const addressLength = 20;\n    const addr = (0, bytes_1.zeros)(addressLength);\n    return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_1.arrToBufArr)(storageRoot).length === 0 ? constants_1.KECCAK256_RLP : storageRoot,\n        (0, bytes_1.arrToBufArr)(codeHash).length === 0 ? constants_1.KECCAK256_NULL : codeHash,\n    ];\n}\nexports.accountBodyFromSlim = accountBodyFromSlim;\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_1.arrToBufArr)(storageRoot).equals(constants_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0, bytes_1.arrToBufArr)(codeHash).equals(constants_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n    ];\n}\nexports.accountBodyToSlim = accountBodyToSlim;\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Buffer-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return (0, bytes_1.arrToBufArr)(rlp_1.RLP.encode(accountBody));\n}\nexports.accountBodyToRLP = accountBodyToRLP;\n//# sourceMappingURL=account.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/account.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/address.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/address.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Address = void 0;\nconst account_1 = __webpack_require__(/*! ./account */ \"./node_modules/@ethereumjs/util/dist/account.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"./node_modules/@ethereumjs/util/dist/bytes.js\");\n/**\n * Handling and generating Ethereum addresses\n */\nclass Address {\n    constructor(buf) {\n        if (buf.length !== 20) {\n            throw new Error('Invalid address length');\n        }\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address((0, bytes_1.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        if (!(0, account_1.isValidAddress)(str)) {\n            throw new Error('Invalid address');\n        }\n        return new Address((0, bytes_1.toBuffer)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        if (!Buffer.isBuffer(pubKey)) {\n            throw new Error('Public key should be Buffer');\n        }\n        const buf = (0, account_1.pubToAddress)(pubKey);\n        return new Address(buf);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        if (!Buffer.isBuffer(privateKey)) {\n            throw new Error('Private key should be Buffer');\n        }\n        const buf = (0, account_1.privateToAddress)(privateKey);\n        return new Address(buf);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        if (typeof nonce !== 'bigint') {\n            throw new Error('Expected nonce to be a bigint');\n        }\n        return new Address((0, account_1.generateAddress)(from.buf, (0, bytes_1.bigIntToBuffer)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        if (!Buffer.isBuffer(salt)) {\n            throw new Error('Expected salt to be a Buffer');\n        }\n        if (!Buffer.isBuffer(initCode)) {\n            throw new Error('Expected initCode to be a Buffer');\n        }\n        return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return this.buf.equals(address.buf);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const address = (0, bytes_1.bufferToBigInt)(this.buf);\n        const rangeMin = BigInt(0);\n        const rangeMax = BigInt('0xffff');\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return '0x' + this.buf.toString('hex');\n    }\n    /**\n     * Returns Buffer representation of address.\n     */\n    toBuffer() {\n        return Buffer.from(this.buf);\n    }\n}\nexports.Address = Address;\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixrQkFBa0IsbUJBQU8sQ0FBQyxrRUFBVztBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9hZGRyZXNzLmpzP2FhNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFkZHJlc3MgPSB2b2lkIDA7XG5jb25zdCBhY2NvdW50XzEgPSByZXF1aXJlKFwiLi9hY2NvdW50XCIpO1xuY29uc3QgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuLyoqXG4gKiBIYW5kbGluZyBhbmQgZ2VuZXJhdGluZyBFdGhlcmV1bSBhZGRyZXNzZXNcbiAqL1xuY2xhc3MgQWRkcmVzcyB7XG4gICAgY29uc3RydWN0b3IoYnVmKSB7XG4gICAgICAgIGlmIChidWYubGVuZ3RoICE9PSAyMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFkZHJlc3MgbGVuZ3RoJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWYgPSBidWY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHplcm8gYWRkcmVzcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgemVybygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzKCgwLCBieXRlc18xLnplcm9zKSgyMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEFkZHJlc3Mgb2JqZWN0IGZyb20gYSBoZXgtZW5jb2RlZCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHN0ciAtIEhleC1lbmNvZGVkIGFkZHJlc3NcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhzdHIpIHtcbiAgICAgICAgaWYgKCEoMCwgYWNjb3VudF8xLmlzVmFsaWRBZGRyZXNzKShzdHIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkcmVzcycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcygoMCwgYnl0ZXNfMS50b0J1ZmZlcikoc3RyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYWRkcmVzcyBmb3IgYSBnaXZlbiBwdWJsaWMga2V5LlxuICAgICAqIEBwYXJhbSBwdWJLZXkgVGhlIHR3byBwb2ludHMgb2YgYW4gdW5jb21wcmVzc2VkIGtleVxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUHVibGljS2V5KHB1YktleSkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWJLZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1B1YmxpYyBrZXkgc2hvdWxkIGJlIEJ1ZmZlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZiA9ICgwLCBhY2NvdW50XzEucHViVG9BZGRyZXNzKShwdWJLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoYnVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhZGRyZXNzIGZvciBhIGdpdmVuIHByaXZhdGUga2V5LlxuICAgICAqIEBwYXJhbSBwcml2YXRlS2V5IEEgcHJpdmF0ZSBrZXkgbXVzdCBiZSAyNTYgYml0cyB3aWRlXG4gICAgICovXG4gICAgc3RhdGljIGZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpIHtcbiAgICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdmF0ZUtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHJpdmF0ZSBrZXkgc2hvdWxkIGJlIEJ1ZmZlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZiA9ICgwLCBhY2NvdW50XzEucHJpdmF0ZVRvQWRkcmVzcykocHJpdmF0ZUtleSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhidWYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW4gYWRkcmVzcyBmb3IgYSBuZXdseSBjcmVhdGVkIGNvbnRyYWN0LlxuICAgICAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gbm9uY2UgVGhlIG5vbmNlIG9mIHRoZSBmcm9tIGFjY291bnRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2VuZXJhdGUoZnJvbSwgbm9uY2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBub25jZSAhPT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9uY2UgdG8gYmUgYSBiaWdpbnQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoKDAsIGFjY291bnRfMS5nZW5lcmF0ZUFkZHJlc3MpKGZyb20uYnVmLCAoMCwgYnl0ZXNfMS5iaWdJbnRUb0J1ZmZlcikobm9uY2UpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhbiBhZGRyZXNzIGZvciBhIGNvbnRyYWN0IGNyZWF0ZWQgdXNpbmcgQ1JFQVRFMi5cbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgYWRkcmVzcyB3aGljaCBpcyBjcmVhdGluZyB0aGlzIG5ldyBhZGRyZXNzXG4gICAgICogQHBhcmFtIHNhbHQgQSBzYWx0XG4gICAgICogQHBhcmFtIGluaXRDb2RlIFRoZSBpbml0IGNvZGUgb2YgdGhlIGNvbnRyYWN0IGJlaW5nIGNyZWF0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2VuZXJhdGUyKGZyb20sIHNhbHQsIGluaXRDb2RlKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHNhbHQgdG8gYmUgYSBCdWZmZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpbml0Q29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5pdENvZGUgdG8gYmUgYSBCdWZmZXInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoKDAsIGFjY291bnRfMS5nZW5lcmF0ZUFkZHJlc3MyKShmcm9tLmJ1Ziwgc2FsdCwgaW5pdENvZGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXMgYWRkcmVzcyBlcXVhbCB0byBhbm90aGVyLlxuICAgICAqL1xuICAgIGVxdWFscyhhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5lcXVhbHMoYWRkcmVzcy5idWYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJcyBhZGRyZXNzIHplcm8uXG4gICAgICovXG4gICAgaXNaZXJvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHMoQWRkcmVzcy56ZXJvKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIGFkZHJlc3MgaXMgaW4gdGhlIGFkZHJlc3MgcmFuZ2UgZGVmaW5lZFxuICAgICAqIGJ5IEVJUC0xMzUyXG4gICAgICovXG4gICAgaXNQcmVjb21waWxlT3JTeXN0ZW1BZGRyZXNzKCkge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gKDAsIGJ5dGVzXzEuYnVmZmVyVG9CaWdJbnQpKHRoaXMuYnVmKTtcbiAgICAgICAgY29uc3QgcmFuZ2VNaW4gPSBCaWdJbnQoMCk7XG4gICAgICAgIGNvbnN0IHJhbmdlTWF4ID0gQmlnSW50KCcweGZmZmYnKTtcbiAgICAgICAgcmV0dXJuIGFkZHJlc3MgPj0gcmFuZ2VNaW4gJiYgYWRkcmVzcyA8PSByYW5nZU1heDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBoZXggZW5jb2Rpbmcgb2YgYWRkcmVzcy5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICcweCcgKyB0aGlzLmJ1Zi50b1N0cmluZygnaGV4Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgQnVmZmVyIHJlcHJlc2VudGF0aW9uIG9mIGFkZHJlc3MuXG4gICAgICovXG4gICAgdG9CdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLmJ1Zik7XG4gICAgfVxufVxuZXhwb3J0cy5BZGRyZXNzID0gQWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/address.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks) {\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    task.call(context, data, (error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        }\n        catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events_1.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === 'function') {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === 'newListener' || event === 'removeListener') {\n            data = {\n                event: data,\n                fn: callback,\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [listeners];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function (e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        }\n        else {\n            g = function (e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, 'after');\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === 'after' ? 1 : 0;\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        if (typeof target !== 'function') {\n            throw new TypeError('target must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        index = listeners.length;\n        for (i = listeners.length; i--;) {\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\nexports.AsyncEventEmitter = AsyncEventEmitter;\n//# sourceMappingURL=asyncEventEmitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/bytes.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/bytes.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@ethereumjs/util/dist/helpers.js\");\nconst internal_1 = __webpack_require__(/*! ./internal */ \"./node_modules/@ethereumjs/util/dist/internal.js\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function (i) {\n    const hex = (0, exports.intToHex)(i);\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n    const buf = (0, exports.zeros)(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function (a) {\n    (0, helpers_1.assertIsHexString)(a);\n    a = (0, internal_1.stripHexPrefix)(a);\n    return ('0x' + stripZeros(a));\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0, internal_1.isHexString)(v)) {\n            throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return (0, exports.intToBuffer)(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BigInt(0)) {\n            throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return Buffer.from(n, 'hex');\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function (buf) {\n    buf = (0, exports.toBuffer)(buf);\n    return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n    const hex = (0, exports.bufferToHex)(buf);\n    if (hex === '0x') {\n        return BigInt(0);\n    }\n    return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n    return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function (buf) {\n    const res = Number(bufferToBigInt(buf));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function (num) {\n    return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function (num) {\n    return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer, maxLength = 50) {\n    const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n    if (bufferStr.length <= maxLength) {\n        return bufferStr;\n    }\n    return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function (hex) {\n    const zerosRegexp = /^(00)+|(00)+$/g;\n    hex = (0, internal_1.stripHexPrefix)(hex);\n    if (hex.length % 2 !== 0) {\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\n    }\n    const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n    return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return `0x${ba.toString('hex')}`;\n    }\n    else if (ba instanceof Array) {\n        const array = [];\n        for (let i = 0; i < ba.length; i++) {\n            array.push((0, exports.baToJSON)(ba[i]));\n        }\n        return array;\n    }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function (values) {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n        }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Buffer.from(arr);\n    }\n    return arr.map((a) => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Uint8Array.from(arr ?? []);\n    }\n    return arr.map((a) => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = (num) => {\n    return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2J5dGVzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyw4QkFBOEIsR0FBRyxtQkFBbUIsR0FBRyxtQkFBbUIsR0FBRyxtQkFBbUIsR0FBRywrQkFBK0IsR0FBRyxnQkFBZ0IsR0FBRyxjQUFjLEdBQUcsYUFBYSxHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLHNCQUFzQixHQUFHLHNCQUFzQixHQUFHLG1CQUFtQixHQUFHLGdCQUFnQixHQUFHLHNCQUFzQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQixHQUFHLHNCQUFzQixHQUFHLHFCQUFxQixHQUFHLGFBQWEsR0FBRyxtQkFBbUIsR0FBRyxnQkFBZ0I7QUFDcGpCLGtCQUFrQixtQkFBTyxDQUFDLGtFQUFXO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLG9FQUFZO0FBQ3ZDO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxFQUFFO0FBQy9EO0FBQ0EsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQSxRQUFRLE1BQU07QUFDZCxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSwwSUFBMEksRUFBRTtBQUM1STtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsRUFBRTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLGVBQWUsY0FBYyxNQUFNO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxlQUFlLGNBQWMsTUFBTTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTTtBQUM1QjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsTUFBTTtBQUNkLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixHQUFHLHdDQUF3QyxrQkFBa0I7QUFDNUY7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2J5dGVzLmpzPzNiYWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludFRvVW5wYWRkZWRCdWZmZXIgPSBleHBvcnRzLmJpZ0ludFRvVW5wYWRkZWRCdWZmZXIgPSBleHBvcnRzLmJpZ0ludFRvSGV4ID0gZXhwb3J0cy5idWZBcnJUb0FyciA9IGV4cG9ydHMuYXJyVG9CdWZBcnIgPSBleHBvcnRzLnZhbGlkYXRlTm9MZWFkaW5nWmVyb2VzID0gZXhwb3J0cy5iYVRvSlNPTiA9IGV4cG9ydHMudG9VdGY4ID0gZXhwb3J0cy5zaG9ydCA9IGV4cG9ydHMuYWRkSGV4UHJlZml4ID0gZXhwb3J0cy50b1Vuc2lnbmVkID0gZXhwb3J0cy5mcm9tU2lnbmVkID0gZXhwb3J0cy5idWZmZXJUb0ludCA9IGV4cG9ydHMuYmlnSW50VG9CdWZmZXIgPSBleHBvcnRzLmJ1ZmZlclRvQmlnSW50ID0gZXhwb3J0cy5idWZmZXJUb0hleCA9IGV4cG9ydHMudG9CdWZmZXIgPSBleHBvcnRzLnVucGFkSGV4U3RyaW5nID0gZXhwb3J0cy51bnBhZEFycmF5ID0gZXhwb3J0cy51bnBhZEJ1ZmZlciA9IGV4cG9ydHMuc2V0TGVuZ3RoUmlnaHQgPSBleHBvcnRzLnNldExlbmd0aExlZnQgPSBleHBvcnRzLnplcm9zID0gZXhwb3J0cy5pbnRUb0J1ZmZlciA9IGV4cG9ydHMuaW50VG9IZXggPSB2b2lkIDA7XG5jb25zdCBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuY29uc3QgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xuLyoqXG4gKiBDb252ZXJ0cyBhIGBOdW1iZXJgIGludG8gYSBoZXggYFN0cmluZ2BcbiAqIEBwYXJhbSB7TnVtYmVyfSBpXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmNvbnN0IGludFRvSGV4ID0gZnVuY3Rpb24gKGkpIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGkpIHx8IGkgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgYW4gaW52YWxpZCBpbnRlZ2VyIHR5cGU6ICR7aX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGAweCR7aS50b1N0cmluZygxNil9YDtcbn07XG5leHBvcnRzLmludFRvSGV4ID0gaW50VG9IZXg7XG4vKipcbiAqIENvbnZlcnRzIGFuIGBOdW1iZXJgIHRvIGEgYEJ1ZmZlcmBcbiAqIEBwYXJhbSB7TnVtYmVyfSBpXG4gKiBAcmV0dXJuIHtCdWZmZXJ9XG4gKi9cbmNvbnN0IGludFRvQnVmZmVyID0gZnVuY3Rpb24gKGkpIHtcbiAgICBjb25zdCBoZXggPSAoMCwgZXhwb3J0cy5pbnRUb0hleCkoaSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKCgwLCBpbnRlcm5hbF8xLnBhZFRvRXZlbikoaGV4LnNsaWNlKDIpKSwgJ2hleCcpO1xufTtcbmV4cG9ydHMuaW50VG9CdWZmZXIgPSBpbnRUb0J1ZmZlcjtcbi8qKlxuICogUmV0dXJucyBhIGJ1ZmZlciBmaWxsZWQgd2l0aCAwcy5cbiAqIEBwYXJhbSBieXRlcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBidWZmZXIgc2hvdWxkIGJlXG4gKi9cbmNvbnN0IHplcm9zID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZShieXRlcykuZmlsbCgwKTtcbn07XG5leHBvcnRzLnplcm9zID0gemVyb3M7XG4vKipcbiAqIFBhZHMgYSBgQnVmZmVyYCB3aXRoIHplcm9zIHRpbGwgaXQgaGFzIGBsZW5ndGhgIGJ5dGVzLlxuICogVHJ1bmNhdGVzIHRoZSBiZWdpbm5pbmcgb3IgZW5kIG9mIGlucHV0IGlmIGl0cyBsZW5ndGggZXhjZWVkcyBgbGVuZ3RoYC5cbiAqIEBwYXJhbSBtc2cgdGhlIHZhbHVlIHRvIHBhZCAoQnVmZmVyKVxuICogQHBhcmFtIGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcGFyYW0gcmlnaHQgd2hldGhlciB0byBzdGFydCBwYWRkaW5nIGZvcm0gdGhlIGxlZnQgb3IgcmlnaHRcbiAqIEByZXR1cm4gKEJ1ZmZlcilcbiAqL1xuY29uc3Qgc2V0TGVuZ3RoID0gZnVuY3Rpb24gKG1zZywgbGVuZ3RoLCByaWdodCkge1xuICAgIGNvbnN0IGJ1ZiA9ICgwLCBleHBvcnRzLnplcm9zKShsZW5ndGgpO1xuICAgIGlmIChyaWdodCkge1xuICAgICAgICBpZiAobXNnLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgbXNnLmNvcHkoYnVmKTtcbiAgICAgICAgICAgIHJldHVybiBidWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1zZy5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG1zZy5jb3B5KGJ1ZiwgbGVuZ3RoIC0gbXNnLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtc2cuc2xpY2UoLWxlbmd0aCk7XG4gICAgfVxufTtcbi8qKlxuICogTGVmdCBQYWRzIGEgYEJ1ZmZlcmAgd2l0aCBsZWFkaW5nIHplcm9zIHRpbGwgaXQgaGFzIGBsZW5ndGhgIGJ5dGVzLlxuICogT3IgaXQgdHJ1bmNhdGVzIHRoZSBiZWdpbm5pbmcgaWYgaXQgZXhjZWVkcy5cbiAqIEBwYXJhbSBtc2cgdGhlIHZhbHVlIHRvIHBhZCAoQnVmZmVyKVxuICogQHBhcmFtIGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcmV0dXJuIChCdWZmZXIpXG4gKi9cbmNvbnN0IHNldExlbmd0aExlZnQgPSBmdW5jdGlvbiAobXNnLCBsZW5ndGgpIHtcbiAgICAoMCwgaGVscGVyc18xLmFzc2VydElzQnVmZmVyKShtc2cpO1xuICAgIHJldHVybiBzZXRMZW5ndGgobXNnLCBsZW5ndGgsIGZhbHNlKTtcbn07XG5leHBvcnRzLnNldExlbmd0aExlZnQgPSBzZXRMZW5ndGhMZWZ0O1xuLyoqXG4gKiBSaWdodCBQYWRzIGEgYEJ1ZmZlcmAgd2l0aCB0cmFpbGluZyB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIGl0IHRydW5jYXRlcyB0aGUgZW5kIGlmIGl0IGV4Y2VlZHMuXG4gKiBAcGFyYW0gbXNnIHRoZSB2YWx1ZSB0byBwYWQgKEJ1ZmZlcilcbiAqIEBwYXJhbSBsZW5ndGggdGhlIG51bWJlciBvZiBieXRlcyB0aGUgb3V0cHV0IHNob3VsZCBiZVxuICogQHJldHVybiAoQnVmZmVyKVxuICovXG5jb25zdCBzZXRMZW5ndGhSaWdodCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKG1zZyk7XG4gICAgcmV0dXJuIHNldExlbmd0aChtc2csIGxlbmd0aCwgdHJ1ZSk7XG59O1xuZXhwb3J0cy5zZXRMZW5ndGhSaWdodCA9IHNldExlbmd0aFJpZ2h0O1xuLyoqXG4gKiBUcmltcyBsZWFkaW5nIHplcm9zIGZyb20gYSBgQnVmZmVyYCwgYFN0cmluZ2Agb3IgYE51bWJlcltdYC5cbiAqIEBwYXJhbSBhIChCdWZmZXJ8QXJyYXl8U3RyaW5nKVxuICogQHJldHVybiAoQnVmZmVyfEFycmF5fFN0cmluZylcbiAqL1xuY29uc3Qgc3RyaXBaZXJvcyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgbGV0IGZpcnN0ID0gYVswXTtcbiAgICB3aGlsZSAoYS5sZW5ndGggPiAwICYmIGZpcnN0LnRvU3RyaW5nKCkgPT09ICcwJykge1xuICAgICAgICBhID0gYS5zbGljZSgxKTtcbiAgICAgICAgZmlyc3QgPSBhWzBdO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn07XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGBCdWZmZXJgLlxuICogQHBhcmFtIGEgKEJ1ZmZlcilcbiAqIEByZXR1cm4gKEJ1ZmZlcilcbiAqL1xuY29uc3QgdW5wYWRCdWZmZXIgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNCdWZmZXIpKGEpO1xuICAgIHJldHVybiBzdHJpcFplcm9zKGEpO1xufTtcbmV4cG9ydHMudW5wYWRCdWZmZXIgPSB1bnBhZEJ1ZmZlcjtcbi8qKlxuICogVHJpbXMgbGVhZGluZyB6ZXJvcyBmcm9tIGFuIGBBcnJheWAgKG9mIG51bWJlcnMpLlxuICogQHBhcmFtIGEgKG51bWJlcltdKVxuICogQHJldHVybiAobnVtYmVyW10pXG4gKi9cbmNvbnN0IHVucGFkQXJyYXkgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNBcnJheSkoYSk7XG4gICAgcmV0dXJuIHN0cmlwWmVyb3MoYSk7XG59O1xuZXhwb3J0cy51bnBhZEFycmF5ID0gdW5wYWRBcnJheTtcbi8qKlxuICogVHJpbXMgbGVhZGluZyB6ZXJvcyBmcm9tIGEgaGV4LXByZWZpeGVkIGBTdHJpbmdgLlxuICogQHBhcmFtIGEgKFN0cmluZylcbiAqIEByZXR1cm4gKFN0cmluZylcbiAqL1xuY29uc3QgdW5wYWRIZXhTdHJpbmcgPSBmdW5jdGlvbiAoYSkge1xuICAgICgwLCBoZWxwZXJzXzEuYXNzZXJ0SXNIZXhTdHJpbmcpKGEpO1xuICAgIGEgPSAoMCwgaW50ZXJuYWxfMS5zdHJpcEhleFByZWZpeCkoYSk7XG4gICAgcmV0dXJuICgnMHgnICsgc3RyaXBaZXJvcyhhKSk7XG59O1xuZXhwb3J0cy51bnBhZEhleFN0cmluZyA9IHVucGFkSGV4U3RyaW5nO1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBCdWZmZXJgLlxuICogSW5wdXRzIHN1cHBvcnRlZDogYEJ1ZmZlcmAsIGBTdHJpbmdgIChoZXgtcHJlZml4ZWQpLCBgTnVtYmVyYCwgbnVsbC91bmRlZmluZWQsIGBCaWdJbnRgIGFuZCBvdGhlciBvYmplY3RzXG4gKiB3aXRoIGEgYHRvQXJyYXkoKWAgb3IgYHRvQnVmZmVyKClgIG1ldGhvZC5cbiAqIEBwYXJhbSB2IHRoZSB2YWx1ZVxuICovXG5jb25zdCB0b0J1ZmZlciA9IGZ1bmN0aW9uICh2KSB7XG4gICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gICAgfVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodikpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHYpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSB8fCB2IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCEoMCwgaW50ZXJuYWxfMS5pc0hleFN0cmluZykodikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNvbnZlcnQgc3RyaW5nIHRvIGJ1ZmZlci4gdG9CdWZmZXIgb25seSBzdXBwb3J0cyAweC1wcmVmaXhlZCBoZXggc3RyaW5ncyBhbmQgdGhpcyBzdHJpbmcgd2FzIGdpdmVuOiAke3Z9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKCgwLCBpbnRlcm5hbF8xLnBhZFRvRXZlbikoKDAsIGludGVybmFsXzEuc3RyaXBIZXhQcmVmaXgpKHYpKSwgJ2hleCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5pbnRUb0J1ZmZlcikodik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgaWYgKHYgPCBCaWdJbnQoMCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNvbnZlcnQgbmVnYXRpdmUgYmlnaW50IHRvIGJ1ZmZlci4gR2l2ZW46ICR7dn1gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbiA9IHYudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAobi5sZW5ndGggJSAyKVxuICAgICAgICAgICAgbiA9ICcwJyArIG47XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShuLCAnaGV4Jyk7XG4gICAgfVxuICAgIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgICAgLy8gY29udmVydHMgYSBCTiB0byBhIEJ1ZmZlclxuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odi50b0FycmF5KCkpO1xuICAgIH1cbiAgICBpZiAodi50b0J1ZmZlcikge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odi50b0J1ZmZlcigpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHR5cGUnKTtcbn07XG5leHBvcnRzLnRvQnVmZmVyID0gdG9CdWZmZXI7XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgaW50byBhIGAweGAtcHJlZml4ZWQgaGV4IGBTdHJpbmdgLlxuICogQHBhcmFtIGJ1ZiBgQnVmZmVyYCBvYmplY3QgdG8gY29udmVydFxuICovXG5jb25zdCBidWZmZXJUb0hleCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBidWYgPSAoMCwgZXhwb3J0cy50b0J1ZmZlcikoYnVmKTtcbiAgICByZXR1cm4gJzB4JyArIGJ1Zi50b1N0cmluZygnaGV4Jyk7XG59O1xuZXhwb3J0cy5idWZmZXJUb0hleCA9IGJ1ZmZlclRvSGV4O1xuLyoqXG4gKiBDb252ZXJ0cyBhIHtAbGluayBCdWZmZXJ9IHRvIGEge0BsaW5rIGJpZ2ludH1cbiAqL1xuZnVuY3Rpb24gYnVmZmVyVG9CaWdJbnQoYnVmKSB7XG4gICAgY29uc3QgaGV4ID0gKDAsIGV4cG9ydHMuYnVmZmVyVG9IZXgpKGJ1Zik7XG4gICAgaWYgKGhleCA9PT0gJzB4Jykge1xuICAgICAgICByZXR1cm4gQmlnSW50KDApO1xuICAgIH1cbiAgICByZXR1cm4gQmlnSW50KGhleCk7XG59XG5leHBvcnRzLmJ1ZmZlclRvQmlnSW50ID0gYnVmZmVyVG9CaWdJbnQ7XG4vKipcbiAqIENvbnZlcnRzIGEge0BsaW5rIGJpZ2ludH0gdG8gYSB7QGxpbmsgQnVmZmVyfVxuICovXG5mdW5jdGlvbiBiaWdJbnRUb0J1ZmZlcihudW0pIHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMudG9CdWZmZXIpKCcweCcgKyBudW0udG9TdHJpbmcoMTYpKTtcbn1cbmV4cG9ydHMuYmlnSW50VG9CdWZmZXIgPSBiaWdJbnRUb0J1ZmZlcjtcbi8qKlxuICogQ29udmVydHMgYSBgQnVmZmVyYCB0byBhIGBOdW1iZXJgLlxuICogQHBhcmFtIGJ1ZiBgQnVmZmVyYCBvYmplY3QgdG8gY29udmVydFxuICogQHRocm93cyBJZiB0aGUgaW5wdXQgbnVtYmVyIGV4Y2VlZHMgNTMgYml0cy5cbiAqL1xuY29uc3QgYnVmZmVyVG9JbnQgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgY29uc3QgcmVzID0gTnVtYmVyKGJ1ZmZlclRvQmlnSW50KGJ1ZikpO1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIocmVzKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1iZXIgZXhjZWVkcyA1MyBiaXRzJyk7XG4gICAgcmV0dXJuIHJlcztcbn07XG5leHBvcnRzLmJ1ZmZlclRvSW50ID0gYnVmZmVyVG9JbnQ7XG4vKipcbiAqIEludGVycHJldHMgYSBgQnVmZmVyYCBhcyBhIHNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGEgYEJpZ0ludGAuIEFzc3VtZXMgMjU2LWJpdCBudW1iZXJzLlxuICogQHBhcmFtIG51bSBTaWduZWQgaW50ZWdlciB2YWx1ZVxuICovXG5jb25zdCBmcm9tU2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHJldHVybiBCaWdJbnQuYXNJbnROKDI1NiwgYnVmZmVyVG9CaWdJbnQobnVtKSk7XG59O1xuZXhwb3J0cy5mcm9tU2lnbmVkID0gZnJvbVNpZ25lZDtcbi8qKlxuICogQ29udmVydHMgYSBgQmlnSW50YCB0byBhbiB1bnNpZ25lZCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0IGFzIGEgYEJ1ZmZlcmAuIEFzc3VtZXMgMjU2LWJpdCBudW1iZXJzLlxuICogQHBhcmFtIG51bVxuICovXG5jb25zdCB0b1Vuc2lnbmVkID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHJldHVybiBiaWdJbnRUb0J1ZmZlcihCaWdJbnQuYXNVaW50TigyNTYsIG51bSkpO1xufTtcbmV4cG9ydHMudG9VbnNpZ25lZCA9IHRvVW5zaWduZWQ7XG4vKipcbiAqIEFkZHMgXCIweFwiIHRvIGEgZ2l2ZW4gYFN0cmluZ2AgaWYgaXQgZG9lcyBub3QgYWxyZWFkeSBzdGFydCB3aXRoIFwiMHhcIi5cbiAqL1xuY29uc3QgYWRkSGV4UHJlZml4ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGludGVybmFsXzEuaXNIZXhQcmVmaXhlZCkoc3RyKSA/IHN0ciA6ICcweCcgKyBzdHI7XG59O1xuZXhwb3J0cy5hZGRIZXhQcmVmaXggPSBhZGRIZXhQcmVmaXg7XG4vKipcbiAqIFNob3J0ZW5zIGEgc3RyaW5nICBvciBidWZmZXIncyBoZXggc3RyaW5nIHJlcHJlc2VudGF0aW9uIHRvIG1heExlbmd0aCAoZGVmYXVsdCA1MCkuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogSW5wdXQ6ICAnNjU3NDY4NjU3MjY1NzU2ZDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAqIE91dHB1dDogJzY1NzQ2ODY1NzI2NTc1NmQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw4oCmJ1xuICovXG5mdW5jdGlvbiBzaG9ydChidWZmZXIsIG1heExlbmd0aCA9IDUwKSB7XG4gICAgY29uc3QgYnVmZmVyU3RyID0gQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikgPyBidWZmZXIudG9TdHJpbmcoJ2hleCcpIDogYnVmZmVyO1xuICAgIGlmIChidWZmZXJTdHIubGVuZ3RoIDw9IG1heExlbmd0aCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyU3RyO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyU3RyLnNsaWNlKDAsIG1heExlbmd0aCkgKyAn4oCmJztcbn1cbmV4cG9ydHMuc2hvcnQgPSBzaG9ydDtcbi8qKlxuICogUmV0dXJucyB0aGUgdXRmOCBzdHJpbmcgcmVwcmVzZW50YXRpb24gZnJvbSBhIGhleCBzdHJpbmcuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogSW5wdXQgMTogJzY1NzQ2ODY1NzI2NTc1NmQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gKiBJbnB1dCAyOiAnNjU3NDY4NjU3MjY1NzU2ZCdcbiAqIElucHV0IDM6ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2NTc0Njg2NTcyNjU3NTZkJ1xuICpcbiAqIE91dHB1dCAoYWxsIDMgaW5wdXQgdmFyaWFudHMpOiAnZXRoZXJldW0nXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGggaGV4IHN0cmluZ3NcbiAqIHJlcHJlc2VudGluZyBxdWFudGl0aWVzIGluIGJvdGggYmlnIGVuZGlhbiBvciBsaXR0bGUgZW5kaWFuIG5vdGF0aW9uLlxuICpcbiAqIEBwYXJhbSBzdHJpbmcgSGV4IHN0cmluZywgc2hvdWxkIGJlIGAweGAgcHJlZml4ZWRcbiAqIEByZXR1cm4gVXRmOCBzdHJpbmdcbiAqL1xuY29uc3QgdG9VdGY4ID0gZnVuY3Rpb24gKGhleCkge1xuICAgIGNvbnN0IHplcm9zUmVnZXhwID0gL14oMDApK3woMDApKyQvZztcbiAgICBoZXggPSAoMCwgaW50ZXJuYWxfMS5zdHJpcEhleFByZWZpeCkoaGV4KTtcbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG5vbi1ldmVuIGhleCBzdHJpbmcgaW5wdXQgZm9yIHRvVXRmOCgpIHByb3ZpZGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IGJ1ZmZlclZhbCA9IEJ1ZmZlci5mcm9tKGhleC5yZXBsYWNlKHplcm9zUmVnZXhwLCAnJyksICdoZXgnKTtcbiAgICByZXR1cm4gYnVmZmVyVmFsLnRvU3RyaW5nKCd1dGY4Jyk7XG59O1xuZXhwb3J0cy50b1V0ZjggPSB0b1V0Zjg7XG4vKipcbiAqIENvbnZlcnRzIGEgYEJ1ZmZlcmAgb3IgYEFycmF5YCB0byBKU09OLlxuICogQHBhcmFtIGJhIChCdWZmZXJ8QXJyYXkpXG4gKiBAcmV0dXJuIChBcnJheXxTdHJpbmd8bnVsbClcbiAqL1xuY29uc3QgYmFUb0pTT04gPSBmdW5jdGlvbiAoYmEpIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGJhKSkge1xuICAgICAgICByZXR1cm4gYDB4JHtiYS50b1N0cmluZygnaGV4Jyl9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYmEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKCgwLCBleHBvcnRzLmJhVG9KU09OKShiYVtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG59O1xuZXhwb3J0cy5iYVRvSlNPTiA9IGJhVG9KU09OO1xuLyoqXG4gKiBDaGVja3MgcHJvdmlkZWQgQnVmZmVycyBmb3IgbGVhZGluZyB6ZXJvZXMgYW5kIHRocm93cyBpZiBmb3VuZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiBWYWxpZCB2YWx1ZXM6IDB4MSwgMHgsIDB4MDEsIDB4MTIzNFxuICogSW52YWxpZCB2YWx1ZXM6IDB4MCwgMHgwMCwgMHgwMDEsIDB4MDAwMVxuICpcbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3IgdmFsaWRhdGluZyB0aGF0IFJMUCBlbmNvZGVkIGludGVnZXJzIGNvbXBseSB3aXRoIHRoZSBydWxlIHRoYXQgYWxsXG4gKiBpbnRlZ2VyIHZhbHVlcyBlbmNvZGVkIHRvIFJMUCBtdXN0IGJlIGluIHRoZSBtb3N0IGNvbXBhY3QgZm9ybSBhbmQgY29udGFpbiBubyBsZWFkaW5nIHplcm8gYnl0ZXNcbiAqIEBwYXJhbSB2YWx1ZXMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgc3RyaW5nIGtleXMgYW5kIEJ1ZmZlciB2YWx1ZXNcbiAqIEB0aHJvd3MgaWYgYW55IHByb3ZpZGVkIHZhbHVlIGlzIGZvdW5kIHRvIGhhdmUgbGVhZGluZyB6ZXJvIGJ5dGVzXG4gKi9cbmNvbnN0IHZhbGlkYXRlTm9MZWFkaW5nWmVyb2VzID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlcykpIHtcbiAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCAmJiB2Lmxlbmd0aCA+IDAgJiYgdlswXSA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2t9IGNhbm5vdCBoYXZlIGxlYWRpbmcgemVyb2VzLCByZWNlaXZlZDogJHt2LnRvU3RyaW5nKCdoZXgnKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnRzLnZhbGlkYXRlTm9MZWFkaW5nWmVyb2VzID0gdmFsaWRhdGVOb0xlYWRpbmdaZXJvZXM7XG5mdW5jdGlvbiBhcnJUb0J1ZkFycihhcnIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyci5tYXAoKGEpID0+IGFyclRvQnVmQXJyKGEpKTtcbn1cbmV4cG9ydHMuYXJyVG9CdWZBcnIgPSBhcnJUb0J1ZkFycjtcbmZ1bmN0aW9uIGJ1ZkFyclRvQXJyKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oYXJyID8/IFtdKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyci5tYXAoKGEpID0+IGJ1ZkFyclRvQXJyKGEpKTtcbn1cbmV4cG9ydHMuYnVmQXJyVG9BcnIgPSBidWZBcnJUb0Fycjtcbi8qKlxuICogQ29udmVydHMgYSB7QGxpbmsgYmlnaW50fSB0byBhIGAweGAgcHJlZml4ZWQgaGV4IHN0cmluZ1xuICovXG5jb25zdCBiaWdJbnRUb0hleCA9IChudW0pID0+IHtcbiAgICByZXR1cm4gJzB4JyArIG51bS50b1N0cmluZygxNik7XG59O1xuZXhwb3J0cy5iaWdJbnRUb0hleCA9IGJpZ0ludFRvSGV4O1xuLyoqXG4gKiBDb252ZXJ0IHZhbHVlIGZyb20gYmlnaW50IHRvIGFuIHVucGFkZGVkIEJ1ZmZlclxuICogKHVzZWZ1bCBmb3IgUkxQIHRyYW5zcG9ydClcbiAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBjb252ZXJ0XG4gKi9cbmZ1bmN0aW9uIGJpZ0ludFRvVW5wYWRkZWRCdWZmZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsIGV4cG9ydHMudW5wYWRCdWZmZXIpKGJpZ0ludFRvQnVmZmVyKHZhbHVlKSk7XG59XG5leHBvcnRzLmJpZ0ludFRvVW5wYWRkZWRCdWZmZXIgPSBiaWdJbnRUb1VucGFkZGVkQnVmZmVyO1xuZnVuY3Rpb24gaW50VG9VbnBhZGRlZEJ1ZmZlcih2YWx1ZSkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy51bnBhZEJ1ZmZlcikoKDAsIGV4cG9ydHMuaW50VG9CdWZmZXIpKHZhbHVlKSk7XG59XG5leHBvcnRzLmludFRvVW5wYWRkZWRCdWZmZXIgPSBpbnRUb1VucGFkZGVkQnVmZmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/bytes.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/constants.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\nconst secp256k1_1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"./node_modules/ethereum-cryptography/secp256k1.js\");\n/**\n * 2^64-1\n */\nexports.MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexports.MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexports.MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nexports.SECP256K1_ORDER = secp256k1_1.secp256k1.CURVE.n;\nexports.SECP256K1_ORDER_DIV_2 = secp256k1_1.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nexports.TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n/**\n *  RLP encoded empty string\n */\nexports.RLP_EMPTY_STRING = buffer_1.Buffer.from([0x80]);\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQ0FBbUMsR0FBRyx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyx1QkFBdUIsR0FBRywyQkFBMkIsR0FBRyw2QkFBNkIsR0FBRyxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyxrQkFBa0IsR0FBRyw2QkFBNkIsR0FBRyx1QkFBdUIsR0FBRywwQkFBMEIsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0I7QUFDelgsaUJBQWlCLG1CQUFPLENBQUMsOENBQVE7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWlDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQix1QkFBdUI7QUFDdkIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvY29uc3RhbnRzLmpzPzdiZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1BWF9XSVRIRFJBV0FMU19QRVJfUEFZTE9BRCA9IGV4cG9ydHMuUkxQX0VNUFRZX1NUUklORyA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gZXhwb3J0cy5UV09fUE9XMjU2ID0gZXhwb3J0cy5TRUNQMjU2SzFfT1JERVJfRElWXzIgPSBleHBvcnRzLlNFQ1AyNTZLMV9PUkRFUiA9IGV4cG9ydHMuTUFYX0lOVEVHRVJfQklHSU5UID0gZXhwb3J0cy5NQVhfSU5URUdFUiA9IGV4cG9ydHMuTUFYX1VJTlQ2NCA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IHNlY3AyNTZrMV8xID0gcmVxdWlyZShcImV0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azFcIik7XG4vKipcbiAqIDJeNjQtMVxuICovXG5leHBvcnRzLk1BWF9VSU5UNjQgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGUgZXZtIGNhbiBoYW5kbGUgKDJeMjU2LTEpXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicpO1xuLyoqXG4gKiBUaGUgbWF4IGludGVnZXIgdGhhdCB0aGUgZXZtIGNhbiBoYW5kbGUgKDJeMjU2LTEpIGFzIGEgYmlnaW50XG4gKiAyXjI1Ni0xIGVxdWFscyB0byAzNDAyODIzNjY5MjA5Mzg0NjM0NjMzNzQ2MDc0MzE3NjgyMTE0NTVcbiAqIFdlIHVzZSBsaXRlcmFsIHZhbHVlIGluc3RlYWQgb2YgY2FsY3VsYXRlZCB2YWx1ZSBmb3IgY29tcGF0aWJpbGl0eSBpc3N1ZS5cbiAqL1xuZXhwb3J0cy5NQVhfSU5URUdFUl9CSUdJTlQgPSBCaWdJbnQoJzExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMzEyOTYzOTkzNScpO1xuZXhwb3J0cy5TRUNQMjU2SzFfT1JERVIgPSBzZWNwMjU2azFfMS5zZWNwMjU2azEuQ1VSVkUubjtcbmV4cG9ydHMuU0VDUDI1NksxX09SREVSX0RJVl8yID0gc2VjcDI1NmsxXzEuc2VjcDI1NmsxLkNVUlZFLm4gLyBCaWdJbnQoMik7XG4vKipcbiAqIDJeMjU2XG4gKi9cbmV4cG9ydHMuVFdPX1BPVzI1NiA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MgPSAnYzVkMjQ2MDE4NmY3MjMzYzkyN2U3ZGIyZGNjNzAzYzBlNTAwYjY1M2NhODIyNzNiN2JmYWQ4MDQ1ZDg1YTQ3MCc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X05VTEwgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9OVUxMX1MsICdoZXgnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSAnMWRjYzRkZThkZWM3NWQ3YWFiODViNTY3YjZjY2Q0MWFkMzEyNDUxYjk0OGE3NDEzZjBhMTQyZmQ0MGQ0OTM0Nyc7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TLCAnaGV4Jyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MgPSAnNTZlODFmMTcxYmNjNTVhNmZmODM0NWU2OTJjMGY4NmU1YjQ4ZTAxYjk5NmNhZGMwMDE2MjJmYjVlMzYzYjQyMSc7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiB0aGUgUkxQIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX1MsICdoZXgnKTtcbi8qKlxuICogIFJMUCBlbmNvZGVkIGVtcHR5IHN0cmluZ1xuICovXG5leHBvcnRzLlJMUF9FTVBUWV9TVFJJTkcgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShbMHg4MF0pO1xuZXhwb3J0cy5NQVhfV0lUSERSQVdBTFNfUEVSX1BBWUxPQUQgPSAxNjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/constants.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/encoding.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/encoding.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compactBytesToNibbles = exports.bytesToNibbles = exports.nibblesToCompactBytes = exports.nibblesToBytes = exports.hasTerminator = void 0;\n// Reference: https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/\n/**\n *\n * @param s byte sequence\n * @returns boolean indicating if input hex nibble sequence has terminator indicating leaf-node\n *          terminator is represented with 16 because a nibble ranges from 0 - 15(f)\n */\nconst hasTerminator = (nibbles) => {\n    return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;\n};\nexports.hasTerminator = hasTerminator;\nconst nibblesToBytes = (nibbles, bytes) => {\n    for (let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2) {\n        bytes[bi] = (nibbles[ni] << 4) | nibbles[ni + 1];\n    }\n};\nexports.nibblesToBytes = nibblesToBytes;\nconst nibblesToCompactBytes = (nibbles) => {\n    let terminator = 0;\n    if ((0, exports.hasTerminator)(nibbles)) {\n        terminator = 1;\n        // Remove the terminator from the sequence\n        nibbles = nibbles.subarray(0, nibbles.length - 1);\n    }\n    const buf = new Uint8Array(nibbles.length / 2 + 1);\n    // Shift the terminator info into the first nibble of buf[0]\n    buf[0] = terminator << 5;\n    // If odd length, then add that flag into the first nibble and put the odd nibble to\n    // second part of buf[0] which otherwise will be left padded with a 0\n    if ((nibbles.length & 1) === 1) {\n        buf[0] |= 1 << 4;\n        buf[0] |= nibbles[0];\n        nibbles = nibbles.subarray(1);\n    }\n    // create bytes out of the rest even nibbles\n    (0, exports.nibblesToBytes)(nibbles, buf.subarray(1));\n    return buf;\n};\nexports.nibblesToCompactBytes = nibblesToCompactBytes;\nconst bytesToNibbles = (str) => {\n    const l = str.length * 2 + 1;\n    const nibbles = new Uint8Array(l);\n    for (let i = 0; i < str.length; i++) {\n        const b = str[i];\n        nibbles[i * 2] = b / 16;\n        nibbles[i * 2 + 1] = b % 16;\n    }\n    // This will get removed from calling function if the first nibble\n    // indicates that terminator is not present\n    nibbles[l - 1] = 16;\n    return nibbles;\n};\nexports.bytesToNibbles = bytesToNibbles;\nconst compactBytesToNibbles = (compact) => {\n    if (compact.length === 0) {\n        return compact;\n    }\n    let base = (0, exports.bytesToNibbles)(compact);\n    // delete terminator flag if terminator flag was not in first nibble\n    if (base[0] < 2) {\n        base = base.subarray(0, base.length - 1);\n    }\n    // chop the terminator nibble and the even padding (if there is one)\n    // i.e.  chop 2 left nibbles when even else 1 when odd\n    const chop = 2 - (base[0] & 1);\n    return base.subarray(chop);\n};\nexports.compactBytesToNibbles = compactBytesToNibbles;\n/**\n * A test helper to generates compact path for a subset of key bytes\n *\n * TODO: Commenting the code for now as this seems to be helper function\n * (from geth codebase )\n *\n */\n//\n//\n// export const getPathTo = (tillBytes: number, key: Buffer) => {\n//   const hexNibbles = bytesToNibbles(key).subarray(0, tillBytes)\n//   // Remove the terminator if its there, although it would be there only if tillBytes >= key.length\n//   // This seems to be a test helper to generate paths so correctness of this isn't necessary\n//   hexNibbles[hexNibbles.length - 1] = 0\n//   const compactBytes = nibblesToCompactBytes(hexNibbles)\n//   return [Buffer.from(compactBytes)]\n// }\n//# sourceMappingURL=encoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VuY29kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLHNCQUFzQixHQUFHLDZCQUE2QixHQUFHLHNCQUFzQixHQUFHLHFCQUFxQjtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDZCQUE2QixxQkFBcUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VuY29kaW5nLmpzPzdhZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBhY3RCeXRlc1RvTmliYmxlcyA9IGV4cG9ydHMuYnl0ZXNUb05pYmJsZXMgPSBleHBvcnRzLm5pYmJsZXNUb0NvbXBhY3RCeXRlcyA9IGV4cG9ydHMubmliYmxlc1RvQnl0ZXMgPSBleHBvcnRzLmhhc1Rlcm1pbmF0b3IgPSB2b2lkIDA7XG4vLyBSZWZlcmVuY2U6IGh0dHBzOi8vZXRoZXJldW0ub3JnL2VuL2RldmVsb3BlcnMvZG9jcy9kYXRhLXN0cnVjdHVyZXMtYW5kLWVuY29kaW5nL3BhdHJpY2lhLW1lcmtsZS10cmllL1xuLyoqXG4gKlxuICogQHBhcmFtIHMgYnl0ZSBzZXF1ZW5jZVxuICogQHJldHVybnMgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGlucHV0IGhleCBuaWJibGUgc2VxdWVuY2UgaGFzIHRlcm1pbmF0b3IgaW5kaWNhdGluZyBsZWFmLW5vZGVcbiAqICAgICAgICAgIHRlcm1pbmF0b3IgaXMgcmVwcmVzZW50ZWQgd2l0aCAxNiBiZWNhdXNlIGEgbmliYmxlIHJhbmdlcyBmcm9tIDAgLSAxNShmKVxuICovXG5jb25zdCBoYXNUZXJtaW5hdG9yID0gKG5pYmJsZXMpID0+IHtcbiAgICByZXR1cm4gbmliYmxlcy5sZW5ndGggPiAwICYmIG5pYmJsZXNbbmliYmxlcy5sZW5ndGggLSAxXSA9PT0gMTY7XG59O1xuZXhwb3J0cy5oYXNUZXJtaW5hdG9yID0gaGFzVGVybWluYXRvcjtcbmNvbnN0IG5pYmJsZXNUb0J5dGVzID0gKG5pYmJsZXMsIGJ5dGVzKSA9PiB7XG4gICAgZm9yIChsZXQgYmkgPSAwLCBuaSA9IDA7IG5pIDwgbmliYmxlcy5sZW5ndGg7IGJpICs9IDEsIG5pICs9IDIpIHtcbiAgICAgICAgYnl0ZXNbYmldID0gKG5pYmJsZXNbbmldIDw8IDQpIHwgbmliYmxlc1tuaSArIDFdO1xuICAgIH1cbn07XG5leHBvcnRzLm5pYmJsZXNUb0J5dGVzID0gbmliYmxlc1RvQnl0ZXM7XG5jb25zdCBuaWJibGVzVG9Db21wYWN0Qnl0ZXMgPSAobmliYmxlcykgPT4ge1xuICAgIGxldCB0ZXJtaW5hdG9yID0gMDtcbiAgICBpZiAoKDAsIGV4cG9ydHMuaGFzVGVybWluYXRvcikobmliYmxlcykpIHtcbiAgICAgICAgdGVybWluYXRvciA9IDE7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgdGVybWluYXRvciBmcm9tIHRoZSBzZXF1ZW5jZVxuICAgICAgICBuaWJibGVzID0gbmliYmxlcy5zdWJhcnJheSgwLCBuaWJibGVzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShuaWJibGVzLmxlbmd0aCAvIDIgKyAxKTtcbiAgICAvLyBTaGlmdCB0aGUgdGVybWluYXRvciBpbmZvIGludG8gdGhlIGZpcnN0IG5pYmJsZSBvZiBidWZbMF1cbiAgICBidWZbMF0gPSB0ZXJtaW5hdG9yIDw8IDU7XG4gICAgLy8gSWYgb2RkIGxlbmd0aCwgdGhlbiBhZGQgdGhhdCBmbGFnIGludG8gdGhlIGZpcnN0IG5pYmJsZSBhbmQgcHV0IHRoZSBvZGQgbmliYmxlIHRvXG4gICAgLy8gc2Vjb25kIHBhcnQgb2YgYnVmWzBdIHdoaWNoIG90aGVyd2lzZSB3aWxsIGJlIGxlZnQgcGFkZGVkIHdpdGggYSAwXG4gICAgaWYgKChuaWJibGVzLmxlbmd0aCAmIDEpID09PSAxKSB7XG4gICAgICAgIGJ1ZlswXSB8PSAxIDw8IDQ7XG4gICAgICAgIGJ1ZlswXSB8PSBuaWJibGVzWzBdO1xuICAgICAgICBuaWJibGVzID0gbmliYmxlcy5zdWJhcnJheSgxKTtcbiAgICB9XG4gICAgLy8gY3JlYXRlIGJ5dGVzIG91dCBvZiB0aGUgcmVzdCBldmVuIG5pYmJsZXNcbiAgICAoMCwgZXhwb3J0cy5uaWJibGVzVG9CeXRlcykobmliYmxlcywgYnVmLnN1YmFycmF5KDEpKTtcbiAgICByZXR1cm4gYnVmO1xufTtcbmV4cG9ydHMubmliYmxlc1RvQ29tcGFjdEJ5dGVzID0gbmliYmxlc1RvQ29tcGFjdEJ5dGVzO1xuY29uc3QgYnl0ZXNUb05pYmJsZXMgPSAoc3RyKSA9PiB7XG4gICAgY29uc3QgbCA9IHN0ci5sZW5ndGggKiAyICsgMTtcbiAgICBjb25zdCBuaWJibGVzID0gbmV3IFVpbnQ4QXJyYXkobCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYiA9IHN0cltpXTtcbiAgICAgICAgbmliYmxlc1tpICogMl0gPSBiIC8gMTY7XG4gICAgICAgIG5pYmJsZXNbaSAqIDIgKyAxXSA9IGIgJSAxNjtcbiAgICB9XG4gICAgLy8gVGhpcyB3aWxsIGdldCByZW1vdmVkIGZyb20gY2FsbGluZyBmdW5jdGlvbiBpZiB0aGUgZmlyc3QgbmliYmxlXG4gICAgLy8gaW5kaWNhdGVzIHRoYXQgdGVybWluYXRvciBpcyBub3QgcHJlc2VudFxuICAgIG5pYmJsZXNbbCAtIDFdID0gMTY7XG4gICAgcmV0dXJuIG5pYmJsZXM7XG59O1xuZXhwb3J0cy5ieXRlc1RvTmliYmxlcyA9IGJ5dGVzVG9OaWJibGVzO1xuY29uc3QgY29tcGFjdEJ5dGVzVG9OaWJibGVzID0gKGNvbXBhY3QpID0+IHtcbiAgICBpZiAoY29tcGFjdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhY3Q7XG4gICAgfVxuICAgIGxldCBiYXNlID0gKDAsIGV4cG9ydHMuYnl0ZXNUb05pYmJsZXMpKGNvbXBhY3QpO1xuICAgIC8vIGRlbGV0ZSB0ZXJtaW5hdG9yIGZsYWcgaWYgdGVybWluYXRvciBmbGFnIHdhcyBub3QgaW4gZmlyc3QgbmliYmxlXG4gICAgaWYgKGJhc2VbMF0gPCAyKSB7XG4gICAgICAgIGJhc2UgPSBiYXNlLnN1YmFycmF5KDAsIGJhc2UubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIC8vIGNob3AgdGhlIHRlcm1pbmF0b3IgbmliYmxlIGFuZCB0aGUgZXZlbiBwYWRkaW5nIChpZiB0aGVyZSBpcyBvbmUpXG4gICAgLy8gaS5lLiAgY2hvcCAyIGxlZnQgbmliYmxlcyB3aGVuIGV2ZW4gZWxzZSAxIHdoZW4gb2RkXG4gICAgY29uc3QgY2hvcCA9IDIgLSAoYmFzZVswXSAmIDEpO1xuICAgIHJldHVybiBiYXNlLnN1YmFycmF5KGNob3ApO1xufTtcbmV4cG9ydHMuY29tcGFjdEJ5dGVzVG9OaWJibGVzID0gY29tcGFjdEJ5dGVzVG9OaWJibGVzO1xuLyoqXG4gKiBBIHRlc3QgaGVscGVyIHRvIGdlbmVyYXRlcyBjb21wYWN0IHBhdGggZm9yIGEgc3Vic2V0IG9mIGtleSBieXRlc1xuICpcbiAqIFRPRE86IENvbW1lbnRpbmcgdGhlIGNvZGUgZm9yIG5vdyBhcyB0aGlzIHNlZW1zIHRvIGJlIGhlbHBlciBmdW5jdGlvblxuICogKGZyb20gZ2V0aCBjb2RlYmFzZSApXG4gKlxuICovXG4vL1xuLy9cbi8vIGV4cG9ydCBjb25zdCBnZXRQYXRoVG8gPSAodGlsbEJ5dGVzOiBudW1iZXIsIGtleTogQnVmZmVyKSA9PiB7XG4vLyAgIGNvbnN0IGhleE5pYmJsZXMgPSBieXRlc1RvTmliYmxlcyhrZXkpLnN1YmFycmF5KDAsIHRpbGxCeXRlcylcbi8vICAgLy8gUmVtb3ZlIHRoZSB0ZXJtaW5hdG9yIGlmIGl0cyB0aGVyZSwgYWx0aG91Z2ggaXQgd291bGQgYmUgdGhlcmUgb25seSBpZiB0aWxsQnl0ZXMgPj0ga2V5Lmxlbmd0aFxuLy8gICAvLyBUaGlzIHNlZW1zIHRvIGJlIGEgdGVzdCBoZWxwZXIgdG8gZ2VuZXJhdGUgcGF0aHMgc28gY29ycmVjdG5lc3Mgb2YgdGhpcyBpc24ndCBuZWNlc3Nhcnlcbi8vICAgaGV4TmliYmxlc1toZXhOaWJibGVzLmxlbmd0aCAtIDFdID0gMFxuLy8gICBjb25zdCBjb21wYWN0Qnl0ZXMgPSBuaWJibGVzVG9Db21wYWN0Qnl0ZXMoaGV4TmliYmxlcylcbi8vICAgcmV0dXJuIFtCdWZmZXIuZnJvbShjb21wYWN0Qnl0ZXMpXVxuLy8gfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/encoding.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/helpers.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/helpers.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = __webpack_require__(/*! ./internal */ \"./node_modules/@ethereumjs/util/dist/internal.js\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0, internal_1.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        const msg = `This method only supports Buffer but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString;\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHFCQUFxQixHQUFHLHNCQUFzQixHQUFHLHlCQUF5QjtBQUNuRyxtQkFBbUIsbUJBQU8sQ0FBQyxvRUFBWTtBQUN2QztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixNQUFNO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxTQUFTLE1BQU07QUFDZix1RUFBdUUsTUFBTTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsTUFBTTtBQUNwRjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsTUFBTTtBQUM5RTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9oZWxwZXJzLmpzPzkxZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2VydElzU3RyaW5nID0gZXhwb3J0cy5hc3NlcnRJc0FycmF5ID0gZXhwb3J0cy5hc3NlcnRJc0J1ZmZlciA9IGV4cG9ydHMuYXNzZXJ0SXNIZXhTdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG4vKipcbiAqIFRocm93cyBpZiBhIHN0cmluZyBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgc3RyaW5nIHRvIGNoZWNrIGhleCBwcmVmaXggb2ZcbiAqL1xuY29uc3QgYXNzZXJ0SXNIZXhTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoISgwLCBpbnRlcm5hbF8xLmlzSGV4U3RyaW5nKShpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnRJc0hleFN0cmluZyA9IGFzc2VydElzSGV4U3RyaW5nO1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgYnVmZmVyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuY29uc3QgYXNzZXJ0SXNCdWZmZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgQnVmZmVyIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0SXNCdWZmZXIgPSBhc3NlcnRJc0J1ZmZlcjtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhbiBhcnJheVxuICogQHBhcmFtIHtudW1iZXJbXX0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuY29uc3QgYXNzZXJ0SXNBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgbnVtYmVyIGFycmF5cyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG5leHBvcnRzLmFzc2VydElzQXJyYXkgPSBhc3NlcnRJc0FycmF5O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuY29uc3QgYXNzZXJ0SXNTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0SXNTdHJpbmcgPSBhc3NlcnRJc1N0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/helpers.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.isHexPrefixed = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;\n/**\n * Constants\n */\n__exportStar(__webpack_require__(/*! ./constants */ \"./node_modules/@ethereumjs/util/dist/constants.js\"), exports);\n/**\n * Units helpers\n */\n__exportStar(__webpack_require__(/*! ./units */ \"./node_modules/@ethereumjs/util/dist/units.js\"), exports);\n/**\n * Account class and helper functions\n */\n__exportStar(__webpack_require__(/*! ./account */ \"./node_modules/@ethereumjs/util/dist/account.js\"), exports);\n/**\n * Address type\n */\n__exportStar(__webpack_require__(/*! ./address */ \"./node_modules/@ethereumjs/util/dist/address.js\"), exports);\n/**\n * Withdrawal type\n */\n__exportStar(__webpack_require__(/*! ./withdrawal */ \"./node_modules/@ethereumjs/util/dist/withdrawal.js\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(__webpack_require__(/*! ./signature */ \"./node_modules/@ethereumjs/util/dist/signature.js\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\n__exportStar(__webpack_require__(/*! ./bytes */ \"./node_modules/@ethereumjs/util/dist/bytes.js\"), exports);\n/**\n * Helpful TypeScript types\n */\n__exportStar(__webpack_require__(/*! ./types */ \"./node_modules/@ethereumjs/util/dist/types.js\"), exports);\n/**\n * Helper function for working with compact encoding\n */\n__exportStar(__webpack_require__(/*! ./encoding */ \"./node_modules/@ethereumjs/util/dist/encoding.js\"), exports);\n/**\n * Export ethjs-util methods\n */\n__exportStar(__webpack_require__(/*! ./asyncEventEmitter */ \"./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js\"), exports);\nvar internal_1 = __webpack_require__(/*! ./internal */ \"./node_modules/@ethereumjs/util/dist/internal.js\");\nObject.defineProperty(exports, \"arrayContainsArray\", ({ enumerable: true, get: function () { return internal_1.arrayContainsArray; } }));\nObject.defineProperty(exports, \"fromAscii\", ({ enumerable: true, get: function () { return internal_1.fromAscii; } }));\nObject.defineProperty(exports, \"fromUtf8\", ({ enumerable: true, get: function () { return internal_1.fromUtf8; } }));\nObject.defineProperty(exports, \"getBinarySize\", ({ enumerable: true, get: function () { return internal_1.getBinarySize; } }));\nObject.defineProperty(exports, \"getKeys\", ({ enumerable: true, get: function () { return internal_1.getKeys; } }));\nObject.defineProperty(exports, \"isHexPrefixed\", ({ enumerable: true, get: function () { return internal_1.isHexPrefixed; } }));\nObject.defineProperty(exports, \"isHexString\", ({ enumerable: true, get: function () { return internal_1.isHexString; } }));\nObject.defineProperty(exports, \"padToEven\", ({ enumerable: true, get: function () { return internal_1.padToEven; } }));\nObject.defineProperty(exports, \"stripHexPrefix\", ({ enumerable: true, get: function () { return internal_1.stripHexPrefix; } }));\nObject.defineProperty(exports, \"toAscii\", ({ enumerable: true, get: function () { return internal_1.toAscii; } }));\n__exportStar(__webpack_require__(/*! ./lock */ \"./node_modules/@ethereumjs/util/dist/lock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./provider */ \"./node_modules/@ethereumjs/util/dist/provider.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUsR0FBRyxzQkFBc0IsR0FBRyxpQkFBaUIsR0FBRyxtQkFBbUIsR0FBRyxxQkFBcUIsR0FBRyxlQUFlLEdBQUcscUJBQXFCLEdBQUcsZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcsMEJBQTBCO0FBQ3hOO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxzRUFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsOERBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLGtFQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxrRUFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsd0VBQWM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHNFQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyw4REFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsOERBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLG9FQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxzRkFBcUI7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsb0VBQVk7QUFDckMsc0RBQXFELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3RJLDZDQUE0QyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUNwSCw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbEgsaURBQWdELEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQzVILDJDQUEwQyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNoSCxpREFBZ0QsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDNUgsK0NBQThDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3hILDZDQUE0QyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUNwSCxrREFBaUQsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDOUgsMkNBQTBDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ2hILGFBQWEsbUJBQU8sQ0FBQyw0REFBUTtBQUM3QixhQUFhLG1CQUFPLENBQUMsb0VBQVk7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9pbmRleC5qcz9lZTc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQXNjaWkgPSBleHBvcnRzLnN0cmlwSGV4UHJlZml4ID0gZXhwb3J0cy5wYWRUb0V2ZW4gPSBleHBvcnRzLmlzSGV4U3RyaW5nID0gZXhwb3J0cy5pc0hleFByZWZpeGVkID0gZXhwb3J0cy5nZXRLZXlzID0gZXhwb3J0cy5nZXRCaW5hcnlTaXplID0gZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMuZnJvbUFzY2lpID0gZXhwb3J0cy5hcnJheUNvbnRhaW5zQXJyYXkgPSB2b2lkIDA7XG4vKipcbiAqIENvbnN0YW50c1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogVW5pdHMgaGVscGVyc1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdW5pdHNcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBBY2NvdW50IGNsYXNzIGFuZCBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY2NvdW50XCIpLCBleHBvcnRzKTtcbi8qKlxuICogQWRkcmVzcyB0eXBlXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogV2l0aGRyYXdhbCB0eXBlXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93aXRoZHJhd2FsXCIpLCBleHBvcnRzKTtcbi8qKlxuICogRUNEU0Egc2lnbmF0dXJlXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zaWduYXR1cmVcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIG1hbmlwdWxhdGluZyBCdWZmZXJzLCBieXRlIGFycmF5cywgZXRjLlxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYnl0ZXNcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBIZWxwZnVsIFR5cGVTY3JpcHQgdHlwZXNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciB3b3JraW5nIHdpdGggY29tcGFjdCBlbmNvZGluZ1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RpbmdcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBFeHBvcnQgZXRoanMtdXRpbCBtZXRob2RzXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hc3luY0V2ZW50RW1pdHRlclwiKSwgZXhwb3J0cyk7XG52YXIgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXJyYXlDb250YWluc0FycmF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLmFycmF5Q29udGFpbnNBcnJheTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21Bc2NpaVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5mcm9tQXNjaWk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tVXRmOFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS5mcm9tVXRmODsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEJpbmFyeVNpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuZ2V0QmluYXJ5U2l6ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEtleXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuZ2V0S2V5czsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSGV4UHJlZml4ZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGludGVybmFsXzEuaXNIZXhQcmVmaXhlZDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSGV4U3RyaW5nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLmlzSGV4U3RyaW5nOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFkVG9FdmVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLnBhZFRvRXZlbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmlwSGV4UHJlZml4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnRlcm5hbF8xLnN0cmlwSGV4UHJlZml4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9Bc2NpaVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50ZXJuYWxfMS50b0FzY2lpOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xvY2tcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3Byb3ZpZGVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/internal.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/internal.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nfunction isHexPrefixed(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === '0' && str[1] === 'x';\n}\nexports.isHexPrefixed = isHexPrefixed;\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = (str) => {\n    if (typeof str !== 'string')\n        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n    let a = value;\n    if (typeof a !== 'string') {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2)\n        a = `0${a}`;\n    return a;\n}\nexports.padToEven = padToEven;\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nfunction getBinarySize(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return Buffer.byteLength(str, 'utf8');\n}\nexports.getBinarySize = getBinarySize;\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nfunction arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);\n}\nexports.arrayContainsArray = arrayContainsArray;\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nfunction toAscii(hex) {\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x')\n        i = 2;\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\nexports.toAscii = toAscii;\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n    const str = Buffer.from(stringValue, 'utf8');\n    return `0x${padToEven(str.toString('hex')).replace(/^0+|0+$/g, '')}`;\n}\nexports.fromUtf8 = fromUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nfunction fromAscii(stringValue) {\n    let hex = '';\n    for (let i = 0; i < stringValue.length; i++) {\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\nexports.fromAscii = fromAscii;\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== 'string') {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for (let i = 0; i < params.length; i++) {\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = '';\n        }\n        else if (typeof value !== 'string') {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\nexports.getKeys = getKeys;\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nfunction isHexString(value, length) {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n        return false;\n    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n        return false;\n    return true;\n}\nexports.isHexString = isHexString;\n//# sourceMappingURL=internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/internal.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/lock.js":
/*!****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/lock.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Lock = void 0;\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor() {\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\nexports.Lock = Lock;\n//# sourceMappingURL=lock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2xvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvbG9jay5qcz83YmJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb2NrID0gdm9pZCAwO1xuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pzb2VuZGVybWFubi9zZW1hcGhvcmUtYXN5bmMtYXdhaXQvYmxvYi9tYXN0ZXIvc3JjL1NlbWFwaG9yZS50c1xuY2xhc3MgTG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyA9IDE7XG4gICAgICAgIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdXNlZCB0byB3YWl0IGZvciBhIHBlcm1pdCB0byBiZWNvbWUgYXZhaWxhYmxlLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgYXdhaXRlZCBvbi5cbiAgICAgKiBAcmV0dXJucyAgQSBwcm9taXNlIHRoYXQgZ2V0cyByZXNvbHZlZCB3aGVuIGV4ZWN1dGlvbiBpcyBhbGxvd2VkIHRvIHByb2NlZWQuXG4gICAgICovXG4gICAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWl0cyA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwZXJtaXQgYXZhaWxhYmxlLCB3ZSByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgc2VtYXBob3JlIGdldHNcbiAgICAgICAgLy8gc2lnbmFsZWQgZW5vdWdoIHRpbWVzIHRoYXQgcGVybWl0cyBpcyBlcXVhbCB0byBvbmUuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZXIpID0+IHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUucHVzaChyZXNvbHZlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiBwZXJtaXRzIGJ5IG9uZS4gSWYgdGhlcmUgYXJlIG90aGVyIGZ1bmN0aW9ucyB3YWl0aW5nLCBvbmUgb2YgdGhlbSB3aWxsXG4gICAgICogY29udGludWUgdG8gZXhlY3V0ZSBpbiBhIGZ1dHVyZSBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3AuXG4gICAgICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgdGhpcy5wZXJtaXRzICs9IDE7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jay5wZXJtaXRzIHNob3VsZCBuZXZlciBiZSA+IDAgd2hlbiB0aGVyZSBpcyBzb21lb25lIHdhaXRpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZXJtaXRzID09PSAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgc29tZW9uZSBlbHNlIHdhaXRpbmcsIGltbWVkaWF0ZWx5IGNvbnN1bWUgdGhlIHBlcm1pdCB0aGF0IHdhcyByZWxlYXNlZFxuICAgICAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uIGFuZCBsZXQgdGhlIHdhaXRpbmcgZnVuY3Rpb24gcmVzdW1lLlxuICAgICAgICAgICAgdGhpcy5wZXJtaXRzIC09IDE7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzb2x2ZXIgPSB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAobmV4dFJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbmV4dFJlc29sdmVyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Mb2NrID0gTG9jaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2suanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/lock.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/provider.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/provider.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getProvider = exports.fetchFromProvider = void 0;\nconst micro_ftch_1 = __webpack_require__(/*! micro-ftch */ \"./node_modules/micro-ftch/index.js\");\nconst fetchFromProvider = async (url, params) => {\n    const res = await (0, micro_ftch_1.default)(url, {\n        headers: {\n            'content-type': 'application/json',\n        },\n        type: 'json',\n        data: {\n            method: params.method,\n            params: params.params,\n            jsonrpc: '2.0',\n            id: 1,\n        },\n    });\n    return res.result;\n};\nexports.fetchFromProvider = fetchFromProvider;\nconst getProvider = (provider) => {\n    if (typeof provider === 'string') {\n        return provider;\n    }\n    else if (provider?.connection?.url !== undefined) {\n        return provider.connection.url;\n    }\n    else {\n        throw new Error('Must provide valid provider URL or Web3Provider');\n    }\n};\nexports.getProvider = getProvider;\n//# sourceMappingURL=provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHlCQUF5QjtBQUMvQyxxQkFBcUIsbUJBQU8sQ0FBQyxzREFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3Byb3ZpZGVyLmpzP2UyNTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFByb3ZpZGVyID0gZXhwb3J0cy5mZXRjaEZyb21Qcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IG1pY3JvX2Z0Y2hfMSA9IHJlcXVpcmUoXCJtaWNyby1mdGNoXCIpO1xuY29uc3QgZmV0Y2hGcm9tUHJvdmlkZXIgPSBhc3luYyAodXJsLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCAoMCwgbWljcm9fZnRjaF8xLmRlZmF1bHQpKHVybCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiAnanNvbicsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG1ldGhvZDogcGFyYW1zLm1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLnBhcmFtcyxcbiAgICAgICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG59O1xuZXhwb3J0cy5mZXRjaEZyb21Qcm92aWRlciA9IGZldGNoRnJvbVByb3ZpZGVyO1xuY29uc3QgZ2V0UHJvdmlkZXIgPSAocHJvdmlkZXIpID0+IHtcbiAgICBpZiAodHlwZW9mIHByb3ZpZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb3ZpZGVyPy5jb25uZWN0aW9uPy51cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXIuY29ubmVjdGlvbi51cmw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSB2YWxpZCBwcm92aWRlciBVUkwgb3IgV2ViM1Byb3ZpZGVyJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZ2V0UHJvdmlkZXIgPSBnZXRQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/provider.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/signature.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/signature.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = __webpack_require__(/*! ethereum-cryptography/keccak */ \"./node_modules/ethereum-cryptography/keccak.js\");\nconst secp256k1_1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"./node_modules/ethereum-cryptography/secp256k1.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/@ethereumjs/util/dist/constants.js\");\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@ethereumjs/util/dist/helpers.js\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = Buffer.from(buf.slice(0, 32));\n    const s = Buffer.from(buf.slice(32, 64));\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return { r, s, v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    if (v === BigInt(0) || v === BigInt(1))\n        return v;\n    if (chainId === undefined) {\n        return v - BigInt(27);\n    }\n    return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return Buffer.from(senderPubKey.toRawBytes(false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    let ss = s;\n    if ((v > BigInt(28) && v % BigInt(2) === BigInt(1)) || v === BigInt(1) || v === BigInt(28)) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const buf = (0, bytes_1.toBuffer)(sig);\n    let r;\n    let s;\n    let v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n    }\n    else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + BigInt(27);\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n    const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n    if (rBigInt === BigInt(0) ||\n        rBigInt >= constants_1.SECP256K1_ORDER ||\n        sBigInt === BigInt(0) ||\n        sBigInt >= constants_1.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0, helpers_1.assertIsBuffer)(message);\n    const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8');\n    return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\nexports.hashPersonalMessage = hashPersonalMessage;\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/signature.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/types.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toType = exports.TypeOutput = void 0;\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst internal_1 = __webpack_require__(/*! ./internal */ \"./node_modules/@ethereumjs/util/dist/internal.js\");\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    const output = (0, bytes_1.toBuffer)(input);\n    switch (outputType) {\n        case TypeOutput.Buffer:\n            return output;\n        case TypeOutput.BigInt:\n            return (0, bytes_1.bufferToBigInt)(output);\n        case TypeOutput.Number: {\n            const bigInt = (0, bytes_1.bufferToBigInt)(output);\n            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n            }\n            return Number(bigInt);\n        }\n        case TypeOutput.PrefixedHexString:\n            return (0, bytes_1.bufferToHex)(output);\n        default:\n            throw new Error('unknown outputType');\n    }\n}\nexports.toType = toType;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxrQkFBa0I7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQVM7QUFDakMsbUJBQW1CLG1CQUFPLENBQUMsb0VBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxNQUFNO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC90eXBlcy5qcz82MTM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b1R5cGUgPSBleHBvcnRzLlR5cGVPdXRwdXQgPSB2b2lkIDA7XG5jb25zdCBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG5jb25zdCBpbnRlcm5hbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWxcIik7XG4vKipcbiAqIFR5cGUgb3V0cHV0IG9wdGlvbnNcbiAqL1xudmFyIFR5cGVPdXRwdXQ7XG4oZnVuY3Rpb24gKFR5cGVPdXRwdXQpIHtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJOdW1iZXJcIl0gPSAwXSA9IFwiTnVtYmVyXCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiQmlnSW50XCJdID0gMV0gPSBcIkJpZ0ludFwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIkJ1ZmZlclwiXSA9IDJdID0gXCJCdWZmZXJcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJQcmVmaXhlZEhleFN0cmluZ1wiXSA9IDNdID0gXCJQcmVmaXhlZEhleFN0cmluZ1wiO1xufSkoVHlwZU91dHB1dCA9IGV4cG9ydHMuVHlwZU91dHB1dCB8fCAoZXhwb3J0cy5UeXBlT3V0cHV0ID0ge30pKTtcbmZ1bmN0aW9uIHRvVHlwZShpbnB1dCwgb3V0cHV0VHlwZSkge1xuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlucHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgISgwLCBpbnRlcm5hbF8xLmlzSGV4U3RyaW5nKShpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIHN0cmluZyBtdXN0IGJlIHByb3ZpZGVkIHdpdGggYSAweC1wcmVmaXgsIGdpdmVuOiAke2lucHV0fWApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNTYWZlSW50ZWdlcihpbnB1dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIGlucHV0IHR5cGUpJyk7XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dCA9ICgwLCBieXRlc18xLnRvQnVmZmVyKShpbnB1dCk7XG4gICAgc3dpdGNoIChvdXRwdXRUeXBlKSB7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5CdWZmZXI6XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuQmlnSW50OlxuICAgICAgICAgICAgcmV0dXJuICgwLCBieXRlc18xLmJ1ZmZlclRvQmlnSW50KShvdXRwdXQpO1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuTnVtYmVyOiB7XG4gICAgICAgICAgICBjb25zdCBiaWdJbnQgPSAoMCwgYnl0ZXNfMS5idWZmZXJUb0JpZ0ludCkob3V0cHV0KTtcbiAgICAgICAgICAgIGlmIChiaWdJbnQgPiBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBNQVhfU0FGRV9JTlRFR0VSIChwbGVhc2UgdXNlIGFuIGFsdGVybmF0aXZlIG91dHB1dCB0eXBlKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihiaWdJbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5QcmVmaXhlZEhleFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiAoMCwgYnl0ZXNfMS5idWZmZXJUb0hleCkob3V0cHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBvdXRwdXRUeXBlJyk7XG4gICAgfVxufVxuZXhwb3J0cy50b1R5cGUgPSB0b1R5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/types.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/units.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/units.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GWEI_TO_WEI = void 0;\n/** Easy conversion from Gwei to wei */\nexports.GWEI_TO_WEI = BigInt(1000000000);\n//# sourceMappingURL=units.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3VuaXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3VuaXRzLmpzP2RiODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdXRUlfVE9fV0VJID0gdm9pZCAwO1xuLyoqIEVhc3kgY29udmVyc2lvbiBmcm9tIEd3ZWkgdG8gd2VpICovXG5leHBvcnRzLkdXRUlfVE9fV0VJID0gQmlnSW50KDEwMDAwMDAwMDApO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/units.js\n"));

/***/ }),

/***/ "./node_modules/@ethereumjs/util/dist/withdrawal.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/withdrawal.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Withdrawal = void 0;\nconst address_1 = __webpack_require__(/*! ./address */ \"./node_modules/@ethereumjs/util/dist/address.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@ethereumjs/util/dist/types.js\");\n/**\n * Representation of EIP-4895 withdrawal data\n */\nclass Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */\n    constructor(index, validatorIndex, address, \n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    amount) {\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;\n        const index = (0, types_1.toType)(indexData, types_1.TypeOutput.BigInt);\n        const validatorIndex = (0, types_1.toType)(validatorIndexData, types_1.TypeOutput.BigInt);\n        const address = new address_1.Address((0, types_1.toType)(addressData, types_1.TypeOutput.Buffer));\n        const amount = (0, types_1.toType)(amountData, types_1.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */\n    static toBufferArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBuffer = (0, types_1.toType)(index, types_1.TypeOutput.BigInt) === BigInt(0)\n            ? Buffer.alloc(0)\n            : (0, types_1.toType)(index, types_1.TypeOutput.Buffer);\n        const validatorIndexBuffer = (0, types_1.toType)(validatorIndex, types_1.TypeOutput.BigInt) === BigInt(0)\n            ? Buffer.alloc(0)\n            : (0, types_1.toType)(validatorIndex, types_1.TypeOutput.Buffer);\n        let addressBuffer;\n        if (address instanceof address_1.Address) {\n            addressBuffer = address.buf;\n        }\n        else {\n            addressBuffer = (0, types_1.toType)(address, types_1.TypeOutput.Buffer);\n        }\n        const amountBuffer = (0, types_1.toType)(amount, types_1.TypeOutput.BigInt) === BigInt(0)\n            ? Buffer.alloc(0)\n            : (0, types_1.toType)(amount, types_1.TypeOutput.Buffer);\n        return [indexBuffer, validatorIndexBuffer, addressBuffer, amountBuffer];\n    }\n    raw() {\n        return Withdrawal.toBufferArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.buf,\n            amount: this.amount,\n        };\n    }\n    toJSON() {\n        return {\n            index: (0, bytes_1.bigIntToHex)(this.index),\n            validatorIndex: (0, bytes_1.bigIntToHex)(this.validatorIndex),\n            address: '0x' + this.address.buf.toString('hex'),\n            amount: (0, bytes_1.bigIntToHex)(this.amount),\n        };\n    }\n}\nexports.Withdrawal = Withdrawal;\n//# sourceMappingURL=withdrawal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3dpdGhkcmF3YWwuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixrQkFBa0IsbUJBQU8sQ0FBQyxrRUFBVztBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBUztBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtHQUFrRztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHVCQUF1QjtBQUNuRztBQUNBO0FBQ0EsK0NBQStDLHdDQUF3QztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5Q0FBeUM7QUFDekQ7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3dpdGhkcmF3YWwuanM/YmYxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2l0aGRyYXdhbCA9IHZvaWQgMDtcbmNvbnN0IGFkZHJlc3NfMSA9IHJlcXVpcmUoXCIuL2FkZHJlc3NcIik7XG5jb25zdCBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIEVJUC00ODk1IHdpdGhkcmF3YWwgZGF0YVxuICovXG5jbGFzcyBXaXRoZHJhd2FsIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbnN0cnVjdG9yIGFzc2lnbnMgYW5kIHZhbGlkYXRlcyB0aGUgdmFsdWVzLlxuICAgICAqIFVzZSB0aGUgc3RhdGljIGZhY3RvcnkgbWV0aG9kcyB0byBhc3Npc3QgaW4gY3JlYXRpbmcgYSBXaXRoZHJhd2FsIG9iamVjdCBmcm9tIHZhcnlpbmcgZGF0YSB0eXBlcy5cbiAgICAgKiBJdHMgYW1vdW50IGlzIGluIEd3ZWkgdG8gbWF0Y2ggQ0wgcmVwcmVzZW50YXRpb24gYW5kIGZvciBldmVudHVhbCBzc3ogd2l0aGRyYXdhbHNSb290XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBcbiAgICAvKipcbiAgICAgKiB3aXRoZHJhd2FsIGFtb3VudCBpbiBHd2VpIHRvIG1hdGNoIHRoZSBDTCByZXBlc2VudGF0aW9uIGFuZCBldmVudHVhbGx5IHNzeiB3aXRoZHJhd2Fsc1Jvb3RcbiAgICAgKi9cbiAgICBhbW91bnQpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnZhbGlkYXRvckluZGV4ID0gdmFsaWRhdG9ySW5kZXg7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gYW1vdW50O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVdpdGhkcmF3YWxEYXRhKHdpdGhkcmF3YWxEYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgaW5kZXg6IGluZGV4RGF0YSwgdmFsaWRhdG9ySW5kZXg6IHZhbGlkYXRvckluZGV4RGF0YSwgYWRkcmVzczogYWRkcmVzc0RhdGEsIGFtb3VudDogYW1vdW50RGF0YSwgfSA9IHdpdGhkcmF3YWxEYXRhO1xuICAgICAgICBjb25zdCBpbmRleCA9ICgwLCB0eXBlc18xLnRvVHlwZSkoaW5kZXhEYXRhLCB0eXBlc18xLlR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9ySW5kZXggPSAoMCwgdHlwZXNfMS50b1R5cGUpKHZhbGlkYXRvckluZGV4RGF0YSwgdHlwZXNfMS5UeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBuZXcgYWRkcmVzc18xLkFkZHJlc3MoKDAsIHR5cGVzXzEudG9UeXBlKShhZGRyZXNzRGF0YSwgdHlwZXNfMS5UeXBlT3V0cHV0LkJ1ZmZlcikpO1xuICAgICAgICBjb25zdCBhbW91bnQgPSAoMCwgdHlwZXNfMS50b1R5cGUpKGFtb3VudERhdGEsIHR5cGVzXzEuVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgICAgICByZXR1cm4gbmV3IFdpdGhkcmF3YWwoaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBhbW91bnQpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVZhbHVlc0FycmF5KHdpdGhkcmF3YWxBcnJheSkge1xuICAgICAgICBpZiAod2l0aGRyYXdhbEFycmF5Lmxlbmd0aCAhPT0gNCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgd2l0aGRyYXdhbEFycmF5IGxlbmd0aCBleHBlY3RlZD00IGFjdHVhbD0ke3dpdGhkcmF3YWxBcnJheS5sZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2luZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgYW1vdW50XSA9IHdpdGhkcmF3YWxBcnJheTtcbiAgICAgICAgcmV0dXJuIFdpdGhkcmF3YWwuZnJvbVdpdGhkcmF3YWxEYXRhKHsgaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBhbW91bnQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSB3aXRoZHJhd2FsIHRvIGEgYnVmZmVyIGFycmF5XG4gICAgICogQHBhcmFtIHdpdGhkcmF3YWwgdGhlIHdpdGhkcmF3YWwgdG8gY29udmVydFxuICAgICAqIEByZXR1cm5zIGJ1ZmZlciBhcnJheSBvZiB0aGUgd2l0aGRyYXdhbFxuICAgICAqL1xuICAgIHN0YXRpYyB0b0J1ZmZlckFycmF5KHdpdGhkcmF3YWwpIHtcbiAgICAgICAgY29uc3QgeyBpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudCB9ID0gd2l0aGRyYXdhbDtcbiAgICAgICAgY29uc3QgaW5kZXhCdWZmZXIgPSAoMCwgdHlwZXNfMS50b1R5cGUpKGluZGV4LCB0eXBlc18xLlR5cGVPdXRwdXQuQmlnSW50KSA9PT0gQmlnSW50KDApXG4gICAgICAgICAgICA/IEJ1ZmZlci5hbGxvYygwKVxuICAgICAgICAgICAgOiAoMCwgdHlwZXNfMS50b1R5cGUpKGluZGV4LCB0eXBlc18xLlR5cGVPdXRwdXQuQnVmZmVyKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9ySW5kZXhCdWZmZXIgPSAoMCwgdHlwZXNfMS50b1R5cGUpKHZhbGlkYXRvckluZGV4LCB0eXBlc18xLlR5cGVPdXRwdXQuQmlnSW50KSA9PT0gQmlnSW50KDApXG4gICAgICAgICAgICA/IEJ1ZmZlci5hbGxvYygwKVxuICAgICAgICAgICAgOiAoMCwgdHlwZXNfMS50b1R5cGUpKHZhbGlkYXRvckluZGV4LCB0eXBlc18xLlR5cGVPdXRwdXQuQnVmZmVyKTtcbiAgICAgICAgbGV0IGFkZHJlc3NCdWZmZXI7XG4gICAgICAgIGlmIChhZGRyZXNzIGluc3RhbmNlb2YgYWRkcmVzc18xLkFkZHJlc3MpIHtcbiAgICAgICAgICAgIGFkZHJlc3NCdWZmZXIgPSBhZGRyZXNzLmJ1ZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFkZHJlc3NCdWZmZXIgPSAoMCwgdHlwZXNfMS50b1R5cGUpKGFkZHJlc3MsIHR5cGVzXzEuVHlwZU91dHB1dC5CdWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFtb3VudEJ1ZmZlciA9ICgwLCB0eXBlc18xLnRvVHlwZSkoYW1vdW50LCB0eXBlc18xLlR5cGVPdXRwdXQuQmlnSW50KSA9PT0gQmlnSW50KDApXG4gICAgICAgICAgICA/IEJ1ZmZlci5hbGxvYygwKVxuICAgICAgICAgICAgOiAoMCwgdHlwZXNfMS50b1R5cGUpKGFtb3VudCwgdHlwZXNfMS5UeXBlT3V0cHV0LkJ1ZmZlcik7XG4gICAgICAgIHJldHVybiBbaW5kZXhCdWZmZXIsIHZhbGlkYXRvckluZGV4QnVmZmVyLCBhZGRyZXNzQnVmZmVyLCBhbW91bnRCdWZmZXJdO1xuICAgIH1cbiAgICByYXcoKSB7XG4gICAgICAgIHJldHVybiBXaXRoZHJhd2FsLnRvQnVmZmVyQXJyYXkodGhpcyk7XG4gICAgfVxuICAgIHRvVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCxcbiAgICAgICAgICAgIHZhbGlkYXRvckluZGV4OiB0aGlzLnZhbGlkYXRvckluZGV4LFxuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5hZGRyZXNzLmJ1ZixcbiAgICAgICAgICAgIGFtb3VudDogdGhpcy5hbW91bnQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiAoMCwgYnl0ZXNfMS5iaWdJbnRUb0hleCkodGhpcy5pbmRleCksXG4gICAgICAgICAgICB2YWxpZGF0b3JJbmRleDogKDAsIGJ5dGVzXzEuYmlnSW50VG9IZXgpKHRoaXMudmFsaWRhdG9ySW5kZXgpLFxuICAgICAgICAgICAgYWRkcmVzczogJzB4JyArIHRoaXMuYWRkcmVzcy5idWYudG9TdHJpbmcoJ2hleCcpLFxuICAgICAgICAgICAgYW1vdW50OiAoMCwgYnl0ZXNfMS5iaWdJbnRUb0hleCkodGhpcy5hbW91bnQpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuV2l0aGRyYXdhbCA9IFdpdGhkcmF3YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoZHJhd2FsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ethereumjs/util/dist/withdrawal.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/abi.js":
/*!******************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/abi.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// ESLint gets confused by the nested list and tables in the docs, so we disable\n// the rule for this file.\n/* eslint-disable jsdoc/check-indentation, jsdoc/match-description */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeSingle = exports.decode = exports.encodePacked = exports.encodeSingle = exports.encode = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst packer_1 = __webpack_require__(/*! ./packer */ \"./node_modules/@metamask/abi-utils/dist/packer.js\");\n/**\n * Encode the data with the provided types. The types must be valid Solidity\n * ABI types.\n *\n * This will attempt to parse the values into the correct types. For example,\n * if you pass in a hex string for a `uint256`, it will be parsed into a\n * `bigint`. Regular strings are interpreted as UTF-8 strings. If you want to\n * pass in a hex string, you must pass it in as a `Uint8Array`, or use the\n * \"0x\"-prefix.\n *\n * It will also attempt to infer the types of the values. For example, if you\n * pass in a string for a `uint256`, it will result in a TypeScript compile-time\n * error. This does not work for all types, however. For example, if you use\n * nested arrays or tuples, the type will be inferred as `unknown`.\n *\n * The following types are supported:\n *\n * - `address`: A 20-byte Ethereum address.\n *   - As a 40-character-long hexadecimal string, starting with \"0x\".\n *   - As a 20-byte-long byte array, i.e., `Uint8Array`.\n * - `bool`: A boolean value.\n *   - As a boolean literal, i.e., `true` or `false`.\n *   - As the strings \"true\" or \"false\".\n * - `bytes(n)`: A dynamic byte array.\n *   - As a hexadecimal string, starting with \"0x\".\n *   - As a byte array, i.e., `Uint8Array`.\n *   - As a regular string, which will be interpreted as UTF-8.\n * - `function`: A Solidity function.\n *   - As a 48-character-long hexadecimal string, starting with \"0x\".\n *   - As a 24-byte-long byte array, i.e., `Uint8Array`.\n *   - As a {@link SolidityFunction} object.\n * - `int(n)`: A signed integer.\n *   - As a number.\n *   - As a `bigint`.\n *   - As a hexadecimal string, starting with \"0x\".\n * - `string`: A dynamic UTF-8 string.\n *   - As a regular string.\n *   - As a hexadecimal string, starting with \"0x\".\n *   - As a byte array, i.e., `Uint8Array`.\n * - `tuple`: A tuple of values.\n *   - As an array of values.\n * - `uint(n)`: An unsigned integer.\n *   - As a number.\n *   - As a `bigint`.\n *   - As a hexadecimal string, starting with \"0x\".\n *\n * @example\n * ```typescript\n * import { encode, decode } from '@metamask/abi-utils';\n *\n * const types = ['uint256', 'string'];\n * const encoded = encode(types, [42, 'Hello, world!']);\n * const decoded = decode(types, encoded);\n *\n * console.log(decoded); // [42n, 'Hello, world!']\n * ```\n * @see https://docs.soliditylang.org/en/v0.8.17/abi-spec.html\n * @param types - The types to encode.\n * @param values - The values to encode. This array must have the same length as\n * the types array.\n * @param packed - Whether to use the non-standard packed mode. Defaults to\n * `false`.\n * @param tight - Whether to pack the values tightly. When enabled, the values\n * will be packed without any padding. This matches the behaviour of\n * `ethereumjs-abi`. Defaults to `false`.\n * @returns The ABI encoded bytes.\n */\nconst encode = (types, values, packed, tight) => {\n    try {\n        return (0, packer_1.pack)({ types, values, packed, tight });\n    }\n    catch (error) {\n        if (error instanceof errors_1.ParserError) {\n            throw new errors_1.ParserError(`Unable to encode value: ${error.message}`, error);\n        }\n        throw new errors_1.ParserError(`An unexpected error occurred: ${(0, errors_1.getErrorMessage)(error)}`, error);\n    }\n};\nexports.encode = encode;\n/**\n * Encode the data with the provided type. The type must be a valid Solidity\n * ABI type.\n *\n * See {@link encode} for more information on how values are parsed.\n *\n * @example\n * ```typescript\n * import { encodeSingle, decodeSingle } from '@metamask/abi-utils';\n *\n * const encoded = encodeSingle('uint256', 42);\n * const decoded = decodeSingle('uint256', encoded);\n *\n * console.log(decoded); // 42n\n * ```\n * @see https://docs.soliditylang.org/en/v0.8.17/abi-spec.html#types\n * @param type - The type to encode.\n * @param value - The value to encode.\n * @returns The ABI encoded bytes.\n */\nconst encodeSingle = (type, value) => {\n    return (0, exports.encode)([type], [value]);\n};\nexports.encodeSingle = encodeSingle;\n/**\n * Encode the data with the provided types. The types must be valid Solidity\n * ABI types. This is similar to {@link encode}, but the values are encoded in\n * the non-standard packed mode. This differs from the standard encoding in the\n * following ways:\n *\n * - Most values are packed tightly, without alignment padding.\n *   - The exception is array values, which are padded to 32 bytes.\n * - Values are still padded to their full size, i.e., `uint16` values are still\n *  padded to 2 bytes, regardless of the length of the value.\n * - The encoding of dynamic types (`bytes`, `string`) is different. The length\n * of the dynamic type is not included in the encoding, and the dynamic type is\n * not padded to a multiple of 32 bytes.\n * - All values are encoded in-place, without any offsets.\n *\n * The encoding of this is ambiguous as soon as there is more than one dynamic\n * type. That means that these values cannot be decoded with {@link decode} or\n * Solidity's `abi.decode` function.\n *\n * See {@link encode} for more information on how values are parsed.\n *\n * @example\n * ```typescript\n * import { encodePacked } from '@metamask/abi-utils';\n *\n * const encoded = encodePacked(['uint8'], [42]);\n *\n * console.log(encoded); // `Uint8Array [ 42 ]`\n * ```\n * @see https://docs.soliditylang.org/en/v0.8.17/abi-spec.html#types\n * @see https://docs.soliditylang.org/en/v0.8.17/abi-spec.html#non-standard-packed-mode\n * @param types - The types to encode.\n * @param values - The values to encode.\n * @param tight - Whether to pack the values tightly. When enabled, `bytesN`\n * values in arrays will be packed without any padding. This matches the\n * behaviour of `ethereumjs-abi`. Defaults to `false`.\n * @returns The ABI encoded bytes.\n */\nconst encodePacked = (types, values, tight) => {\n    return (0, exports.encode)(types, values, true, tight);\n};\nexports.encodePacked = encodePacked;\n/**\n * Decode an ABI encoded buffer with the specified types. The types must be\n * valid Solidity ABI types.\n *\n * This will attempt to infer the output types from the input types. For\n * example, if you use `uint256` as an input type, the output type will be\n * `bigint`. This does not work for all types, however. For example, if you use\n * nested array types or tuple types, the output type will be `unknown`.\n *\n * The resulting types of the values will be as follows:\n *\n * | Contract ABI Type | Resulting JavaScript Type |\n * | ----------------- | ------------------------- |\n * | `address`         | `string`                  |\n * | `bool`            | `boolean`                 |\n * | `bytes(n)`        | `Uint8Array`              |\n * | `function`        | {@link SolidityFunction}  |\n * | `int(n)`          | `bigint`                  |\n * | `string`          | `string`                  |\n * | `tuple`           | `Array`                   |\n * | `array`           | `Array`                   |\n * | `uint(n)`         | `bigint`                  |\n *\n * @example\n * ```typescript\n * import { encode, decode } from '@metamask/abi-utils';\n *\n * const types = ['uint256', 'string'];\n * const encoded = encode(types, [42, 'Hello, world!']);\n * const decoded = decode(types, encoded);\n *\n * console.log(decoded); // [42n, 'Hello, world!']\n * ```\n * @see https://docs.soliditylang.org/en/v0.8.17/abi-spec.html#types\n * @param types - The types to decode the bytes with.\n * @param value - The bytes-like value to decode.\n * @returns The decoded values as array.\n */\nconst decode = (types, value) => {\n    const bytes = (0, utils_1.createBytes)(value);\n    try {\n        return (0, packer_1.unpack)(types, bytes);\n    }\n    catch (error) {\n        if (error instanceof errors_1.ParserError) {\n            throw new errors_1.ParserError(`Unable to decode value: ${error.message}`, error);\n        }\n        throw new errors_1.ParserError(`An unexpected error occurred: ${(0, errors_1.getErrorMessage)(error)}`, error);\n    }\n};\nexports.decode = decode;\n/**\n * Decode the data with the provided type. The type must be a valid Solidity\n * ABI type.\n *\n * See {@link decode} for more information on how values are parsed.\n *\n * @example\n * ```typescript\n * import { encodeSingle, decodeSingle } from '@metamask/abi-utils';\n *\n * const encoded = encodeSingle('uint256', 42);\n * const decoded = decodeSingle('uint256', encoded);\n *\n * console.log(decoded); // 42n\n * ```\n * @see https://docs.soliditylang.org/en/v0.8.17/abi-spec.html#types\n * @param type - The type to decode.\n * @param value - The bytes-like value to decode.\n * @returns The decoded value.\n */\nconst decodeSingle = (type, value) => {\n    const result = (0, exports.decode)([type], value);\n    (0, utils_1.assert)(result.length === 1, new errors_1.ParserError('Decoded value array has unexpected length.'));\n    return result[0];\n};\nexports.decodeSingle = decodeSingle;\n//# sourceMappingURL=abi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/abi.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/errors.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParserError = exports.getErrorStack = exports.getErrorMessage = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\n/**\n * Attempt to get an error message from a value.\n *\n * - If the value is an error, the error's message is returned.\n * - If the value is an object with a `message` property, the value of that\n * property is returned.\n * - If the value is a string, the value is returned.\n * - Otherwise, \"Unknown error.\" is returned.\n *\n * @param error - The value to get an error message from.\n * @returns The error message.\n * @internal\n */\nconst getErrorMessage = (error) => {\n    if (typeof error === 'string') {\n        return error;\n    }\n    if (error instanceof Error) {\n        return error.message;\n    }\n    if ((0, utils_1.isObject)(error) &&\n        (0, utils_1.hasProperty)(error, 'message') &&\n        typeof error.message === 'string') {\n        return error.message;\n    }\n    return 'Unknown error.';\n};\nexports.getErrorMessage = getErrorMessage;\n/**\n * Get the error stack from a value. If the value is an error, the error's stack\n * is returned. Otherwise, it returns `undefined`.\n *\n * @param error - The value to get an error stack from.\n * @returns The error stack, or `undefined` if the value is not an error.\n * @internal\n */\nconst getErrorStack = (error) => {\n    if (error instanceof Error) {\n        return error.stack;\n    }\n    return undefined;\n};\nexports.getErrorStack = getErrorStack;\n/**\n * An error that is thrown when the ABI encoder or decoder encounters an\n * issue.\n */\nclass ParserError extends Error {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'ParserError';\n        const originalStack = (0, exports.getErrorStack)(originalError);\n        if (originalStack) {\n            this.stack = originalStack;\n        }\n    }\n}\nexports.ParserError = ParserError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxxQkFBcUIsR0FBRyx1QkFBdUI7QUFDckUsZ0JBQWdCLG1CQUFPLENBQUMscUVBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9hYmktdXRpbHMvZGlzdC9lcnJvcnMuanM/ZDYyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGFyc2VyRXJyb3IgPSBleHBvcnRzLmdldEVycm9yU3RhY2sgPSBleHBvcnRzLmdldEVycm9yTWVzc2FnZSA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG1ldGFtYXNrL3V0aWxzXCIpO1xuLyoqXG4gKiBBdHRlbXB0IHRvIGdldCBhbiBlcnJvciBtZXNzYWdlIGZyb20gYSB2YWx1ZS5cbiAqXG4gKiAtIElmIHRoZSB2YWx1ZSBpcyBhbiBlcnJvciwgdGhlIGVycm9yJ3MgbWVzc2FnZSBpcyByZXR1cm5lZC5cbiAqIC0gSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGEgYG1lc3NhZ2VgIHByb3BlcnR5LCB0aGUgdmFsdWUgb2YgdGhhdFxuICogcHJvcGVydHkgaXMgcmV0dXJuZWQuXG4gKiAtIElmIHRoZSB2YWx1ZSBpcyBhIHN0cmluZywgdGhlIHZhbHVlIGlzIHJldHVybmVkLlxuICogLSBPdGhlcndpc2UsIFwiVW5rbm93biBlcnJvci5cIiBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0gZXJyb3IgLSBUaGUgdmFsdWUgdG8gZ2V0IGFuIGVycm9yIG1lc3NhZ2UgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IGdldEVycm9yTWVzc2FnZSA9IChlcnJvcikgPT4ge1xuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIGlmICgoMCwgdXRpbHNfMS5pc09iamVjdCkoZXJyb3IpICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc1Byb3BlcnR5KShlcnJvciwgJ21lc3NhZ2UnKSAmJlxuICAgICAgICB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiAnVW5rbm93biBlcnJvci4nO1xufTtcbmV4cG9ydHMuZ2V0RXJyb3JNZXNzYWdlID0gZ2V0RXJyb3JNZXNzYWdlO1xuLyoqXG4gKiBHZXQgdGhlIGVycm9yIHN0YWNrIGZyb20gYSB2YWx1ZS4gSWYgdGhlIHZhbHVlIGlzIGFuIGVycm9yLCB0aGUgZXJyb3IncyBzdGFja1xuICogaXMgcmV0dXJuZWQuIE90aGVyd2lzZSwgaXQgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAcGFyYW0gZXJyb3IgLSBUaGUgdmFsdWUgdG8gZ2V0IGFuIGVycm9yIHN0YWNrIGZyb20uXG4gKiBAcmV0dXJucyBUaGUgZXJyb3Igc3RhY2ssIG9yIGB1bmRlZmluZWRgIGlmIHRoZSB2YWx1ZSBpcyBub3QgYW4gZXJyb3IuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgZ2V0RXJyb3JTdGFjayA9IChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvci5zdGFjaztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5leHBvcnRzLmdldEVycm9yU3RhY2sgPSBnZXRFcnJvclN0YWNrO1xuLyoqXG4gKiBBbiBlcnJvciB0aGF0IGlzIHRocm93biB3aGVuIHRoZSBBQkkgZW5jb2RlciBvciBkZWNvZGVyIGVuY291bnRlcnMgYW5cbiAqIGlzc3VlLlxuICovXG5jbGFzcyBQYXJzZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcmlnaW5hbEVycm9yKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnUGFyc2VyRXJyb3InO1xuICAgICAgICBjb25zdCBvcmlnaW5hbFN0YWNrID0gKDAsIGV4cG9ydHMuZ2V0RXJyb3JTdGFjaykob3JpZ2luYWxFcnJvcik7XG4gICAgICAgIGlmIChvcmlnaW5hbFN0YWNrKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gb3JpZ2luYWxTdGFjaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUGFyc2VyRXJyb3IgPSBQYXJzZXJFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/errors.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./abi */ \"./node_modules/@metamask/abi-utils/dist/abi.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"./node_modules/@metamask/abi-utils/dist/types/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2REFBTztBQUM1QixhQUFhLG1CQUFPLENBQUMsbUVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLHVFQUFTO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svYWJpLXV0aWxzL2Rpc3QvaW5kZXguanM/N2RmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FiaVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/iterator.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.iterate = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\n/**\n * Iterate over a buffer with the specified size. This will yield a part of the\n * buffer starting at an increment of the specified size, until the end of the\n * buffer is reached.\n *\n * Calling the `skip` function will make it skip the specified number of bytes.\n *\n * @param buffer - The buffer to iterate over.\n * @param size - The number of bytes to iterate with.\n * @returns An iterator that yields the parts of the byte array.\n * @yields The parts of the byte array.\n */\nconst iterate = function* (buffer, size = 32) {\n    for (let pointer = 0; pointer < buffer.length; pointer += size) {\n        const skip = (length) => {\n            (0, utils_1.assert)(length >= 0, 'Cannot skip a negative number of bytes.');\n            (0, utils_1.assert)(length % size === 0, 'Length must be a multiple of the size.');\n            pointer += length;\n        };\n        const value = buffer.subarray(pointer);\n        yield { skip, value };\n    }\n    return {\n        skip: () => undefined,\n        value: new Uint8Array(),\n    };\n};\nexports.iterate = iterate;\n//# sourceMappingURL=iterator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L2l0ZXJhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseUJBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9hYmktdXRpbHMvZGlzdC9pdGVyYXRvci5qcz8xYmNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pdGVyYXRlID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbWV0YW1hc2svdXRpbHNcIik7XG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhIGJ1ZmZlciB3aXRoIHRoZSBzcGVjaWZpZWQgc2l6ZS4gVGhpcyB3aWxsIHlpZWxkIGEgcGFydCBvZiB0aGVcbiAqIGJ1ZmZlciBzdGFydGluZyBhdCBhbiBpbmNyZW1lbnQgb2YgdGhlIHNwZWNpZmllZCBzaXplLCB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICogYnVmZmVyIGlzIHJlYWNoZWQuXG4gKlxuICogQ2FsbGluZyB0aGUgYHNraXBgIGZ1bmN0aW9uIHdpbGwgbWFrZSBpdCBza2lwIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJ5dGVzLlxuICpcbiAqIEBwYXJhbSBidWZmZXIgLSBUaGUgYnVmZmVyIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSBzaXplIC0gVGhlIG51bWJlciBvZiBieXRlcyB0byBpdGVyYXRlIHdpdGguXG4gKiBAcmV0dXJucyBBbiBpdGVyYXRvciB0aGF0IHlpZWxkcyB0aGUgcGFydHMgb2YgdGhlIGJ5dGUgYXJyYXkuXG4gKiBAeWllbGRzIFRoZSBwYXJ0cyBvZiB0aGUgYnl0ZSBhcnJheS5cbiAqL1xuY29uc3QgaXRlcmF0ZSA9IGZ1bmN0aW9uKiAoYnVmZmVyLCBzaXplID0gMzIpIHtcbiAgICBmb3IgKGxldCBwb2ludGVyID0gMDsgcG9pbnRlciA8IGJ1ZmZlci5sZW5ndGg7IHBvaW50ZXIgKz0gc2l6ZSkge1xuICAgICAgICBjb25zdCBza2lwID0gKGxlbmd0aCkgPT4ge1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShsZW5ndGggPj0gMCwgJ0Nhbm5vdCBza2lwIGEgbmVnYXRpdmUgbnVtYmVyIG9mIGJ5dGVzLicpO1xuICAgICAgICAgICAgKDAsIHV0aWxzXzEuYXNzZXJ0KShsZW5ndGggJSBzaXplID09PSAwLCAnTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiB0aGUgc2l6ZS4nKTtcbiAgICAgICAgICAgIHBvaW50ZXIgKz0gbGVuZ3RoO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGJ1ZmZlci5zdWJhcnJheShwb2ludGVyKTtcbiAgICAgICAgeWllbGQgeyBza2lwLCB2YWx1ZSB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBza2lwOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlOiBuZXcgVWludDhBcnJheSgpLFxuICAgIH07XG59O1xuZXhwb3J0cy5pdGVyYXRlID0gaXRlcmF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/iterator.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/packer.js":
/*!*********************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/packer.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unpack = exports.pack = exports.isDynamicParser = exports.getParser = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst iterator_1 = __webpack_require__(/*! ./iterator */ \"./node_modules/@metamask/abi-utils/dist/iterator.js\");\nconst parsers_1 = __webpack_require__(/*! ./parsers */ \"./node_modules/@metamask/abi-utils/dist/parsers/index.js\");\nconst utils_2 = __webpack_require__(/*! ./utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\n/**\n * Get the parser for the specified type.\n *\n * @param type - The type to get a parser for.\n * @returns The parser.\n * @throws If there is no parser for the specified type.\n */\nconst getParser = (type) => {\n    const parsers = {\n        address: parsers_1.address,\n        array: parsers_1.array,\n        bool: parsers_1.bool,\n        bytes: parsers_1.bytes,\n        fixedBytes: parsers_1.fixedBytes,\n        function: parsers_1.fn,\n        number: parsers_1.number,\n        string: parsers_1.string,\n        tuple: parsers_1.tuple,\n    };\n    const staticParser = parsers[type];\n    if (staticParser) {\n        return staticParser;\n    }\n    const parser = Object.values(parsers).find((value) => value.isType(type));\n    if (parser) {\n        return parser;\n    }\n    throw new errors_1.ParserError(`The type \"${type}\" is not supported.`);\n};\nexports.getParser = getParser;\n/**\n * Check if the specified parser is dynamic, for the provided types. This is\n * primarily used for parsing tuples, where a tuple can be dynamic based on the\n * types. For other parsers, it will simply use the set `isDynamic` value.\n *\n * @param parser - The parser to check.\n * @param type - The type to check the parser with.\n * @returns Whether the parser is dynamic.\n */\nconst isDynamicParser = (parser, type) => {\n    const { isDynamic } = parser;\n    if (typeof isDynamic === 'function') {\n        return isDynamic(type);\n    }\n    return isDynamic;\n};\nexports.isDynamicParser = isDynamicParser;\n/**\n * Pack the provided values in a buffer, encoded with the specified types. If a\n * buffer is specified, the resulting value will be concatenated with the\n * buffer.\n *\n * @param args - The arguments object.\n * @param args.types - The types of the values to pack.\n * @param args.values - The values to pack.\n * @param args.packed - Whether to use the non-standard packed mode. Defaults to\n * `false`.\n * @param args.arrayPacked - Whether to use the non-standard packed mode for\n * arrays. Defaults to `false`.\n * @param args.byteArray - The byte array to encode the values into. Defaults to\n * an empty array.\n * @param args.tight - Whether to use tight packing mode. Only applicable when\n * `packed` is true. When true, the packed mode will not add any padding bytes.\n * This matches the packing behaviour of `ethereumjs-abi`, but is not standard.\n * @returns The resulting encoded buffer.\n */\nconst pack = ({ types, values, packed = false, tight = false, arrayPacked = false, byteArray = new Uint8Array(), }) => {\n    (0, utils_1.assert)(types.length === values.length, new errors_1.ParserError(`The number of types (${types.length}) does not match the number of values (${values.length}).`));\n    const { staticBuffer, dynamicBuffer, pointers } = types.reduce(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    ({ staticBuffer, dynamicBuffer, pointers }, type, index) => {\n        const parser = (0, exports.getParser)(type);\n        const value = values[index];\n        // If packed mode is enabled, we can skip the dynamic check, as all\n        // values are encoded in the static buffer.\n        if (packed || arrayPacked || !(0, exports.isDynamicParser)(parser, type)) {\n            return {\n                staticBuffer: parser.encode({\n                    buffer: staticBuffer,\n                    value,\n                    type,\n                    packed,\n                    tight,\n                }),\n                dynamicBuffer,\n                pointers,\n            };\n        }\n        const newStaticBuffer = (0, utils_1.concatBytes)([staticBuffer, new Uint8Array(32)]);\n        const newDynamicBuffer = parser.encode({\n            buffer: dynamicBuffer,\n            value,\n            type,\n            packed,\n            tight,\n        });\n        return {\n            staticBuffer: newStaticBuffer,\n            dynamicBuffer: newDynamicBuffer,\n            pointers: [\n                ...pointers,\n                { position: staticBuffer.length, pointer: dynamicBuffer.length },\n            ],\n        };\n    }, {\n        staticBuffer: new Uint8Array(),\n        dynamicBuffer: new Uint8Array(),\n        pointers: [],\n    });\n    // If packed mode is enabled, there shouldn't be any dynamic values.\n    (0, utils_1.assert)((!packed && !arrayPacked) || dynamicBuffer.length === 0, new errors_1.ParserError('Invalid pack state.'));\n    const dynamicStart = staticBuffer.length;\n    const updatedBuffer = pointers.reduce((target, { pointer, position }) => {\n        const offset = (0, utils_2.padStart)((0, utils_1.numberToBytes)(dynamicStart + pointer));\n        return (0, utils_2.set)(target, offset, position);\n    }, staticBuffer);\n    return (0, utils_1.concatBytes)([byteArray, updatedBuffer, dynamicBuffer]);\n};\nexports.pack = pack;\nconst unpack = (types, buffer) => {\n    const iterator = (0, iterator_1.iterate)(buffer);\n    return types.map((type) => {\n        const { value: { value, skip }, done, } = iterator.next();\n        (0, utils_1.assert)(!done, new errors_1.ParserError(`The encoded value is invalid for the provided types. Reached end of buffer while attempting to parse \"${type}\".`));\n        const parser = (0, exports.getParser)(type);\n        const isDynamic = (0, exports.isDynamicParser)(parser, type);\n        if (isDynamic) {\n            const pointer = (0, utils_1.bytesToNumber)(value.subarray(0, 32));\n            const target = buffer.subarray(pointer);\n            return parser.decode({ type, value: target, skip });\n        }\n        return parser.decode({ type, value, skip });\n    });\n};\nexports.unpack = unpack;\n//# sourceMappingURL=packer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/packer.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/address.js":
/*!******************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/address.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.address = exports.getAddress = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst utils_2 = __webpack_require__(/*! ../utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\n/**\n * Normalize an address value. This accepts the address as:\n *\n * - A hex string starting with the `0x` prefix.\n * - A byte array (`Uint8Array` or `Buffer`).\n *\n * It checks that the address is 20 bytes long.\n *\n * @param value - The value to normalize.\n * @returns The normalized address as `Uint8Array`.\n */\nconst getAddress = (value) => {\n    const bytesValue = (0, utils_1.createBytes)(value);\n    (0, utils_1.assert)(bytesValue.length <= 20, new errors_1.ParserError(`Invalid address value. Expected address to be 20 bytes long, but received ${bytesValue.length} bytes.`));\n    return (0, utils_2.padStart)(bytesValue, 20);\n};\nexports.getAddress = getAddress;\nexports.address = {\n    isDynamic: false,\n    /**\n     * Get if the given value is a valid address type. Since `address` is a simple\n     * type, this is just a check that the value is \"address\".\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a valid address type.\n     */\n    isType: (type) => type === 'address',\n    /**\n     * Get the byte length of an encoded address. Since `address` is a simple\n     * type, this always returns 32.\n     *\n     * Note that actual addresses are only 20 bytes long, but the encoding of\n     * the `address` type is always 32 bytes long.\n     *\n     * @returns The byte length of an encoded address.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode the given address to a 32-byte-long byte array.\n     *\n     * @param args - The encoding arguments.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The address to encode.\n     * @param args.packed - Whether to use packed encoding.\n     * @returns The bytes with the encoded address added to it.\n     */\n    encode({ buffer, value, packed }) {\n        const addressValue = (0, exports.getAddress)(value);\n        // If we're using packed encoding, we can just add the address bytes to the\n        // byte array, without adding any padding.\n        if (packed) {\n            return (0, utils_1.concatBytes)([buffer, addressValue]);\n        }\n        const addressBuffer = (0, utils_2.padStart)(addressValue);\n        return (0, utils_1.concatBytes)([buffer, addressBuffer]);\n    },\n    /**\n     * Decode the given byte array to an address.\n     *\n     * @param args - The decoding arguments.\n     * @param args.value - The byte array to decode.\n     * @returns The decoded address as a hexadecimal string, starting with the\n     * \"0x\"-prefix.\n     */\n    decode({ value }) {\n        return (0, utils_1.add0x)((0, utils_1.bytesToHex)(value.slice(12, 32)));\n    },\n};\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLEdBQUcsa0JBQWtCO0FBQ3BDLGdCQUFnQixtQkFBTyxDQUFDLHFFQUFpQjtBQUN6QyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBVztBQUNwQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVKQUF1SixtQkFBbUI7QUFDMUs7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvYWRkcmVzcy5qcz9kY2VhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hZGRyZXNzID0gZXhwb3J0cy5nZXRBZGRyZXNzID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbWV0YW1hc2svdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuLyoqXG4gKiBOb3JtYWxpemUgYW4gYWRkcmVzcyB2YWx1ZS4gVGhpcyBhY2NlcHRzIHRoZSBhZGRyZXNzIGFzOlxuICpcbiAqIC0gQSBoZXggc3RyaW5nIHN0YXJ0aW5nIHdpdGggdGhlIGAweGAgcHJlZml4LlxuICogLSBBIGJ5dGUgYXJyYXkgKGBVaW50OEFycmF5YCBvciBgQnVmZmVyYCkuXG4gKlxuICogSXQgY2hlY2tzIHRoYXQgdGhlIGFkZHJlc3MgaXMgMjAgYnl0ZXMgbG9uZy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMgVGhlIG5vcm1hbGl6ZWQgYWRkcmVzcyBhcyBgVWludDhBcnJheWAuXG4gKi9cbmNvbnN0IGdldEFkZHJlc3MgPSAodmFsdWUpID0+IHtcbiAgICBjb25zdCBieXRlc1ZhbHVlID0gKDAsIHV0aWxzXzEuY3JlYXRlQnl0ZXMpKHZhbHVlKTtcbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGJ5dGVzVmFsdWUubGVuZ3RoIDw9IDIwLCBuZXcgZXJyb3JzXzEuUGFyc2VyRXJyb3IoYEludmFsaWQgYWRkcmVzcyB2YWx1ZS4gRXhwZWN0ZWQgYWRkcmVzcyB0byBiZSAyMCBieXRlcyBsb25nLCBidXQgcmVjZWl2ZWQgJHtieXRlc1ZhbHVlLmxlbmd0aH0gYnl0ZXMuYCkpO1xuICAgIHJldHVybiAoMCwgdXRpbHNfMi5wYWRTdGFydCkoYnl0ZXNWYWx1ZSwgMjApO1xufTtcbmV4cG9ydHMuZ2V0QWRkcmVzcyA9IGdldEFkZHJlc3M7XG5leHBvcnRzLmFkZHJlc3MgPSB7XG4gICAgaXNEeW5hbWljOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBHZXQgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdmFsaWQgYWRkcmVzcyB0eXBlLiBTaW5jZSBgYWRkcmVzc2AgaXMgYSBzaW1wbGVcbiAgICAgKiB0eXBlLCB0aGlzIGlzIGp1c3QgYSBjaGVjayB0aGF0IHRoZSB2YWx1ZSBpcyBcImFkZHJlc3NcIi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgdHlwZSBpcyBhIHZhbGlkIGFkZHJlc3MgdHlwZS5cbiAgICAgKi9cbiAgICBpc1R5cGU6ICh0eXBlKSA9PiB0eXBlID09PSAnYWRkcmVzcycsXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBieXRlIGxlbmd0aCBvZiBhbiBlbmNvZGVkIGFkZHJlc3MuIFNpbmNlIGBhZGRyZXNzYCBpcyBhIHNpbXBsZVxuICAgICAqIHR5cGUsIHRoaXMgYWx3YXlzIHJldHVybnMgMzIuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgYWN0dWFsIGFkZHJlc3NlcyBhcmUgb25seSAyMCBieXRlcyBsb25nLCBidXQgdGhlIGVuY29kaW5nIG9mXG4gICAgICogdGhlIGBhZGRyZXNzYCB0eXBlIGlzIGFsd2F5cyAzMiBieXRlcyBsb25nLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGUgbGVuZ3RoIG9mIGFuIGVuY29kZWQgYWRkcmVzcy5cbiAgICAgKi9cbiAgICBnZXRCeXRlTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gMzI7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgdGhlIGdpdmVuIGFkZHJlc3MgdG8gYSAzMi1ieXRlLWxvbmcgYnl0ZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGVuY29kaW5nIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gYXJncy5idWZmZXIgLSBUaGUgYnl0ZSBhcnJheSB0byBhZGQgdG8uXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgYWRkcmVzcyB0byBlbmNvZGUuXG4gICAgICogQHBhcmFtIGFyZ3MucGFja2VkIC0gV2hldGhlciB0byB1c2UgcGFja2VkIGVuY29kaW5nLlxuICAgICAqIEByZXR1cm5zIFRoZSBieXRlcyB3aXRoIHRoZSBlbmNvZGVkIGFkZHJlc3MgYWRkZWQgdG8gaXQuXG4gICAgICovXG4gICAgZW5jb2RlKHsgYnVmZmVyLCB2YWx1ZSwgcGFja2VkIH0pIHtcbiAgICAgICAgY29uc3QgYWRkcmVzc1ZhbHVlID0gKDAsIGV4cG9ydHMuZ2V0QWRkcmVzcykodmFsdWUpO1xuICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyBwYWNrZWQgZW5jb2RpbmcsIHdlIGNhbiBqdXN0IGFkZCB0aGUgYWRkcmVzcyBieXRlcyB0byB0aGVcbiAgICAgICAgLy8gYnl0ZSBhcnJheSwgd2l0aG91dCBhZGRpbmcgYW55IHBhZGRpbmcuXG4gICAgICAgIGlmIChwYWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5jb25jYXRCeXRlcykoW2J1ZmZlciwgYWRkcmVzc1ZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkcmVzc0J1ZmZlciA9ICgwLCB1dGlsc18yLnBhZFN0YXJ0KShhZGRyZXNzVmFsdWUpO1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuY29uY2F0Qnl0ZXMpKFtidWZmZXIsIGFkZHJlc3NCdWZmZXJdKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERlY29kZSB0aGUgZ2l2ZW4gYnl0ZSBhcnJheSB0byBhbiBhZGRyZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgZGVjb2RpbmcgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSBhcmdzLnZhbHVlIC0gVGhlIGJ5dGUgYXJyYXkgdG8gZGVjb2RlLlxuICAgICAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIGFkZHJlc3MgYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmcsIHN0YXJ0aW5nIHdpdGggdGhlXG4gICAgICogXCIweFwiLXByZWZpeC5cbiAgICAgKi9cbiAgICBkZWNvZGUoeyB2YWx1ZSB9KSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5hZGQweCkoKDAsIHV0aWxzXzEuYnl0ZXNUb0hleCkodmFsdWUuc2xpY2UoMTIsIDMyKSkpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/address.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/array.js":
/*!****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/array.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.array = exports.getTupleType = exports.getArrayType = exports.isArrayType = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst packer_1 = __webpack_require__(/*! ../packer */ \"./node_modules/@metamask/abi-utils/dist/packer.js\");\nconst utils_2 = __webpack_require__(/*! ../utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\nconst fixed_bytes_1 = __webpack_require__(/*! ./fixed-bytes */ \"./node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js\");\nconst tuple_1 = __webpack_require__(/*! ./tuple */ \"./node_modules/@metamask/abi-utils/dist/parsers/tuple.js\");\nconst ARRAY_REGEX = /^(?<type>.*)\\[(?<length>\\d*?)\\]$/u;\nconst isArrayType = (type) => ARRAY_REGEX.test(type);\nexports.isArrayType = isArrayType;\n/**\n * Get the type of the array.\n *\n * @param type - The type to get the array type for.\n * @returns The array type.\n */\nconst getArrayType = (type) => {\n    const match = type.match(ARRAY_REGEX);\n    (0, utils_1.assert)(match?.groups?.type, new errors_1.ParserError(`Invalid array type. Expected an array type, but received \"${type}\".`));\n    return [\n        match.groups.type,\n        match.groups.length ? parseInt(match.groups.length, 10) : undefined,\n    ];\n};\nexports.getArrayType = getArrayType;\n/**\n * Get the type of the array as a tuple type. This is used for encoding fixed\n * length arrays, which are encoded as tuples.\n *\n * @param innerType - The type of the array.\n * @param length - The length of the array.\n * @returns The tuple type.\n */\nconst getTupleType = (innerType, length) => {\n    return `(${new Array(length).fill(innerType).join(',')})`;\n};\nexports.getTupleType = getTupleType;\nexports.array = {\n    /**\n     * Check if the array is dynamic. Arrays are dynamic if the array does not\n     * have a fixed length, or if the array type is dynamic.\n     *\n     * @param type - The type to check.\n     * @returns Whether the array is dynamic.\n     */\n    isDynamic(type) {\n        const [innerType, length] = (0, exports.getArrayType)(type);\n        return (\n        // `T[]` is dynamic for any `T`. `T[k]` is dynamic for any dynamic `T` and\n        // any `k >= 0`.\n        length === undefined || (0, packer_1.isDynamicParser)((0, packer_1.getParser)(innerType), innerType));\n    },\n    /**\n     * Check if a type is an array type.\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is an array type.\n     */\n    isType(type) {\n        return (0, exports.isArrayType)(type);\n    },\n    /**\n     * Get the byte length of an encoded array. If the array is dynamic, this\n     * returns 32, i.e., the length of the pointer to the array. If the array is\n     * static, this returns the byte length of the resulting tuple type.\n     *\n     * @param type - The type to get the byte length for.\n     * @returns The byte length of an encoded array.\n     */\n    getByteLength(type) {\n        (0, utils_1.assert)((0, exports.isArrayType)(type), new errors_1.ParserError(`Expected an array type, but received \"${type}\".`));\n        const [innerType, length] = (0, exports.getArrayType)(type);\n        if (!(0, packer_1.isDynamicParser)(this, type) && length !== undefined) {\n            return tuple_1.tuple.getByteLength((0, exports.getTupleType)(innerType, length));\n        }\n        return 32;\n    },\n    /**\n     * Encode the given array to a byte array. If the array is static, this uses\n     * the tuple encoder.\n     *\n     * @param args - The encoding arguments.\n     * @param args.type - The type of the array.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The array to encode.\n     * @param args.packed - Whether to use non-standard packed encoding.\n     * @param args.tight - Whether to use non-standard tight encoding.\n     * @returns The bytes with the encoded array added to it.\n     */\n    encode({ type, buffer, value, packed, tight }) {\n        const [arrayType, fixedLength] = (0, exports.getArrayType)(type);\n        // Packed encoding does not support nested arrays.\n        (0, utils_1.assert)(!packed || !(0, exports.isArrayType)(arrayType), new errors_1.ParserError(`Cannot pack nested arrays.`));\n        // Tightly pack `T[]` where `T` is a dynamic type. This is not supported in\n        // Solidity, but is commonly used in the Ethereum ecosystem.\n        if (packed && (0, packer_1.isDynamicParser)((0, packer_1.getParser)(arrayType), arrayType)) {\n            return (0, packer_1.pack)({\n                types: new Array(value.length).fill(arrayType),\n                values: value,\n                byteArray: buffer,\n                packed,\n                arrayPacked: true,\n                tight,\n            });\n        }\n        if (fixedLength) {\n            (0, utils_1.assert)(fixedLength === value.length, new errors_1.ParserError(`Array length does not match type length. Expected a length of ${fixedLength}, but received ${value.length}.`));\n            // `T[k]` for any `T` and `k` is encoded as `(T[0], ..., T[k - 1])`.\n            return tuple_1.tuple.encode({\n                type: (0, exports.getTupleType)(arrayType, fixedLength),\n                buffer,\n                value,\n                // In \"tight\" mode, we don't pad the values to 32 bytes if the value is\n                // of type `bytesN`. This is an edge case in `ethereumjs-abi` that we\n                // support to provide compatibility with it.\n                packed: fixed_bytes_1.fixedBytes.isType(arrayType) && tight,\n                tight,\n            });\n        }\n        // For packed encoding, we don't need to encode the length of the array,\n        // so we can just encode the values.\n        if (packed) {\n            return (0, packer_1.pack)({\n                types: new Array(value.length).fill(arrayType),\n                values: value,\n                byteArray: buffer,\n                // In \"tight\" mode, we don't pad the values to 32 bytes if the value is\n                // of type `bytesN`. This is an edge case in `ethereumjs-abi` that we\n                // support to provide compatibility with it.\n                packed: fixed_bytes_1.fixedBytes.isType(arrayType) && tight,\n                arrayPacked: true,\n                tight,\n            });\n        }\n        // `T[]` with `k` elements is encoded as `k (T[0], ..., T[k - 1])`. That\n        // means that we just need to encode the length of the array, and then the\n        // array itself. The pointer is encoded by the {@link pack} function.\n        const arrayLength = (0, utils_2.padStart)((0, utils_1.numberToBytes)(value.length));\n        return (0, packer_1.pack)({\n            types: new Array(value.length).fill(arrayType),\n            values: value,\n            byteArray: (0, utils_1.concatBytes)([buffer, arrayLength]),\n            packed,\n            tight,\n        });\n    },\n    /**\n     * Decode an array from the given byte array.\n     *\n     * @param args - The decoding arguments.\n     * @param args.type - The type of the array.\n     * @param args.value - The byte array to decode.\n     * @returns The decoded array.\n     */\n    decode({ type, value, ...rest }) {\n        const [arrayType, fixedLength] = (0, exports.getArrayType)(type);\n        if (fixedLength) {\n            const result = tuple_1.tuple.decode({\n                type: (0, exports.getTupleType)(arrayType, fixedLength),\n                value,\n                ...rest,\n            });\n            (0, utils_1.assert)(result.length === fixedLength, new errors_1.ParserError(`Array length does not match type length. Expected a length of ${fixedLength}, but received ${result.length}.`));\n            return result;\n        }\n        const arrayLength = (0, utils_1.bytesToNumber)(value.subarray(0, 32));\n        return (0, packer_1.unpack)(new Array(arrayLength).fill(arrayType), value.subarray(32));\n    },\n};\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/array.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/bool.js":
/*!***************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/bool.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bool = exports.getBooleanValue = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"./node_modules/@metamask/abi-utils/node_modules/superstruct/dist/index.mjs\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst number_1 = __webpack_require__(/*! ./number */ \"./node_modules/@metamask/abi-utils/dist/parsers/number.js\");\nconst BooleanCoercer = (0, superstruct_1.coerce)((0, superstruct_1.boolean)(), (0, superstruct_1.union)([(0, superstruct_1.literal)('true'), (0, superstruct_1.literal)('false')]), (value) => value === 'true');\n/**\n * Normalize a boolean value. This accepts the boolean as:\n *\n * - A boolean literal.\n * - The string \"true\" or \"false\".\n *\n * @param value - The value to get a boolean for.\n * @returns The parsed boolean value. This is `BigInt(1)` for truthy values, or\n * `BigInt(0)` for falsy values.\n */\nconst getBooleanValue = (value) => {\n    try {\n        const booleanValue = (0, superstruct_1.create)(value, BooleanCoercer);\n        if (booleanValue) {\n            return BigInt(1);\n        }\n        return BigInt(0);\n    }\n    catch {\n        throw new errors_1.ParserError(`Invalid boolean value. Expected a boolean literal, or the string \"true\" or \"false\", but received \"${value}\".`);\n    }\n};\nexports.getBooleanValue = getBooleanValue;\nexports.bool = {\n    isDynamic: false,\n    /**\n     * Get if the given value is a valid boolean type. Since `bool` is a simple\n     * type, this is just a check that the value is \"bool\".\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a valid boolean type.\n     */\n    isType: (type) => type === 'bool',\n    /**\n     * Get the byte length of an encoded boolean. Since `bool` is a simple\n     * type, this always returns 32.\n     *\n     * Note that actual booleans are only 1 byte long, but the encoding of\n     * the `bool` type is always 32 bytes long.\n     *\n     * @returns The byte length of an encoded boolean.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode the given boolean to a byte array.\n     *\n     * @param args - The encoding arguments.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The boolean to encode.\n     * @param args.packed - Whether the value is packed.\n     * @param args.tight - Whether to use non-standard tight encoding.\n     * @returns The bytes with the encoded boolean added to it.\n     */\n    encode({ buffer, value, packed, tight }) {\n        const booleanValue = (0, exports.getBooleanValue)(value);\n        // For packed encoding, we add a single byte (`0x00` or `0x01`) to the byte\n        // array.\n        if (packed) {\n            return (0, utils_1.concatBytes)([buffer, (0, utils_1.bigIntToBytes)(booleanValue)]);\n        }\n        // Booleans are encoded as 32-byte integers, so we use the number parser\n        // to encode the boolean value.\n        return number_1.number.encode({\n            type: 'uint256',\n            buffer,\n            value: booleanValue,\n            packed,\n            tight,\n        });\n    },\n    /**\n     * Decode the given byte array to a boolean.\n     *\n     * @param args - The decoding arguments.\n     * @returns The decoded boolean.\n     */\n    decode(args) {\n        // Booleans are encoded as 32-byte integers, so we use the number parser\n        // to decode the boolean value.\n        return number_1.number.decode({ ...args, type: 'uint256' }) === BigInt(1);\n    },\n};\n//# sourceMappingURL=bool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvYm9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLEdBQUcsdUJBQXVCO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLHFFQUFpQjtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQywrRkFBYTtBQUMzQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBVztBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQywyRUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNElBQTRJLE1BQU07QUFDbEo7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywwQkFBMEI7QUFDbEUsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9hYmktdXRpbHMvZGlzdC9wYXJzZXJzL2Jvb2wuanM/ZjVkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYm9vbCA9IGV4cG9ydHMuZ2V0Qm9vbGVhblZhbHVlID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbWV0YW1hc2svdXRpbHNcIik7XG5jb25zdCBzdXBlcnN0cnVjdF8xID0gcmVxdWlyZShcInN1cGVyc3RydWN0XCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgbnVtYmVyXzEgPSByZXF1aXJlKFwiLi9udW1iZXJcIik7XG5jb25zdCBCb29sZWFuQ29lcmNlciA9ICgwLCBzdXBlcnN0cnVjdF8xLmNvZXJjZSkoKDAsIHN1cGVyc3RydWN0XzEuYm9vbGVhbikoKSwgKDAsIHN1cGVyc3RydWN0XzEudW5pb24pKFsoMCwgc3VwZXJzdHJ1Y3RfMS5saXRlcmFsKSgndHJ1ZScpLCAoMCwgc3VwZXJzdHJ1Y3RfMS5saXRlcmFsKSgnZmFsc2UnKV0pLCAodmFsdWUpID0+IHZhbHVlID09PSAndHJ1ZScpO1xuLyoqXG4gKiBOb3JtYWxpemUgYSBib29sZWFuIHZhbHVlLiBUaGlzIGFjY2VwdHMgdGhlIGJvb2xlYW4gYXM6XG4gKlxuICogLSBBIGJvb2xlYW4gbGl0ZXJhbC5cbiAqIC0gVGhlIHN0cmluZyBcInRydWVcIiBvciBcImZhbHNlXCIuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGdldCBhIGJvb2xlYW4gZm9yLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBib29sZWFuIHZhbHVlLiBUaGlzIGlzIGBCaWdJbnQoMSlgIGZvciB0cnV0aHkgdmFsdWVzLCBvclxuICogYEJpZ0ludCgwKWAgZm9yIGZhbHN5IHZhbHVlcy5cbiAqL1xuY29uc3QgZ2V0Qm9vbGVhblZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYm9vbGVhblZhbHVlID0gKDAsIHN1cGVyc3RydWN0XzEuY3JlYXRlKSh2YWx1ZSwgQm9vbGVhbkNvZXJjZXIpO1xuICAgICAgICBpZiAoYm9vbGVhblZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQoMCk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlBhcnNlckVycm9yKGBJbnZhbGlkIGJvb2xlYW4gdmFsdWUuIEV4cGVjdGVkIGEgYm9vbGVhbiBsaXRlcmFsLCBvciB0aGUgc3RyaW5nIFwidHJ1ZVwiIG9yIFwiZmFsc2VcIiwgYnV0IHJlY2VpdmVkIFwiJHt2YWx1ZX1cIi5gKTtcbiAgICB9XG59O1xuZXhwb3J0cy5nZXRCb29sZWFuVmFsdWUgPSBnZXRCb29sZWFuVmFsdWU7XG5leHBvcnRzLmJvb2wgPSB7XG4gICAgaXNEeW5hbWljOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBHZXQgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdmFsaWQgYm9vbGVhbiB0eXBlLiBTaW5jZSBgYm9vbGAgaXMgYSBzaW1wbGVcbiAgICAgKiB0eXBlLCB0aGlzIGlzIGp1c3QgYSBjaGVjayB0aGF0IHRoZSB2YWx1ZSBpcyBcImJvb2xcIi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgdHlwZSBpcyBhIHZhbGlkIGJvb2xlYW4gdHlwZS5cbiAgICAgKi9cbiAgICBpc1R5cGU6ICh0eXBlKSA9PiB0eXBlID09PSAnYm9vbCcsXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBieXRlIGxlbmd0aCBvZiBhbiBlbmNvZGVkIGJvb2xlYW4uIFNpbmNlIGBib29sYCBpcyBhIHNpbXBsZVxuICAgICAqIHR5cGUsIHRoaXMgYWx3YXlzIHJldHVybnMgMzIuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgYWN0dWFsIGJvb2xlYW5zIGFyZSBvbmx5IDEgYnl0ZSBsb25nLCBidXQgdGhlIGVuY29kaW5nIG9mXG4gICAgICogdGhlIGBib29sYCB0eXBlIGlzIGFsd2F5cyAzMiBieXRlcyBsb25nLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGUgbGVuZ3RoIG9mIGFuIGVuY29kZWQgYm9vbGVhbi5cbiAgICAgKi9cbiAgICBnZXRCeXRlTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gMzI7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgdGhlIGdpdmVuIGJvb2xlYW4gdG8gYSBieXRlIGFycmF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgZW5jb2RpbmcgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSBhcmdzLmJ1ZmZlciAtIFRoZSBieXRlIGFycmF5IHRvIGFkZCB0by5cbiAgICAgKiBAcGFyYW0gYXJncy52YWx1ZSAtIFRoZSBib29sZWFuIHRvIGVuY29kZS5cbiAgICAgKiBAcGFyYW0gYXJncy5wYWNrZWQgLSBXaGV0aGVyIHRoZSB2YWx1ZSBpcyBwYWNrZWQuXG4gICAgICogQHBhcmFtIGFyZ3MudGlnaHQgLSBXaGV0aGVyIHRvIHVzZSBub24tc3RhbmRhcmQgdGlnaHQgZW5jb2RpbmcuXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGVzIHdpdGggdGhlIGVuY29kZWQgYm9vbGVhbiBhZGRlZCB0byBpdC5cbiAgICAgKi9cbiAgICBlbmNvZGUoeyBidWZmZXIsIHZhbHVlLCBwYWNrZWQsIHRpZ2h0IH0pIHtcbiAgICAgICAgY29uc3QgYm9vbGVhblZhbHVlID0gKDAsIGV4cG9ydHMuZ2V0Qm9vbGVhblZhbHVlKSh2YWx1ZSk7XG4gICAgICAgIC8vIEZvciBwYWNrZWQgZW5jb2RpbmcsIHdlIGFkZCBhIHNpbmdsZSBieXRlIChgMHgwMGAgb3IgYDB4MDFgKSB0byB0aGUgYnl0ZVxuICAgICAgICAvLyBhcnJheS5cbiAgICAgICAgaWYgKHBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKShbYnVmZmVyLCAoMCwgdXRpbHNfMS5iaWdJbnRUb0J5dGVzKShib29sZWFuVmFsdWUpXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQm9vbGVhbnMgYXJlIGVuY29kZWQgYXMgMzItYnl0ZSBpbnRlZ2Vycywgc28gd2UgdXNlIHRoZSBudW1iZXIgcGFyc2VyXG4gICAgICAgIC8vIHRvIGVuY29kZSB0aGUgYm9vbGVhbiB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG51bWJlcl8xLm51bWJlci5lbmNvZGUoe1xuICAgICAgICAgICAgdHlwZTogJ3VpbnQyNTYnLFxuICAgICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgICAgdmFsdWU6IGJvb2xlYW5WYWx1ZSxcbiAgICAgICAgICAgIHBhY2tlZCxcbiAgICAgICAgICAgIHRpZ2h0LFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERlY29kZSB0aGUgZ2l2ZW4gYnl0ZSBhcnJheSB0byBhIGJvb2xlYW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBkZWNvZGluZyBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMgVGhlIGRlY29kZWQgYm9vbGVhbi5cbiAgICAgKi9cbiAgICBkZWNvZGUoYXJncykge1xuICAgICAgICAvLyBCb29sZWFucyBhcmUgZW5jb2RlZCBhcyAzMi1ieXRlIGludGVnZXJzLCBzbyB3ZSB1c2UgdGhlIG51bWJlciBwYXJzZXJcbiAgICAgICAgLy8gdG8gZGVjb2RlIHRoZSBib29sZWFuIHZhbHVlLlxuICAgICAgICByZXR1cm4gbnVtYmVyXzEubnVtYmVyLmRlY29kZSh7IC4uLmFyZ3MsIHR5cGU6ICd1aW50MjU2JyB9KSA9PT0gQmlnSW50KDEpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/bool.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/bytes.js":
/*!****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/bytes.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bytes = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst utils_2 = __webpack_require__(/*! ../utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\nexports.bytes = {\n    isDynamic: true,\n    /**\n     * Check if a type is a bytes type. Since `bytes` is a simple type, this is\n     * just a check that the type is \"bytes\".\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a bytes type.\n     */\n    isType: (type) => type === 'bytes',\n    /**\n     * Get the byte length of an encoded bytes value. Since `bytes` is a simple\n     * type, this always returns 32.\n     *\n     * Note that actual length of a bytes value is variable, but the encoded\n     * static value (pointer) is always 32 bytes long.\n     *\n     * @returns The byte length of an encoded bytes value.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode the given bytes value to a byte array.\n     *\n     * @param args - The encoding arguments.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The bytes value to encode.\n     * @param args.packed - Whether to use packed encoding.\n     * @returns The bytes with the encoded bytes value added to it.\n     */\n    encode({ buffer, value, packed }) {\n        const bufferValue = (0, utils_1.createBytes)(value);\n        // For packed encoding, we can just add the bytes value to the byte array,\n        // without adding any padding or alignment. There is also no need to\n        // encode the length of the bytes.\n        if (packed) {\n            return (0, utils_1.concatBytes)([buffer, bufferValue]);\n        }\n        const paddedSize = Math.ceil(bufferValue.byteLength / 32) * 32;\n        // Bytes of length `k` are encoded as `k pad_right(bytes)`.\n        return (0, utils_1.concatBytes)([\n            buffer,\n            (0, utils_2.padStart)((0, utils_1.numberToBytes)(bufferValue.byteLength)),\n            (0, utils_2.padEnd)(bufferValue, paddedSize),\n        ]);\n    },\n    /**\n     * Decode the given byte array to a bytes value.\n     *\n     * @param args - The decoding arguments.\n     * @param args.value - The byte array to decode.\n     * @returns The decoded bytes value as a `Uint8Array`.\n     */\n    decode({ value }) {\n        const bytesValue = value.subarray(0, 32);\n        const length = (0, utils_1.bytesToNumber)(bytesValue);\n        // Since we're returning a `Uint8Array`, we use `slice` to copy the bytes\n        // into a new array.\n        return value.slice(32, 32 + length);\n    },\n};\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGdCQUFnQixtQkFBTyxDQUFDLHFFQUFpQjtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvYnl0ZXMuanM/YzM3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnl0ZXMgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBtZXRhbWFzay91dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzIgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5leHBvcnRzLmJ5dGVzID0ge1xuICAgIGlzRHluYW1pYzogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHR5cGUgaXMgYSBieXRlcyB0eXBlLiBTaW5jZSBgYnl0ZXNgIGlzIGEgc2ltcGxlIHR5cGUsIHRoaXMgaXNcbiAgICAgKiBqdXN0IGEgY2hlY2sgdGhhdCB0aGUgdHlwZSBpcyBcImJ5dGVzXCIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRoZSB0eXBlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHR5cGUgaXMgYSBieXRlcyB0eXBlLlxuICAgICAqL1xuICAgIGlzVHlwZTogKHR5cGUpID0+IHR5cGUgPT09ICdieXRlcycsXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBieXRlIGxlbmd0aCBvZiBhbiBlbmNvZGVkIGJ5dGVzIHZhbHVlLiBTaW5jZSBgYnl0ZXNgIGlzIGEgc2ltcGxlXG4gICAgICogdHlwZSwgdGhpcyBhbHdheXMgcmV0dXJucyAzMi5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBhY3R1YWwgbGVuZ3RoIG9mIGEgYnl0ZXMgdmFsdWUgaXMgdmFyaWFibGUsIGJ1dCB0aGUgZW5jb2RlZFxuICAgICAqIHN0YXRpYyB2YWx1ZSAocG9pbnRlcikgaXMgYWx3YXlzIDMyIGJ5dGVzIGxvbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgYnl0ZSBsZW5ndGggb2YgYW4gZW5jb2RlZCBieXRlcyB2YWx1ZS5cbiAgICAgKi9cbiAgICBnZXRCeXRlTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gMzI7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgdGhlIGdpdmVuIGJ5dGVzIHZhbHVlIHRvIGEgYnl0ZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGVuY29kaW5nIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gYXJncy5idWZmZXIgLSBUaGUgYnl0ZSBhcnJheSB0byBhZGQgdG8uXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgYnl0ZXMgdmFsdWUgdG8gZW5jb2RlLlxuICAgICAqIEBwYXJhbSBhcmdzLnBhY2tlZCAtIFdoZXRoZXIgdG8gdXNlIHBhY2tlZCBlbmNvZGluZy5cbiAgICAgKiBAcmV0dXJucyBUaGUgYnl0ZXMgd2l0aCB0aGUgZW5jb2RlZCBieXRlcyB2YWx1ZSBhZGRlZCB0byBpdC5cbiAgICAgKi9cbiAgICBlbmNvZGUoeyBidWZmZXIsIHZhbHVlLCBwYWNrZWQgfSkge1xuICAgICAgICBjb25zdCBidWZmZXJWYWx1ZSA9ICgwLCB1dGlsc18xLmNyZWF0ZUJ5dGVzKSh2YWx1ZSk7XG4gICAgICAgIC8vIEZvciBwYWNrZWQgZW5jb2RpbmcsIHdlIGNhbiBqdXN0IGFkZCB0aGUgYnl0ZXMgdmFsdWUgdG8gdGhlIGJ5dGUgYXJyYXksXG4gICAgICAgIC8vIHdpdGhvdXQgYWRkaW5nIGFueSBwYWRkaW5nIG9yIGFsaWdubWVudC4gVGhlcmUgaXMgYWxzbyBubyBuZWVkIHRvXG4gICAgICAgIC8vIGVuY29kZSB0aGUgbGVuZ3RoIG9mIHRoZSBieXRlcy5cbiAgICAgICAgaWYgKHBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKShbYnVmZmVyLCBidWZmZXJWYWx1ZV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZGRlZFNpemUgPSBNYXRoLmNlaWwoYnVmZmVyVmFsdWUuYnl0ZUxlbmd0aCAvIDMyKSAqIDMyO1xuICAgICAgICAvLyBCeXRlcyBvZiBsZW5ndGggYGtgIGFyZSBlbmNvZGVkIGFzIGBrIHBhZF9yaWdodChieXRlcylgLlxuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuY29uY2F0Qnl0ZXMpKFtcbiAgICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICAgICgwLCB1dGlsc18yLnBhZFN0YXJ0KSgoMCwgdXRpbHNfMS5udW1iZXJUb0J5dGVzKShidWZmZXJWYWx1ZS5ieXRlTGVuZ3RoKSksXG4gICAgICAgICAgICAoMCwgdXRpbHNfMi5wYWRFbmQpKGJ1ZmZlclZhbHVlLCBwYWRkZWRTaXplKSxcbiAgICAgICAgXSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBEZWNvZGUgdGhlIGdpdmVuIGJ5dGUgYXJyYXkgdG8gYSBieXRlcyB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGRlY29kaW5nIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gYXJncy52YWx1ZSAtIFRoZSBieXRlIGFycmF5IHRvIGRlY29kZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBieXRlcyB2YWx1ZSBhcyBhIGBVaW50OEFycmF5YC5cbiAgICAgKi9cbiAgICBkZWNvZGUoeyB2YWx1ZSB9KSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzVmFsdWUgPSB2YWx1ZS5zdWJhcnJheSgwLCAzMik7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9ICgwLCB1dGlsc18xLmJ5dGVzVG9OdW1iZXIpKGJ5dGVzVmFsdWUpO1xuICAgICAgICAvLyBTaW5jZSB3ZSdyZSByZXR1cm5pbmcgYSBgVWludDhBcnJheWAsIHdlIHVzZSBgc2xpY2VgIHRvIGNvcHkgdGhlIGJ5dGVzXG4gICAgICAgIC8vIGludG8gYSBuZXcgYXJyYXkuXG4gICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgzMiwgMzIgKyBsZW5ndGgpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/bytes.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fixedBytes = exports.getByteLength = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst utils_2 = __webpack_require__(/*! ../utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\nconst BYTES_REGEX = /^bytes([0-9]{1,2})$/u;\n/**\n * Get the length of the specified type. If a length is not specified, or if the\n * length is out of range (0 < n <= 32), this will throw an error.\n *\n * @param type - The type to get the length for.\n * @returns The byte length of the type.\n */\nconst getByteLength = (type) => {\n    const bytes = type.match(BYTES_REGEX)?.[1];\n    (0, utils_1.assert)(bytes, `Invalid byte length. Expected a number between 1 and 32, but received \"${type}\".`);\n    const length = Number(bytes);\n    (0, utils_1.assert)(length > 0 && length <= 32, new errors_1.ParserError(`Invalid byte length. Expected a number between 1 and 32, but received \"${type}\".`));\n    return length;\n};\nexports.getByteLength = getByteLength;\nexports.fixedBytes = {\n    isDynamic: false,\n    /**\n     * Check if a type is a fixed bytes type.\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a fixed bytes type.\n     */\n    isType(type) {\n        return BYTES_REGEX.test(type);\n    },\n    /**\n     * Get the byte length of an encoded fixed bytes type.\n     *\n     * @returns The byte length of the type.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode a fixed bytes value.\n     *\n     * @param args - The arguments to encode.\n     * @param args.type - The type of the value.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The value to encode.\n     * @param args.packed - Whether to use packed encoding.\n     * @returns The bytes with the encoded value added to it.\n     */\n    encode({ type, buffer, value, packed }) {\n        const length = (0, exports.getByteLength)(type);\n        const bufferValue = (0, utils_1.createBytes)(value);\n        (0, utils_1.assert)(bufferValue.length <= length, new errors_1.ParserError(`Expected a value of length ${length}, but received a value of length ${bufferValue.length}.`));\n        // For packed encoding, the value is padded to the length of the type, and\n        // then added to the byte array.\n        if (packed) {\n            return (0, utils_1.concatBytes)([buffer, (0, utils_2.padEnd)(bufferValue, length)]);\n        }\n        return (0, utils_1.concatBytes)([buffer, (0, utils_2.padEnd)(bufferValue)]);\n    },\n    /**\n     * Decode a fixed bytes value.\n     *\n     * @param args - The arguments to decode.\n     * @param args.type - The type of the value.\n     * @param args.value - The value to decode.\n     * @returns The decoded value as a `Uint8Array`.\n     */\n    decode({ type, value }) {\n        const length = (0, exports.getByteLength)(type);\n        // Since we're returning a `Uint8Array`, we use `slice` to copy the bytes\n        // into a new array.\n        return value.slice(0, length);\n    },\n};\n//# sourceMappingURL=fixed-bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvZml4ZWQtYnl0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcscUJBQXFCO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLHFFQUFpQjtBQUN6QyxpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBVztBQUNwQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxrQ0FBa0MsSUFBSTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsS0FBSztBQUM5RztBQUNBLHVKQUF1SixLQUFLO0FBQzVKO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNkJBQTZCO0FBQzFDO0FBQ0E7QUFDQSxpSEFBaUgsT0FBTyxtQ0FBbUMsbUJBQW1CO0FBQzlLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9hYmktdXRpbHMvZGlzdC9wYXJzZXJzL2ZpeGVkLWJ5dGVzLmpzPzIyZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpeGVkQnl0ZXMgPSBleHBvcnRzLmdldEJ5dGVMZW5ndGggPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBtZXRhbWFzay91dGlsc1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IHV0aWxzXzIgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBCWVRFU19SRUdFWCA9IC9eYnl0ZXMoWzAtOV17MSwyfSkkL3U7XG4vKipcbiAqIEdldCB0aGUgbGVuZ3RoIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS4gSWYgYSBsZW5ndGggaXMgbm90IHNwZWNpZmllZCwgb3IgaWYgdGhlXG4gKiBsZW5ndGggaXMgb3V0IG9mIHJhbmdlICgwIDwgbiA8PSAzMiksIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0gdHlwZSAtIFRoZSB0eXBlIHRvIGdldCB0aGUgbGVuZ3RoIGZvci5cbiAqIEByZXR1cm5zIFRoZSBieXRlIGxlbmd0aCBvZiB0aGUgdHlwZS5cbiAqL1xuY29uc3QgZ2V0Qnl0ZUxlbmd0aCA9ICh0eXBlKSA9PiB7XG4gICAgY29uc3QgYnl0ZXMgPSB0eXBlLm1hdGNoKEJZVEVTX1JFR0VYKT8uWzFdO1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkoYnl0ZXMsIGBJbnZhbGlkIGJ5dGUgbGVuZ3RoLiBFeHBlY3RlZCBhIG51bWJlciBiZXR3ZWVuIDEgYW5kIDMyLCBidXQgcmVjZWl2ZWQgXCIke3R5cGV9XCIuYCk7XG4gICAgY29uc3QgbGVuZ3RoID0gTnVtYmVyKGJ5dGVzKTtcbiAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGxlbmd0aCA+IDAgJiYgbGVuZ3RoIDw9IDMyLCBuZXcgZXJyb3JzXzEuUGFyc2VyRXJyb3IoYEludmFsaWQgYnl0ZSBsZW5ndGguIEV4cGVjdGVkIGEgbnVtYmVyIGJldHdlZW4gMSBhbmQgMzIsIGJ1dCByZWNlaXZlZCBcIiR7dHlwZX1cIi5gKSk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbn07XG5leHBvcnRzLmdldEJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoO1xuZXhwb3J0cy5maXhlZEJ5dGVzID0ge1xuICAgIGlzRHluYW1pYzogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB0eXBlIGlzIGEgZml4ZWQgYnl0ZXMgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgdHlwZSBpcyBhIGZpeGVkIGJ5dGVzIHR5cGUuXG4gICAgICovXG4gICAgaXNUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIEJZVEVTX1JFR0VYLnRlc3QodHlwZSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGJ5dGUgbGVuZ3RoIG9mIGFuIGVuY29kZWQgZml4ZWQgYnl0ZXMgdHlwZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBieXRlIGxlbmd0aCBvZiB0aGUgdHlwZS5cbiAgICAgKi9cbiAgICBnZXRCeXRlTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gMzI7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYSBmaXhlZCBieXRlcyB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGFyZ3VtZW50cyB0byBlbmNvZGUuXG4gICAgICogQHBhcmFtIGFyZ3MudHlwZSAtIFRoZSB0eXBlIG9mIHRoZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gYXJncy5idWZmZXIgLSBUaGUgYnl0ZSBhcnJheSB0byBhZGQgdG8uXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgdmFsdWUgdG8gZW5jb2RlLlxuICAgICAqIEBwYXJhbSBhcmdzLnBhY2tlZCAtIFdoZXRoZXIgdG8gdXNlIHBhY2tlZCBlbmNvZGluZy5cbiAgICAgKiBAcmV0dXJucyBUaGUgYnl0ZXMgd2l0aCB0aGUgZW5jb2RlZCB2YWx1ZSBhZGRlZCB0byBpdC5cbiAgICAgKi9cbiAgICBlbmNvZGUoeyB0eXBlLCBidWZmZXIsIHZhbHVlLCBwYWNrZWQgfSkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSAoMCwgZXhwb3J0cy5nZXRCeXRlTGVuZ3RoKSh0eXBlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyVmFsdWUgPSAoMCwgdXRpbHNfMS5jcmVhdGVCeXRlcykodmFsdWUpO1xuICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnQpKGJ1ZmZlclZhbHVlLmxlbmd0aCA8PSBsZW5ndGgsIG5ldyBlcnJvcnNfMS5QYXJzZXJFcnJvcihgRXhwZWN0ZWQgYSB2YWx1ZSBvZiBsZW5ndGggJHtsZW5ndGh9LCBidXQgcmVjZWl2ZWQgYSB2YWx1ZSBvZiBsZW5ndGggJHtidWZmZXJWYWx1ZS5sZW5ndGh9LmApKTtcbiAgICAgICAgLy8gRm9yIHBhY2tlZCBlbmNvZGluZywgdGhlIHZhbHVlIGlzIHBhZGRlZCB0byB0aGUgbGVuZ3RoIG9mIHRoZSB0eXBlLCBhbmRcbiAgICAgICAgLy8gdGhlbiBhZGRlZCB0byB0aGUgYnl0ZSBhcnJheS5cbiAgICAgICAgaWYgKHBhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKShbYnVmZmVyLCAoMCwgdXRpbHNfMi5wYWRFbmQpKGJ1ZmZlclZhbHVlLCBsZW5ndGgpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKShbYnVmZmVyLCAoMCwgdXRpbHNfMi5wYWRFbmQpKGJ1ZmZlclZhbHVlKV0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGEgZml4ZWQgYnl0ZXMgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgdG8gZGVjb2RlLlxuICAgICAqIEBwYXJhbSBhcmdzLnR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgdmFsdWUuXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgdmFsdWUgdG8gZGVjb2RlLlxuICAgICAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHZhbHVlIGFzIGEgYFVpbnQ4QXJyYXlgLlxuICAgICAqL1xuICAgIGRlY29kZSh7IHR5cGUsIHZhbHVlIH0pIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gKDAsIGV4cG9ydHMuZ2V0Qnl0ZUxlbmd0aCkodHlwZSk7XG4gICAgICAgIC8vIFNpbmNlIHdlJ3JlIHJldHVybmluZyBhIGBVaW50OEFycmF5YCwgd2UgdXNlIGBzbGljZWAgdG8gY29weSB0aGUgYnl0ZXNcbiAgICAgICAgLy8gaW50byBhIG5ldyBhcnJheS5cbiAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXhlZC1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/function.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/function.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fn = exports.getFunction = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst superstruct_1 = __webpack_require__(/*! superstruct */ \"./node_modules/@metamask/abi-utils/node_modules/superstruct/dist/index.mjs\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst fixed_bytes_1 = __webpack_require__(/*! ./fixed-bytes */ \"./node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js\");\n/**\n * A struct that represents a Solidity function. The value must be a hex string\n * or a byte array. The created value will always be an object with an `address`\n * and `selector` property.\n */\nconst FunctionStruct = (0, superstruct_1.coerce)((0, superstruct_1.object)({\n    address: utils_1.StrictHexStruct,\n    selector: utils_1.StrictHexStruct,\n}), (0, superstruct_1.union)([utils_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]), (value) => {\n    const bytes = (0, utils_1.createBytes)(value);\n    (0, utils_1.assert)(bytes.length === 24, new errors_1.ParserError(`Invalid Solidity function. Expected function to be 24 bytes long, but received ${bytes.length} bytes.`));\n    return {\n        address: (0, utils_1.bytesToHex)(bytes.subarray(0, 20)),\n        selector: (0, utils_1.bytesToHex)(bytes.subarray(20, 24)),\n    };\n});\n/**\n * Normalize a function. This accepts the function as:\n *\n * - A {@link SolidityFunction} object.\n * - A hexadecimal string.\n * - A byte array.\n *\n * @param input - The function-like input.\n * @returns The function as buffer.\n */\nconst getFunction = (input) => {\n    const value = (0, superstruct_1.create)(input, FunctionStruct);\n    return (0, utils_1.concatBytes)([(0, utils_1.hexToBytes)(value.address), (0, utils_1.hexToBytes)(value.selector)]);\n};\nexports.getFunction = getFunction;\nexports.fn = {\n    isDynamic: false,\n    /**\n     * Check if a type is a function type. Since `function` is a simple type, this\n     * is just a check that the type is \"function\".\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a function type.\n     */\n    isType: (type) => type === 'function',\n    /**\n     * Get the byte length of an encoded function. Since `function` is a simple\n     * type, this always returns 32.\n     *\n     * Note that actual functions are only 24 bytes long, but the encoding of\n     * the `function` type is always 32 bytes long.\n     *\n     * @returns The byte length of an encoded function.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode the given function to a byte array.\n     *\n     * @param args - The encoding arguments.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The function to encode.\n     * @param args.packed - Whether to use packed encoding.\n     * @param args.tight - Whether to use non-standard tight encoding.\n     * @returns The bytes with the encoded function added to it.\n     */\n    encode({ buffer, value, packed, tight }) {\n        const fnValue = (0, exports.getFunction)(value);\n        // Functions are encoded as `bytes24`, so we use the fixedBytes parser to\n        // encode the function.\n        return fixed_bytes_1.fixedBytes.encode({\n            type: 'bytes24',\n            buffer,\n            value: fnValue,\n            packed,\n            tight,\n        });\n    },\n    /**\n     * Decode the given byte array to a function.\n     *\n     * @param args - The decoding arguments.\n     * @param args.value - The byte array to decode.\n     * @returns The decoded function as a {@link SolidityFunction} object.\n     */\n    decode({ value }) {\n        return {\n            address: (0, utils_1.bytesToHex)(value.slice(0, 20)),\n            selector: (0, utils_1.bytesToHex)(value.slice(20, 24)),\n        };\n    },\n};\n//# sourceMappingURL=function.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsVUFBVSxHQUFHLG1CQUFtQjtBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBaUI7QUFDekMsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQWE7QUFDM0MsaUJBQWlCLG1CQUFPLENBQUMsb0VBQVc7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMscUZBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHdKQUF3SixjQUFjO0FBQ3RLO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0JBQXdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLHdCQUF3QjtBQUNuRTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svYWJpLXV0aWxzL2Rpc3QvcGFyc2Vycy9mdW5jdGlvbi5qcz8wNTAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mbiA9IGV4cG9ydHMuZ2V0RnVuY3Rpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBtZXRhbWFzay91dGlsc1wiKTtcbmNvbnN0IHN1cGVyc3RydWN0XzEgPSByZXF1aXJlKFwic3VwZXJzdHJ1Y3RcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCBmaXhlZF9ieXRlc18xID0gcmVxdWlyZShcIi4vZml4ZWQtYnl0ZXNcIik7XG4vKipcbiAqIEEgc3RydWN0IHRoYXQgcmVwcmVzZW50cyBhIFNvbGlkaXR5IGZ1bmN0aW9uLiBUaGUgdmFsdWUgbXVzdCBiZSBhIGhleCBzdHJpbmdcbiAqIG9yIGEgYnl0ZSBhcnJheS4gVGhlIGNyZWF0ZWQgdmFsdWUgd2lsbCBhbHdheXMgYmUgYW4gb2JqZWN0IHdpdGggYW4gYGFkZHJlc3NgXG4gKiBhbmQgYHNlbGVjdG9yYCBwcm9wZXJ0eS5cbiAqL1xuY29uc3QgRnVuY3Rpb25TdHJ1Y3QgPSAoMCwgc3VwZXJzdHJ1Y3RfMS5jb2VyY2UpKCgwLCBzdXBlcnN0cnVjdF8xLm9iamVjdCkoe1xuICAgIGFkZHJlc3M6IHV0aWxzXzEuU3RyaWN0SGV4U3RydWN0LFxuICAgIHNlbGVjdG9yOiB1dGlsc18xLlN0cmljdEhleFN0cnVjdCxcbn0pLCAoMCwgc3VwZXJzdHJ1Y3RfMS51bmlvbikoW3V0aWxzXzEuU3RyaWN0SGV4U3RydWN0LCAoMCwgc3VwZXJzdHJ1Y3RfMS5pbnN0YW5jZSkoVWludDhBcnJheSldKSwgKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgYnl0ZXMgPSAoMCwgdXRpbHNfMS5jcmVhdGVCeXRlcykodmFsdWUpO1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkoYnl0ZXMubGVuZ3RoID09PSAyNCwgbmV3IGVycm9yc18xLlBhcnNlckVycm9yKGBJbnZhbGlkIFNvbGlkaXR5IGZ1bmN0aW9uLiBFeHBlY3RlZCBmdW5jdGlvbiB0byBiZSAyNCBieXRlcyBsb25nLCBidXQgcmVjZWl2ZWQgJHtieXRlcy5sZW5ndGh9IGJ5dGVzLmApKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRyZXNzOiAoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShieXRlcy5zdWJhcnJheSgwLCAyMCkpLFxuICAgICAgICBzZWxlY3RvcjogKDAsIHV0aWxzXzEuYnl0ZXNUb0hleCkoYnl0ZXMuc3ViYXJyYXkoMjAsIDI0KSksXG4gICAgfTtcbn0pO1xuLyoqXG4gKiBOb3JtYWxpemUgYSBmdW5jdGlvbi4gVGhpcyBhY2NlcHRzIHRoZSBmdW5jdGlvbiBhczpcbiAqXG4gKiAtIEEge0BsaW5rIFNvbGlkaXR5RnVuY3Rpb259IG9iamVjdC5cbiAqIC0gQSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiAtIEEgYnl0ZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgLSBUaGUgZnVuY3Rpb24tbGlrZSBpbnB1dC5cbiAqIEByZXR1cm5zIFRoZSBmdW5jdGlvbiBhcyBidWZmZXIuXG4gKi9cbmNvbnN0IGdldEZ1bmN0aW9uID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSAoMCwgc3VwZXJzdHJ1Y3RfMS5jcmVhdGUpKGlucHV0LCBGdW5jdGlvblN0cnVjdCk7XG4gICAgcmV0dXJuICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKShbKDAsIHV0aWxzXzEuaGV4VG9CeXRlcykodmFsdWUuYWRkcmVzcyksICgwLCB1dGlsc18xLmhleFRvQnl0ZXMpKHZhbHVlLnNlbGVjdG9yKV0pO1xufTtcbmV4cG9ydHMuZ2V0RnVuY3Rpb24gPSBnZXRGdW5jdGlvbjtcbmV4cG9ydHMuZm4gPSB7XG4gICAgaXNEeW5hbWljOiBmYWxzZSxcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHR5cGUgaXMgYSBmdW5jdGlvbiB0eXBlLiBTaW5jZSBgZnVuY3Rpb25gIGlzIGEgc2ltcGxlIHR5cGUsIHRoaXNcbiAgICAgKiBpcyBqdXN0IGEgY2hlY2sgdGhhdCB0aGUgdHlwZSBpcyBcImZ1bmN0aW9uXCIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRoZSB0eXBlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHR5cGUgaXMgYSBmdW5jdGlvbiB0eXBlLlxuICAgICAqL1xuICAgIGlzVHlwZTogKHR5cGUpID0+IHR5cGUgPT09ICdmdW5jdGlvbicsXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBieXRlIGxlbmd0aCBvZiBhbiBlbmNvZGVkIGZ1bmN0aW9uLiBTaW5jZSBgZnVuY3Rpb25gIGlzIGEgc2ltcGxlXG4gICAgICogdHlwZSwgdGhpcyBhbHdheXMgcmV0dXJucyAzMi5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBhY3R1YWwgZnVuY3Rpb25zIGFyZSBvbmx5IDI0IGJ5dGVzIGxvbmcsIGJ1dCB0aGUgZW5jb2Rpbmcgb2ZcbiAgICAgKiB0aGUgYGZ1bmN0aW9uYCB0eXBlIGlzIGFsd2F5cyAzMiBieXRlcyBsb25nLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGUgbGVuZ3RoIG9mIGFuIGVuY29kZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZ2V0Qnl0ZUxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIDMyO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRW5jb2RlIHRoZSBnaXZlbiBmdW5jdGlvbiB0byBhIGJ5dGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBlbmNvZGluZyBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIGFyZ3MuYnVmZmVyIC0gVGhlIGJ5dGUgYXJyYXkgdG8gYWRkIHRvLlxuICAgICAqIEBwYXJhbSBhcmdzLnZhbHVlIC0gVGhlIGZ1bmN0aW9uIHRvIGVuY29kZS5cbiAgICAgKiBAcGFyYW0gYXJncy5wYWNrZWQgLSBXaGV0aGVyIHRvIHVzZSBwYWNrZWQgZW5jb2RpbmcuXG4gICAgICogQHBhcmFtIGFyZ3MudGlnaHQgLSBXaGV0aGVyIHRvIHVzZSBub24tc3RhbmRhcmQgdGlnaHQgZW5jb2RpbmcuXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGVzIHdpdGggdGhlIGVuY29kZWQgZnVuY3Rpb24gYWRkZWQgdG8gaXQuXG4gICAgICovXG4gICAgZW5jb2RlKHsgYnVmZmVyLCB2YWx1ZSwgcGFja2VkLCB0aWdodCB9KSB7XG4gICAgICAgIGNvbnN0IGZuVmFsdWUgPSAoMCwgZXhwb3J0cy5nZXRGdW5jdGlvbikodmFsdWUpO1xuICAgICAgICAvLyBGdW5jdGlvbnMgYXJlIGVuY29kZWQgYXMgYGJ5dGVzMjRgLCBzbyB3ZSB1c2UgdGhlIGZpeGVkQnl0ZXMgcGFyc2VyIHRvXG4gICAgICAgIC8vIGVuY29kZSB0aGUgZnVuY3Rpb24uXG4gICAgICAgIHJldHVybiBmaXhlZF9ieXRlc18xLmZpeGVkQnl0ZXMuZW5jb2RlKHtcbiAgICAgICAgICAgIHR5cGU6ICdieXRlczI0JyxcbiAgICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICAgIHZhbHVlOiBmblZhbHVlLFxuICAgICAgICAgICAgcGFja2VkLFxuICAgICAgICAgICAgdGlnaHQsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVjb2RlIHRoZSBnaXZlbiBieXRlIGFycmF5IHRvIGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBkZWNvZGluZyBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgYnl0ZSBhcnJheSB0byBkZWNvZGUuXG4gICAgICogQHJldHVybnMgVGhlIGRlY29kZWQgZnVuY3Rpb24gYXMgYSB7QGxpbmsgU29saWRpdHlGdW5jdGlvbn0gb2JqZWN0LlxuICAgICAqL1xuICAgIGRlY29kZSh7IHZhbHVlIH0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZHJlc3M6ICgwLCB1dGlsc18xLmJ5dGVzVG9IZXgpKHZhbHVlLnNsaWNlKDAsIDIwKSksXG4gICAgICAgICAgICBzZWxlY3RvcjogKDAsIHV0aWxzXzEuYnl0ZXNUb0hleCkodmFsdWUuc2xpY2UoMjAsIDI0KSksXG4gICAgICAgIH07XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/function.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./address */ \"./node_modules/@metamask/abi-utils/dist/parsers/address.js\"), exports);\n__exportStar(__webpack_require__(/*! ./array */ \"./node_modules/@metamask/abi-utils/dist/parsers/array.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bool */ \"./node_modules/@metamask/abi-utils/dist/parsers/bool.js\"), exports);\n__exportStar(__webpack_require__(/*! ./bytes */ \"./node_modules/@metamask/abi-utils/dist/parsers/bytes.js\"), exports);\n__exportStar(__webpack_require__(/*! ./fixed-bytes */ \"./node_modules/@metamask/abi-utils/dist/parsers/fixed-bytes.js\"), exports);\n__exportStar(__webpack_require__(/*! ./function */ \"./node_modules/@metamask/abi-utils/dist/parsers/function.js\"), exports);\n__exportStar(__webpack_require__(/*! ./number */ \"./node_modules/@metamask/abi-utils/dist/parsers/number.js\"), exports);\n__exportStar(__webpack_require__(/*! ./parser */ \"./node_modules/@metamask/abi-utils/dist/parsers/parser.js\"), exports);\n__exportStar(__webpack_require__(/*! ./string */ \"./node_modules/@metamask/abi-utils/dist/parsers/string.js\"), exports);\n__exportStar(__webpack_require__(/*! ./tuple */ \"./node_modules/@metamask/abi-utils/dist/parsers/tuple.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDZFQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyx5RUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsdUVBQVE7QUFDN0IsYUFBYSxtQkFBTyxDQUFDLHlFQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxxRkFBZTtBQUNwQyxhQUFhLG1CQUFPLENBQUMsK0VBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLDJFQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQywyRUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsMkVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLHlFQUFTO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svYWJpLXV0aWxzL2Rpc3QvcGFyc2Vycy9pbmRleC5qcz83ZTY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWRkcmVzc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXJyYXlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Jvb2xcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2J5dGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9maXhlZC1ieXRlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZnVuY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL251bWJlclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcGFyc2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdHJpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R1cGxlXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/index.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/number.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/number.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.number = exports.getBigInt = exports.assertNumberLength = exports.getLength = exports.isSigned = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst utils_2 = __webpack_require__(/*! ../utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\nconst NUMBER_REGEX = /^u?int(?<length>[0-9]*)?$/u;\n/**\n * Check if a number type is signed.\n *\n * @param type - The type to check.\n * @returns Whether the type is signed.\n */\nconst isSigned = (type) => {\n    return !type.startsWith('u');\n};\nexports.isSigned = isSigned;\n/**\n * Get the length of the specified type. If a length is not specified, if the\n * length is out of range (8 <= n <= 256), or if the length is not a multiple of\n * 8, this will throw an error.\n *\n * @param type - The type to get the length for.\n * @returns The bit length of the type.\n */\nconst getLength = (type) => {\n    if (type === 'int' || type === 'uint') {\n        return 256;\n    }\n    const match = type.match(NUMBER_REGEX);\n    (0, utils_1.assert)(match?.groups?.length, new errors_1.ParserError(`Invalid number type. Expected a number type, but received \"${type}\".`));\n    const length = parseInt(match.groups.length, 10);\n    (0, utils_1.assert)(length >= 8 && length <= 256, new errors_1.ParserError(`Invalid number length. Expected a number between 8 and 256, but received \"${type}\".`));\n    (0, utils_1.assert)(length % 8 === 0, new errors_1.ParserError(`Invalid number length. Expected a multiple of 8, but received \"${type}\".`));\n    return length;\n};\nexports.getLength = getLength;\n/**\n * Assert that the byte length of the given value is in range for the given\n * number type.\n *\n * @param value - The value to check.\n * @param type - The type of the value.\n * @throws If the value is out of range for the type.\n */\nconst assertNumberLength = (value, type) => {\n    const length = (0, exports.getLength)(type);\n    const maxValue = BigInt(2) ** BigInt(length - ((0, exports.isSigned)(type) ? 1 : 0)) - BigInt(1);\n    if ((0, exports.isSigned)(type)) {\n        // Signed types must be in the range of `-(2^(length - 1))` to\n        // `2^(length - 1) - 1`.\n        (0, utils_1.assert)(value >= -(maxValue + BigInt(1)) && value <= maxValue, new errors_1.ParserError(`Number \"${value}\" is out of range for type \"${type}\".`));\n        return;\n    }\n    // Unsigned types must be in the range of `0` to `2^length - 1`.\n    (0, utils_1.assert)(value <= maxValue, new errors_1.ParserError(`Number \"${value}\" is out of range for type \"${type}\".`));\n};\nexports.assertNumberLength = assertNumberLength;\n/**\n * Normalize a `bigint` value. This accepts the value as:\n *\n * - A `bigint`.\n * - A `number`.\n * - A decimal string, i.e., a string that does not start with \"0x\".\n * - A hexadecimal string, i.e., a string that starts with \"0x\".\n *\n * @param value - The number-like value to parse.\n * @returns The value parsed as bigint.\n */\nconst getBigInt = (value) => {\n    try {\n        return (0, utils_1.createBigInt)(value);\n    }\n    catch {\n        throw new errors_1.ParserError(`Invalid number. Expected a valid number value, but received \"${value}\".`);\n    }\n};\nexports.getBigInt = getBigInt;\nexports.number = {\n    isDynamic: false,\n    /**\n     * Check if a type is a number type.\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a number type.\n     */\n    isType(type) {\n        return NUMBER_REGEX.test(type);\n    },\n    /**\n     * Get the byte length of an encoded number type. Since `int` and `uint` are\n     * simple types, this will always return 32.\n     *\n     * @returns The byte length of the type.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode a number value.\n     *\n     * @param args - The arguments to encode.\n     * @param args.type - The type of the value.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The value to encode.\n     * @param args.packed - Whether to use packed encoding.\n     * @returns The bytes with the encoded value added to it.\n     */\n    encode({ type, buffer, value, packed }) {\n        const bigIntValue = (0, exports.getBigInt)(value);\n        (0, exports.assertNumberLength)(bigIntValue, type);\n        if ((0, exports.isSigned)(type)) {\n            // For packed encoding, the value is padded to the length of the type, and\n            // then added to the byte array.\n            if (packed) {\n                const length = (0, exports.getLength)(type) / 8;\n                return (0, utils_1.concatBytes)([buffer, (0, utils_1.signedBigIntToBytes)(bigIntValue, length)]);\n            }\n            return (0, utils_1.concatBytes)([\n                buffer,\n                (0, utils_2.padStart)((0, utils_1.signedBigIntToBytes)(bigIntValue, 32)),\n            ]);\n        }\n        // For packed encoding, the value is padded to the length of the type, and\n        // then added to the byte array.\n        if (packed) {\n            const length = (0, exports.getLength)(type) / 8;\n            return (0, utils_1.concatBytes)([\n                buffer,\n                (0, utils_2.padStart)((0, utils_1.bigIntToBytes)(bigIntValue), length),\n            ]);\n        }\n        return (0, utils_1.concatBytes)([buffer, (0, utils_2.padStart)((0, utils_1.bigIntToBytes)(bigIntValue))]);\n    },\n    /**\n     * Decode a number value.\n     *\n     * @param args - The decoding arguments.\n     * @param args.type - The type of the value.\n     * @param args.value - The value to decode.\n     * @returns The decoded value.\n     */\n    decode({ type, value }) {\n        const buffer = value.subarray(0, 32);\n        if ((0, exports.isSigned)(type)) {\n            const numberValue = (0, utils_1.bytesToSignedBigInt)(buffer);\n            (0, exports.assertNumberLength)(numberValue, type);\n            return numberValue;\n        }\n        const numberValue = (0, utils_1.bytesToBigInt)(buffer);\n        (0, exports.assertNumberLength)(numberValue, type);\n        return numberValue;\n    },\n};\n//# sourceMappingURL=number.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/number.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/parser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/parser.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svYWJpLXV0aWxzL2Rpc3QvcGFyc2Vycy9wYXJzZXIuanM/NjM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/parser.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/string.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/string.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.string = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"./node_modules/@metamask/abi-utils/dist/parsers/bytes.js\");\nexports.string = {\n    isDynamic: true,\n    /**\n     * Check if a type is a string type. Since `string` is a simple type, this\n     * is just a check if the type is \"string\".\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a string type.\n     */\n    isType: (type) => type === 'string',\n    /**\n     * Get the byte length of an encoded string type. Since `string` is a simple\n     * type, this will always return 32.\n     *\n     * Note that actual strings are variable in length, but the encoded static\n     * value (pointer) is always 32 bytes long.\n     *\n     * @returns The byte length of an encoded string.\n     */\n    getByteLength() {\n        return 32;\n    },\n    /**\n     * Encode the given string value to a byte array.\n     *\n     * @param args - The encoding arguments.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The string value to encode.\n     * @param args.packed - Whether to use packed encoding.\n     * @param args.tight - Whether to use non-standard tight encoding.\n     * @returns The bytes with the encoded string value added to it.\n     */\n    encode({ buffer, value, packed, tight }) {\n        // Strings are encoded as UTF-8 bytes, so we use the bytes parser to encode\n        // the string as bytes.\n        return bytes_1.bytes.encode({\n            type: 'bytes',\n            buffer,\n            value: (0, utils_1.stringToBytes)(value),\n            packed,\n            tight,\n        });\n    },\n    /**\n     * Decode the given byte array to a string value.\n     *\n     * @param args - The decoding arguments.\n     * @returns The decoded string value.\n     */\n    decode(args) {\n        // Strings are encoded as UTF-8 bytes, so we use the bytes parser to decode\n        // the bytes, and convert them to a string.\n        return (0, utils_1.bytesToString)(bytes_1.bytes.decode(args));\n    },\n};\n//# sourceMappingURL=string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBaUI7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMseUVBQVM7QUFDakMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svYWJpLXV0aWxzL2Rpc3QvcGFyc2Vycy9zdHJpbmcuanM/MDYxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RyaW5nID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbWV0YW1hc2svdXRpbHNcIik7XG5jb25zdCBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG5leHBvcnRzLnN0cmluZyA9IHtcbiAgICBpc0R5bmFtaWM6IHRydWUsXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSB0eXBlIGlzIGEgc3RyaW5nIHR5cGUuIFNpbmNlIGBzdHJpbmdgIGlzIGEgc2ltcGxlIHR5cGUsIHRoaXNcbiAgICAgKiBpcyBqdXN0IGEgY2hlY2sgaWYgdGhlIHR5cGUgaXMgXCJzdHJpbmdcIi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIHR5cGUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgdHlwZSBpcyBhIHN0cmluZyB0eXBlLlxuICAgICAqL1xuICAgIGlzVHlwZTogKHR5cGUpID0+IHR5cGUgPT09ICdzdHJpbmcnLFxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYnl0ZSBsZW5ndGggb2YgYW4gZW5jb2RlZCBzdHJpbmcgdHlwZS4gU2luY2UgYHN0cmluZ2AgaXMgYSBzaW1wbGVcbiAgICAgKiB0eXBlLCB0aGlzIHdpbGwgYWx3YXlzIHJldHVybiAzMi5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBhY3R1YWwgc3RyaW5ncyBhcmUgdmFyaWFibGUgaW4gbGVuZ3RoLCBidXQgdGhlIGVuY29kZWQgc3RhdGljXG4gICAgICogdmFsdWUgKHBvaW50ZXIpIGlzIGFsd2F5cyAzMiBieXRlcyBsb25nLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGUgbGVuZ3RoIG9mIGFuIGVuY29kZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGdldEJ5dGVMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiAzMjtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEVuY29kZSB0aGUgZ2l2ZW4gc3RyaW5nIHZhbHVlIHRvIGEgYnl0ZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGVuY29kaW5nIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gYXJncy5idWZmZXIgLSBUaGUgYnl0ZSBhcnJheSB0byBhZGQgdG8uXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgc3RyaW5nIHZhbHVlIHRvIGVuY29kZS5cbiAgICAgKiBAcGFyYW0gYXJncy5wYWNrZWQgLSBXaGV0aGVyIHRvIHVzZSBwYWNrZWQgZW5jb2RpbmcuXG4gICAgICogQHBhcmFtIGFyZ3MudGlnaHQgLSBXaGV0aGVyIHRvIHVzZSBub24tc3RhbmRhcmQgdGlnaHQgZW5jb2RpbmcuXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGVzIHdpdGggdGhlIGVuY29kZWQgc3RyaW5nIHZhbHVlIGFkZGVkIHRvIGl0LlxuICAgICAqL1xuICAgIGVuY29kZSh7IGJ1ZmZlciwgdmFsdWUsIHBhY2tlZCwgdGlnaHQgfSkge1xuICAgICAgICAvLyBTdHJpbmdzIGFyZSBlbmNvZGVkIGFzIFVURi04IGJ5dGVzLCBzbyB3ZSB1c2UgdGhlIGJ5dGVzIHBhcnNlciB0byBlbmNvZGVcbiAgICAgICAgLy8gdGhlIHN0cmluZyBhcyBieXRlcy5cbiAgICAgICAgcmV0dXJuIGJ5dGVzXzEuYnl0ZXMuZW5jb2RlKHtcbiAgICAgICAgICAgIHR5cGU6ICdieXRlcycsXG4gICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICB2YWx1ZTogKDAsIHV0aWxzXzEuc3RyaW5nVG9CeXRlcykodmFsdWUpLFxuICAgICAgICAgICAgcGFja2VkLFxuICAgICAgICAgICAgdGlnaHQsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVjb2RlIHRoZSBnaXZlbiBieXRlIGFycmF5IHRvIGEgc3RyaW5nIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgLSBUaGUgZGVjb2RpbmcgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZyB2YWx1ZS5cbiAgICAgKi9cbiAgICBkZWNvZGUoYXJncykge1xuICAgICAgICAvLyBTdHJpbmdzIGFyZSBlbmNvZGVkIGFzIFVURi04IGJ5dGVzLCBzbyB3ZSB1c2UgdGhlIGJ5dGVzIHBhcnNlciB0byBkZWNvZGVcbiAgICAgICAgLy8gdGhlIGJ5dGVzLCBhbmQgY29udmVydCB0aGVtIHRvIGEgc3RyaW5nLlxuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuYnl0ZXNUb1N0cmluZykoYnl0ZXNfMS5ieXRlcy5kZWNvZGUoYXJncykpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/string.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/parsers/tuple.js":
/*!****************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/parsers/tuple.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tuple = exports.getTupleElements = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@metamask/abi-utils/dist/errors.js\");\nconst packer_1 = __webpack_require__(/*! ../packer */ \"./node_modules/@metamask/abi-utils/dist/packer.js\");\nconst TUPLE_REGEX = /^\\((.+)\\)$/u;\nconst isTupleType = (type) => TUPLE_REGEX.test(type);\n/**\n * Get elements from a tuple type.\n *\n * @param type - The tuple type to get the types for.\n * @returns The elements of the tuple as string array.\n */\nconst getTupleElements = (type) => {\n    (0, utils_1.assert)(type.startsWith('(') && type.endsWith(')'), new errors_1.ParserError(`Invalid tuple type. Expected tuple type, but received \"${type}\".`));\n    const elements = [];\n    let current = '';\n    let depth = 0;\n    for (let i = 1; i < type.length - 1; i++) {\n        const char = type[i];\n        if (char === ',' && depth === 0) {\n            elements.push(current.trim());\n            current = '';\n        }\n        else {\n            current += char;\n            if (char === '(') {\n                depth += 1;\n            }\n            else if (char === ')') {\n                depth -= 1;\n            }\n        }\n    }\n    if (current.trim()) {\n        elements.push(current.trim());\n    }\n    return elements;\n};\nexports.getTupleElements = getTupleElements;\nexports.tuple = {\n    /**\n     * Check if the tuple is dynamic. Tuples are dynamic if one or more elements\n     * of the tuple are dynamic.\n     *\n     * @param type - The type to check.\n     * @returns Whether the tuple is dynamic.\n     */\n    isDynamic(type) {\n        const elements = (0, exports.getTupleElements)(type);\n        return elements.some((element) => {\n            const parser = (0, packer_1.getParser)(element);\n            return (0, packer_1.isDynamicParser)(parser, element);\n        });\n    },\n    /**\n     * Check if a type is a tuple type.\n     *\n     * @param type - The type to check.\n     * @returns Whether the type is a tuple type.\n     */\n    isType(type) {\n        return isTupleType(type);\n    },\n    /**\n     * Get the byte length of a tuple type. If the tuple is dynamic, this will\n     * always return 32. If the tuple is static, this will return the sum of the\n     * byte lengths of the tuple elements.\n     *\n     * @param type - The type to get the byte length for.\n     * @returns The byte length of the tuple type.\n     */\n    getByteLength(type) {\n        if ((0, packer_1.isDynamicParser)(this, type)) {\n            return 32;\n        }\n        const elements = (0, exports.getTupleElements)(type);\n        return elements.reduce((total, element) => {\n            return total + (0, packer_1.getParser)(element).getByteLength(element);\n        }, 0);\n    },\n    /**\n     * Encode a tuple value.\n     *\n     * @param args - The encoding arguments.\n     * @param args.type - The type of the value.\n     * @param args.buffer - The byte array to add to.\n     * @param args.value - The value to encode.\n     * @param args.packed - Whether to use non-standard packed encoding.\n     * @param args.tight - Whether to use non-standard tight encoding.\n     * @returns The bytes with the encoded value added to it.\n     */\n    encode({ type, buffer, value, packed, tight }) {\n        const elements = (0, exports.getTupleElements)(type);\n        return (0, packer_1.pack)({\n            types: elements,\n            values: value,\n            byteArray: buffer,\n            packed,\n            tight,\n        });\n    },\n    /**\n     * Decode a tuple value.\n     *\n     * @param args - The decoding arguments.\n     * @param args.type - The type of the value.\n     * @param args.value - The value to decode.\n     * @param args.skip - A function to skip a number of bytes.\n     * @returns The decoded value.\n     */\n    decode({ type, value, skip }) {\n        const elements = (0, exports.getTupleElements)(type);\n        const length = this.getByteLength(type) - 32;\n        skip(length);\n        return (0, packer_1.unpack)(elements, value);\n    },\n};\n//# sourceMappingURL=tuple.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3BhcnNlcnMvdHVwbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLHdCQUF3QjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBaUI7QUFDekMsaUJBQWlCLG1CQUFPLENBQUMsb0VBQVc7QUFDcEMsaUJBQWlCLG1CQUFPLENBQUMsb0VBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUpBQXVKLEtBQUs7QUFDNUo7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9hYmktdXRpbHMvZGlzdC9wYXJzZXJzL3R1cGxlLmpzPzY3YjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnR1cGxlID0gZXhwb3J0cy5nZXRUdXBsZUVsZW1lbnRzID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbWV0YW1hc2svdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCBwYWNrZXJfMSA9IHJlcXVpcmUoXCIuLi9wYWNrZXJcIik7XG5jb25zdCBUVVBMRV9SRUdFWCA9IC9eXFwoKC4rKVxcKSQvdTtcbmNvbnN0IGlzVHVwbGVUeXBlID0gKHR5cGUpID0+IFRVUExFX1JFR0VYLnRlc3QodHlwZSk7XG4vKipcbiAqIEdldCBlbGVtZW50cyBmcm9tIGEgdHVwbGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0gdHlwZSAtIFRoZSB0dXBsZSB0eXBlIHRvIGdldCB0aGUgdHlwZXMgZm9yLlxuICogQHJldHVybnMgVGhlIGVsZW1lbnRzIG9mIHRoZSB0dXBsZSBhcyBzdHJpbmcgYXJyYXkuXG4gKi9cbmNvbnN0IGdldFR1cGxlRWxlbWVudHMgPSAodHlwZSkgPT4ge1xuICAgICgwLCB1dGlsc18xLmFzc2VydCkodHlwZS5zdGFydHNXaXRoKCcoJykgJiYgdHlwZS5lbmRzV2l0aCgnKScpLCBuZXcgZXJyb3JzXzEuUGFyc2VyRXJyb3IoYEludmFsaWQgdHVwbGUgdHlwZS4gRXhwZWN0ZWQgdHVwbGUgdHlwZSwgYnV0IHJlY2VpdmVkIFwiJHt0eXBlfVwiLmApKTtcbiAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgIGxldCBjdXJyZW50ID0gJyc7XG4gICAgbGV0IGRlcHRoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHR5cGUubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoYXIgPSB0eXBlW2ldO1xuICAgICAgICBpZiAoY2hhciA9PT0gJywnICYmIGRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICBlbGVtZW50cy5wdXNoKGN1cnJlbnQudHJpbSgpKTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnQgKz0gY2hhcjtcbiAgICAgICAgICAgIGlmIChjaGFyID09PSAnKCcpIHtcbiAgICAgICAgICAgICAgICBkZXB0aCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJyknKSB7XG4gICAgICAgICAgICAgICAgZGVwdGggLT0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudC50cmltKCkpIHtcbiAgICAgICAgZWxlbWVudHMucHVzaChjdXJyZW50LnRyaW0oKSk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cztcbn07XG5leHBvcnRzLmdldFR1cGxlRWxlbWVudHMgPSBnZXRUdXBsZUVsZW1lbnRzO1xuZXhwb3J0cy50dXBsZSA9IHtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdHVwbGUgaXMgZHluYW1pYy4gVHVwbGVzIGFyZSBkeW5hbWljIGlmIG9uZSBvciBtb3JlIGVsZW1lbnRzXG4gICAgICogb2YgdGhlIHR1cGxlIGFyZSBkeW5hbWljLlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUgLSBUaGUgdHlwZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB0dXBsZSBpcyBkeW5hbWljLlxuICAgICAqL1xuICAgIGlzRHluYW1pYyh0eXBlKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gKDAsIGV4cG9ydHMuZ2V0VHVwbGVFbGVtZW50cykodHlwZSk7XG4gICAgICAgIHJldHVybiBlbGVtZW50cy5zb21lKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZXIgPSAoMCwgcGFja2VyXzEuZ2V0UGFyc2VyKShlbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgcGFja2VyXzEuaXNEeW5hbWljUGFyc2VyKShwYXJzZXIsIGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgdHlwZSBpcyBhIHR1cGxlIHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRoZSB0eXBlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHR5cGUgaXMgYSB0dXBsZSB0eXBlLlxuICAgICAqL1xuICAgIGlzVHlwZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiBpc1R1cGxlVHlwZSh0eXBlKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYnl0ZSBsZW5ndGggb2YgYSB0dXBsZSB0eXBlLiBJZiB0aGUgdHVwbGUgaXMgZHluYW1pYywgdGhpcyB3aWxsXG4gICAgICogYWx3YXlzIHJldHVybiAzMi4gSWYgdGhlIHR1cGxlIGlzIHN0YXRpYywgdGhpcyB3aWxsIHJldHVybiB0aGUgc3VtIG9mIHRoZVxuICAgICAqIGJ5dGUgbGVuZ3RocyBvZiB0aGUgdHVwbGUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHlwZSAtIFRoZSB0eXBlIHRvIGdldCB0aGUgYnl0ZSBsZW5ndGggZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBieXRlIGxlbmd0aCBvZiB0aGUgdHVwbGUgdHlwZS5cbiAgICAgKi9cbiAgICBnZXRCeXRlTGVuZ3RoKHR5cGUpIHtcbiAgICAgICAgaWYgKCgwLCBwYWNrZXJfMS5pc0R5bmFtaWNQYXJzZXIpKHRoaXMsIHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSAoMCwgZXhwb3J0cy5nZXRUdXBsZUVsZW1lbnRzKSh0eXBlKTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzLnJlZHVjZSgodG90YWwsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0b3RhbCArICgwLCBwYWNrZXJfMS5nZXRQYXJzZXIpKGVsZW1lbnQpLmdldEJ5dGVMZW5ndGgoZWxlbWVudCk7XG4gICAgICAgIH0sIDApO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgdHVwbGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBlbmNvZGluZyBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIGFyZ3MudHlwZSAtIFRoZSB0eXBlIG9mIHRoZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gYXJncy5idWZmZXIgLSBUaGUgYnl0ZSBhcnJheSB0byBhZGQgdG8uXG4gICAgICogQHBhcmFtIGFyZ3MudmFsdWUgLSBUaGUgdmFsdWUgdG8gZW5jb2RlLlxuICAgICAqIEBwYXJhbSBhcmdzLnBhY2tlZCAtIFdoZXRoZXIgdG8gdXNlIG5vbi1zdGFuZGFyZCBwYWNrZWQgZW5jb2RpbmcuXG4gICAgICogQHBhcmFtIGFyZ3MudGlnaHQgLSBXaGV0aGVyIHRvIHVzZSBub24tc3RhbmRhcmQgdGlnaHQgZW5jb2RpbmcuXG4gICAgICogQHJldHVybnMgVGhlIGJ5dGVzIHdpdGggdGhlIGVuY29kZWQgdmFsdWUgYWRkZWQgdG8gaXQuXG4gICAgICovXG4gICAgZW5jb2RlKHsgdHlwZSwgYnVmZmVyLCB2YWx1ZSwgcGFja2VkLCB0aWdodCB9KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gKDAsIGV4cG9ydHMuZ2V0VHVwbGVFbGVtZW50cykodHlwZSk7XG4gICAgICAgIHJldHVybiAoMCwgcGFja2VyXzEucGFjaykoe1xuICAgICAgICAgICAgdHlwZXM6IGVsZW1lbnRzLFxuICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZSxcbiAgICAgICAgICAgIGJ5dGVBcnJheTogYnVmZmVyLFxuICAgICAgICAgICAgcGFja2VkLFxuICAgICAgICAgICAgdGlnaHQsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRGVjb2RlIGEgdHVwbGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBkZWNvZGluZyBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIGFyZ3MudHlwZSAtIFRoZSB0eXBlIG9mIHRoZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gYXJncy52YWx1ZSAtIFRoZSB2YWx1ZSB0byBkZWNvZGUuXG4gICAgICogQHBhcmFtIGFyZ3Muc2tpcCAtIEEgZnVuY3Rpb24gdG8gc2tpcCBhIG51bWJlciBvZiBieXRlcy5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGVjb2RlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBkZWNvZGUoeyB0eXBlLCB2YWx1ZSwgc2tpcCB9KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gKDAsIGV4cG9ydHMuZ2V0VHVwbGVFbGVtZW50cykodHlwZSk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ2V0Qnl0ZUxlbmd0aCh0eXBlKSAtIDMyO1xuICAgICAgICBza2lwKGxlbmd0aCk7XG4gICAgICAgIHJldHVybiAoMCwgcGFja2VyXzEudW5wYWNrKShlbGVtZW50cywgdmFsdWUpO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHVwbGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/parsers/tuple.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/types/abi.js":
/*!************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/types/abi.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=abi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3R5cGVzL2FiaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3R5cGVzL2FiaS5qcz9jMzg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/types/abi.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/types/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/types/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./abi */ \"./node_modules/@metamask/abi-utils/dist/types/abi.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxtRUFBTztBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3R5cGVzL2luZGV4LmpzPzhlY2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hYmlcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/types/index.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/utils/buffer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/utils/buffer.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.padEnd = exports.padStart = exports.set = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst BUFFER_WIDTH = 32;\n/**\n * Set `buffer` in `target` at the specified position.\n *\n * @param target - The buffer to set to.\n * @param buffer - The buffer to set in the target.\n * @param position - The position at which to set the target.\n * @returns The combined buffer.\n */\nconst set = (target, buffer, position) => {\n    return (0, utils_1.concatBytes)([\n        target.subarray(0, position),\n        buffer,\n        target.subarray(position + buffer.length),\n    ]);\n};\nexports.set = set;\n/**\n * Add padding to a buffer. If the buffer is larger than `length`, this function won't do anything. If it's smaller, the\n * buffer will be padded to the specified length, with extra zeroes at the start.\n *\n * @param buffer - The buffer to add padding to.\n * @param length - The number of bytes to pad the buffer to.\n * @returns The padded buffer.\n */\nconst padStart = (buffer, length = BUFFER_WIDTH) => {\n    const padding = new Uint8Array(Math.max(length - buffer.length, 0)).fill(0x00);\n    return (0, utils_1.concatBytes)([padding, buffer]);\n};\nexports.padStart = padStart;\n/**\n * Add padding to a buffer. If the buffer is larger than `length`, this function won't do anything. If it's smaller, the\n * buffer will be padded to the specified length, with extra zeroes at the end.\n *\n * @param buffer - The buffer to add padding to.\n * @param length - The number of bytes to pad the buffer to.\n * @returns The padded buffer.\n */\nconst padEnd = (buffer, length = BUFFER_WIDTH) => {\n    const padding = new Uint8Array(Math.max(length - buffer.length, 0)).fill(0x00);\n    return (0, utils_1.concatBytes)([buffer, padding]);\n};\nexports.padEnd = padEnd;\n//# sourceMappingURL=buffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3V0aWxzL2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsV0FBVztBQUMvQyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3V0aWxzL2J1ZmZlci5qcz85MTYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYWRFbmQgPSBleHBvcnRzLnBhZFN0YXJ0ID0gZXhwb3J0cy5zZXQgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBtZXRhbWFzay91dGlsc1wiKTtcbmNvbnN0IEJVRkZFUl9XSURUSCA9IDMyO1xuLyoqXG4gKiBTZXQgYGJ1ZmZlcmAgaW4gYHRhcmdldGAgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIGJ1ZmZlciB0byBzZXQgdG8uXG4gKiBAcGFyYW0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB0byBzZXQgaW4gdGhlIHRhcmdldC5cbiAqIEBwYXJhbSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBhdCB3aGljaCB0byBzZXQgdGhlIHRhcmdldC5cbiAqIEByZXR1cm5zIFRoZSBjb21iaW5lZCBidWZmZXIuXG4gKi9cbmNvbnN0IHNldCA9ICh0YXJnZXQsIGJ1ZmZlciwgcG9zaXRpb24pID0+IHtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuY29uY2F0Qnl0ZXMpKFtcbiAgICAgICAgdGFyZ2V0LnN1YmFycmF5KDAsIHBvc2l0aW9uKSxcbiAgICAgICAgYnVmZmVyLFxuICAgICAgICB0YXJnZXQuc3ViYXJyYXkocG9zaXRpb24gKyBidWZmZXIubGVuZ3RoKSxcbiAgICBdKTtcbn07XG5leHBvcnRzLnNldCA9IHNldDtcbi8qKlxuICogQWRkIHBhZGRpbmcgdG8gYSBidWZmZXIuIElmIHRoZSBidWZmZXIgaXMgbGFyZ2VyIHRoYW4gYGxlbmd0aGAsIHRoaXMgZnVuY3Rpb24gd29uJ3QgZG8gYW55dGhpbmcuIElmIGl0J3Mgc21hbGxlciwgdGhlXG4gKiBidWZmZXIgd2lsbCBiZSBwYWRkZWQgdG8gdGhlIHNwZWNpZmllZCBsZW5ndGgsIHdpdGggZXh0cmEgemVyb2VzIGF0IHRoZSBzdGFydC5cbiAqXG4gKiBAcGFyYW0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB0byBhZGQgcGFkZGluZyB0by5cbiAqIEBwYXJhbSBsZW5ndGggLSBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHBhZCB0aGUgYnVmZmVyIHRvLlxuICogQHJldHVybnMgVGhlIHBhZGRlZCBidWZmZXIuXG4gKi9cbmNvbnN0IHBhZFN0YXJ0ID0gKGJ1ZmZlciwgbGVuZ3RoID0gQlVGRkVSX1dJRFRIKSA9PiB7XG4gICAgY29uc3QgcGFkZGluZyA9IG5ldyBVaW50OEFycmF5KE1hdGgubWF4KGxlbmd0aCAtIGJ1ZmZlci5sZW5ndGgsIDApKS5maWxsKDB4MDApO1xuICAgIHJldHVybiAoMCwgdXRpbHNfMS5jb25jYXRCeXRlcykoW3BhZGRpbmcsIGJ1ZmZlcl0pO1xufTtcbmV4cG9ydHMucGFkU3RhcnQgPSBwYWRTdGFydDtcbi8qKlxuICogQWRkIHBhZGRpbmcgdG8gYSBidWZmZXIuIElmIHRoZSBidWZmZXIgaXMgbGFyZ2VyIHRoYW4gYGxlbmd0aGAsIHRoaXMgZnVuY3Rpb24gd29uJ3QgZG8gYW55dGhpbmcuIElmIGl0J3Mgc21hbGxlciwgdGhlXG4gKiBidWZmZXIgd2lsbCBiZSBwYWRkZWQgdG8gdGhlIHNwZWNpZmllZCBsZW5ndGgsIHdpdGggZXh0cmEgemVyb2VzIGF0IHRoZSBlbmQuXG4gKlxuICogQHBhcmFtIGJ1ZmZlciAtIFRoZSBidWZmZXIgdG8gYWRkIHBhZGRpbmcgdG8uXG4gKiBAcGFyYW0gbGVuZ3RoIC0gVGhlIG51bWJlciBvZiBieXRlcyB0byBwYWQgdGhlIGJ1ZmZlciB0by5cbiAqIEByZXR1cm5zIFRoZSBwYWRkZWQgYnVmZmVyLlxuICovXG5jb25zdCBwYWRFbmQgPSAoYnVmZmVyLCBsZW5ndGggPSBCVUZGRVJfV0lEVEgpID0+IHtcbiAgICBjb25zdCBwYWRkaW5nID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5tYXgobGVuZ3RoIC0gYnVmZmVyLmxlbmd0aCwgMCkpLmZpbGwoMHgwMCk7XG4gICAgcmV0dXJuICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKShbYnVmZmVyLCBwYWRkaW5nXSk7XG59O1xuZXhwb3J0cy5wYWRFbmQgPSBwYWRFbmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/utils/buffer.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/dist/utils/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/dist/utils/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./buffer */ \"./node_modules/@metamask/abi-utils/dist/utils/buffer.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3V0aWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx5RUFBVTtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2FiaS11dGlscy9kaXN0L3V0aWxzL2luZGV4LmpzPzk3MjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9idWZmZXJcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/dist/utils/index.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/eth-sig-util/dist/encryption.js":
/*!****************************************************************!*\
  !*** ./node_modules/@metamask/eth-sig-util/dist/encryption.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = void 0;\nconst nacl = __importStar(__webpack_require__(/*! tweetnacl */ \"./node_modules/tweetnacl/nacl-fast.js\"));\nconst naclUtil = __importStar(__webpack_require__(/*! tweetnacl-util */ \"./node_modules/tweetnacl-util/nacl-util.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@metamask/eth-sig-util/dist/utils.js\");\n/**\n * Encrypt a message.\n *\n * @param options - The encryption options.\n * @param options.publicKey - The public key of the message recipient.\n * @param options.data - The message data.\n * @param options.version - The type of encryption to use.\n * @returns The encrypted data.\n */\nfunction encrypt({ publicKey, data, version, }) {\n    if ((0, utils_1.isNullish)(publicKey)) {\n        throw new Error('Missing publicKey parameter');\n    }\n    else if ((0, utils_1.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_1.isNullish)(version)) {\n        throw new Error('Missing version parameter');\n    }\n    switch (version) {\n        case 'x25519-xsalsa20-poly1305': {\n            if (typeof data !== 'string') {\n                throw new Error('Message data must be given as a string');\n            }\n            // generate ephemeral keypair\n            const ephemeralKeyPair = nacl.box.keyPair();\n            // assemble encryption parameters - from string to UInt8\n            let pubKeyUInt8Array;\n            try {\n                pubKeyUInt8Array = naclUtil.decodeBase64(publicKey);\n            }\n            catch (err) {\n                throw new Error('Bad public key');\n            }\n            const msgParamsUInt8Array = naclUtil.decodeUTF8(data);\n            const nonce = nacl.randomBytes(nacl.box.nonceLength);\n            // encrypt\n            const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n            // handle encrypted data\n            const output = {\n                version: 'x25519-xsalsa20-poly1305',\n                nonce: naclUtil.encodeBase64(nonce),\n                ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n                ciphertext: naclUtil.encodeBase64(encryptedMessage),\n            };\n            // return encrypted msg data\n            return output;\n        }\n        default:\n            throw new Error('Encryption type/version not supported');\n    }\n}\nexports.encrypt = encrypt;\n/**\n * Encrypt a message in a way that obscures the message length.\n *\n * The message is padded to a multiple of 2048 before being encrypted so that the length of the\n * resulting encrypted message can't be used to guess the exact length of the original message.\n *\n * @param options - The encryption options.\n * @param options.publicKey - The public key of the message recipient.\n * @param options.data - The message data.\n * @param options.version - The type of encryption to use.\n * @returns The encrypted data.\n */\nfunction encryptSafely({ publicKey, data, version, }) {\n    if ((0, utils_1.isNullish)(publicKey)) {\n        throw new Error('Missing publicKey parameter');\n    }\n    else if ((0, utils_1.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_1.isNullish)(version)) {\n        throw new Error('Missing version parameter');\n    }\n    const DEFAULT_PADDING_LENGTH = 2 ** 11;\n    const NACL_EXTRA_BYTES = 16;\n    if (typeof data === 'object' && data && 'toJSON' in data) {\n        // remove toJSON attack vector\n        // TODO, check all possible children\n        throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    }\n    // add padding\n    const dataWithPadding = {\n        data,\n        padding: '',\n    };\n    // calculate padding\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    const modVal = dataLength % DEFAULT_PADDING_LENGTH;\n    let padLength = 0;\n    // Only pad if necessary\n    if (modVal > 0) {\n        padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength);\n    const paddedMessage = JSON.stringify(dataWithPadding);\n    return encrypt({ publicKey, data: paddedMessage, version });\n}\nexports.encryptSafely = encryptSafely;\n/**\n * Decrypt a message.\n *\n * @param options - The decryption options.\n * @param options.encryptedData - The encrypted data.\n * @param options.privateKey - The private key to decrypt with.\n * @returns The decrypted message.\n */\nfunction decrypt({ encryptedData, privateKey, }) {\n    if ((0, utils_1.isNullish)(encryptedData)) {\n        throw new Error('Missing encryptedData parameter');\n    }\n    else if ((0, utils_1.isNullish)(privateKey)) {\n        throw new Error('Missing privateKey parameter');\n    }\n    switch (encryptedData.version) {\n        case 'x25519-xsalsa20-poly1305': {\n            // string to buffer to UInt8Array\n            const receiverPrivateKeyUint8Array = naclDecodeHex(privateKey);\n            const receiverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(receiverPrivateKeyUint8Array).secretKey;\n            // assemble decryption parameters\n            const nonce = naclUtil.decodeBase64(encryptedData.nonce);\n            const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n            const ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);\n            // decrypt\n            const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, receiverEncryptionPrivateKey);\n            // return decrypted msg data\n            try {\n                if (!decryptedMessage) {\n                    throw new Error();\n                }\n                const output = naclUtil.encodeUTF8(decryptedMessage);\n                // TODO: This is probably extraneous but was kept to minimize changes during refactor\n                if (!output) {\n                    throw new Error();\n                }\n                return output;\n            }\n            catch (err) {\n                if (err && typeof err.message === 'string' && err.message.length) {\n                    throw new Error(`Decryption failed: ${err.message}`);\n                }\n                throw new Error(`Decryption failed.`);\n            }\n        }\n        default:\n            throw new Error('Encryption type/version not supported.');\n    }\n}\nexports.decrypt = decrypt;\n/**\n * Decrypt a message that has been encrypted using `encryptSafely`.\n *\n * @param options - The decryption options.\n * @param options.encryptedData - The encrypted data.\n * @param options.privateKey - The private key to decrypt with.\n * @returns The decrypted message.\n */\nfunction decryptSafely({ encryptedData, privateKey, }) {\n    if ((0, utils_1.isNullish)(encryptedData)) {\n        throw new Error('Missing encryptedData parameter');\n    }\n    else if ((0, utils_1.isNullish)(privateKey)) {\n        throw new Error('Missing privateKey parameter');\n    }\n    const dataWithPadding = JSON.parse(decrypt({ encryptedData, privateKey }));\n    return dataWithPadding.data;\n}\nexports.decryptSafely = decryptSafely;\n/**\n * Get the encryption public key for the given key.\n *\n * @param privateKey - The private key to generate the encryption public key with.\n * @returns The encryption public key.\n */\nfunction getEncryptionPublicKey(privateKey) {\n    const privateKeyUint8Array = naclDecodeHex(privateKey);\n    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n    return naclUtil.encodeBase64(encryptionPublicKey);\n}\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * Convert a hex string to the UInt8Array format used by nacl.\n *\n * @param msgHex - The string to convert.\n * @returns The converted string.\n */\nfunction naclDecodeHex(msgHex) {\n    const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n    return naclUtil.decodeBase64(msgBase64);\n}\n//# sourceMappingURL=encryption.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC1zaWctdXRpbC9kaXN0L2VuY3J5cHRpb24uanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyxxQkFBcUIsR0FBRyxlQUFlLEdBQUcscUJBQXFCLEdBQUcsZUFBZTtBQUNsSCwwQkFBMEIsbUJBQU8sQ0FBQyx3REFBVztBQUM3Qyw4QkFBOEIsbUJBQU8sQ0FBQyxrRUFBZ0I7QUFDdEQsZ0JBQWdCLG1CQUFPLENBQUMsb0VBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDJCQUEyQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDJCQUEyQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixNQUFNO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5Q0FBeUM7QUFDOUQ7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0QkFBNEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsWUFBWTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNEJBQTRCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCwyQkFBMkI7QUFDNUU7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE1BQU07QUFDNUI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXNpZy11dGlsL2Rpc3QvZW5jcnlwdGlvbi5qcz9mY2M1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVuY3J5cHRpb25QdWJsaWNLZXkgPSBleHBvcnRzLmRlY3J5cHRTYWZlbHkgPSBleHBvcnRzLmRlY3J5cHQgPSBleHBvcnRzLmVuY3J5cHRTYWZlbHkgPSBleHBvcnRzLmVuY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBuYWNsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJ0d2VldG5hY2xcIikpO1xuY29uc3QgbmFjbFV0aWwgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInR3ZWV0bmFjbC11dGlsXCIpKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbi8qKlxuICogRW5jcnlwdCBhIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgZW5jcnlwdGlvbiBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMucHVibGljS2V5IC0gVGhlIHB1YmxpYyBrZXkgb2YgdGhlIG1lc3NhZ2UgcmVjaXBpZW50LlxuICogQHBhcmFtIG9wdGlvbnMuZGF0YSAtIFRoZSBtZXNzYWdlIGRhdGEuXG4gKiBAcGFyYW0gb3B0aW9ucy52ZXJzaW9uIC0gVGhlIHR5cGUgb2YgZW5jcnlwdGlvbiB0byB1c2UuXG4gKiBAcmV0dXJucyBUaGUgZW5jcnlwdGVkIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGVuY3J5cHQoeyBwdWJsaWNLZXksIGRhdGEsIHZlcnNpb24sIH0pIHtcbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNOdWxsaXNoKShwdWJsaWNLZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwdWJsaWNLZXkgcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCB1dGlsc18xLmlzTnVsbGlzaCkoZGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGRhdGEgcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCB1dGlsc18xLmlzTnVsbGlzaCkodmVyc2lvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHZlcnNpb24gcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgICAgICBjYXNlICd4MjU1MTkteHNhbHNhMjAtcG9seTEzMDUnOiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGRhdGEgbXVzdCBiZSBnaXZlbiBhcyBhIHN0cmluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgZXBoZW1lcmFsIGtleXBhaXJcbiAgICAgICAgICAgIGNvbnN0IGVwaGVtZXJhbEtleVBhaXIgPSBuYWNsLmJveC5rZXlQYWlyKCk7XG4gICAgICAgICAgICAvLyBhc3NlbWJsZSBlbmNyeXB0aW9uIHBhcmFtZXRlcnMgLSBmcm9tIHN0cmluZyB0byBVSW50OFxuICAgICAgICAgICAgbGV0IHB1YktleVVJbnQ4QXJyYXk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHB1YktleVVJbnQ4QXJyYXkgPSBuYWNsVXRpbC5kZWNvZGVCYXNlNjQocHVibGljS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhZCBwdWJsaWMga2V5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtc2dQYXJhbXNVSW50OEFycmF5ID0gbmFjbFV0aWwuZGVjb2RlVVRGOChkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IG5vbmNlID0gbmFjbC5yYW5kb21CeXRlcyhuYWNsLmJveC5ub25jZUxlbmd0aCk7XG4gICAgICAgICAgICAvLyBlbmNyeXB0XG4gICAgICAgICAgICBjb25zdCBlbmNyeXB0ZWRNZXNzYWdlID0gbmFjbC5ib3gobXNnUGFyYW1zVUludDhBcnJheSwgbm9uY2UsIHB1YktleVVJbnQ4QXJyYXksIGVwaGVtZXJhbEtleVBhaXIuc2VjcmV0S2V5KTtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBlbmNyeXB0ZWQgZGF0YVxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0ge1xuICAgICAgICAgICAgICAgIHZlcnNpb246ICd4MjU1MTkteHNhbHNhMjAtcG9seTEzMDUnLFxuICAgICAgICAgICAgICAgIG5vbmNlOiBuYWNsVXRpbC5lbmNvZGVCYXNlNjQobm9uY2UpLFxuICAgICAgICAgICAgICAgIGVwaGVtUHVibGljS2V5OiBuYWNsVXRpbC5lbmNvZGVCYXNlNjQoZXBoZW1lcmFsS2V5UGFpci5wdWJsaWNLZXkpLFxuICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IG5hY2xVdGlsLmVuY29kZUJhc2U2NChlbmNyeXB0ZWRNZXNzYWdlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyByZXR1cm4gZW5jcnlwdGVkIG1zZyBkYXRhXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY3J5cHRpb24gdHlwZS92ZXJzaW9uIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG59XG5leHBvcnRzLmVuY3J5cHQgPSBlbmNyeXB0O1xuLyoqXG4gKiBFbmNyeXB0IGEgbWVzc2FnZSBpbiBhIHdheSB0aGF0IG9ic2N1cmVzIHRoZSBtZXNzYWdlIGxlbmd0aC5cbiAqXG4gKiBUaGUgbWVzc2FnZSBpcyBwYWRkZWQgdG8gYSBtdWx0aXBsZSBvZiAyMDQ4IGJlZm9yZSBiZWluZyBlbmNyeXB0ZWQgc28gdGhhdCB0aGUgbGVuZ3RoIG9mIHRoZVxuICogcmVzdWx0aW5nIGVuY3J5cHRlZCBtZXNzYWdlIGNhbid0IGJlIHVzZWQgdG8gZ3Vlc3MgdGhlIGV4YWN0IGxlbmd0aCBvZiB0aGUgb3JpZ2luYWwgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBlbmNyeXB0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucy5wdWJsaWNLZXkgLSBUaGUgcHVibGljIGtleSBvZiB0aGUgbWVzc2FnZSByZWNpcGllbnQuXG4gKiBAcGFyYW0gb3B0aW9ucy5kYXRhIC0gVGhlIG1lc3NhZ2UgZGF0YS5cbiAqIEBwYXJhbSBvcHRpb25zLnZlcnNpb24gLSBUaGUgdHlwZSBvZiBlbmNyeXB0aW9uIHRvIHVzZS5cbiAqIEByZXR1cm5zIFRoZSBlbmNyeXB0ZWQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZW5jcnlwdFNhZmVseSh7IHB1YmxpY0tleSwgZGF0YSwgdmVyc2lvbiwgfSkge1xuICAgIGlmICgoMCwgdXRpbHNfMS5pc051bGxpc2gpKHB1YmxpY0tleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHB1YmxpY0tleSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHV0aWxzXzEuaXNOdWxsaXNoKShkYXRhKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZGF0YSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHV0aWxzXzEuaXNOdWxsaXNoKSh2ZXJzaW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgdmVyc2lvbiBwYXJhbWV0ZXInKTtcbiAgICB9XG4gICAgY29uc3QgREVGQVVMVF9QQURESU5HX0xFTkdUSCA9IDIgKiogMTE7XG4gICAgY29uc3QgTkFDTF9FWFRSQV9CWVRFUyA9IDE2O1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSAmJiAndG9KU09OJyBpbiBkYXRhKSB7XG4gICAgICAgIC8vIHJlbW92ZSB0b0pTT04gYXR0YWNrIHZlY3RvclxuICAgICAgICAvLyBUT0RPLCBjaGVjayBhbGwgcG9zc2libGUgY2hpbGRyZW5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZW5jcnlwdCB3aXRoIHRvSlNPTiBwcm9wZXJ0eS4gIFBsZWFzZSByZW1vdmUgdG9KU09OIHByb3BlcnR5Jyk7XG4gICAgfVxuICAgIC8vIGFkZCBwYWRkaW5nXG4gICAgY29uc3QgZGF0YVdpdGhQYWRkaW5nID0ge1xuICAgICAgICBkYXRhLFxuICAgICAgICBwYWRkaW5nOiAnJyxcbiAgICB9O1xuICAgIC8vIGNhbGN1bGF0ZSBwYWRkaW5nXG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKEpTT04uc3RyaW5naWZ5KGRhdGFXaXRoUGFkZGluZyksICd1dGYtOCcpO1xuICAgIGNvbnN0IG1vZFZhbCA9IGRhdGFMZW5ndGggJSBERUZBVUxUX1BBRERJTkdfTEVOR1RIO1xuICAgIGxldCBwYWRMZW5ndGggPSAwO1xuICAgIC8vIE9ubHkgcGFkIGlmIG5lY2Vzc2FyeVxuICAgIGlmIChtb2RWYWwgPiAwKSB7XG4gICAgICAgIHBhZExlbmd0aCA9IERFRkFVTFRfUEFERElOR19MRU5HVEggLSBtb2RWYWwgLSBOQUNMX0VYVFJBX0JZVEVTOyAvLyBuYWNsIGV4dHJhIGJ5dGVzXG4gICAgfVxuICAgIGRhdGFXaXRoUGFkZGluZy5wYWRkaW5nID0gJzAnLnJlcGVhdChwYWRMZW5ndGgpO1xuICAgIGNvbnN0IHBhZGRlZE1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShkYXRhV2l0aFBhZGRpbmcpO1xuICAgIHJldHVybiBlbmNyeXB0KHsgcHVibGljS2V5LCBkYXRhOiBwYWRkZWRNZXNzYWdlLCB2ZXJzaW9uIH0pO1xufVxuZXhwb3J0cy5lbmNyeXB0U2FmZWx5ID0gZW5jcnlwdFNhZmVseTtcbi8qKlxuICogRGVjcnlwdCBhIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgZGVjcnlwdGlvbiBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMuZW5jcnlwdGVkRGF0YSAtIFRoZSBlbmNyeXB0ZWQgZGF0YS5cbiAqIEBwYXJhbSBvcHRpb25zLnByaXZhdGVLZXkgLSBUaGUgcHJpdmF0ZSBrZXkgdG8gZGVjcnlwdCB3aXRoLlxuICogQHJldHVybnMgVGhlIGRlY3J5cHRlZCBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBkZWNyeXB0KHsgZW5jcnlwdGVkRGF0YSwgcHJpdmF0ZUtleSwgfSkge1xuICAgIGlmICgoMCwgdXRpbHNfMS5pc051bGxpc2gpKGVuY3J5cHRlZERhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBlbmNyeXB0ZWREYXRhIHBhcmFtZXRlcicpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgdXRpbHNfMS5pc051bGxpc2gpKHByaXZhdGVLZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBwcml2YXRlS2V5IHBhcmFtZXRlcicpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGVuY3J5cHRlZERhdGEudmVyc2lvbikge1xuICAgICAgICBjYXNlICd4MjU1MTkteHNhbHNhMjAtcG9seTEzMDUnOiB7XG4gICAgICAgICAgICAvLyBzdHJpbmcgdG8gYnVmZmVyIHRvIFVJbnQ4QXJyYXlcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVyUHJpdmF0ZUtleVVpbnQ4QXJyYXkgPSBuYWNsRGVjb2RlSGV4KHByaXZhdGVLZXkpO1xuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZXJFbmNyeXB0aW9uUHJpdmF0ZUtleSA9IG5hY2wuYm94LmtleVBhaXIuZnJvbVNlY3JldEtleShyZWNlaXZlclByaXZhdGVLZXlVaW50OEFycmF5KS5zZWNyZXRLZXk7XG4gICAgICAgICAgICAvLyBhc3NlbWJsZSBkZWNyeXB0aW9uIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIGNvbnN0IG5vbmNlID0gbmFjbFV0aWwuZGVjb2RlQmFzZTY0KGVuY3J5cHRlZERhdGEubm9uY2UpO1xuICAgICAgICAgICAgY29uc3QgY2lwaGVydGV4dCA9IG5hY2xVdGlsLmRlY29kZUJhc2U2NChlbmNyeXB0ZWREYXRhLmNpcGhlcnRleHQpO1xuICAgICAgICAgICAgY29uc3QgZXBoZW1QdWJsaWNLZXkgPSBuYWNsVXRpbC5kZWNvZGVCYXNlNjQoZW5jcnlwdGVkRGF0YS5lcGhlbVB1YmxpY0tleSk7XG4gICAgICAgICAgICAvLyBkZWNyeXB0XG4gICAgICAgICAgICBjb25zdCBkZWNyeXB0ZWRNZXNzYWdlID0gbmFjbC5ib3gub3BlbihjaXBoZXJ0ZXh0LCBub25jZSwgZXBoZW1QdWJsaWNLZXksIHJlY2VpdmVyRW5jcnlwdGlvblByaXZhdGVLZXkpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGRlY3J5cHRlZCBtc2cgZGF0YVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWRlY3J5cHRlZE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IG5hY2xVdGlsLmVuY29kZVVURjgoZGVjcnlwdGVkTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBpcyBwcm9iYWJseSBleHRyYW5lb3VzIGJ1dCB3YXMga2VwdCB0byBtaW5pbWl6ZSBjaGFuZ2VzIGR1cmluZyByZWZhY3RvclxuICAgICAgICAgICAgICAgIGlmICghb3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgJiYgdHlwZW9mIGVyci5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiBlcnIubWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEZWNyeXB0aW9uIGZhaWxlZDogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEZWNyeXB0aW9uIGZhaWxlZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmNyeXB0aW9uIHR5cGUvdmVyc2lvbiBub3Qgc3VwcG9ydGVkLicpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVjcnlwdCA9IGRlY3J5cHQ7XG4vKipcbiAqIERlY3J5cHQgYSBtZXNzYWdlIHRoYXQgaGFzIGJlZW4gZW5jcnlwdGVkIHVzaW5nIGBlbmNyeXB0U2FmZWx5YC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBkZWNyeXB0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucy5lbmNyeXB0ZWREYXRhIC0gVGhlIGVuY3J5cHRlZCBkYXRhLlxuICogQHBhcmFtIG9wdGlvbnMucHJpdmF0ZUtleSAtIFRoZSBwcml2YXRlIGtleSB0byBkZWNyeXB0IHdpdGguXG4gKiBAcmV0dXJucyBUaGUgZGVjcnlwdGVkIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIGRlY3J5cHRTYWZlbHkoeyBlbmNyeXB0ZWREYXRhLCBwcml2YXRlS2V5LCB9KSB7XG4gICAgaWYgKCgwLCB1dGlsc18xLmlzTnVsbGlzaCkoZW5jcnlwdGVkRGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGVuY3J5cHRlZERhdGEgcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCB1dGlsc18xLmlzTnVsbGlzaCkocHJpdmF0ZUtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHByaXZhdGVLZXkgcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGFXaXRoUGFkZGluZyA9IEpTT04ucGFyc2UoZGVjcnlwdCh7IGVuY3J5cHRlZERhdGEsIHByaXZhdGVLZXkgfSkpO1xuICAgIHJldHVybiBkYXRhV2l0aFBhZGRpbmcuZGF0YTtcbn1cbmV4cG9ydHMuZGVjcnlwdFNhZmVseSA9IGRlY3J5cHRTYWZlbHk7XG4vKipcbiAqIEdldCB0aGUgZW5jcnlwdGlvbiBwdWJsaWMga2V5IGZvciB0aGUgZ2l2ZW4ga2V5LlxuICpcbiAqIEBwYXJhbSBwcml2YXRlS2V5IC0gVGhlIHByaXZhdGUga2V5IHRvIGdlbmVyYXRlIHRoZSBlbmNyeXB0aW9uIHB1YmxpYyBrZXkgd2l0aC5cbiAqIEByZXR1cm5zIFRoZSBlbmNyeXB0aW9uIHB1YmxpYyBrZXkuXG4gKi9cbmZ1bmN0aW9uIGdldEVuY3J5cHRpb25QdWJsaWNLZXkocHJpdmF0ZUtleSkge1xuICAgIGNvbnN0IHByaXZhdGVLZXlVaW50OEFycmF5ID0gbmFjbERlY29kZUhleChwcml2YXRlS2V5KTtcbiAgICBjb25zdCBlbmNyeXB0aW9uUHVibGljS2V5ID0gbmFjbC5ib3gua2V5UGFpci5mcm9tU2VjcmV0S2V5KHByaXZhdGVLZXlVaW50OEFycmF5KS5wdWJsaWNLZXk7XG4gICAgcmV0dXJuIG5hY2xVdGlsLmVuY29kZUJhc2U2NChlbmNyeXB0aW9uUHVibGljS2V5KTtcbn1cbmV4cG9ydHMuZ2V0RW5jcnlwdGlvblB1YmxpY0tleSA9IGdldEVuY3J5cHRpb25QdWJsaWNLZXk7XG4vKipcbiAqIENvbnZlcnQgYSBoZXggc3RyaW5nIHRvIHRoZSBVSW50OEFycmF5IGZvcm1hdCB1c2VkIGJ5IG5hY2wuXG4gKlxuICogQHBhcmFtIG1zZ0hleCAtIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBuYWNsRGVjb2RlSGV4KG1zZ0hleCkge1xuICAgIGNvbnN0IG1zZ0Jhc2U2NCA9IEJ1ZmZlci5mcm9tKG1zZ0hleCwgJ2hleCcpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICByZXR1cm4gbmFjbFV0aWwuZGVjb2RlQmFzZTY0KG1zZ0Jhc2U2NCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNyeXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@metamask/eth-sig-util/dist/encryption.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/eth-sig-util/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@metamask/eth-sig-util/dist/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.normalize = exports.concatSig = void 0;\n__exportStar(__webpack_require__(/*! ./personal-sign */ \"./node_modules/@metamask/eth-sig-util/dist/personal-sign.js\"), exports);\n__exportStar(__webpack_require__(/*! ./sign-typed-data */ \"./node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js\"), exports);\n__exportStar(__webpack_require__(/*! ./encryption */ \"./node_modules/@metamask/eth-sig-util/dist/encryption.js\"), exports);\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@metamask/eth-sig-util/dist/utils.js\");\nObject.defineProperty(exports, \"concatSig\", ({ enumerable: true, get: function () { return utils_1.concatSig; } }));\nObject.defineProperty(exports, \"normalize\", ({ enumerable: true, get: function () { return utils_1.normalize; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC1zaWctdXRpbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLGlCQUFpQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyx3RkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLDhFQUFjO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQyxvRUFBUztBQUMvQiw2Q0FBNEMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDakgsNkNBQTRDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2pIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXNpZy11dGlsL2Rpc3QvaW5kZXguanM/MDhjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub3JtYWxpemUgPSBleHBvcnRzLmNvbmNhdFNpZyA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wZXJzb25hbC1zaWduXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zaWduLXR5cGVkLWRhdGFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuY3J5cHRpb25cIiksIGV4cG9ydHMpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdFNpZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5jb25jYXRTaWc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJub3JtYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEubm9ybWFsaXplOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@metamask/eth-sig-util/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/eth-sig-util/dist/personal-sign.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@metamask/eth-sig-util/dist/personal-sign.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = void 0;\nconst util_1 = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@ethereumjs/util/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@metamask/eth-sig-util/dist/utils.js\");\n/**\n * Create an Ethereum-specific signature for a message.\n *\n * This function is equivalent to the `eth_sign` Ethereum JSON-RPC method as specified in EIP-1417,\n * as well as the MetaMask's `personal_sign` method.\n *\n * @param options - The personal sign options.\n * @param options.privateKey - The key to sign with.\n * @param options.data - The hex data to sign.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction personalSign({ privateKey, data, }) {\n    if ((0, utils_1.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_1.isNullish)(privateKey)) {\n        throw new Error('Missing privateKey parameter');\n    }\n    const message = (0, utils_1.legacyToBuffer)(data);\n    const msgHash = (0, util_1.hashPersonalMessage)(message);\n    const sig = (0, util_1.ecsign)(msgHash, privateKey);\n    const serialized = (0, utils_1.concatSig)((0, util_1.toBuffer)(sig.v), sig.r, sig.s);\n    return serialized;\n}\nexports.personalSign = personalSign;\n/**\n * Recover the address of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The signature recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded address of the message signer.\n */\nfunction recoverPersonalSignature({ data, signature, }) {\n    if ((0, utils_1.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_1.isNullish)(signature)) {\n        throw new Error('Missing signature parameter');\n    }\n    const publicKey = getPublicKeyFor(data, signature);\n    const sender = (0, util_1.publicToAddress)(publicKey);\n    const senderHex = (0, util_1.bufferToHex)(sender);\n    return senderHex;\n}\nexports.recoverPersonalSignature = recoverPersonalSignature;\n/**\n * Recover the public key of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The public key recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded public key of the message signer.\n */\nfunction extractPublicKey({ data, signature, }) {\n    if ((0, utils_1.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_1.isNullish)(signature)) {\n        throw new Error('Missing signature parameter');\n    }\n    const publicKey = getPublicKeyFor(data, signature);\n    return `0x${publicKey.toString('hex')}`;\n}\nexports.extractPublicKey = extractPublicKey;\n/**\n * Get the public key for the given signature and message.\n *\n * @param message - The message that was signed.\n * @param signature - The '0x'-prefixed hex encoded message signature.\n * @returns The public key of the signer.\n */\nfunction getPublicKeyFor(message, signature) {\n    const messageHash = (0, util_1.hashPersonalMessage)((0, utils_1.legacyToBuffer)(message));\n    return (0, utils_1.recoverPublicKey)(messageHash, signature);\n}\n//# sourceMappingURL=personal-sign.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC1zaWctdXRpbC9kaXN0L3BlcnNvbmFsLXNpZ24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsZ0NBQWdDLEdBQUcsb0JBQW9CO0FBQ2xGLGVBQWUsbUJBQU8sQ0FBQyx1RUFBa0I7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsb0VBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9ldGgtc2lnLXV0aWwvZGlzdC9wZXJzb25hbC1zaWduLmpzP2MwZjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dHJhY3RQdWJsaWNLZXkgPSBleHBvcnRzLnJlY292ZXJQZXJzb25hbFNpZ25hdHVyZSA9IGV4cG9ydHMucGVyc29uYWxTaWduID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIkBldGhlcmV1bWpzL3V0aWxcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vKipcbiAqIENyZWF0ZSBhbiBFdGhlcmV1bS1zcGVjaWZpYyBzaWduYXR1cmUgZm9yIGEgbWVzc2FnZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGBldGhfc2lnbmAgRXRoZXJldW0gSlNPTi1SUEMgbWV0aG9kIGFzIHNwZWNpZmllZCBpbiBFSVAtMTQxNyxcbiAqIGFzIHdlbGwgYXMgdGhlIE1ldGFNYXNrJ3MgYHBlcnNvbmFsX3NpZ25gIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBwZXJzb25hbCBzaWduIG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucy5wcml2YXRlS2V5IC0gVGhlIGtleSB0byBzaWduIHdpdGguXG4gKiBAcGFyYW0gb3B0aW9ucy5kYXRhIC0gVGhlIGhleCBkYXRhIHRvIHNpZ24uXG4gKiBAcmV0dXJucyBUaGUgJzB4Jy1wcmVmaXhlZCBoZXggZW5jb2RlZCBzaWduYXR1cmUuXG4gKi9cbmZ1bmN0aW9uIHBlcnNvbmFsU2lnbih7IHByaXZhdGVLZXksIGRhdGEsIH0pIHtcbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNOdWxsaXNoKShkYXRhKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZGF0YSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHV0aWxzXzEuaXNOdWxsaXNoKShwcml2YXRlS2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcHJpdmF0ZUtleSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9ICgwLCB1dGlsc18xLmxlZ2FjeVRvQnVmZmVyKShkYXRhKTtcbiAgICBjb25zdCBtc2dIYXNoID0gKDAsIHV0aWxfMS5oYXNoUGVyc29uYWxNZXNzYWdlKShtZXNzYWdlKTtcbiAgICBjb25zdCBzaWcgPSAoMCwgdXRpbF8xLmVjc2lnbikobXNnSGFzaCwgcHJpdmF0ZUtleSk7XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9ICgwLCB1dGlsc18xLmNvbmNhdFNpZykoKDAsIHV0aWxfMS50b0J1ZmZlcikoc2lnLnYpLCBzaWcuciwgc2lnLnMpO1xuICAgIHJldHVybiBzZXJpYWxpemVkO1xufVxuZXhwb3J0cy5wZXJzb25hbFNpZ24gPSBwZXJzb25hbFNpZ247XG4vKipcbiAqIFJlY292ZXIgdGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdXNlZCB0byBjcmVhdGUgdGhlIGdpdmVuIEV0aGVyZXVtIHNpZ25hdHVyZS4gVGhlIG1lc3NhZ2VcbiAqIG11c3QgaGF2ZSBiZWVuIHNpZ25lZCB1c2luZyB0aGUgYHBlcnNvbmFsU2lnbmAgZnVuY3Rpb24sIG9yIGFuIGVxdWl2YWxlbnQgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgc2lnbmF0dXJlIHJlY292ZXJ5IG9wdGlvbnMuXG4gKiBAcGFyYW0gb3B0aW9ucy5kYXRhIC0gVGhlIGhleCBkYXRhIHRoYXQgd2FzIHNpZ25lZC5cbiAqIEBwYXJhbSBvcHRpb25zLnNpZ25hdHVyZSAtIFRoZSAnMHgnLXByZWZpeGVkIGhleCBlbmNvZGVkIG1lc3NhZ2Ugc2lnbmF0dXJlLlxuICogQHJldHVybnMgVGhlICcweCctcHJlZml4ZWQgaGV4IGVuY29kZWQgYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzaWduZXIuXG4gKi9cbmZ1bmN0aW9uIHJlY292ZXJQZXJzb25hbFNpZ25hdHVyZSh7IGRhdGEsIHNpZ25hdHVyZSwgfSkge1xuICAgIGlmICgoMCwgdXRpbHNfMS5pc051bGxpc2gpKGRhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBkYXRhIHBhcmFtZXRlcicpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgdXRpbHNfMS5pc051bGxpc2gpKHNpZ25hdHVyZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHNpZ25hdHVyZSBwYXJhbWV0ZXInKTtcbiAgICB9XG4gICAgY29uc3QgcHVibGljS2V5ID0gZ2V0UHVibGljS2V5Rm9yKGRhdGEsIHNpZ25hdHVyZSk7XG4gICAgY29uc3Qgc2VuZGVyID0gKDAsIHV0aWxfMS5wdWJsaWNUb0FkZHJlc3MpKHB1YmxpY0tleSk7XG4gICAgY29uc3Qgc2VuZGVySGV4ID0gKDAsIHV0aWxfMS5idWZmZXJUb0hleCkoc2VuZGVyKTtcbiAgICByZXR1cm4gc2VuZGVySGV4O1xufVxuZXhwb3J0cy5yZWNvdmVyUGVyc29uYWxTaWduYXR1cmUgPSByZWNvdmVyUGVyc29uYWxTaWduYXR1cmU7XG4vKipcbiAqIFJlY292ZXIgdGhlIHB1YmxpYyBrZXkgb2YgdGhlIGFjY291bnQgdXNlZCB0byBjcmVhdGUgdGhlIGdpdmVuIEV0aGVyZXVtIHNpZ25hdHVyZS4gVGhlIG1lc3NhZ2VcbiAqIG11c3QgaGF2ZSBiZWVuIHNpZ25lZCB1c2luZyB0aGUgYHBlcnNvbmFsU2lnbmAgZnVuY3Rpb24sIG9yIGFuIGVxdWl2YWxlbnQgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgcHVibGljIGtleSByZWNvdmVyeSBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMuZGF0YSAtIFRoZSBoZXggZGF0YSB0aGF0IHdhcyBzaWduZWQuXG4gKiBAcGFyYW0gb3B0aW9ucy5zaWduYXR1cmUgLSBUaGUgJzB4Jy1wcmVmaXhlZCBoZXggZW5jb2RlZCBtZXNzYWdlIHNpZ25hdHVyZS5cbiAqIEByZXR1cm5zIFRoZSAnMHgnLXByZWZpeGVkIGhleCBlbmNvZGVkIHB1YmxpYyBrZXkgb2YgdGhlIG1lc3NhZ2Ugc2lnbmVyLlxuICovXG5mdW5jdGlvbiBleHRyYWN0UHVibGljS2V5KHsgZGF0YSwgc2lnbmF0dXJlLCB9KSB7XG4gICAgaWYgKCgwLCB1dGlsc18xLmlzTnVsbGlzaCkoZGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGRhdGEgcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCB1dGlsc18xLmlzTnVsbGlzaCkoc2lnbmF0dXJlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcgc2lnbmF0dXJlIHBhcmFtZXRlcicpO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNLZXkgPSBnZXRQdWJsaWNLZXlGb3IoZGF0YSwgc2lnbmF0dXJlKTtcbiAgICByZXR1cm4gYDB4JHtwdWJsaWNLZXkudG9TdHJpbmcoJ2hleCcpfWA7XG59XG5leHBvcnRzLmV4dHJhY3RQdWJsaWNLZXkgPSBleHRyYWN0UHVibGljS2V5O1xuLyoqXG4gKiBHZXQgdGhlIHB1YmxpYyBrZXkgZm9yIHRoZSBnaXZlbiBzaWduYXR1cmUgYW5kIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0aGF0IHdhcyBzaWduZWQuXG4gKiBAcGFyYW0gc2lnbmF0dXJlIC0gVGhlICcweCctcHJlZml4ZWQgaGV4IGVuY29kZWQgbWVzc2FnZSBzaWduYXR1cmUuXG4gKiBAcmV0dXJucyBUaGUgcHVibGljIGtleSBvZiB0aGUgc2lnbmVyLlxuICovXG5mdW5jdGlvbiBnZXRQdWJsaWNLZXlGb3IobWVzc2FnZSwgc2lnbmF0dXJlKSB7XG4gICAgY29uc3QgbWVzc2FnZUhhc2ggPSAoMCwgdXRpbF8xLmhhc2hQZXJzb25hbE1lc3NhZ2UpKCgwLCB1dGlsc18xLmxlZ2FjeVRvQnVmZmVyKShtZXNzYWdlKSk7XG4gICAgcmV0dXJuICgwLCB1dGlsc18xLnJlY292ZXJQdWJsaWNLZXkpKG1lc3NhZ2VIYXNoLCBzaWduYXR1cmUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyc29uYWwtc2lnbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/eth-sig-util/dist/personal-sign.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nconst util_1 = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@ethereumjs/util/dist/index.js\");\nconst abi_utils_1 = __webpack_require__(/*! @metamask/abi-utils */ \"./node_modules/@metamask/abi-utils/dist/index.js\");\nconst parsers_1 = __webpack_require__(/*! @metamask/abi-utils/dist/parsers */ \"./node_modules/@metamask/abi-utils/dist/parsers/index.js\");\nconst utils_1 = __webpack_require__(/*! @metamask/abi-utils/dist/utils */ \"./node_modules/@metamask/abi-utils/dist/utils/index.js\");\nconst utils_2 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst keccak_1 = __webpack_require__(/*! ethereum-cryptography/keccak */ \"./node_modules/ethereum-cryptography/keccak.js\");\nconst utils_3 = __webpack_require__(/*! ./utils */ \"./node_modules/@metamask/eth-sig-util/dist/utils.js\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of\n * EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n    SignTypedDataVersion[\"V1\"] = \"V1\";\n    SignTypedDataVersion[\"V3\"] = \"V3\";\n    SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n    type: 'object',\n    properties: {\n        types: {\n            type: 'object',\n            additionalProperties: {\n                type: 'array',\n                items: {\n                    type: 'object',\n                    properties: {\n                        name: { type: 'string' },\n                        type: { type: 'string' },\n                    },\n                    required: ['name', 'type'],\n                },\n            },\n        },\n        primaryType: { type: 'string' },\n        domain: { type: 'object' },\n        message: { type: 'object' },\n    },\n    required: ['types', 'primaryType', 'domain', 'message'],\n};\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n    if (!Object.keys(SignTypedDataVersion).includes(version)) {\n        throw new Error(`Invalid version: '${version}'`);\n    }\n    else if (allowedVersions && !allowedVersions.includes(version)) {\n        throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n    }\n}\n/**\n * Parse a string, number, or bigint value into a `Uint8Array`.\n *\n * @param type - The type of the value.\n * @param value - The value to parse.\n * @returns The parsed value.\n */\nfunction parseNumber(type, value) {\n    (0, utils_2.assert)(value !== null, `Unable to encode value: Invalid number. Expected a valid number value, but received \"${value}\".`);\n    const bigIntValue = BigInt(value);\n    const length = (0, parsers_1.getLength)(type);\n    const maxValue = BigInt(2) ** BigInt(length) - BigInt(1);\n    // Note that this is not accurate, since the actual maximum value for unsigned\n    // integers is `2 ^ (length - 1) - 1`, but this is required for backwards\n    // compatibility with the old implementation.\n    (0, utils_2.assert)(bigIntValue >= -maxValue && bigIntValue <= maxValue, `Unable to encode value: Number \"${value}\" is out of range for type \"${type}\".`);\n    return bigIntValue;\n}\n/**\n * Parse an address string to a `Uint8Array`. The behaviour of this is quite\n * strange, in that it does not parse the address as hexadecimal string, nor as\n * UTF-8. It does some weird stuff with the string and char codes, and then\n * returns the result as a `Uint8Array`.\n *\n * This is based on the old `ethereumjs-abi` implementation, which essentially\n * calls `new BN(address, 10)` on the address string, the equivalent of calling\n * `parseInt(address, 10)` in JavaScript. This is not a valid way to parse an\n * address and would result in `NaN` in plain JavaScript, but it is the\n * behaviour of the old implementation, and so we must preserve it for backwards\n * compatibility.\n *\n * @param address - The address to parse.\n * @returns The parsed address.\n */\nfunction reallyStrangeAddressToBytes(address) {\n    let addressValue = BigInt(0);\n    for (let i = 0; i < address.length; i++) {\n        const character = BigInt(address.charCodeAt(i) - 48);\n        addressValue *= BigInt(10);\n        // 'a'\n        if (character >= 49) {\n            addressValue += character - BigInt(49) + BigInt(0xa);\n            // 'A'\n        }\n        else if (character >= 17) {\n            addressValue += character - BigInt(17) + BigInt(0xa);\n            // '0' - '9'\n        }\n        else {\n            addressValue += character;\n        }\n    }\n    return (0, utils_1.padStart)((0, utils_2.bigIntToBytes)(addressValue), 20);\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type, \n// TODO: constrain type on `value`\nvalue, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    if (types[type] !== undefined) {\n        return [\n            'bytes32',\n            // TODO: return Buffer, remove string from return type\n            version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n                ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n                : (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodeData(type, value, types, version))),\n        ];\n    }\n    // `function` is supported in `@metamask/abi-utils`, but not allowed by\n    // EIP-712, so we throw an error here.\n    if (type === 'function') {\n        throw new Error('Unsupported or invalid type: \"function\"');\n    }\n    if (value === undefined) {\n        throw new Error(`missing value for field ${name} of type ${type}`);\n    }\n    if (type === 'address') {\n        if (typeof value === 'number') {\n            return ['address', (0, utils_1.padStart)((0, utils_2.numberToBytes)(value), 20)];\n        }\n        else if ((0, utils_2.isStrictHexString)(value)) {\n            return ['address', (0, utils_2.add0x)(value)];\n        }\n        else if (typeof value === 'string') {\n            return ['address', reallyStrangeAddressToBytes(value).subarray(0, 20)];\n        }\n    }\n    if (type === 'bool') {\n        return ['bool', Boolean(value)];\n    }\n    if (type === 'bytes') {\n        if (typeof value === 'number') {\n            value = (0, utils_2.numberToBytes)(value);\n        }\n        else if ((0, utils_2.isStrictHexString)(value)) {\n            value = (0, utils_2.hexToBytes)(value);\n        }\n        else if (typeof value === 'string') {\n            value = (0, utils_2.stringToBytes)(value);\n        }\n        return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(value))];\n    }\n    if (type.startsWith('bytes') && type !== 'bytes' && !type.includes('[')) {\n        if (typeof value === 'number') {\n            if (value < 0) {\n                return ['bytes32', new Uint8Array(32)];\n            }\n            return ['bytes32', (0, utils_2.bigIntToBytes)(BigInt(value))];\n        }\n        else if ((0, utils_2.isStrictHexString)(value)) {\n            return ['bytes32', (0, utils_2.hexToBytes)(value)];\n        }\n        return ['bytes32', value];\n    }\n    if (type.startsWith('int') && !type.includes('[')) {\n        const bigIntValue = parseNumber(type, value);\n        if (bigIntValue >= BigInt(0)) {\n            return ['uint256', bigIntValue];\n        }\n        return ['int256', bigIntValue];\n    }\n    if (type === 'string') {\n        if (typeof value === 'number') {\n            value = (0, utils_2.numberToBytes)(value);\n        }\n        else {\n            value = (0, utils_2.stringToBytes)(value !== null && value !== void 0 ? value : '');\n        }\n        return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(value))];\n    }\n    if (type.endsWith(']')) {\n        if (version === SignTypedDataVersion.V3) {\n            throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n        }\n        const parsedType = type.slice(0, type.lastIndexOf('['));\n        const typeValuePairs = value.map((item) => encodeField(types, name, parsedType, item, version));\n        return [\n            'bytes32',\n            (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, abi_utils_1.encode)(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))),\n        ];\n    }\n    return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    const encodedTypes = ['bytes32'];\n    const encodedValues = [\n        hashType(primaryType, types),\n    ];\n    for (const field of types[primaryType]) {\n        if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n            continue;\n        }\n        const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n        encodedTypes.push(type);\n        encodedValues.push(value);\n    }\n    return (0, util_1.arrToBufArr)((0, abi_utils_1.encode)(encodedTypes, encodedValues));\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n    let result = '';\n    const unsortedDeps = findTypeDependencies(primaryType, types);\n    unsortedDeps.delete(primaryType);\n    const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n    for (const type of deps) {\n        const children = types[type];\n        if (!children) {\n            throw new Error(`No type definition specified: ${type}`);\n        }\n        result += `${type}(${types[type]\n            .map(({ name, type: t }) => `${t} ${name}`)\n            .join(',')})`;\n    }\n    return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types, results = new Set()) {\n    if (typeof primaryType !== 'string') {\n        throw new Error(`Invalid findTypeDependencies input ${JSON.stringify(primaryType)}`);\n    }\n    const match = primaryType.match(/^\\w*/u);\n    [primaryType] = match;\n    if (results.has(primaryType) || types[primaryType] === undefined) {\n        return results;\n    }\n    results.add(primaryType);\n    for (const field of types[primaryType]) {\n        findTypeDependencies(field.type, types, results);\n    }\n    return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    const encoded = encodeData(primaryType, data, types, version);\n    const hashed = (0, keccak_1.keccak256)(encoded);\n    const buf = (0, util_1.arrToBufArr)(hashed);\n    return buf;\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n    const encodedHashType = (0, utils_2.stringToBytes)(encodeType(primaryType, types));\n    return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodedHashType));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n    const sanitizedData = {};\n    for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n        if (data[key]) {\n            sanitizedData[key] = data[key];\n        }\n    }\n    if ('types' in sanitizedData) {\n        // TODO: Fix types\n        sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);\n    }\n    return sanitizedData;\n}\n/**\n * Create a EIP-712 Domain Hash.\n * This hash is used at the top of the EIP-712 encoding.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the domain object.\n */\nfunction eip712DomainHash(typedData, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    const sanitizedData = sanitizeData(typedData);\n    const { domain } = sanitizedData;\n    const domainType = { EIP712Domain: sanitizedData.types.EIP712Domain };\n    return hashStruct('EIP712Domain', domain, domainType, version);\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    const sanitizedData = sanitizeData(typedData);\n    const parts = [(0, utils_2.hexToBytes)('1901')];\n    parts.push(eip712DomainHash(typedData, version));\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n        parts.push(hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n    }\n    return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, utils_2.concatBytes)(parts)));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n    encodeData,\n    encodeType,\n    findTypeDependencies,\n    hashStruct,\n    hashType,\n    sanitizeData,\n    eip712Hash,\n    eip712DomainHash,\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n    const hashBuffer = _typedSignatureHash(typedData);\n    return (0, utils_2.bytesToHex)(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Normalize a value, so that `@metamask/abi-utils` can handle it. This\n * matches the behaviour of the `ethereumjs-abi` library.\n *\n * @param type - The type of the value to normalize.\n * @param value - The value to normalize.\n * @returns The normalized value.\n */\nfunction normalizeValue(type, value) {\n    if ((0, parsers_1.isArrayType)(type) && Array.isArray(value)) {\n        const [innerType] = (0, parsers_1.getArrayType)(type);\n        return value.map((item) => normalizeValue(innerType, item));\n    }\n    if (type === 'address') {\n        if (typeof value === 'number') {\n            return (0, utils_1.padStart)((0, utils_2.numberToBytes)(value), 20);\n        }\n        if ((0, utils_2.isStrictHexString)(value)) {\n            return (0, utils_1.padStart)((0, utils_2.hexToBytes)(value).subarray(0, 20), 20);\n        }\n        if (value instanceof Uint8Array) {\n            return (0, utils_1.padStart)(value.subarray(0, 20), 20);\n        }\n    }\n    if (type === 'bool') {\n        return Boolean(value);\n    }\n    if (type.startsWith('bytes') && type !== 'bytes') {\n        const length = (0, parsers_1.getByteLength)(type);\n        if (typeof value === 'number') {\n            if (value < 0) {\n                // `solidityPack(['bytesN'], [-1])` returns `0x00..00`.\n                return new Uint8Array();\n            }\n            return (0, utils_2.numberToBytes)(value).subarray(0, length);\n        }\n        if ((0, utils_2.isStrictHexString)(value)) {\n            return (0, utils_2.hexToBytes)(value).subarray(0, length);\n        }\n        if (value instanceof Uint8Array) {\n            return value.subarray(0, length);\n        }\n    }\n    if (type.startsWith('uint')) {\n        if (typeof value === 'number') {\n            return Math.abs(value);\n        }\n    }\n    if (type.startsWith('int')) {\n        if (typeof value === 'number') {\n            const length = (0, parsers_1.getLength)(type);\n            return BigInt.asIntN(length, BigInt(value));\n        }\n    }\n    return value;\n}\n/**\n * For some reason `ethereumjs-abi` treats `address` and `address[]` differently\n * so we need to normalize `address[]` differently.\n *\n * @param values - The values to normalize.\n * @returns The normalized values.\n */\nfunction normalizeAddresses(values) {\n    return values.map((value) => {\n        if (typeof value === 'number') {\n            return (0, utils_1.padStart)((0, utils_2.numberToBytes)(value), 32);\n        }\n        if ((0, utils_2.isStrictHexString)(value)) {\n            return (0, utils_1.padStart)((0, utils_2.hexToBytes)(value).subarray(0, 32), 32);\n        }\n        if (value instanceof Uint8Array) {\n            return (0, utils_1.padStart)(value.subarray(0, 32), 32);\n        }\n        return value;\n    });\n}\n/**\n * For some reason `ethereumjs-abi` treats `intN` and `intN[]` differently\n * so we need to normalize `intN[]` differently.\n *\n * @param type - The type of the value to normalize.\n * @param values - The values to normalize.\n * @returns The normalized values.\n */\nfunction normalizeIntegers(type, values) {\n    return values.map((value) => {\n        if (typeof value === 'string' ||\n            typeof value === 'number' ||\n            typeof value === 'bigint') {\n            const bigIntValue = parseNumber(type, value);\n            if (bigIntValue >= BigInt(0)) {\n                return (0, utils_1.padStart)((0, utils_2.bigIntToBytes)(bigIntValue), 32);\n            }\n            const length = (0, parsers_1.getLength)(type);\n            const asIntN = BigInt.asIntN(length, bigIntValue);\n            return (0, utils_2.signedBigIntToBytes)(asIntN, 32);\n        }\n        return value;\n    });\n}\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n    const error = new Error('Expect argument to be non-empty array');\n    if (typeof typedData !== 'object' ||\n        !('length' in typedData) ||\n        !typedData.length) {\n        throw error;\n    }\n    const normalizedData = typedData.map(({ name, type, value }) => {\n        // Handle an edge case with `address[]` types.\n        if (type === 'address[]') {\n            return {\n                name,\n                type: 'bytes32[]',\n                value: normalizeAddresses(value),\n            };\n        }\n        // Handle an edge case with `intN[]` types.\n        if (type.startsWith('int') && (0, parsers_1.isArrayType)(type)) {\n            const [innerType, length] = (0, parsers_1.getArrayType)(type);\n            return {\n                name,\n                type: `bytes32[${length !== null && length !== void 0 ? length : ''}]`,\n                value: normalizeIntegers(innerType, value),\n            };\n        }\n        return {\n            name,\n            type,\n            value: normalizeValue(type, value),\n        };\n    });\n    const data = normalizedData.map((e) => {\n        if (e.type !== 'bytes') {\n            return e.value;\n        }\n        return (0, utils_3.legacyToBuffer)(e.value);\n    });\n    const types = normalizedData.map((e) => {\n        if (e.type === 'function') {\n            throw new Error('Unsupported or invalid type: \"function\"');\n        }\n        return e.type;\n    });\n    const schema = typedData.map((e) => {\n        if (!e.name) {\n            throw error;\n        }\n        return `${e.type} ${e.name}`;\n    });\n    return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, abi_utils_1.encodePacked)(['bytes32', 'bytes32'], [\n        (0, keccak_1.keccak256)((0, abi_utils_1.encodePacked)(['string[]'], [schema], true)),\n        (0, keccak_1.keccak256)((0, abi_utils_1.encodePacked)(types, data, true)),\n    ])));\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of\n * EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData({ privateKey, data, version, }) {\n    validateVersion(version);\n    if ((0, utils_3.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_3.isNullish)(privateKey)) {\n        throw new Error('Missing private key parameter');\n    }\n    const messageHash = version === SignTypedDataVersion.V1\n        ? _typedSignatureHash(data)\n        : exports.TypedDataUtils.eip712Hash(data, version);\n    const sig = (0, util_1.ecsign)(messageHash, privateKey);\n    return (0, utils_3.concatSig)((0, util_1.arrToBufArr)((0, utils_2.bigIntToBytes)(sig.v)), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature({ data, signature, version, }) {\n    validateVersion(version);\n    if ((0, utils_3.isNullish)(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if ((0, utils_3.isNullish)(signature)) {\n        throw new Error('Missing signature parameter');\n    }\n    const messageHash = version === SignTypedDataVersion.V1\n        ? _typedSignatureHash(data)\n        : exports.TypedDataUtils.eip712Hash(data, version);\n    const publicKey = (0, utils_3.recoverPublicKey)(messageHash, signature);\n    const sender = (0, util_1.publicToAddress)(publicKey);\n    return (0, utils_2.bytesToHex)(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;\n//# sourceMappingURL=sign-typed-data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js\n"));

/***/ }),

/***/ "./node_modules/@metamask/eth-sig-util/dist/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@metamask/eth-sig-util/dist/utils.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.normalize = exports.recoverPublicKey = exports.concatSig = exports.legacyToBuffer = exports.isNullish = exports.padWithZeroes = void 0;\nconst util_1 = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@ethereumjs/util/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"./node_modules/@metamask/utils/dist/index.js\");\nconst ethjs_util_1 = __webpack_require__(/*! ethjs-util */ \"./node_modules/ethjs-util/lib/index.js\");\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n    if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n        throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n    }\n    if (targetLength < 0) {\n        throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n    }\n    return String.prototype.padStart.call(hexString, targetLength, '0');\n}\nexports.padWithZeroes = padWithZeroes;\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nfunction isNullish(value) {\n    return value === null || value === undefined;\n}\nexports.isNullish = isNullish;\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nfunction legacyToBuffer(value) {\n    return typeof value === 'string' && !(0, ethjs_util_1.isHexString)(value)\n        ? Buffer.from(value)\n        : (0, util_1.toBuffer)(value);\n}\nexports.legacyToBuffer = legacyToBuffer;\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nfunction concatSig(v, r, s) {\n    const rSig = (0, util_1.fromSigned)(r);\n    const sSig = (0, util_1.fromSigned)(s);\n    const vSig = (0, util_1.bufferToInt)(v);\n    const rStr = padWithZeroes((0, util_1.toUnsigned)(rSig).toString('hex'), 64);\n    const sStr = padWithZeroes((0, util_1.toUnsigned)(sSig).toString('hex'), 64);\n    const vStr = (0, ethjs_util_1.stripHexPrefix)((0, ethjs_util_1.intToHex)(vSig));\n    return (0, utils_1.add0x)(rStr.concat(sStr, vStr));\n}\nexports.concatSig = concatSig;\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nfunction recoverPublicKey(messageHash, signature) {\n    const sigParams = (0, util_1.fromRpcSig)(signature);\n    return (0, util_1.ecrecover)(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\nexports.recoverPublicKey = recoverPublicKey;\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nfunction normalize(input) {\n    if (isNullish(input)) {\n        return undefined;\n    }\n    if (typeof input === 'number') {\n        if (input < 0) {\n            return '0x';\n        }\n        const buffer = (0, utils_1.numberToBytes)(input);\n        input = (0, utils_1.bytesToHex)(buffer);\n    }\n    if (typeof input !== 'string') {\n        let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n        msg += ` received ${typeof input}: ${input}`;\n        throw new Error(msg);\n    }\n    return (0, utils_1.add0x)(input.toLowerCase());\n}\nexports.normalize = normalize;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2V0aC1zaWctdXRpbC9kaXN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyx3QkFBd0IsR0FBRyxpQkFBaUIsR0FBRyxzQkFBc0IsR0FBRyxpQkFBaUIsR0FBRyxxQkFBcUI7QUFDckksZUFBZSxtQkFBTyxDQUFDLHVFQUFrQjtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRUFBaUI7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsMERBQVk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLFVBQVU7QUFDbEY7QUFDQTtBQUNBLG9GQUFvRixhQUFhO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxNQUFNO0FBQ2hCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGFBQWEsSUFBSSxNQUFNO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWV0YW1hc2svZXRoLXNpZy11dGlsL2Rpc3QvdXRpbHMuanM/YjllNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm9ybWFsaXplID0gZXhwb3J0cy5yZWNvdmVyUHVibGljS2V5ID0gZXhwb3J0cy5jb25jYXRTaWcgPSBleHBvcnRzLmxlZ2FjeVRvQnVmZmVyID0gZXhwb3J0cy5pc051bGxpc2ggPSBleHBvcnRzLnBhZFdpdGhaZXJvZXMgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiQGV0aGVyZXVtanMvdXRpbFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQG1ldGFtYXNrL3V0aWxzXCIpO1xuY29uc3QgZXRoanNfdXRpbF8xID0gcmVxdWlyZShcImV0aGpzLXV0aWxcIik7XG4vKipcbiAqIFBhZHMgdGhlIGZyb250IG9mIHRoZSBnaXZlbiBoZXggc3RyaW5nIHdpdGggemVyb2VzIHVudGlsIGl0IHJlYWNoZXMgdGhlXG4gKiB0YXJnZXQgbGVuZ3RoLiBJZiB0aGUgaW5wdXQgc3RyaW5nIGlzIGFscmVhZHkgbG9uZ2VyIHRoYW4gb3IgZXF1YWwgdG8gdGhlXG4gKiB0YXJnZXQgbGVuZ3RoLCBpdCBpcyByZXR1cm5lZCB1bm1vZGlmaWVkLlxuICpcbiAqIElmIHRoZSBpbnB1dCBzdHJpbmcgaXMgXCIweFwiLXByZWZpeGVkIG9yIG5vdCBhIGhleCBzdHJpbmcsIGFuIGVycm9yIHdpbGwgYmVcbiAqIHRocm93bi5cbiAqXG4gKiBAcGFyYW0gaGV4U3RyaW5nIC0gVGhlIGhleGFkZWNpbWFsIHN0cmluZyB0byBwYWQgd2l0aCB6ZXJvZXMuXG4gKiBAcGFyYW0gdGFyZ2V0TGVuZ3RoIC0gVGhlIHRhcmdldCBsZW5ndGggb2YgdGhlIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqIEByZXR1cm5zIFRoZSBpbnB1dCBzdHJpbmcgZnJvbnQtcGFkZGVkIHdpdGggemVyb2VzLCBvciB0aGUgb3JpZ2luYWwgc3RyaW5nXG4gKiBpZiBpdCB3YXMgYWxyZWFkeSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdG8gdGhlIHRhcmdldCBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIHBhZFdpdGhaZXJvZXMoaGV4U3RyaW5nLCB0YXJnZXRMZW5ndGgpIHtcbiAgICBpZiAoaGV4U3RyaW5nICE9PSAnJyAmJiAhL15bYS1mMC05XSskL2l1LnRlc3QoaGV4U3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGFuIHVucHJlZml4ZWQgaGV4IHN0cmluZy4gUmVjZWl2ZWQ6ICR7aGV4U3RyaW5nfWApO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0TGVuZ3RoIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIgdGFyZ2V0IGxlbmd0aC4gUmVjZWl2ZWQ6ICR7dGFyZ2V0TGVuZ3RofWApO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydC5jYWxsKGhleFN0cmluZywgdGFyZ2V0TGVuZ3RoLCAnMCcpO1xufVxuZXhwb3J0cy5wYWRXaXRoWmVyb2VzID0gcGFkV2l0aFplcm9lcztcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIG51bGxpc2guXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGJlaW5nIGNoZWNrZWQuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB2YWx1ZSBpcyBudWxsaXNoLlxuICovXG5mdW5jdGlvbiBpc051bGxpc2godmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuaXNOdWxsaXNoID0gaXNOdWxsaXNoO1xuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBCdWZmZXIuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGVxdWl2YWxlbnQgdG8gdGhlIGB0b0J1ZmZlcmAgZnVuY3Rpb24gaW5cbiAqIGBldGhlcmV1bWpzLXV0aWxANS4yLjFgLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgQnVmZmVyLlxuICogQHJldHVybnMgVGhlIGdpdmVuIHZhbHVlIGFzIGEgQnVmZmVyLlxuICovXG5mdW5jdGlvbiBsZWdhY3lUb0J1ZmZlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgZXRoanNfdXRpbF8xLmlzSGV4U3RyaW5nKSh2YWx1ZSlcbiAgICAgICAgPyBCdWZmZXIuZnJvbSh2YWx1ZSlcbiAgICAgICAgOiAoMCwgdXRpbF8xLnRvQnVmZmVyKSh2YWx1ZSk7XG59XG5leHBvcnRzLmxlZ2FjeVRvQnVmZmVyID0gbGVnYWN5VG9CdWZmZXI7XG4vKipcbiAqIENvbmNhdGVuYXRlIGFuIGV4dGVuZGVkIEVDRFNBIHNpZ25hdHVyZSBpbnRvIGEgc2luZ2xlICcweCctcHJlZml4ZWQgaGV4IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gdiAtIFRoZSAndicgcG9ydGlvbiBvZiB0aGUgc2lnbmF0dXJlLlxuICogQHBhcmFtIHIgLSBUaGUgJ3InIHBvcnRpb24gb2YgdGhlIHNpZ25hdHVyZS5cbiAqIEBwYXJhbSBzIC0gVGhlICdzJyBwb3J0aW9uIG9mIHRoZSBzaWduYXR1cmUuXG4gKiBAcmV0dXJucyBUaGUgY29uY2F0ZW5hdGVkIEVDRFNBIHNpZ25hdHVyZSBhcyBhICcweCctcHJlZml4ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBjb25jYXRTaWcodiwgciwgcykge1xuICAgIGNvbnN0IHJTaWcgPSAoMCwgdXRpbF8xLmZyb21TaWduZWQpKHIpO1xuICAgIGNvbnN0IHNTaWcgPSAoMCwgdXRpbF8xLmZyb21TaWduZWQpKHMpO1xuICAgIGNvbnN0IHZTaWcgPSAoMCwgdXRpbF8xLmJ1ZmZlclRvSW50KSh2KTtcbiAgICBjb25zdCByU3RyID0gcGFkV2l0aFplcm9lcygoMCwgdXRpbF8xLnRvVW5zaWduZWQpKHJTaWcpLnRvU3RyaW5nKCdoZXgnKSwgNjQpO1xuICAgIGNvbnN0IHNTdHIgPSBwYWRXaXRoWmVyb2VzKCgwLCB1dGlsXzEudG9VbnNpZ25lZCkoc1NpZykudG9TdHJpbmcoJ2hleCcpLCA2NCk7XG4gICAgY29uc3QgdlN0ciA9ICgwLCBldGhqc191dGlsXzEuc3RyaXBIZXhQcmVmaXgpKCgwLCBldGhqc191dGlsXzEuaW50VG9IZXgpKHZTaWcpKTtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuYWRkMHgpKHJTdHIuY29uY2F0KHNTdHIsIHZTdHIpKTtcbn1cbmV4cG9ydHMuY29uY2F0U2lnID0gY29uY2F0U2lnO1xuLyoqXG4gKiBSZWNvdmVyIHRoZSBwdWJsaWMga2V5IGZyb20gdGhlIGdpdmVuIHNpZ25hdHVyZSBhbmQgbWVzc2FnZSBoYXNoLlxuICpcbiAqIEBwYXJhbSBtZXNzYWdlSGFzaCAtIFRoZSBoYXNoIG9mIHRoZSBzaWduZWQgbWVzc2FnZS5cbiAqIEBwYXJhbSBzaWduYXR1cmUgLSBUaGUgc2lnbmF0dXJlLlxuICogQHJldHVybnMgVGhlIHB1YmxpYyBrZXkgb2YgdGhlIHNpZ25lci5cbiAqL1xuZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleShtZXNzYWdlSGFzaCwgc2lnbmF0dXJlKSB7XG4gICAgY29uc3Qgc2lnUGFyYW1zID0gKDAsIHV0aWxfMS5mcm9tUnBjU2lnKShzaWduYXR1cmUpO1xuICAgIHJldHVybiAoMCwgdXRpbF8xLmVjcmVjb3ZlcikobWVzc2FnZUhhc2gsIHNpZ1BhcmFtcy52LCBzaWdQYXJhbXMuciwgc2lnUGFyYW1zLnMpO1xufVxuZXhwb3J0cy5yZWNvdmVyUHVibGljS2V5ID0gcmVjb3ZlclB1YmxpY0tleTtcbi8qKlxuICogTm9ybWFsaXplIHRoZSBpbnB1dCB0byBhIGxvd2VyLWNhc2VkICcweCctcHJlZml4ZWQgaGV4IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gaW5wdXQgLSBUaGUgdmFsdWUgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMgVGhlIG5vcm1hbGl6ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShpbnB1dCkge1xuICAgIGlmIChpc051bGxpc2goaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChpbnB1dCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMHgnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9ICgwLCB1dGlsc18xLm51bWJlclRvQnl0ZXMpKGlucHV0KTtcbiAgICAgICAgaW5wdXQgPSAoMCwgdXRpbHNfMS5ieXRlc1RvSGV4KShidWZmZXIpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBsZXQgbXNnID0gJ2V0aC1zaWctdXRpbC5ub3JtYWxpemUoKSByZXF1aXJlcyBoZXggc3RyaW5nIG9yIGludGVnZXIgaW5wdXQuJztcbiAgICAgICAgbXNnICs9IGAgcmVjZWl2ZWQgJHt0eXBlb2YgaW5wdXR9OiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuYWRkMHgpKGlucHV0LnRvTG93ZXJDYXNlKCkpO1xufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/eth-sig-util/dist/utils.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/binary/lib/binary.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/binary/lib/binary.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */\nvar int_1 = __webpack_require__(/*! @stablelib/int */ \"./node_modules/@stablelib/int/lib/int.js\");\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;\n}\nexports.readInt16BE = readInt16BE;\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;\n}\nexports.readUint16BE = readUint16BE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;\n}\nexports.readInt16LE = readInt16LE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 1] << 8) | array[offset]) >>> 0;\n}\nexports.readUint16LE = readUint16LE;\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(2); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 8;\n    out[offset + 1] = value >>> 0;\n    return out;\n}\nexports.writeUint16BE = writeUint16BE;\nexports.writeInt16BE = writeUint16BE;\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(2); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    return out;\n}\nexports.writeUint16LE = writeUint16LE;\nexports.writeInt16LE = writeUint16LE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3];\n}\nexports.readInt32BE = readInt32BE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\nexports.readUint32BE = readUint32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return (array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset];\n}\nexports.readInt32LE = readInt32LE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    return ((array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset]) >>> 0;\n}\nexports.readUint32LE = readUint32LE;\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\nexports.writeUint32BE = writeUint32BE;\nexports.writeInt32BE = writeUint32BE;\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    out[offset + 2] = value >>> 16;\n    out[offset + 3] = value >>> 24;\n    return out;\n}\nexports.writeUint32LE = writeUint32LE;\nexports.writeInt32LE = writeUint32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var hi = readInt32BE(array, offset);\n    var lo = readInt32BE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);\n}\nexports.readInt64BE = readInt64BE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var hi = readUint32BE(array, offset);\n    var lo = readUint32BE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64BE = readUint64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var lo = readInt32LE(array, offset);\n    var hi = readInt32LE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);\n}\nexports.readInt64LE = readInt64LE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var lo = readUint32LE(array, offset);\n    var hi = readUint32LE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\nexports.readUint64LE = readUint64LE;\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n    writeUint32BE(value >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64BE = writeUint64BE;\nexports.writeInt64BE = writeUint64BE;\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    writeUint32LE(value >>> 0, out, offset);\n    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n    return out;\n}\nexports.writeUint64LE = writeUint64LE;\nexports.writeInt64LE = writeUint64LE;\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintBE(bitLength, array, offset) {\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintBE = readUintBE;\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintLE(bitLength, array, offset) {\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    }\n    var result = 0;\n    var mul = 1;\n    for (var i = offset; i < offset + bitLength / 8; i++) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\nexports.readUintLE = readUintLE;\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintBE(bitLength, value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(bitLength / 8); }\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintBE value must be an integer\");\n    }\n    var div = 1;\n    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintBE = writeUintBE;\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintLE(bitLength, value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(bitLength / 8); }\n    if (offset === void 0) { offset = 0; }\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    }\n    if (!int_1.isSafeInteger(value)) {\n        throw new Error(\"writeUintLE value must be an integer\");\n    }\n    var div = 1;\n    for (var i = offset; i < offset + bitLength / 8; i++) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\nexports.writeUintLE = writeUintLE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset);\n}\nexports.readFloat32BE = readFloat32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, true);\n}\nexports.readFloat32LE = readFloat32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64BE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset);\n}\nexports.readFloat64BE = readFloat64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64LE(array, offset) {\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, true);\n}\nexports.readFloat64LE = readFloat64LE;\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value);\n    return out;\n}\nexports.writeFloat32BE = writeFloat32BE;\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(4); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value, true);\n    return out;\n}\nexports.writeFloat32LE = writeFloat32LE;\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64BE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value);\n    return out;\n}\nexports.writeFloat64BE = writeFloat64BE;\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64LE(value, out, offset) {\n    if (out === void 0) { out = new Uint8Array(8); }\n    if (offset === void 0) { offset = 0; }\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value, true);\n    return out;\n}\nexports.writeFloat64LE = writeFloat64LE;\n//# sourceMappingURL=binary.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/binary/lib/binary.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/chacha/lib/chacha.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/chacha/lib/chacha.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Package chacha implements ChaCha stream cipher.\n */\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"./node_modules/@stablelib/binary/lib/binary.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out, input, key) {\n    var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n    var j2 = 0x79622D32; // \"2-by\"\n    var j3 = 0x6B206574; // \"te k\"\n    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];\n    var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];\n    var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];\n    var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];\n    var x0 = j0;\n    var x1 = j1;\n    var x2 = j2;\n    var x3 = j3;\n    var x4 = j4;\n    var x5 = j5;\n    var x6 = j6;\n    var x7 = j7;\n    var x8 = j8;\n    var x9 = j9;\n    var x10 = j10;\n    var x11 = j11;\n    var x12 = j12;\n    var x13 = j13;\n    var x14 = j14;\n    var x15 = j15;\n    for (var i = 0; i < ROUNDS; i += 2) {\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> (32 - 16) | x12 << 16;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> (32 - 12) | x4 << 12;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> (32 - 16) | x13 << 16;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> (32 - 12) | x5 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> (32 - 16) | x14 << 16;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> (32 - 12) | x6 << 12;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> (32 - 16) | x15 << 16;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> (32 - 12) | x7 << 12;\n        x2 = x2 + x6 | 0;\n        x14 ^= x2;\n        x14 = x14 >>> (32 - 8) | x14 << 8;\n        x10 = x10 + x14 | 0;\n        x6 ^= x10;\n        x6 = x6 >>> (32 - 7) | x6 << 7;\n        x3 = x3 + x7 | 0;\n        x15 ^= x3;\n        x15 = x15 >>> (32 - 8) | x15 << 8;\n        x11 = x11 + x15 | 0;\n        x7 ^= x11;\n        x7 = x7 >>> (32 - 7) | x7 << 7;\n        x1 = x1 + x5 | 0;\n        x13 ^= x1;\n        x13 = x13 >>> (32 - 8) | x13 << 8;\n        x9 = x9 + x13 | 0;\n        x5 ^= x9;\n        x5 = x5 >>> (32 - 7) | x5 << 7;\n        x0 = x0 + x4 | 0;\n        x12 ^= x0;\n        x12 = x12 >>> (32 - 8) | x12 << 8;\n        x8 = x8 + x12 | 0;\n        x4 ^= x8;\n        x4 = x4 >>> (32 - 7) | x4 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> (32 - 16) | x15 << 16;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> (32 - 12) | x5 << 12;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> (32 - 16) | x12 << 16;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> (32 - 12) | x6 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> (32 - 16) | x13 << 16;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> (32 - 12) | x7 << 12;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> (32 - 16) | x14 << 16;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> (32 - 12) | x4 << 12;\n        x2 = x2 + x7 | 0;\n        x13 ^= x2;\n        x13 = x13 >>> (32 - 8) | x13 << 8;\n        x8 = x8 + x13 | 0;\n        x7 ^= x8;\n        x7 = x7 >>> (32 - 7) | x7 << 7;\n        x3 = x3 + x4 | 0;\n        x14 ^= x3;\n        x14 = x14 >>> (32 - 8) | x14 << 8;\n        x9 = x9 + x14 | 0;\n        x4 ^= x9;\n        x4 = x4 >>> (32 - 7) | x4 << 7;\n        x1 = x1 + x6 | 0;\n        x12 ^= x1;\n        x12 = x12 >>> (32 - 8) | x12 << 8;\n        x11 = x11 + x12 | 0;\n        x6 ^= x11;\n        x6 = x6 >>> (32 - 7) | x6 << 7;\n        x0 = x0 + x5 | 0;\n        x15 ^= x0;\n        x15 = x15 >>> (32 - 8) | x15 << 8;\n        x10 = x10 + x15 | 0;\n        x5 ^= x10;\n        x5 = x5 >>> (32 - 7) | x5 << 7;\n    }\n    binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n    binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n    binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n    binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n    binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n    binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n    binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n    binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n    binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n    binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n    binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n    binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n    binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n    binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n    binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n    binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }\n    // We only support 256-bit keys.\n    if (key.length !== 32) {\n        throw new Error(\"ChaCha: key size must be 32 bytes\");\n    }\n    if (dst.length < src.length) {\n        throw new Error(\"ChaCha: destination is shorter than source\");\n    }\n    var nc;\n    var counterLength;\n    if (nonceInplaceCounterLength === 0) {\n        if (nonce.length !== 8 && nonce.length !== 12) {\n            throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        }\n        nc = new Uint8Array(16);\n        // First counterLength bytes of nc are counter, starting with zero.\n        counterLength = nc.length - nonce.length;\n        // Last bytes of nc after counterLength are nonce, set them.\n        nc.set(nonce, counterLength);\n    }\n    else {\n        if (nonce.length !== 16) {\n            throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        }\n        // This will update passed nonce with counter inplace.\n        nc = nonce;\n        counterLength = nonceInplaceCounterLength;\n    }\n    // Allocate temporary space for ChaCha block.\n    var block = new Uint8Array(64);\n    for (var i = 0; i < src.length; i += 64) {\n        // Generate a block.\n        core(block, nc, key);\n        // XOR block bytes with src into dst.\n        for (var j = i; j < i + 64 && j < src.length; j++) {\n            dst[j] = src[j] ^ block[j - i];\n        }\n        // Increment counter.\n        incrementCounter(nc, 0, counterLength);\n    }\n    // Cleanup temporary space.\n    wipe_1.wipe(block);\n    if (nonceInplaceCounterLength === 0) {\n        // Cleanup counter.\n        wipe_1.wipe(nc);\n    }\n    return dst;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }\n    wipe_1.wipe(dst);\n    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\nfunction incrementCounter(counter, pos, len) {\n    var carry = 1;\n    while (len--) {\n        carry = carry + (counter[pos] & 0xff) | 0;\n        counter[pos] = carry & 0xff;\n        carry >>>= 8;\n        pos++;\n    }\n    if (carry > 0) {\n        throw new Error(\"ChaCha: counter overflow\");\n    }\n}\n//# sourceMappingURL=chacha.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/chacha/lib/chacha.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar chacha_1 = __webpack_require__(/*! @stablelib/chacha */ \"./node_modules/@stablelib/chacha/lib/chacha.js\");\nvar poly1305_1 = __webpack_require__(/*! @stablelib/poly1305 */ \"./node_modules/@stablelib/poly1305/lib/poly1305.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"./node_modules/@stablelib/binary/lib/binary.js\");\nvar constant_time_1 = __webpack_require__(/*! @stablelib/constant-time */ \"./node_modules/@stablelib/constant-time/lib/constant-time.js\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nvar ChaCha20Poly1305 = /** @class */ (function () {\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    function ChaCha20Poly1305(key) {\n        this.nonceLength = exports.NONCE_LENGTH;\n        this.tagLength = exports.TAG_LENGTH;\n        if (key.length !== exports.KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Allocate space for sealed ciphertext.\n        var resultLength = plaintext.length + this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        }\n        else {\n            result = new Uint8Array(resultLength);\n        }\n        // Encrypt plaintext.\n        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */\n    ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        var calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n        // Constant-time compare tags and return null if they differ.\n        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n        // Allocate space for decrypted plaintext.\n        var resultLength = sealed.length - this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        }\n        else {\n            result = new Uint8Array(resultLength);\n        }\n        // Decrypt.\n        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    ChaCha20Poly1305.prototype.clean = function () {\n        wipe_1.wipe(this._key);\n        return this;\n    };\n    ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n        // Initialize Poly1305 with authKey.\n        var h = new poly1305_1.Poly1305(authKey);\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        var length = new Uint8Array(8);\n        if (associatedData) {\n            binary_1.writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n        // Authenticate length of ciphertext.\n        binary_1.writeUint64LE(ciphertext.length, length);\n        h.update(length);\n        // Get tag and copy it into tagOut.\n        var tag = h.digest();\n        for (var i = 0; i < tag.length; i++) {\n            tagOut[i] = tag[i];\n        }\n        // Cleanup.\n        h.clean();\n        wipe_1.wipe(tag);\n        wipe_1.wipe(length);\n    };\n    return ChaCha20Poly1305;\n}());\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;\n//# sourceMappingURL=chacha20poly1305.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/constant-time/lib/constant-time.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stablelib/constant-time/lib/constant-time.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Package constant-time provides functions for performing algorithmically constant-time operations.\n */\n/**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */\n/**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */\nfunction select(subject, resultIfOne, resultIfZero) {\n    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);\n}\nexports.select = select;\n/**\n * Returns 1 if a <= b, or 0 if not.\n * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.\n */\nfunction lessOrEqual(a, b) {\n    return (((a | 0) - (b | 0) - 1) >>> 31) & 1;\n}\nexports.lessOrEqual = lessOrEqual;\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */\nfunction compare(a, b) {\n    if (a.length !== b.length) {\n        return 0;\n    }\n    var result = 0;\n    for (var i = 0; i < a.length; i++) {\n        result |= a[i] ^ b[i];\n    }\n    return (1 & ((result - 1) >>> 8));\n}\nexports.compare = compare;\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */\nfunction equal(a, b) {\n    if (a.length === 0 || b.length === 0) {\n        return false;\n    }\n    return compare(a, b) !== 0;\n}\nexports.equal = equal;\n//# sourceMappingURL=constant-time.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9jb25zdGFudC10aW1lL2xpYi9jb25zdGFudC10aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9jb25zdGFudC10aW1lL2xpYi9jb25zdGFudC10aW1lLmpzPzZkYjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFBhY2thZ2UgY29uc3RhbnQtdGltZSBwcm92aWRlcyBmdW5jdGlvbnMgZm9yIHBlcmZvcm1pbmcgYWxnb3JpdGhtaWNhbGx5IGNvbnN0YW50LXRpbWUgb3BlcmF0aW9ucy5cbiAqL1xuLyoqXG4gKiBOT1RFISBEdWUgdG8gdGhlIGluYWJpbGl0eSB0byBndWFyYW50ZWUgcmVhbCBjb25zdGFudCB0aW1lIGV2YWx1YXRpb24gb2ZcbiAqIGFueXRoaW5nIGluIEphdmFTY3JpcHQgVk0sIHRoaXMgaXMgbW9kdWxlIGlzIHRoZSBiZXN0IGVmZm9ydC5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHJlc3VsdElmT25lIGlmIHN1YmplY3QgaXMgMSwgb3IgcmVzdWx0SWZaZXJvIGlmIHN1YmplY3QgaXMgMC5cbiAqXG4gKiBTdXBwb3J0cyBvbmx5IDMyLWJpdCBpbnRlZ2Vycywgc28gcmVzdWx0SWZPbmUgb3IgcmVzdWx0SWZaZXJvIGFyZSBub3RcbiAqIGludGVnZXJzLCB0aGV5J2xsIGJlIGNvbnZlcnRlZCB0byB0aGVtIHdpdGggYml0d2lzZSBvcGVyYXRpb25zLlxuICovXG5mdW5jdGlvbiBzZWxlY3Qoc3ViamVjdCwgcmVzdWx0SWZPbmUsIHJlc3VsdElmWmVybykge1xuICAgIHJldHVybiAofihzdWJqZWN0IC0gMSkgJiByZXN1bHRJZk9uZSkgfCAoKHN1YmplY3QgLSAxKSAmIHJlc3VsdElmWmVybyk7XG59XG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbi8qKlxuICogUmV0dXJucyAxIGlmIGEgPD0gYiwgb3IgMCBpZiBub3QuXG4gKiBBcmd1bWVudHMgbXVzdCBiZSBwb3NpdGl2ZSAzMi1iaXQgaW50ZWdlcnMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDJeMzEgLSAxLlxuICovXG5mdW5jdGlvbiBsZXNzT3JFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuICgoKGEgfCAwKSAtIChiIHwgMCkgLSAxKSA+Pj4gMzEpICYgMTtcbn1cbmV4cG9ydHMubGVzc09yRXF1YWwgPSBsZXNzT3JFcXVhbDtcbi8qKlxuICogUmV0dXJucyAxIGlmIGEgYW5kIGIgYXJlIG9mIGVxdWFsIGxlbmd0aCBhbmQgdGhlaXIgY29udGVudHNcbiAqIGFyZSBlcXVhbCwgb3IgMCBvdGhlcndpc2UuXG4gKlxuICogTm90ZSB0aGF0IHVubGlrZSBpbiBlcXVhbCgpLCB6ZXJvLWxlbmd0aCBpbnB1dHMgYXJlIGNvbnNpZGVyZWRcbiAqIHRoZSBzYW1lLCBzbyB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIDEuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgfD0gYVtpXSBeIGJbaV07XG4gICAgfVxuICAgIHJldHVybiAoMSAmICgocmVzdWx0IC0gMSkgPj4+IDgpKTtcbn1cbmV4cG9ydHMuY29tcGFyZSA9IGNvbXBhcmU7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGFuZCBiIGFyZSBvZiBlcXVhbCBub24temVybyBsZW5ndGgsXG4gKiBhbmQgdGhlaXIgY29udGVudHMgYXJlIGVxdWFsLCBvciBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogTm90ZSB0aGF0IHVubGlrZSBpbiBjb21wYXJlKCkgemVyby1sZW5ndGggaW5wdXRzIGFyZSBjb25zaWRlcmVkXG4gKiBfbm90XyBlcXVhbCwgc28gdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBmYWxzZS5cbiAqL1xuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCA9PT0gMCB8fCBiLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBjb21wYXJlKGEsIGIpICE9PSAwO1xufVxuZXhwb3J0cy5lcXVhbCA9IGVxdWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnQtdGltZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/constant-time/lib/constant-time.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/hash/lib/hash.js":
/*!**************************************************!*\
  !*** ./node_modules/@stablelib/hash/lib/hash.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nfunction isSerializableHash(h) {\n    return (typeof h.saveState !== \"undefined\" &&\n        typeof h.restoreState !== \"undefined\" &&\n        typeof h.cleanSavedState !== \"undefined\");\n}\nexports.isSerializableHash = isSerializableHash;\n// TODO(dchest): figure out the standardized interface for XOF such as\n// SHAKE and BLAKE2X.\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oYXNoL2xpYi9oYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oYXNoL2xpYi9oYXNoLmpzPzZiMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpc1NlcmlhbGl6YWJsZUhhc2goaCkge1xuICAgIHJldHVybiAodHlwZW9mIGguc2F2ZVN0YXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBoLnJlc3RvcmVTdGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgaC5jbGVhblNhdmVkU3RhdGUgIT09IFwidW5kZWZpbmVkXCIpO1xufVxuZXhwb3J0cy5pc1NlcmlhbGl6YWJsZUhhc2ggPSBpc1NlcmlhbGl6YWJsZUhhc2g7XG4vLyBUT0RPKGRjaGVzdCk6IGZpZ3VyZSBvdXQgdGhlIHN0YW5kYXJkaXplZCBpbnRlcmZhY2UgZm9yIFhPRiBzdWNoIGFzXG4vLyBTSEFLRSBhbmQgQkxBS0UyWC5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/hash/lib/hash.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/hkdf/lib/hkdf.js":
/*!**************************************************!*\
  !*** ./node_modules/@stablelib/hkdf/lib/hkdf.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar hmac_1 = __webpack_require__(/*! @stablelib/hmac */ \"./node_modules/@stablelib/hmac/lib/hmac.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function.\n *\n * Implements HKDF from RFC5869.\n *\n * Expands the given master key with salt and info into\n * a limited stream of key material.\n */\nvar HKDF = /** @class */ (function () {\n    /**\n     * Create a new HKDF instance for the given hash function\n     * with the master key, optional salt, and info.\n     *\n     * - Master key is a high-entropy secret key (not a password).\n     * - Salt is a non-secret random value.\n     * - Info is application- and/or context-specific information.\n     */\n    function HKDF(hash, key, salt, info) {\n        if (salt === void 0) { salt = new Uint8Array(0); }\n        this._counter = new Uint8Array(1); // starts with zero\n        this._hash = hash;\n        this._info = info;\n        // HKDF-Extract uses salt as HMAC key, and key as data.\n        var okm = hmac_1.hmac(this._hash, salt, key);\n        // Initialize HMAC for expanding with extracted key.\n        this._hmac = new hmac_1.HMAC(hash, okm);\n        // Allocate buffer.\n        this._buffer = new Uint8Array(this._hmac.digestLength);\n        this._bufpos = this._buffer.length;\n    }\n    // Fill buffer with new block of HKDF-Extract output.\n    HKDF.prototype._fillBuffer = function () {\n        // Increment counter.\n        this._counter[0]++;\n        var ctr = this._counter[0];\n        // Check if counter overflowed.\n        if (ctr === 0) {\n            throw new Error(\"hkdf: cannot expand more\");\n        }\n        // Prepare HMAC instance for new data with old key.\n        this._hmac.reset();\n        // Hash in previous output if it was generated\n        // (i.e. counter is greater than 1).\n        if (ctr > 1) {\n            this._hmac.update(this._buffer);\n        }\n        // Hash in info if it exists.\n        if (this._info) {\n            this._hmac.update(this._info);\n        }\n        // Hash in the counter.\n        this._hmac.update(this._counter);\n        // Output result to buffer and clean HMAC instance.\n        this._hmac.finish(this._buffer);\n        // Reset buffer position.\n        this._bufpos = 0;\n    };\n    /**\n     * Expand returns next key material of the given length.\n     *\n     * It throws if expansion limit is reached (which is\n     * 254 digests of the underlying HMAC function).\n     */\n    HKDF.prototype.expand = function (length) {\n        var out = new Uint8Array(length);\n        for (var i = 0; i < out.length; i++) {\n            if (this._bufpos === this._buffer.length) {\n                this._fillBuffer();\n            }\n            out[i] = this._buffer[this._bufpos++];\n        }\n        return out;\n    };\n    HKDF.prototype.clean = function () {\n        this._hmac.clean();\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._counter);\n        this._bufpos = 0;\n    };\n    return HKDF;\n}());\nexports.HKDF = HKDF;\n// TODO(dchest): maybe implement deriveKey?\n//# sourceMappingURL=hkdf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oa2RmL2xpYi9oa2RmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsbUVBQWlCO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyxtRUFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsWUFBWTtBQUNaO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaGtkZi9saWIvaGtkZi5qcz9lMzZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhtYWNfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL2htYWNcIik7XG52YXIgd2lwZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvd2lwZVwiKTtcbi8qKlxuICogSE1BQy1iYXNlZCBFeHRyYWN0LWFuZC1FeHBhbmQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24uXG4gKlxuICogSW1wbGVtZW50cyBIS0RGIGZyb20gUkZDNTg2OS5cbiAqXG4gKiBFeHBhbmRzIHRoZSBnaXZlbiBtYXN0ZXIga2V5IHdpdGggc2FsdCBhbmQgaW5mbyBpbnRvXG4gKiBhIGxpbWl0ZWQgc3RyZWFtIG9mIGtleSBtYXRlcmlhbC5cbiAqL1xudmFyIEhLREYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEhLREYgaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBoYXNoIGZ1bmN0aW9uXG4gICAgICogd2l0aCB0aGUgbWFzdGVyIGtleSwgb3B0aW9uYWwgc2FsdCwgYW5kIGluZm8uXG4gICAgICpcbiAgICAgKiAtIE1hc3RlciBrZXkgaXMgYSBoaWdoLWVudHJvcHkgc2VjcmV0IGtleSAobm90IGEgcGFzc3dvcmQpLlxuICAgICAqIC0gU2FsdCBpcyBhIG5vbi1zZWNyZXQgcmFuZG9tIHZhbHVlLlxuICAgICAqIC0gSW5mbyBpcyBhcHBsaWNhdGlvbi0gYW5kL29yIGNvbnRleHQtc3BlY2lmaWMgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gSEtERihoYXNoLCBrZXksIHNhbHQsIGluZm8pIHtcbiAgICAgICAgaWYgKHNhbHQgPT09IHZvaWQgMCkgeyBzYWx0ID0gbmV3IFVpbnQ4QXJyYXkoMCk7IH1cbiAgICAgICAgdGhpcy5fY291bnRlciA9IG5ldyBVaW50OEFycmF5KDEpOyAvLyBzdGFydHMgd2l0aCB6ZXJvXG4gICAgICAgIHRoaXMuX2hhc2ggPSBoYXNoO1xuICAgICAgICB0aGlzLl9pbmZvID0gaW5mbztcbiAgICAgICAgLy8gSEtERi1FeHRyYWN0IHVzZXMgc2FsdCBhcyBITUFDIGtleSwgYW5kIGtleSBhcyBkYXRhLlxuICAgICAgICB2YXIgb2ttID0gaG1hY18xLmhtYWModGhpcy5faGFzaCwgc2FsdCwga2V5KTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBITUFDIGZvciBleHBhbmRpbmcgd2l0aCBleHRyYWN0ZWQga2V5LlxuICAgICAgICB0aGlzLl9obWFjID0gbmV3IGhtYWNfMS5ITUFDKGhhc2gsIG9rbSk7XG4gICAgICAgIC8vIEFsbG9jYXRlIGJ1ZmZlci5cbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5faG1hYy5kaWdlc3RMZW5ndGgpO1xuICAgICAgICB0aGlzLl9idWZwb3MgPSB0aGlzLl9idWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICAvLyBGaWxsIGJ1ZmZlciB3aXRoIG5ldyBibG9jayBvZiBIS0RGLUV4dHJhY3Qgb3V0cHV0LlxuICAgIEhLREYucHJvdG90eXBlLl9maWxsQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJbmNyZW1lbnQgY291bnRlci5cbiAgICAgICAgdGhpcy5fY291bnRlclswXSsrO1xuICAgICAgICB2YXIgY3RyID0gdGhpcy5fY291bnRlclswXTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgY291bnRlciBvdmVyZmxvd2VkLlxuICAgICAgICBpZiAoY3RyID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoa2RmOiBjYW5ub3QgZXhwYW5kIG1vcmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJlcGFyZSBITUFDIGluc3RhbmNlIGZvciBuZXcgZGF0YSB3aXRoIG9sZCBrZXkuXG4gICAgICAgIHRoaXMuX2htYWMucmVzZXQoKTtcbiAgICAgICAgLy8gSGFzaCBpbiBwcmV2aW91cyBvdXRwdXQgaWYgaXQgd2FzIGdlbmVyYXRlZFxuICAgICAgICAvLyAoaS5lLiBjb3VudGVyIGlzIGdyZWF0ZXIgdGhhbiAxKS5cbiAgICAgICAgaWYgKGN0ciA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2htYWMudXBkYXRlKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFzaCBpbiBpbmZvIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgaWYgKHRoaXMuX2luZm8pIHtcbiAgICAgICAgICAgIHRoaXMuX2htYWMudXBkYXRlKHRoaXMuX2luZm8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhc2ggaW4gdGhlIGNvdW50ZXIuXG4gICAgICAgIHRoaXMuX2htYWMudXBkYXRlKHRoaXMuX2NvdW50ZXIpO1xuICAgICAgICAvLyBPdXRwdXQgcmVzdWx0IHRvIGJ1ZmZlciBhbmQgY2xlYW4gSE1BQyBpbnN0YW5jZS5cbiAgICAgICAgdGhpcy5faG1hYy5maW5pc2godGhpcy5fYnVmZmVyKTtcbiAgICAgICAgLy8gUmVzZXQgYnVmZmVyIHBvc2l0aW9uLlxuICAgICAgICB0aGlzLl9idWZwb3MgPSAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRXhwYW5kIHJldHVybnMgbmV4dCBrZXkgbWF0ZXJpYWwgb2YgdGhlIGdpdmVuIGxlbmd0aC5cbiAgICAgKlxuICAgICAqIEl0IHRocm93cyBpZiBleHBhbnNpb24gbGltaXQgaXMgcmVhY2hlZCAod2hpY2ggaXNcbiAgICAgKiAyNTQgZGlnZXN0cyBvZiB0aGUgdW5kZXJseWluZyBITUFDIGZ1bmN0aW9uKS5cbiAgICAgKi9cbiAgICBIS0RGLnByb3RvdHlwZS5leHBhbmQgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2J1ZnBvcyA9PT0gdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGxCdWZmZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dFtpXSA9IHRoaXMuX2J1ZmZlclt0aGlzLl9idWZwb3MrK107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIEhLREYucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9obWFjLmNsZWFuKCk7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2NvdW50ZXIpO1xuICAgICAgICB0aGlzLl9idWZwb3MgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIEhLREY7XG59KCkpO1xuZXhwb3J0cy5IS0RGID0gSEtERjtcbi8vIFRPRE8oZGNoZXN0KTogbWF5YmUgaW1wbGVtZW50IGRlcml2ZUtleT9cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhrZGYuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/hkdf/lib/hkdf.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/hmac/lib/hmac.js":
/*!**************************************************!*\
  !*** ./node_modules/@stablelib/hmac/lib/hmac.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Package hmac implements HMAC algorithm.\n */\nvar hash_1 = __webpack_require__(/*! @stablelib/hash */ \"./node_modules/@stablelib/hash/lib/hash.js\");\nvar constant_time_1 = __webpack_require__(/*! @stablelib/constant-time */ \"./node_modules/@stablelib/constant-time/lib/constant-time.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\n/**\n *  HMAC implements hash-based message authentication algorithm.\n */\nvar HMAC = /** @class */ (function () {\n    /**\n     * Constructs a new HMAC with the given Hash and secret key.\n     */\n    function HMAC(hash, key) {\n        this._finished = false; // true if HMAC was finalized\n        // Initialize inner and outer hashes.\n        this._inner = new hash();\n        this._outer = new hash();\n        // Set block and digest sizes for this HMAC\n        // instance to values from the hash.\n        this.blockSize = this._outer.blockSize;\n        this.digestLength = this._outer.digestLength;\n        // Pad temporary stores a key (or its hash) padded with zeroes.\n        var pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            // If key is bigger than hash block size, it must be\n            // hashed and this hash is used as a key instead.\n            this._inner.update(key).finish(pad).clean();\n        }\n        else {\n            // Otherwise, copy the key into pad.\n            pad.set(key);\n        }\n        // Now two different keys are derived from padded key\n        // by xoring a different byte value to each.\n        // To make inner hash key, xor byte 0x36 into pad.\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        // Update inner hash with the result.\n        this._inner.update(pad);\n        // To make outer hash key, xor byte 0x5c into pad.\n        // But since we already xored 0x36 there, we must\n        // first undo this by xoring it again.\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        // Update outer hash with the result.\n        this._outer.update(pad);\n        // Save states of both hashes, so that we can quickly restore\n        // them later in reset() without the need to remember the actual\n        // key and perform this initialization again.\n        if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {\n            this._innerKeyedState = this._inner.saveState();\n            this._outerKeyedState = this._outer.saveState();\n        }\n        // Clean pad.\n        wipe_1.wipe(pad);\n    }\n    /**\n     * Returns HMAC state to the state initialized with key\n     * to make it possible to run HMAC over the other data with the same\n     * key without creating a new instance.\n     */\n    HMAC.prototype.reset = function () {\n        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {\n            throw new Error(\"hmac: can't reset() because hash doesn't implement restoreState()\");\n        }\n        // Restore keyed states of inner and outer hashes.\n        this._inner.restoreState(this._innerKeyedState);\n        this._outer.restoreState(this._outerKeyedState);\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans HMAC state.\n     */\n    HMAC.prototype.clean = function () {\n        if (hash_1.isSerializableHash(this._inner)) {\n            this._inner.cleanSavedState(this._innerKeyedState);\n        }\n        if (hash_1.isSerializableHash(this._outer)) {\n            this._outer.cleanSavedState(this._outerKeyedState);\n        }\n        this._inner.clean();\n        this._outer.clean();\n    };\n    /**\n     * Updates state with provided data.\n     */\n    HMAC.prototype.update = function (data) {\n        this._inner.update(data);\n        return this;\n    };\n    /**\n     * Finalizes HMAC and puts the result in out.\n     */\n    HMAC.prototype.finish = function (out) {\n        if (this._finished) {\n            // If HMAC was finalized, outer hash is also finalized,\n            // so it produces the same digest it produced when it\n            // was finalized.\n            this._outer.finish(out);\n            return this;\n        }\n        // Finalize inner hash and store the result temporarily.\n        this._inner.finish(out);\n        // Update outer hash with digest of inner hash and and finalize it.\n        this._outer.update(out.subarray(0, this.digestLength)).finish(out);\n        this._finished = true;\n        return this;\n    };\n    /**\n     * Returns the computed message authentication code.\n     */\n    HMAC.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Saves HMAC state.\n     * This function is needed for PBKDF2 optimization.\n     */\n    HMAC.prototype.saveState = function () {\n        if (!hash_1.isSerializableHash(this._inner)) {\n            throw new Error(\"hmac: can't saveState() because hash doesn't implement it\");\n        }\n        return this._inner.saveState();\n    };\n    HMAC.prototype.restoreState = function (savedState) {\n        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {\n            throw new Error(\"hmac: can't restoreState() because hash doesn't implement it\");\n        }\n        this._inner.restoreState(savedState);\n        this._outer.restoreState(this._outerKeyedState);\n        this._finished = false;\n        return this;\n    };\n    HMAC.prototype.cleanSavedState = function (savedState) {\n        if (!hash_1.isSerializableHash(this._inner)) {\n            throw new Error(\"hmac: can't cleanSavedState() because hash doesn't implement it\");\n        }\n        this._inner.cleanSavedState(savedState);\n    };\n    return HMAC;\n}());\nexports.HMAC = HMAC;\n/**\n * Returns HMAC using the given hash constructor for the key over data.\n */\nfunction hmac(hash, key, data) {\n    var h = new HMAC(hash, key);\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hmac = hmac;\n/**\n * Returns true if two HMAC digests are equal.\n * Uses constant-time comparison to avoid leaking timing information.\n *\n * Example:\n *\n *    const receivedDigest = ...\n *    const realDigest = hmac(SHA256, key, data);\n *    if (!equal(receivedDigest, realDigest)) {\n *        throw new Error(\"Authentication error\");\n *    }\n */\nexports.equal = constant_time_1.equal;\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/hmac/lib/hmac.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/int/lib/int.js":
/*!************************************************!*\
  !*** ./node_modules/@stablelib/int/lib/int.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n    return (a + b) | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n    return (a - b) | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n    return x << n | x >>> (32 - n);\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n    return x << (32 - n) | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);\n};\n//# sourceMappingURL=int.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9pbnQvbGliL2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9pbnQvbGliL2ludC5qcz9iNGY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIGludCBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIGZvciBpbnRlZ2Vyc3MuXG4gKi9cbi8vIFNoaW0gdXNpbmcgMTYtYml0IHBpZWNlcy5cbmZ1bmN0aW9uIGltdWxTaGltKGEsIGIpIHtcbiAgICB2YXIgYWggPSAoYSA+Pj4gMTYpICYgMHhmZmZmLCBhbCA9IGEgJiAweGZmZmY7XG4gICAgdmFyIGJoID0gKGIgPj4+IDE2KSAmIDB4ZmZmZiwgYmwgPSBiICYgMHhmZmZmO1xuICAgIHJldHVybiAoKGFsICogYmwpICsgKCgoYWggKiBibCArIGFsICogYmgpIDw8IDE2KSA+Pj4gMCkgfCAwKTtcbn1cbi8qKiAzMi1iaXQgaW50ZWdlciBtdWx0aXBsaWNhdGlvbi4gICovXG4vLyBVc2Ugc3lzdGVtIE1hdGguaW11bCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSB1c2Ugb3VyIHNoaW0uXG5leHBvcnRzLm11bCA9IE1hdGguaW11bCB8fCBpbXVsU2hpbTtcbi8qKiAzMi1iaXQgaW50ZWdlciBhZGRpdGlvbi4gICovXG5mdW5jdGlvbiBhZGQoYSwgYikge1xuICAgIHJldHVybiAoYSArIGIpIHwgMDtcbn1cbmV4cG9ydHMuYWRkID0gYWRkO1xuLyoqICAzMi1iaXQgaW50ZWdlciBzdWJ0cmFjdGlvbi4gICovXG5mdW5jdGlvbiBzdWIoYSwgYikge1xuICAgIHJldHVybiAoYSAtIGIpIHwgMDtcbn1cbmV4cG9ydHMuc3ViID0gc3ViO1xuLyoqIDMyLWJpdCBpbnRlZ2VyIGxlZnQgcm90YXRpb24gKi9cbmZ1bmN0aW9uIHJvdGwoeCwgbikge1xuICAgIHJldHVybiB4IDw8IG4gfCB4ID4+PiAoMzIgLSBuKTtcbn1cbmV4cG9ydHMucm90bCA9IHJvdGw7XG4vKiogMzItYml0IGludGVnZXIgbGVmdCByb3RhdGlvbiAqL1xuZnVuY3Rpb24gcm90cih4LCBuKSB7XG4gICAgcmV0dXJuIHggPDwgKDMyIC0gbikgfCB4ID4+PiBuO1xufVxuZXhwb3J0cy5yb3RyID0gcm90cjtcbmZ1bmN0aW9uIGlzSW50ZWdlclNoaW0obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShuKSAmJiBNYXRoLmZsb29yKG4pID09PSBuO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGludGVnZXIgbnVtYmVyLlxuICpcbiAqIEluIEVTMjAxNSwgTnVtYmVyLmlzSW50ZWdlci5cbiAqL1xuZXhwb3J0cy5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGlzSW50ZWdlclNoaW07XG4vKipcbiAqICBNYXRoLnBvdygyLCA1MykgLSAxXG4gKlxuICogIEluIEVTMjAxNSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUi5cbiAqL1xuZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhIHNhZmUgaW50ZWdlciBudW1iZXJcbiAqICgtTUlOX1NBRkVfSU5URUdFUiA8IG51bWJlciA8PSBNQVhfU0FGRV9JTlRFR0VSKVxuICpcbiAqIEluIEVTMjAxNSwgTnVtYmVyLmlzU2FmZUludGVnZXIuXG4gKi9cbmV4cG9ydHMuaXNTYWZlSW50ZWdlciA9IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNJbnRlZ2VyKG4pICYmIChuID49IC1leHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIgJiYgbiA8PSBleHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/int/lib/int.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/poly1305/lib/poly1305.js":
/*!**********************************************************!*\
  !*** ./node_modules/@stablelib/poly1305/lib/poly1305.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Package poly1305 implements Poly1305 one-time message authentication algorithm.\n */\nvar constant_time_1 = __webpack_require__(/*! @stablelib/constant-time */ \"./node_modules/@stablelib/constant-time/lib/constant-time.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.DIGEST_LENGTH = 16;\n// Port of Andrew Moon's Poly1305-donna-16. Public domain.\n// https://github.com/floodyberry/poly1305-donna\n/**\n * Poly1305 computes 16-byte authenticator of message using\n * a one-time 32-byte key.\n *\n * Important: key should be used for only one message,\n * it should never repeat.\n */\nvar Poly1305 = /** @class */ (function () {\n    function Poly1305(key) {\n        this.digestLength = exports.DIGEST_LENGTH;\n        this._buffer = new Uint8Array(16);\n        this._r = new Uint16Array(10);\n        this._h = new Uint16Array(10);\n        this._pad = new Uint16Array(8);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = false;\n        var t0 = key[0] | key[1] << 8;\n        this._r[0] = (t0) & 0x1fff;\n        var t1 = key[2] | key[3] << 8;\n        this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n        var t2 = key[4] | key[5] << 8;\n        this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n        var t3 = key[6] | key[7] << 8;\n        this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n        var t4 = key[8] | key[9] << 8;\n        this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n        this._r[5] = ((t4 >>> 1)) & 0x1ffe;\n        var t5 = key[10] | key[11] << 8;\n        this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n        var t6 = key[12] | key[13] << 8;\n        this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n        var t7 = key[14] | key[15] << 8;\n        this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n        this._r[9] = ((t7 >>> 5)) & 0x007f;\n        this._pad[0] = key[16] | key[17] << 8;\n        this._pad[1] = key[18] | key[19] << 8;\n        this._pad[2] = key[20] | key[21] << 8;\n        this._pad[3] = key[22] | key[23] << 8;\n        this._pad[4] = key[24] | key[25] << 8;\n        this._pad[5] = key[26] | key[27] << 8;\n        this._pad[6] = key[28] | key[29] << 8;\n        this._pad[7] = key[30] | key[31] << 8;\n    }\n    Poly1305.prototype._blocks = function (m, mpos, bytes) {\n        var hibit = this._fin ? 0 : 1 << 11;\n        var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];\n        var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];\n        while (bytes >= 16) {\n            var t0 = m[mpos + 0] | m[mpos + 1] << 8;\n            h0 += (t0) & 0x1fff;\n            var t1 = m[mpos + 2] | m[mpos + 3] << 8;\n            h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n            var t2 = m[mpos + 4] | m[mpos + 5] << 8;\n            h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;\n            var t3 = m[mpos + 6] | m[mpos + 7] << 8;\n            h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n            var t4 = m[mpos + 8] | m[mpos + 9] << 8;\n            h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;\n            h5 += ((t4 >>> 1)) & 0x1fff;\n            var t5 = m[mpos + 10] | m[mpos + 11] << 8;\n            h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n            var t6 = m[mpos + 12] | m[mpos + 13] << 8;\n            h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;\n            var t7 = m[mpos + 14] | m[mpos + 15] << 8;\n            h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n            h9 += ((t7 >>> 5)) | hibit;\n            var c = 0;\n            var d0 = c;\n            d0 += h0 * r0;\n            d0 += h1 * (5 * r9);\n            d0 += h2 * (5 * r8);\n            d0 += h3 * (5 * r7);\n            d0 += h4 * (5 * r6);\n            c = (d0 >>> 13);\n            d0 &= 0x1fff;\n            d0 += h5 * (5 * r5);\n            d0 += h6 * (5 * r4);\n            d0 += h7 * (5 * r3);\n            d0 += h8 * (5 * r2);\n            d0 += h9 * (5 * r1);\n            c += (d0 >>> 13);\n            d0 &= 0x1fff;\n            var d1 = c;\n            d1 += h0 * r1;\n            d1 += h1 * r0;\n            d1 += h2 * (5 * r9);\n            d1 += h3 * (5 * r8);\n            d1 += h4 * (5 * r7);\n            c = (d1 >>> 13);\n            d1 &= 0x1fff;\n            d1 += h5 * (5 * r6);\n            d1 += h6 * (5 * r5);\n            d1 += h7 * (5 * r4);\n            d1 += h8 * (5 * r3);\n            d1 += h9 * (5 * r2);\n            c += (d1 >>> 13);\n            d1 &= 0x1fff;\n            var d2 = c;\n            d2 += h0 * r2;\n            d2 += h1 * r1;\n            d2 += h2 * r0;\n            d2 += h3 * (5 * r9);\n            d2 += h4 * (5 * r8);\n            c = (d2 >>> 13);\n            d2 &= 0x1fff;\n            d2 += h5 * (5 * r7);\n            d2 += h6 * (5 * r6);\n            d2 += h7 * (5 * r5);\n            d2 += h8 * (5 * r4);\n            d2 += h9 * (5 * r3);\n            c += (d2 >>> 13);\n            d2 &= 0x1fff;\n            var d3 = c;\n            d3 += h0 * r3;\n            d3 += h1 * r2;\n            d3 += h2 * r1;\n            d3 += h3 * r0;\n            d3 += h4 * (5 * r9);\n            c = (d3 >>> 13);\n            d3 &= 0x1fff;\n            d3 += h5 * (5 * r8);\n            d3 += h6 * (5 * r7);\n            d3 += h7 * (5 * r6);\n            d3 += h8 * (5 * r5);\n            d3 += h9 * (5 * r4);\n            c += (d3 >>> 13);\n            d3 &= 0x1fff;\n            var d4 = c;\n            d4 += h0 * r4;\n            d4 += h1 * r3;\n            d4 += h2 * r2;\n            d4 += h3 * r1;\n            d4 += h4 * r0;\n            c = (d4 >>> 13);\n            d4 &= 0x1fff;\n            d4 += h5 * (5 * r9);\n            d4 += h6 * (5 * r8);\n            d4 += h7 * (5 * r7);\n            d4 += h8 * (5 * r6);\n            d4 += h9 * (5 * r5);\n            c += (d4 >>> 13);\n            d4 &= 0x1fff;\n            var d5 = c;\n            d5 += h0 * r5;\n            d5 += h1 * r4;\n            d5 += h2 * r3;\n            d5 += h3 * r2;\n            d5 += h4 * r1;\n            c = (d5 >>> 13);\n            d5 &= 0x1fff;\n            d5 += h5 * r0;\n            d5 += h6 * (5 * r9);\n            d5 += h7 * (5 * r8);\n            d5 += h8 * (5 * r7);\n            d5 += h9 * (5 * r6);\n            c += (d5 >>> 13);\n            d5 &= 0x1fff;\n            var d6 = c;\n            d6 += h0 * r6;\n            d6 += h1 * r5;\n            d6 += h2 * r4;\n            d6 += h3 * r3;\n            d6 += h4 * r2;\n            c = (d6 >>> 13);\n            d6 &= 0x1fff;\n            d6 += h5 * r1;\n            d6 += h6 * r0;\n            d6 += h7 * (5 * r9);\n            d6 += h8 * (5 * r8);\n            d6 += h9 * (5 * r7);\n            c += (d6 >>> 13);\n            d6 &= 0x1fff;\n            var d7 = c;\n            d7 += h0 * r7;\n            d7 += h1 * r6;\n            d7 += h2 * r5;\n            d7 += h3 * r4;\n            d7 += h4 * r3;\n            c = (d7 >>> 13);\n            d7 &= 0x1fff;\n            d7 += h5 * r2;\n            d7 += h6 * r1;\n            d7 += h7 * r0;\n            d7 += h8 * (5 * r9);\n            d7 += h9 * (5 * r8);\n            c += (d7 >>> 13);\n            d7 &= 0x1fff;\n            var d8 = c;\n            d8 += h0 * r8;\n            d8 += h1 * r7;\n            d8 += h2 * r6;\n            d8 += h3 * r5;\n            d8 += h4 * r4;\n            c = (d8 >>> 13);\n            d8 &= 0x1fff;\n            d8 += h5 * r3;\n            d8 += h6 * r2;\n            d8 += h7 * r1;\n            d8 += h8 * r0;\n            d8 += h9 * (5 * r9);\n            c += (d8 >>> 13);\n            d8 &= 0x1fff;\n            var d9 = c;\n            d9 += h0 * r9;\n            d9 += h1 * r8;\n            d9 += h2 * r7;\n            d9 += h3 * r6;\n            d9 += h4 * r5;\n            c = (d9 >>> 13);\n            d9 &= 0x1fff;\n            d9 += h5 * r4;\n            d9 += h6 * r3;\n            d9 += h7 * r2;\n            d9 += h8 * r1;\n            d9 += h9 * r0;\n            c += (d9 >>> 13);\n            d9 &= 0x1fff;\n            c = (((c << 2) + c)) | 0;\n            c = (c + d0) | 0;\n            d0 = c & 0x1fff;\n            c = (c >>> 13);\n            d1 += c;\n            h0 = d0;\n            h1 = d1;\n            h2 = d2;\n            h3 = d3;\n            h4 = d4;\n            h5 = d5;\n            h6 = d6;\n            h7 = d7;\n            h8 = d8;\n            h9 = d9;\n            mpos += 16;\n            bytes -= 16;\n        }\n        this._h[0] = h0;\n        this._h[1] = h1;\n        this._h[2] = h2;\n        this._h[3] = h3;\n        this._h[4] = h4;\n        this._h[5] = h5;\n        this._h[6] = h6;\n        this._h[7] = h7;\n        this._h[8] = h8;\n        this._h[9] = h9;\n    };\n    Poly1305.prototype.finish = function (mac, macpos) {\n        if (macpos === void 0) { macpos = 0; }\n        var g = new Uint16Array(10);\n        var c;\n        var mask;\n        var f;\n        var i;\n        if (this._leftover) {\n            i = this._leftover;\n            this._buffer[i++] = 1;\n            for (; i < 16; i++) {\n                this._buffer[i] = 0;\n            }\n            this._fin = 1;\n            this._blocks(this._buffer, 0, 16);\n        }\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        for (i = 2; i < 10; i++) {\n            this._h[i] += c;\n            c = this._h[i] >>> 13;\n            this._h[i] &= 0x1fff;\n        }\n        this._h[0] += (c * 5);\n        c = this._h[0] >>> 13;\n        this._h[0] &= 0x1fff;\n        this._h[1] += c;\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        this._h[2] += c;\n        g[0] = this._h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for (i = 1; i < 10; i++) {\n            g[i] = this._h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= (1 << 13);\n        mask = (c ^ 1) - 1;\n        for (i = 0; i < 10; i++) {\n            g[i] &= mask;\n        }\n        mask = ~mask;\n        for (i = 0; i < 10; i++) {\n            this._h[i] = (this._h[i] & mask) | g[i];\n        }\n        this._h[0] = ((this._h[0]) | (this._h[1] << 13)) & 0xffff;\n        this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;\n        this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;\n        this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;\n        this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;\n        this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;\n        this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;\n        this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;\n        f = this._h[0] + this._pad[0];\n        this._h[0] = f & 0xffff;\n        for (i = 1; i < 8; i++) {\n            f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;\n            this._h[i] = f & 0xffff;\n        }\n        mac[macpos + 0] = this._h[0] >>> 0;\n        mac[macpos + 1] = this._h[0] >>> 8;\n        mac[macpos + 2] = this._h[1] >>> 0;\n        mac[macpos + 3] = this._h[1] >>> 8;\n        mac[macpos + 4] = this._h[2] >>> 0;\n        mac[macpos + 5] = this._h[2] >>> 8;\n        mac[macpos + 6] = this._h[3] >>> 0;\n        mac[macpos + 7] = this._h[3] >>> 8;\n        mac[macpos + 8] = this._h[4] >>> 0;\n        mac[macpos + 9] = this._h[4] >>> 8;\n        mac[macpos + 10] = this._h[5] >>> 0;\n        mac[macpos + 11] = this._h[5] >>> 8;\n        mac[macpos + 12] = this._h[6] >>> 0;\n        mac[macpos + 13] = this._h[6] >>> 8;\n        mac[macpos + 14] = this._h[7] >>> 0;\n        mac[macpos + 15] = this._h[7] >>> 8;\n        this._finished = true;\n        return this;\n    };\n    Poly1305.prototype.update = function (m) {\n        var mpos = 0;\n        var bytes = m.length;\n        var want;\n        if (this._leftover) {\n            want = (16 - this._leftover);\n            if (want > bytes) {\n                want = bytes;\n            }\n            for (var i = 0; i < want; i++) {\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            bytes -= want;\n            mpos += want;\n            this._leftover += want;\n            if (this._leftover < 16) {\n                return this;\n            }\n            this._blocks(this._buffer, 0, 16);\n            this._leftover = 0;\n        }\n        if (bytes >= 16) {\n            want = bytes - (bytes % 16);\n            this._blocks(m, mpos, want);\n            mpos += want;\n            bytes -= want;\n        }\n        if (bytes) {\n            for (var i = 0; i < bytes; i++) {\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            this._leftover += bytes;\n        }\n        return this;\n    };\n    Poly1305.prototype.digest = function () {\n        // TODO(dchest): it behaves differently than other hashes/HMAC,\n        // because it throws when finished — others just return saved result.\n        if (this._finished) {\n            throw new Error(\"Poly1305 was finished\");\n        }\n        var mac = new Uint8Array(16);\n        this.finish(mac);\n        return mac;\n    };\n    Poly1305.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._r);\n        wipe_1.wipe(this._h);\n        wipe_1.wipe(this._pad);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = true; // mark as finished even if not\n        return this;\n    };\n    return Poly1305;\n}());\nexports.Poly1305 = Poly1305;\n/**\n * Returns 16-byte authenticator of data using a one-time 32-byte key.\n *\n * Important: key should be used for only one message, it should never repeat.\n */\nfunction oneTimeAuth(key, data) {\n    var h = new Poly1305(key);\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.oneTimeAuth = oneTimeAuth;\n/**\n * Returns true if two authenticators are 16-byte long and equal.\n * Uses contant-time comparison to avoid leaking timing information.\n */\nfunction equal(a, b) {\n    if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {\n        return false;\n    }\n    return constant_time_1.equal(a, b);\n}\nexports.equal = equal;\n//# sourceMappingURL=poly1305.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9wb2x5MTMwNS9saWIvcG9seTEzMDUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDhGQUEwQjtBQUN4RCxhQUFhLG1CQUFPLENBQUMsbUVBQWlCO0FBQ3RDLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsV0FBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3BvbHkxMzA1L2xpYi9wb2x5MTMwNS5qcz8zNDAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIHBvbHkxMzA1IGltcGxlbWVudHMgUG9seTEzMDUgb25lLXRpbWUgbWVzc2FnZSBhdXRoZW50aWNhdGlvbiBhbGdvcml0aG0uXG4gKi9cbnZhciBjb25zdGFudF90aW1lXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9jb25zdGFudC10aW1lXCIpO1xudmFyIHdpcGVfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL3dpcGVcIik7XG5leHBvcnRzLkRJR0VTVF9MRU5HVEggPSAxNjtcbi8vIFBvcnQgb2YgQW5kcmV3IE1vb24ncyBQb2x5MTMwNS1kb25uYS0xNi4gUHVibGljIGRvbWFpbi5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mbG9vZHliZXJyeS9wb2x5MTMwNS1kb25uYVxuLyoqXG4gKiBQb2x5MTMwNSBjb21wdXRlcyAxNi1ieXRlIGF1dGhlbnRpY2F0b3Igb2YgbWVzc2FnZSB1c2luZ1xuICogYSBvbmUtdGltZSAzMi1ieXRlIGtleS5cbiAqXG4gKiBJbXBvcnRhbnQ6IGtleSBzaG91bGQgYmUgdXNlZCBmb3Igb25seSBvbmUgbWVzc2FnZSxcbiAqIGl0IHNob3VsZCBuZXZlciByZXBlYXQuXG4gKi9cbnZhciBQb2x5MTMwNSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQb2x5MTMwNShrZXkpIHtcbiAgICAgICAgdGhpcy5kaWdlc3RMZW5ndGggPSBleHBvcnRzLkRJR0VTVF9MRU5HVEg7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgdGhpcy5fciA9IG5ldyBVaW50MTZBcnJheSgxMCk7XG4gICAgICAgIHRoaXMuX2ggPSBuZXcgVWludDE2QXJyYXkoMTApO1xuICAgICAgICB0aGlzLl9wYWQgPSBuZXcgVWludDE2QXJyYXkoOCk7XG4gICAgICAgIHRoaXMuX2xlZnRvdmVyID0gMDtcbiAgICAgICAgdGhpcy5fZmluID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHQwID0ga2V5WzBdIHwga2V5WzFdIDw8IDg7XG4gICAgICAgIHRoaXMuX3JbMF0gPSAodDApICYgMHgxZmZmO1xuICAgICAgICB2YXIgdDEgPSBrZXlbMl0gfCBrZXlbM10gPDwgODtcbiAgICAgICAgdGhpcy5fclsxXSA9ICgodDAgPj4+IDEzKSB8ICh0MSA8PCAzKSkgJiAweDFmZmY7XG4gICAgICAgIHZhciB0MiA9IGtleVs0XSB8IGtleVs1XSA8PCA4O1xuICAgICAgICB0aGlzLl9yWzJdID0gKCh0MSA+Pj4gMTApIHwgKHQyIDw8IDYpKSAmIDB4MWYwMztcbiAgICAgICAgdmFyIHQzID0ga2V5WzZdIHwga2V5WzddIDw8IDg7XG4gICAgICAgIHRoaXMuX3JbM10gPSAoKHQyID4+PiA3KSB8ICh0MyA8PCA5KSkgJiAweDFmZmY7XG4gICAgICAgIHZhciB0NCA9IGtleVs4XSB8IGtleVs5XSA8PCA4O1xuICAgICAgICB0aGlzLl9yWzRdID0gKCh0MyA+Pj4gNCkgfCAodDQgPDwgMTIpKSAmIDB4MDBmZjtcbiAgICAgICAgdGhpcy5fcls1XSA9ICgodDQgPj4+IDEpKSAmIDB4MWZmZTtcbiAgICAgICAgdmFyIHQ1ID0ga2V5WzEwXSB8IGtleVsxMV0gPDwgODtcbiAgICAgICAgdGhpcy5fcls2XSA9ICgodDQgPj4+IDE0KSB8ICh0NSA8PCAyKSkgJiAweDFmZmY7XG4gICAgICAgIHZhciB0NiA9IGtleVsxMl0gfCBrZXlbMTNdIDw8IDg7XG4gICAgICAgIHRoaXMuX3JbN10gPSAoKHQ1ID4+PiAxMSkgfCAodDYgPDwgNSkpICYgMHgxZjgxO1xuICAgICAgICB2YXIgdDcgPSBrZXlbMTRdIHwga2V5WzE1XSA8PCA4O1xuICAgICAgICB0aGlzLl9yWzhdID0gKCh0NiA+Pj4gOCkgfCAodDcgPDwgOCkpICYgMHgxZmZmO1xuICAgICAgICB0aGlzLl9yWzldID0gKCh0NyA+Pj4gNSkpICYgMHgwMDdmO1xuICAgICAgICB0aGlzLl9wYWRbMF0gPSBrZXlbMTZdIHwga2V5WzE3XSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbMV0gPSBrZXlbMThdIHwga2V5WzE5XSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbMl0gPSBrZXlbMjBdIHwga2V5WzIxXSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbM10gPSBrZXlbMjJdIHwga2V5WzIzXSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbNF0gPSBrZXlbMjRdIHwga2V5WzI1XSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbNV0gPSBrZXlbMjZdIHwga2V5WzI3XSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbNl0gPSBrZXlbMjhdIHwga2V5WzI5XSA8PCA4O1xuICAgICAgICB0aGlzLl9wYWRbN10gPSBrZXlbMzBdIHwga2V5WzMxXSA8PCA4O1xuICAgIH1cbiAgICBQb2x5MTMwNS5wcm90b3R5cGUuX2Jsb2NrcyA9IGZ1bmN0aW9uIChtLCBtcG9zLCBieXRlcykge1xuICAgICAgICB2YXIgaGliaXQgPSB0aGlzLl9maW4gPyAwIDogMSA8PCAxMTtcbiAgICAgICAgdmFyIGgwID0gdGhpcy5faFswXSwgaDEgPSB0aGlzLl9oWzFdLCBoMiA9IHRoaXMuX2hbMl0sIGgzID0gdGhpcy5faFszXSwgaDQgPSB0aGlzLl9oWzRdLCBoNSA9IHRoaXMuX2hbNV0sIGg2ID0gdGhpcy5faFs2XSwgaDcgPSB0aGlzLl9oWzddLCBoOCA9IHRoaXMuX2hbOF0sIGg5ID0gdGhpcy5faFs5XTtcbiAgICAgICAgdmFyIHIwID0gdGhpcy5fclswXSwgcjEgPSB0aGlzLl9yWzFdLCByMiA9IHRoaXMuX3JbMl0sIHIzID0gdGhpcy5fclszXSwgcjQgPSB0aGlzLl9yWzRdLCByNSA9IHRoaXMuX3JbNV0sIHI2ID0gdGhpcy5fcls2XSwgcjcgPSB0aGlzLl9yWzddLCByOCA9IHRoaXMuX3JbOF0sIHI5ID0gdGhpcy5fcls5XTtcbiAgICAgICAgd2hpbGUgKGJ5dGVzID49IDE2KSB7XG4gICAgICAgICAgICB2YXIgdDAgPSBtW21wb3MgKyAwXSB8IG1bbXBvcyArIDFdIDw8IDg7XG4gICAgICAgICAgICBoMCArPSAodDApICYgMHgxZmZmO1xuICAgICAgICAgICAgdmFyIHQxID0gbVttcG9zICsgMl0gfCBtW21wb3MgKyAzXSA8PCA4O1xuICAgICAgICAgICAgaDEgKz0gKCh0MCA+Pj4gMTMpIHwgKHQxIDw8IDMpKSAmIDB4MWZmZjtcbiAgICAgICAgICAgIHZhciB0MiA9IG1bbXBvcyArIDRdIHwgbVttcG9zICsgNV0gPDwgODtcbiAgICAgICAgICAgIGgyICs9ICgodDEgPj4+IDEwKSB8ICh0MiA8PCA2KSkgJiAweDFmZmY7XG4gICAgICAgICAgICB2YXIgdDMgPSBtW21wb3MgKyA2XSB8IG1bbXBvcyArIDddIDw8IDg7XG4gICAgICAgICAgICBoMyArPSAoKHQyID4+PiA3KSB8ICh0MyA8PCA5KSkgJiAweDFmZmY7XG4gICAgICAgICAgICB2YXIgdDQgPSBtW21wb3MgKyA4XSB8IG1bbXBvcyArIDldIDw8IDg7XG4gICAgICAgICAgICBoNCArPSAoKHQzID4+PiA0KSB8ICh0NCA8PCAxMikpICYgMHgxZmZmO1xuICAgICAgICAgICAgaDUgKz0gKCh0NCA+Pj4gMSkpICYgMHgxZmZmO1xuICAgICAgICAgICAgdmFyIHQ1ID0gbVttcG9zICsgMTBdIHwgbVttcG9zICsgMTFdIDw8IDg7XG4gICAgICAgICAgICBoNiArPSAoKHQ0ID4+PiAxNCkgfCAodDUgPDwgMikpICYgMHgxZmZmO1xuICAgICAgICAgICAgdmFyIHQ2ID0gbVttcG9zICsgMTJdIHwgbVttcG9zICsgMTNdIDw8IDg7XG4gICAgICAgICAgICBoNyArPSAoKHQ1ID4+PiAxMSkgfCAodDYgPDwgNSkpICYgMHgxZmZmO1xuICAgICAgICAgICAgdmFyIHQ3ID0gbVttcG9zICsgMTRdIHwgbVttcG9zICsgMTVdIDw8IDg7XG4gICAgICAgICAgICBoOCArPSAoKHQ2ID4+PiA4KSB8ICh0NyA8PCA4KSkgJiAweDFmZmY7XG4gICAgICAgICAgICBoOSArPSAoKHQ3ID4+PiA1KSkgfCBoaWJpdDtcbiAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgIHZhciBkMCA9IGM7XG4gICAgICAgICAgICBkMCArPSBoMCAqIHIwO1xuICAgICAgICAgICAgZDAgKz0gaDEgKiAoNSAqIHI5KTtcbiAgICAgICAgICAgIGQwICs9IGgyICogKDUgKiByOCk7XG4gICAgICAgICAgICBkMCArPSBoMyAqICg1ICogcjcpO1xuICAgICAgICAgICAgZDAgKz0gaDQgKiAoNSAqIHI2KTtcbiAgICAgICAgICAgIGMgPSAoZDAgPj4+IDEzKTtcbiAgICAgICAgICAgIGQwICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQwICs9IGg1ICogKDUgKiByNSk7XG4gICAgICAgICAgICBkMCArPSBoNiAqICg1ICogcjQpO1xuICAgICAgICAgICAgZDAgKz0gaDcgKiAoNSAqIHIzKTtcbiAgICAgICAgICAgIGQwICs9IGg4ICogKDUgKiByMik7XG4gICAgICAgICAgICBkMCArPSBoOSAqICg1ICogcjEpO1xuICAgICAgICAgICAgYyArPSAoZDAgPj4+IDEzKTtcbiAgICAgICAgICAgIGQwICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkMSA9IGM7XG4gICAgICAgICAgICBkMSArPSBoMCAqIHIxO1xuICAgICAgICAgICAgZDEgKz0gaDEgKiByMDtcbiAgICAgICAgICAgIGQxICs9IGgyICogKDUgKiByOSk7XG4gICAgICAgICAgICBkMSArPSBoMyAqICg1ICogcjgpO1xuICAgICAgICAgICAgZDEgKz0gaDQgKiAoNSAqIHI3KTtcbiAgICAgICAgICAgIGMgPSAoZDEgPj4+IDEzKTtcbiAgICAgICAgICAgIGQxICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQxICs9IGg1ICogKDUgKiByNik7XG4gICAgICAgICAgICBkMSArPSBoNiAqICg1ICogcjUpO1xuICAgICAgICAgICAgZDEgKz0gaDcgKiAoNSAqIHI0KTtcbiAgICAgICAgICAgIGQxICs9IGg4ICogKDUgKiByMyk7XG4gICAgICAgICAgICBkMSArPSBoOSAqICg1ICogcjIpO1xuICAgICAgICAgICAgYyArPSAoZDEgPj4+IDEzKTtcbiAgICAgICAgICAgIGQxICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkMiA9IGM7XG4gICAgICAgICAgICBkMiArPSBoMCAqIHIyO1xuICAgICAgICAgICAgZDIgKz0gaDEgKiByMTtcbiAgICAgICAgICAgIGQyICs9IGgyICogcjA7XG4gICAgICAgICAgICBkMiArPSBoMyAqICg1ICogcjkpO1xuICAgICAgICAgICAgZDIgKz0gaDQgKiAoNSAqIHI4KTtcbiAgICAgICAgICAgIGMgPSAoZDIgPj4+IDEzKTtcbiAgICAgICAgICAgIGQyICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQyICs9IGg1ICogKDUgKiByNyk7XG4gICAgICAgICAgICBkMiArPSBoNiAqICg1ICogcjYpO1xuICAgICAgICAgICAgZDIgKz0gaDcgKiAoNSAqIHI1KTtcbiAgICAgICAgICAgIGQyICs9IGg4ICogKDUgKiByNCk7XG4gICAgICAgICAgICBkMiArPSBoOSAqICg1ICogcjMpO1xuICAgICAgICAgICAgYyArPSAoZDIgPj4+IDEzKTtcbiAgICAgICAgICAgIGQyICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkMyA9IGM7XG4gICAgICAgICAgICBkMyArPSBoMCAqIHIzO1xuICAgICAgICAgICAgZDMgKz0gaDEgKiByMjtcbiAgICAgICAgICAgIGQzICs9IGgyICogcjE7XG4gICAgICAgICAgICBkMyArPSBoMyAqIHIwO1xuICAgICAgICAgICAgZDMgKz0gaDQgKiAoNSAqIHI5KTtcbiAgICAgICAgICAgIGMgPSAoZDMgPj4+IDEzKTtcbiAgICAgICAgICAgIGQzICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQzICs9IGg1ICogKDUgKiByOCk7XG4gICAgICAgICAgICBkMyArPSBoNiAqICg1ICogcjcpO1xuICAgICAgICAgICAgZDMgKz0gaDcgKiAoNSAqIHI2KTtcbiAgICAgICAgICAgIGQzICs9IGg4ICogKDUgKiByNSk7XG4gICAgICAgICAgICBkMyArPSBoOSAqICg1ICogcjQpO1xuICAgICAgICAgICAgYyArPSAoZDMgPj4+IDEzKTtcbiAgICAgICAgICAgIGQzICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkNCA9IGM7XG4gICAgICAgICAgICBkNCArPSBoMCAqIHI0O1xuICAgICAgICAgICAgZDQgKz0gaDEgKiByMztcbiAgICAgICAgICAgIGQ0ICs9IGgyICogcjI7XG4gICAgICAgICAgICBkNCArPSBoMyAqIHIxO1xuICAgICAgICAgICAgZDQgKz0gaDQgKiByMDtcbiAgICAgICAgICAgIGMgPSAoZDQgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ0ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQ0ICs9IGg1ICogKDUgKiByOSk7XG4gICAgICAgICAgICBkNCArPSBoNiAqICg1ICogcjgpO1xuICAgICAgICAgICAgZDQgKz0gaDcgKiAoNSAqIHI3KTtcbiAgICAgICAgICAgIGQ0ICs9IGg4ICogKDUgKiByNik7XG4gICAgICAgICAgICBkNCArPSBoOSAqICg1ICogcjUpO1xuICAgICAgICAgICAgYyArPSAoZDQgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ0ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkNSA9IGM7XG4gICAgICAgICAgICBkNSArPSBoMCAqIHI1O1xuICAgICAgICAgICAgZDUgKz0gaDEgKiByNDtcbiAgICAgICAgICAgIGQ1ICs9IGgyICogcjM7XG4gICAgICAgICAgICBkNSArPSBoMyAqIHIyO1xuICAgICAgICAgICAgZDUgKz0gaDQgKiByMTtcbiAgICAgICAgICAgIGMgPSAoZDUgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ1ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQ1ICs9IGg1ICogcjA7XG4gICAgICAgICAgICBkNSArPSBoNiAqICg1ICogcjkpO1xuICAgICAgICAgICAgZDUgKz0gaDcgKiAoNSAqIHI4KTtcbiAgICAgICAgICAgIGQ1ICs9IGg4ICogKDUgKiByNyk7XG4gICAgICAgICAgICBkNSArPSBoOSAqICg1ICogcjYpO1xuICAgICAgICAgICAgYyArPSAoZDUgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ1ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkNiA9IGM7XG4gICAgICAgICAgICBkNiArPSBoMCAqIHI2O1xuICAgICAgICAgICAgZDYgKz0gaDEgKiByNTtcbiAgICAgICAgICAgIGQ2ICs9IGgyICogcjQ7XG4gICAgICAgICAgICBkNiArPSBoMyAqIHIzO1xuICAgICAgICAgICAgZDYgKz0gaDQgKiByMjtcbiAgICAgICAgICAgIGMgPSAoZDYgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ2ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQ2ICs9IGg1ICogcjE7XG4gICAgICAgICAgICBkNiArPSBoNiAqIHIwO1xuICAgICAgICAgICAgZDYgKz0gaDcgKiAoNSAqIHI5KTtcbiAgICAgICAgICAgIGQ2ICs9IGg4ICogKDUgKiByOCk7XG4gICAgICAgICAgICBkNiArPSBoOSAqICg1ICogcjcpO1xuICAgICAgICAgICAgYyArPSAoZDYgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ2ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkNyA9IGM7XG4gICAgICAgICAgICBkNyArPSBoMCAqIHI3O1xuICAgICAgICAgICAgZDcgKz0gaDEgKiByNjtcbiAgICAgICAgICAgIGQ3ICs9IGgyICogcjU7XG4gICAgICAgICAgICBkNyArPSBoMyAqIHI0O1xuICAgICAgICAgICAgZDcgKz0gaDQgKiByMztcbiAgICAgICAgICAgIGMgPSAoZDcgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ3ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQ3ICs9IGg1ICogcjI7XG4gICAgICAgICAgICBkNyArPSBoNiAqIHIxO1xuICAgICAgICAgICAgZDcgKz0gaDcgKiByMDtcbiAgICAgICAgICAgIGQ3ICs9IGg4ICogKDUgKiByOSk7XG4gICAgICAgICAgICBkNyArPSBoOSAqICg1ICogcjgpO1xuICAgICAgICAgICAgYyArPSAoZDcgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ3ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkOCA9IGM7XG4gICAgICAgICAgICBkOCArPSBoMCAqIHI4O1xuICAgICAgICAgICAgZDggKz0gaDEgKiByNztcbiAgICAgICAgICAgIGQ4ICs9IGgyICogcjY7XG4gICAgICAgICAgICBkOCArPSBoMyAqIHI1O1xuICAgICAgICAgICAgZDggKz0gaDQgKiByNDtcbiAgICAgICAgICAgIGMgPSAoZDggPj4+IDEzKTtcbiAgICAgICAgICAgIGQ4ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQ4ICs9IGg1ICogcjM7XG4gICAgICAgICAgICBkOCArPSBoNiAqIHIyO1xuICAgICAgICAgICAgZDggKz0gaDcgKiByMTtcbiAgICAgICAgICAgIGQ4ICs9IGg4ICogcjA7XG4gICAgICAgICAgICBkOCArPSBoOSAqICg1ICogcjkpO1xuICAgICAgICAgICAgYyArPSAoZDggPj4+IDEzKTtcbiAgICAgICAgICAgIGQ4ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIHZhciBkOSA9IGM7XG4gICAgICAgICAgICBkOSArPSBoMCAqIHI5O1xuICAgICAgICAgICAgZDkgKz0gaDEgKiByODtcbiAgICAgICAgICAgIGQ5ICs9IGgyICogcjc7XG4gICAgICAgICAgICBkOSArPSBoMyAqIHI2O1xuICAgICAgICAgICAgZDkgKz0gaDQgKiByNTtcbiAgICAgICAgICAgIGMgPSAoZDkgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ5ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGQ5ICs9IGg1ICogcjQ7XG4gICAgICAgICAgICBkOSArPSBoNiAqIHIzO1xuICAgICAgICAgICAgZDkgKz0gaDcgKiByMjtcbiAgICAgICAgICAgIGQ5ICs9IGg4ICogcjE7XG4gICAgICAgICAgICBkOSArPSBoOSAqIHIwO1xuICAgICAgICAgICAgYyArPSAoZDkgPj4+IDEzKTtcbiAgICAgICAgICAgIGQ5ICY9IDB4MWZmZjtcbiAgICAgICAgICAgIGMgPSAoKChjIDw8IDIpICsgYykpIHwgMDtcbiAgICAgICAgICAgIGMgPSAoYyArIGQwKSB8IDA7XG4gICAgICAgICAgICBkMCA9IGMgJiAweDFmZmY7XG4gICAgICAgICAgICBjID0gKGMgPj4+IDEzKTtcbiAgICAgICAgICAgIGQxICs9IGM7XG4gICAgICAgICAgICBoMCA9IGQwO1xuICAgICAgICAgICAgaDEgPSBkMTtcbiAgICAgICAgICAgIGgyID0gZDI7XG4gICAgICAgICAgICBoMyA9IGQzO1xuICAgICAgICAgICAgaDQgPSBkNDtcbiAgICAgICAgICAgIGg1ID0gZDU7XG4gICAgICAgICAgICBoNiA9IGQ2O1xuICAgICAgICAgICAgaDcgPSBkNztcbiAgICAgICAgICAgIGg4ID0gZDg7XG4gICAgICAgICAgICBoOSA9IGQ5O1xuICAgICAgICAgICAgbXBvcyArPSAxNjtcbiAgICAgICAgICAgIGJ5dGVzIC09IDE2O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hbMF0gPSBoMDtcbiAgICAgICAgdGhpcy5faFsxXSA9IGgxO1xuICAgICAgICB0aGlzLl9oWzJdID0gaDI7XG4gICAgICAgIHRoaXMuX2hbM10gPSBoMztcbiAgICAgICAgdGhpcy5faFs0XSA9IGg0O1xuICAgICAgICB0aGlzLl9oWzVdID0gaDU7XG4gICAgICAgIHRoaXMuX2hbNl0gPSBoNjtcbiAgICAgICAgdGhpcy5faFs3XSA9IGg3O1xuICAgICAgICB0aGlzLl9oWzhdID0gaDg7XG4gICAgICAgIHRoaXMuX2hbOV0gPSBoOTtcbiAgICB9O1xuICAgIFBvbHkxMzA1LnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbiAobWFjLCBtYWNwb3MpIHtcbiAgICAgICAgaWYgKG1hY3BvcyA9PT0gdm9pZCAwKSB7IG1hY3BvcyA9IDA7IH1cbiAgICAgICAgdmFyIGcgPSBuZXcgVWludDE2QXJyYXkoMTApO1xuICAgICAgICB2YXIgYztcbiAgICAgICAgdmFyIG1hc2s7XG4gICAgICAgIHZhciBmO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKHRoaXMuX2xlZnRvdmVyKSB7XG4gICAgICAgICAgICBpID0gdGhpcy5fbGVmdG92ZXI7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJbaSsrXSA9IDE7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXJbaV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZmluID0gMTtcbiAgICAgICAgICAgIHRoaXMuX2Jsb2Nrcyh0aGlzLl9idWZmZXIsIDAsIDE2KTtcbiAgICAgICAgfVxuICAgICAgICBjID0gdGhpcy5faFsxXSA+Pj4gMTM7XG4gICAgICAgIHRoaXMuX2hbMV0gJj0gMHgxZmZmO1xuICAgICAgICBmb3IgKGkgPSAyOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5faFtpXSArPSBjO1xuICAgICAgICAgICAgYyA9IHRoaXMuX2hbaV0gPj4+IDEzO1xuICAgICAgICAgICAgdGhpcy5faFtpXSAmPSAweDFmZmY7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faFswXSArPSAoYyAqIDUpO1xuICAgICAgICBjID0gdGhpcy5faFswXSA+Pj4gMTM7XG4gICAgICAgIHRoaXMuX2hbMF0gJj0gMHgxZmZmO1xuICAgICAgICB0aGlzLl9oWzFdICs9IGM7XG4gICAgICAgIGMgPSB0aGlzLl9oWzFdID4+PiAxMztcbiAgICAgICAgdGhpcy5faFsxXSAmPSAweDFmZmY7XG4gICAgICAgIHRoaXMuX2hbMl0gKz0gYztcbiAgICAgICAgZ1swXSA9IHRoaXMuX2hbMF0gKyA1O1xuICAgICAgICBjID0gZ1swXSA+Pj4gMTM7XG4gICAgICAgIGdbMF0gJj0gMHgxZmZmO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgZ1tpXSA9IHRoaXMuX2hbaV0gKyBjO1xuICAgICAgICAgICAgYyA9IGdbaV0gPj4+IDEzO1xuICAgICAgICAgICAgZ1tpXSAmPSAweDFmZmY7XG4gICAgICAgIH1cbiAgICAgICAgZ1s5XSAtPSAoMSA8PCAxMyk7XG4gICAgICAgIG1hc2sgPSAoYyBeIDEpIC0gMTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIGdbaV0gJj0gbWFzaztcbiAgICAgICAgfVxuICAgICAgICBtYXNrID0gfm1hc2s7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9oW2ldID0gKHRoaXMuX2hbaV0gJiBtYXNrKSB8IGdbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faFswXSA9ICgodGhpcy5faFswXSkgfCAodGhpcy5faFsxXSA8PCAxMykpICYgMHhmZmZmO1xuICAgICAgICB0aGlzLl9oWzFdID0gKCh0aGlzLl9oWzFdID4+PiAzKSB8ICh0aGlzLl9oWzJdIDw8IDEwKSkgJiAweGZmZmY7XG4gICAgICAgIHRoaXMuX2hbMl0gPSAoKHRoaXMuX2hbMl0gPj4+IDYpIHwgKHRoaXMuX2hbM10gPDwgNykpICYgMHhmZmZmO1xuICAgICAgICB0aGlzLl9oWzNdID0gKCh0aGlzLl9oWzNdID4+PiA5KSB8ICh0aGlzLl9oWzRdIDw8IDQpKSAmIDB4ZmZmZjtcbiAgICAgICAgdGhpcy5faFs0XSA9ICgodGhpcy5faFs0XSA+Pj4gMTIpIHwgKHRoaXMuX2hbNV0gPDwgMSkgfCAodGhpcy5faFs2XSA8PCAxNCkpICYgMHhmZmZmO1xuICAgICAgICB0aGlzLl9oWzVdID0gKCh0aGlzLl9oWzZdID4+PiAyKSB8ICh0aGlzLl9oWzddIDw8IDExKSkgJiAweGZmZmY7XG4gICAgICAgIHRoaXMuX2hbNl0gPSAoKHRoaXMuX2hbN10gPj4+IDUpIHwgKHRoaXMuX2hbOF0gPDwgOCkpICYgMHhmZmZmO1xuICAgICAgICB0aGlzLl9oWzddID0gKCh0aGlzLl9oWzhdID4+PiA4KSB8ICh0aGlzLl9oWzldIDw8IDUpKSAmIDB4ZmZmZjtcbiAgICAgICAgZiA9IHRoaXMuX2hbMF0gKyB0aGlzLl9wYWRbMF07XG4gICAgICAgIHRoaXMuX2hbMF0gPSBmICYgMHhmZmZmO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgODsgaSsrKSB7XG4gICAgICAgICAgICBmID0gKCgodGhpcy5faFtpXSArIHRoaXMuX3BhZFtpXSkgfCAwKSArIChmID4+PiAxNikpIHwgMDtcbiAgICAgICAgICAgIHRoaXMuX2hbaV0gPSBmICYgMHhmZmZmO1xuICAgICAgICB9XG4gICAgICAgIG1hY1ttYWNwb3MgKyAwXSA9IHRoaXMuX2hbMF0gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAxXSA9IHRoaXMuX2hbMF0gPj4+IDg7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAyXSA9IHRoaXMuX2hbMV0gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAzXSA9IHRoaXMuX2hbMV0gPj4+IDg7XG4gICAgICAgIG1hY1ttYWNwb3MgKyA0XSA9IHRoaXMuX2hbMl0gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyA1XSA9IHRoaXMuX2hbMl0gPj4+IDg7XG4gICAgICAgIG1hY1ttYWNwb3MgKyA2XSA9IHRoaXMuX2hbM10gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyA3XSA9IHRoaXMuX2hbM10gPj4+IDg7XG4gICAgICAgIG1hY1ttYWNwb3MgKyA4XSA9IHRoaXMuX2hbNF0gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyA5XSA9IHRoaXMuX2hbNF0gPj4+IDg7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAxMF0gPSB0aGlzLl9oWzVdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgMTFdID0gdGhpcy5faFs1XSA+Pj4gODtcbiAgICAgICAgbWFjW21hY3BvcyArIDEyXSA9IHRoaXMuX2hbNl0gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAxM10gPSB0aGlzLl9oWzZdID4+PiA4O1xuICAgICAgICBtYWNbbWFjcG9zICsgMTRdID0gdGhpcy5faFs3XSA+Pj4gMDtcbiAgICAgICAgbWFjW21hY3BvcyArIDE1XSA9IHRoaXMuX2hbN10gPj4+IDg7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBQb2x5MTMwNS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgdmFyIG1wb3MgPSAwO1xuICAgICAgICB2YXIgYnl0ZXMgPSBtLmxlbmd0aDtcbiAgICAgICAgdmFyIHdhbnQ7XG4gICAgICAgIGlmICh0aGlzLl9sZWZ0b3Zlcikge1xuICAgICAgICAgICAgd2FudCA9ICgxNiAtIHRoaXMuX2xlZnRvdmVyKTtcbiAgICAgICAgICAgIGlmICh3YW50ID4gYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB3YW50ID0gYnl0ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdhbnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9sZWZ0b3ZlciArIGldID0gbVttcG9zICsgaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBieXRlcyAtPSB3YW50O1xuICAgICAgICAgICAgbXBvcyArPSB3YW50O1xuICAgICAgICAgICAgdGhpcy5fbGVmdG92ZXIgKz0gd2FudDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWZ0b3ZlciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ibG9ja3ModGhpcy5fYnVmZmVyLCAwLCAxNik7XG4gICAgICAgICAgICB0aGlzLl9sZWZ0b3ZlciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVzID49IDE2KSB7XG4gICAgICAgICAgICB3YW50ID0gYnl0ZXMgLSAoYnl0ZXMgJSAxNik7XG4gICAgICAgICAgICB0aGlzLl9ibG9ja3MobSwgbXBvcywgd2FudCk7XG4gICAgICAgICAgICBtcG9zICs9IHdhbnQ7XG4gICAgICAgICAgICBieXRlcyAtPSB3YW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChieXRlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2xlZnRvdmVyICsgaV0gPSBtW21wb3MgKyBpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xlZnRvdmVyICs9IGJ5dGVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUG9seTEzMDUucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETyhkY2hlc3QpOiBpdCBiZWhhdmVzIGRpZmZlcmVudGx5IHRoYW4gb3RoZXIgaGFzaGVzL0hNQUMsXG4gICAgICAgIC8vIGJlY2F1c2UgaXQgdGhyb3dzIHdoZW4gZmluaXNoZWQg4oCUIG90aGVycyBqdXN0IHJldHVybiBzYXZlZCByZXN1bHQuXG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUG9seTEzMDUgd2FzIGZpbmlzaGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYWMgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIHRoaXMuZmluaXNoKG1hYyk7XG4gICAgICAgIHJldHVybiBtYWM7XG4gICAgfTtcbiAgICBQb2x5MTMwNS5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3IpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9oKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fcGFkKTtcbiAgICAgICAgdGhpcy5fbGVmdG92ZXIgPSAwO1xuICAgICAgICB0aGlzLl9maW4gPSAwO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7IC8vIG1hcmsgYXMgZmluaXNoZWQgZXZlbiBpZiBub3RcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gUG9seTEzMDU7XG59KCkpO1xuZXhwb3J0cy5Qb2x5MTMwNSA9IFBvbHkxMzA1O1xuLyoqXG4gKiBSZXR1cm5zIDE2LWJ5dGUgYXV0aGVudGljYXRvciBvZiBkYXRhIHVzaW5nIGEgb25lLXRpbWUgMzItYnl0ZSBrZXkuXG4gKlxuICogSW1wb3J0YW50OiBrZXkgc2hvdWxkIGJlIHVzZWQgZm9yIG9ubHkgb25lIG1lc3NhZ2UsIGl0IHNob3VsZCBuZXZlciByZXBlYXQuXG4gKi9cbmZ1bmN0aW9uIG9uZVRpbWVBdXRoKGtleSwgZGF0YSkge1xuICAgIHZhciBoID0gbmV3IFBvbHkxMzA1KGtleSk7XG4gICAgaC51cGRhdGUoZGF0YSk7XG4gICAgdmFyIGRpZ2VzdCA9IGguZGlnZXN0KCk7XG4gICAgaC5jbGVhbigpO1xuICAgIHJldHVybiBkaWdlc3Q7XG59XG5leHBvcnRzLm9uZVRpbWVBdXRoID0gb25lVGltZUF1dGg7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0d28gYXV0aGVudGljYXRvcnMgYXJlIDE2LWJ5dGUgbG9uZyBhbmQgZXF1YWwuXG4gKiBVc2VzIGNvbnRhbnQtdGltZSBjb21wYXJpc29uIHRvIGF2b2lkIGxlYWtpbmcgdGltaW5nIGluZm9ybWF0aW9uLlxuICovXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBleHBvcnRzLkRJR0VTVF9MRU5HVEggfHwgYi5sZW5ndGggIT09IGV4cG9ydHMuRElHRVNUX0xFTkdUSCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBjb25zdGFudF90aW1lXzEuZXF1YWwoYSwgYik7XG59XG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2x5MTMwNS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/poly1305/lib/poly1305.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/random/lib/random.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/random/lib/random.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;\nconst system_1 = __webpack_require__(/*! ./source/system */ \"./node_modules/@stablelib/random/lib/source/system.js\");\nconst binary_1 = __webpack_require__(/*! @stablelib/binary */ \"./node_modules/@stablelib/binary/lib/binary.js\");\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng = exports.defaultRandomSource) {\n    return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng = exports.defaultRandomSource) {\n    // Generate 4-byte random buffer.\n    const buf = randomBytes(4, prng);\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    const result = (0, binary_1.readUint32LE)(buf);\n    // Clean the buffer.\n    (0, wipe_1.wipe)(buf);\n    return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    let out = '';\n    const charsLen = charset.length;\n    const maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (let i = 0; i < buf.length && length > 0; i++) {\n            const randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        (0, wipe_1.wipe)(buf);\n    }\n    return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {\n    const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;\n//# sourceMappingURL=random.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3JhbmRvbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsb0JBQW9CLEdBQUcsb0JBQW9CLEdBQUcsbUJBQW1CLEdBQUcsMkJBQTJCO0FBQ2hJLGlCQUFpQixtQkFBTyxDQUFDLDhFQUFpQjtBQUMxQyxpQkFBaUIsbUJBQU8sQ0FBQyx5RUFBbUI7QUFDNUMsZUFBZSxtQkFBTyxDQUFDLG1FQUFpQjtBQUN4QywyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9yYW5kb20uanM/ODM1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmFuZG9tU3RyaW5nRm9yRW50cm9weSA9IGV4cG9ydHMucmFuZG9tU3RyaW5nID0gZXhwb3J0cy5yYW5kb21VaW50MzIgPSBleHBvcnRzLnJhbmRvbUJ5dGVzID0gZXhwb3J0cy5kZWZhdWx0UmFuZG9tU291cmNlID0gdm9pZCAwO1xuY29uc3Qgc3lzdGVtXzEgPSByZXF1aXJlKFwiLi9zb3VyY2Uvc3lzdGVtXCIpO1xuY29uc3QgYmluYXJ5XzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9iaW5hcnlcIik7XG5jb25zdCB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuZXhwb3J0cy5kZWZhdWx0UmFuZG9tU291cmNlID0gbmV3IHN5c3RlbV8xLlN5c3RlbVJhbmRvbVNvdXJjZSgpO1xuZnVuY3Rpb24gcmFuZG9tQnl0ZXMobGVuZ3RoLCBwcm5nID0gZXhwb3J0cy5kZWZhdWx0UmFuZG9tU291cmNlKSB7XG4gICAgcmV0dXJuIHBybmcucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbn1cbmV4cG9ydHMucmFuZG9tQnl0ZXMgPSByYW5kb21CeXRlcztcbi8qKlxuICogUmV0dXJucyBhIHVuaWZvcm1seSByYW5kb20gdW5zaWduZWQgMzItYml0IGludGVnZXIuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVVpbnQzMihwcm5nID0gZXhwb3J0cy5kZWZhdWx0UmFuZG9tU291cmNlKSB7XG4gICAgLy8gR2VuZXJhdGUgNC1ieXRlIHJhbmRvbSBidWZmZXIuXG4gICAgY29uc3QgYnVmID0gcmFuZG9tQnl0ZXMoNCwgcHJuZyk7XG4gICAgLy8gQ29udmVydCBieXRlcyBmcm9tIGJ1ZmZlciBpbnRvIGEgMzItYml0IGludGVnZXIuXG4gICAgLy8gSXQncyBub3QgaW1wb3J0YW50IHdoaWNoIGJ5dGUgb3JkZXIgdG8gdXNlLCBzaW5jZVxuICAgIC8vIHRoZSByZXN1bHQgaXMgcmFuZG9tLlxuICAgIGNvbnN0IHJlc3VsdCA9ICgwLCBiaW5hcnlfMS5yZWFkVWludDMyTEUpKGJ1Zik7XG4gICAgLy8gQ2xlYW4gdGhlIGJ1ZmZlci5cbiAgICAoMCwgd2lwZV8xLndpcGUpKGJ1Zik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMucmFuZG9tVWludDMyID0gcmFuZG9tVWludDMyO1xuLyoqIDYyIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGZvciBkZWZhdWx0IGNoYXJzZXQgb2YgcmFuZG9tU3RyaW5nKCkgKi9cbmNvbnN0IEFMUEhBTlVNRVJJQyA9IFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcbi8qKlxuICogUmV0dXJucyBhIHVuaWZvcm0gcmFuZG9tIHN0cmluZyBvZiB0aGUgZ2l2ZW4gbGVuZ3RoXG4gKiB3aXRoIGNoYXJhY3RlcnMgZnJvbSB0aGUgZ2l2ZW4gY2hhcnNldC5cbiAqXG4gKiBDaGFyc2V0IG11c3Qgbm90IGhhdmUgbW9yZSB0aGFuIDI1NiBjaGFyYWN0ZXJzLlxuICpcbiAqIERlZmF1bHQgY2hhcnNldCBnZW5lcmF0ZXMgY2FzZS1zZW5zaXRpdmUgYWxwaGFudW1lcmljXG4gKiBzdHJpbmdzICgwLTksIEEtWiwgYS16KS5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKGxlbmd0aCwgY2hhcnNldCA9IEFMUEhBTlVNRVJJQywgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIGlmIChjaGFyc2V0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmFuZG9tU3RyaW5nIGNoYXJzZXQgaXMgdG9vIHNob3J0XCIpO1xuICAgIH1cbiAgICBpZiAoY2hhcnNldC5sZW5ndGggPiAyNTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmFuZG9tU3RyaW5nIGNoYXJzZXQgaXMgdG9vIGxvbmdcIik7XG4gICAgfVxuICAgIGxldCBvdXQgPSAnJztcbiAgICBjb25zdCBjaGFyc0xlbiA9IGNoYXJzZXQubGVuZ3RoO1xuICAgIGNvbnN0IG1heEJ5dGUgPSAyNTYgLSAoMjU2ICUgY2hhcnNMZW4pO1xuICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHJhbmRvbUJ5dGVzKE1hdGguY2VpbChsZW5ndGggKiAyNTYgLyBtYXhCeXRlKSwgcHJuZyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aCAmJiBsZW5ndGggPiAwOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUJ5dGUgPSBidWZbaV07XG4gICAgICAgICAgICBpZiAocmFuZG9tQnl0ZSA8IG1heEJ5dGUpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gY2hhcnNldC5jaGFyQXQocmFuZG9tQnl0ZSAlIGNoYXJzTGVuKTtcbiAgICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAoMCwgd2lwZV8xLndpcGUpKGJ1Zik7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLnJhbmRvbVN0cmluZyA9IHJhbmRvbVN0cmluZztcbi8qKlxuICogUmV0dXJucyB1bmlmb3JtIHJhbmRvbSBzdHJpbmcgY29udGFpbmluZyBhdCBsZWFzdCB0aGUgZ2l2ZW5cbiAqIG51bWJlciBvZiBiaXRzIG9mIGVudHJvcHkuXG4gKlxuICogRm9yIGV4YW1wbGUsIHJhbmRvbVN0cmluZ0ZvckVudHJvcHkoMTI4KSB3aWxsIHJldHVybiBhIDIyLWNoYXJhY3RlclxuICogYWxwaGFudW1lcmljIHN0cmluZywgd2hpbGUgcmFuZG9tU3RyaW5nRm9yRW50cm9weSgxMjgsIFwiMDEyMzQ1Njc4OVwiKVxuICogd2lsbCByZXR1cm4gYSAzOS1jaGFyYWN0ZXIgbnVtZXJpYyBzdHJpbmcsIGJvdGggd2lsbCBjb250YWluIGF0XG4gKiBsZWFzdCAxMjggYml0cyBvZiBlbnRyb3B5LlxuICpcbiAqIERlZmF1bHQgY2hhcnNldCBnZW5lcmF0ZXMgY2FzZS1zZW5zaXRpdmUgYWxwaGFudW1lcmljXG4gKiBzdHJpbmdzICgwLTksIEEtWiwgYS16KS5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tU3RyaW5nRm9yRW50cm9weShiaXRzLCBjaGFyc2V0ID0gQUxQSEFOVU1FUklDLCBwcm5nID0gZXhwb3J0cy5kZWZhdWx0UmFuZG9tU291cmNlKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gTWF0aC5jZWlsKGJpdHMgLyAoTWF0aC5sb2coY2hhcnNldC5sZW5ndGgpIC8gTWF0aC5MTjIpKTtcbiAgICByZXR1cm4gcmFuZG9tU3RyaW5nKGxlbmd0aCwgY2hhcnNldCwgcHJuZyk7XG59XG5leHBvcnRzLnJhbmRvbVN0cmluZ0ZvckVudHJvcHkgPSByYW5kb21TdHJpbmdGb3JFbnRyb3B5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFuZG9tLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/random/lib/random.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/random/lib/source/browser.js":
/*!**************************************************************!*\
  !*** ./node_modules/@stablelib/random/lib/source/browser.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BrowserRandomSource = void 0;\nconst QUOTA = 65536;\nclass BrowserRandomSource {\n    constructor() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        const browserCrypto = typeof self !== 'undefined'\n            ? (self.crypto || self.msCrypto) // IE11 has msCrypto\n            : null;\n        if (browserCrypto && browserCrypto.getRandomValues !== undefined) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n    randomBytes(length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i += QUOTA) {\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\nexports.BrowserRandomSource = BrowserRandomSource;\n//# sourceMappingURL=browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3NvdXJjZS9icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2UvYnJvd3Nlci5qcz9iMmJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ccm93c2VyUmFuZG9tU291cmNlID0gdm9pZCAwO1xuY29uc3QgUVVPVEEgPSA2NTUzNjtcbmNsYXNzIEJyb3dzZXJSYW5kb21Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgYnJvd3NlckNyeXB0byA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyAoc2VsZi5jcnlwdG8gfHwgc2VsZi5tc0NyeXB0bykgLy8gSUUxMSBoYXMgbXNDcnlwdG9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgaWYgKGJyb3dzZXJDcnlwdG8gJiYgYnJvd3NlckNyeXB0by5nZXRSYW5kb21WYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY3J5cHRvID0gYnJvd3NlckNyeXB0bztcbiAgICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmFuZG9tQnl0ZXMobGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0F2YWlsYWJsZSB8fCAhdGhpcy5fY3J5cHRvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyIHJhbmRvbSBieXRlIGdlbmVyYXRvciBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dC5sZW5ndGg7IGkgKz0gUVVPVEEpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMob3V0LnN1YmFycmF5KGksIGkgKyBNYXRoLm1pbihvdXQubGVuZ3RoIC0gaSwgUVVPVEEpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5leHBvcnRzLkJyb3dzZXJSYW5kb21Tb3VyY2UgPSBCcm93c2VyUmFuZG9tU291cmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/random/lib/source/browser.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/random/lib/source/node.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stablelib/random/lib/source/node.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NodeRandomSource = void 0;\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\nclass NodeRandomSource {\n    constructor() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        if (true) {\n            const nodeCrypto = __webpack_require__(/*! crypto */ \"?4908\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n    randomBytes(length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n        // Get random bytes (result is Buffer).\n        let buffer = this._crypto.randomBytes(length);\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n        // Allocate output array.\n        const out = new Uint8Array(length);\n        // Copy bytes from buffer to output.\n        for (let i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n        // Cleanup.\n        (0, wipe_1.wipe)(buffer);\n        return out;\n    }\n}\nexports.NodeRandomSource = NodeRandomSource;\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3NvdXJjZS9ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZUFBZSxtQkFBTyxDQUFDLG1FQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksSUFBOEI7QUFDMUMsK0JBQStCLG1CQUFPLENBQUMscUJBQVE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2Uvbm9kZS5qcz9iNDI2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob2RlUmFuZG9tU291cmNlID0gdm9pZCAwO1xuY29uc3Qgd2lwZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvd2lwZVwiKTtcbmNsYXNzIE5vZGVSYW5kb21Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlQ3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbiAgICAgICAgICAgIGlmIChub2RlQ3J5cHRvICYmIG5vZGVDcnlwdG8ucmFuZG9tQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcnlwdG8gPSBub2RlQ3J5cHRvO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBdmFpbGFibGUgfHwgIXRoaXMuX2NyeXB0bykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9kZS5qcyByYW5kb20gYnl0ZSBnZW5lcmF0b3IgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHJhbmRvbSBieXRlcyAocmVzdWx0IGlzIEJ1ZmZlcikuXG4gICAgICAgIGxldCBidWZmZXIgPSB0aGlzLl9jcnlwdG8ucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGdvdCB0aGUgbGVuZ3RoIHRoYXQgd2UgcmVxdWVzdGVkLlxuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlUmFuZG9tU291cmNlOiBnb3QgZmV3ZXIgYnl0ZXMgdGhhbiByZXF1ZXN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgb3V0cHV0IGFycmF5LlxuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgICAgICAvLyBDb3B5IGJ5dGVzIGZyb20gYnVmZmVyIHRvIG91dHB1dC5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGJ1ZmZlcltpXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhbnVwLlxuICAgICAgICAoMCwgd2lwZV8xLndpcGUpKGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ob2RlUmFuZG9tU291cmNlID0gTm9kZVJhbmRvbVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/random/lib/source/node.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/random/lib/source/system.js":
/*!*************************************************************!*\
  !*** ./node_modules/@stablelib/random/lib/source/system.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SystemRandomSource = void 0;\nconst browser_1 = __webpack_require__(/*! ./browser */ \"./node_modules/@stablelib/random/lib/source/browser.js\");\nconst node_1 = __webpack_require__(/*! ./node */ \"./node_modules/@stablelib/random/lib/source/node.js\");\nclass SystemRandomSource {\n    constructor() {\n        this.isAvailable = false;\n        this.name = \"\";\n        // Try browser.\n        this._source = new browser_1.BrowserRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Browser\";\n            return;\n        }\n        // If no browser source, try Node.\n        this._source = new node_1.NodeRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Node\";\n            return;\n        }\n        // No sources, we're out of options.\n    }\n    randomBytes(length) {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        return this._source.randomBytes(length);\n    }\n}\nexports.SystemRandomSource = SystemRandomSource;\n//# sourceMappingURL=system.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3NvdXJjZS9zeXN0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxlQUFlLG1CQUFPLENBQUMsbUVBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3JhbmRvbS9saWIvc291cmNlL3N5c3RlbS5qcz8xODkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TeXN0ZW1SYW5kb21Tb3VyY2UgPSB2b2lkIDA7XG5jb25zdCBicm93c2VyXzEgPSByZXF1aXJlKFwiLi9icm93c2VyXCIpO1xuY29uc3Qgbm9kZV8xID0gcmVxdWlyZShcIi4vbm9kZVwiKTtcbmNsYXNzIFN5c3RlbVJhbmRvbVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcbiAgICAgICAgLy8gVHJ5IGJyb3dzZXIuXG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IG5ldyBicm93c2VyXzEuQnJvd3NlclJhbmRvbVNvdXJjZSgpO1xuICAgICAgICBpZiAodGhpcy5fc291cmNlLmlzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiQnJvd3NlclwiO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIG5vIGJyb3dzZXIgc291cmNlLCB0cnkgTm9kZS5cbiAgICAgICAgdGhpcy5fc291cmNlID0gbmV3IG5vZGVfMS5Ob2RlUmFuZG9tU291cmNlKCk7XG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2UuaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJOb2RlXCI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gc291cmNlcywgd2UncmUgb3V0IG9mIG9wdGlvbnMuXG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5c3RlbSByYW5kb20gYnl0ZSBnZW5lcmF0b3IgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5yYW5kb21CeXRlcyhsZW5ndGgpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3lzdGVtUmFuZG9tU291cmNlID0gU3lzdGVtUmFuZG9tU291cmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3lzdGVtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/random/lib/source/system.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/sha256/lib/sha256.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/sha256/lib/sha256.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"./node_modules/@stablelib/binary/lib/binary.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nvar SHA256 = /** @class */ (function () {\n    function SHA256() {\n        /** Length of hash output */\n        this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */\n        this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._state = new Int32Array(8); // hash state\n        this._temp = new Int32Array(64); // temporary state\n        this._buffer = new Uint8Array(128); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA256.prototype._initState = function () {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    SHA256.prototype.reset = function () {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    SHA256.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._temp);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    SHA256.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < this.blockSize && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    SHA256.prototype.finish = function (out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this._buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for (var i = 0; i < this.digestLength / 4; i++) {\n            binary_1.writeUint32BE(this._state[i], out, i * 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */\n    SHA256.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */\n    SHA256.prototype.saveState = function () {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */\n    SHA256.prototype.restoreState = function (savedState) {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */\n    SHA256.prototype.cleanSavedState = function (savedState) {\n        wipe_1.wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA256;\n}());\nexports.SHA256 = SHA256;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    while (len >= 64) {\n        var a = v[0];\n        var b = v[1];\n        var c = v[2];\n        var d = v[3];\n        var e = v[4];\n        var f = v[5];\n        var g = v[6];\n        var h = v[7];\n        for (var i = 0; i < 16; i++) {\n            var j = pos + i * 4;\n            w[i] = binary_1.readUint32BE(p, j);\n        }\n        for (var i = 16; i < 64; i++) {\n            var u = w[i - 2];\n            var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (var i = 0; i < 64; i++) {\n            var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA256();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/sha256/lib/sha256.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/wipe/lib/wipe.js":
/*!**************************************************!*\
  !*** ./node_modules/@stablelib/wipe/lib/wipe.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Sets all values in the given array to zero and returns it.\n *\n * The fact that it sets bytes to zero can be relied on.\n *\n * There is no guarantee that this function makes data disappear from memory,\n * as runtime implementation can, for example, have copying garbage collector\n * that will make copies of sensitive data before we wipe it. Or that an\n * operating system will write our data to swap or sleep image. Another thing\n * is that an optimizing compiler can remove calls to this function or make it\n * no-op. There's nothing we can do with it, so we just do our best and hope\n * that everything will be okay and good will triumph over evil.\n */\nfunction wipe(array) {\n    // Right now it's similar to array.fill(0). If it turns\n    // out that runtimes optimize this call away, maybe\n    // we can try something else.\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 0;\n    }\n    return array;\n}\nexports.wipe = wipe;\n//# sourceMappingURL=wipe.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi93aXBlL2xpYi93aXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi93aXBlL2xpYi93aXBlLmpzP2ZhNDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFNldHMgYWxsIHZhbHVlcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgdG8gemVybyBhbmQgcmV0dXJucyBpdC5cbiAqXG4gKiBUaGUgZmFjdCB0aGF0IGl0IHNldHMgYnl0ZXMgdG8gemVybyBjYW4gYmUgcmVsaWVkIG9uLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoaXMgZnVuY3Rpb24gbWFrZXMgZGF0YSBkaXNhcHBlYXIgZnJvbSBtZW1vcnksXG4gKiBhcyBydW50aW1lIGltcGxlbWVudGF0aW9uIGNhbiwgZm9yIGV4YW1wbGUsIGhhdmUgY29weWluZyBnYXJiYWdlIGNvbGxlY3RvclxuICogdGhhdCB3aWxsIG1ha2UgY29waWVzIG9mIHNlbnNpdGl2ZSBkYXRhIGJlZm9yZSB3ZSB3aXBlIGl0LiBPciB0aGF0IGFuXG4gKiBvcGVyYXRpbmcgc3lzdGVtIHdpbGwgd3JpdGUgb3VyIGRhdGEgdG8gc3dhcCBvciBzbGVlcCBpbWFnZS4gQW5vdGhlciB0aGluZ1xuICogaXMgdGhhdCBhbiBvcHRpbWl6aW5nIGNvbXBpbGVyIGNhbiByZW1vdmUgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBvciBtYWtlIGl0XG4gKiBuby1vcC4gVGhlcmUncyBub3RoaW5nIHdlIGNhbiBkbyB3aXRoIGl0LCBzbyB3ZSBqdXN0IGRvIG91ciBiZXN0IGFuZCBob3BlXG4gKiB0aGF0IGV2ZXJ5dGhpbmcgd2lsbCBiZSBva2F5IGFuZCBnb29kIHdpbGwgdHJpdW1waCBvdmVyIGV2aWwuXG4gKi9cbmZ1bmN0aW9uIHdpcGUoYXJyYXkpIHtcbiAgICAvLyBSaWdodCBub3cgaXQncyBzaW1pbGFyIHRvIGFycmF5LmZpbGwoMCkuIElmIGl0IHR1cm5zXG4gICAgLy8gb3V0IHRoYXQgcnVudGltZXMgb3B0aW1pemUgdGhpcyBjYWxsIGF3YXksIG1heWJlXG4gICAgLy8gd2UgY2FuIHRyeSBzb21ldGhpbmcgZWxzZS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy53aXBlID0gd2lwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpcGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/wipe/lib/wipe.js\n"));

/***/ }),

/***/ "./node_modules/@stablelib/x25519/lib/x25519.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/x25519/lib/x25519.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sharedKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.scalarMultBase = exports.scalarMult = exports.SHARED_KEY_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = void 0;\n/**\n * Package x25519 implements X25519 key agreement.\n */\nconst random_1 = __webpack_require__(/*! @stablelib/random */ \"./node_modules/@stablelib/random/lib/random.js\");\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"./node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 32;\nexports.SHARED_KEY_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    const r = new Float64Array(16);\n    if (init) {\n        for (let i = 0; i < init.length; i++) {\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nconst _9 = new Uint8Array(32);\n_9[0] = 9;\nconst _121665 = gf([0xdb41, 1]);\nfunction car25519(o) {\n    let c = 1;\n    for (let i = 0; i < 16; i++) {\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    const c = ~(b - 1);\n    for (let i = 0; i < 16; i++) {\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    const m = gf();\n    const t = gf();\n    for (let i = 0; i < 16; i++) {\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (let j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (let i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        const b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (let i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction unpack25519(o, n) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, inp) {\n    const c = gf();\n    for (let i = 0; i < 16; i++) {\n        c[i] = inp[i];\n    }\n    for (let i = 253; i >= 0; i--) {\n        square(c, c);\n        if (i !== 2 && i !== 4) {\n            mul(c, c, inp);\n        }\n    }\n    for (let i = 0; i < 16; i++) {\n        o[i] = c[i];\n    }\n}\nfunction scalarMult(n, p) {\n    const z = new Uint8Array(32);\n    const x = new Float64Array(80);\n    const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();\n    for (let i = 0; i < 31; i++) {\n        z[i] = n[i];\n    }\n    z[31] = (n[31] & 127) | 64;\n    z[0] &= 248;\n    unpack25519(x, p);\n    for (let i = 0; i < 16; i++) {\n        b[i] = x[i];\n    }\n    a[0] = d[0] = 1;\n    for (let i = 254; i >= 0; --i) {\n        const r = (z[i >>> 3] >>> (i & 7)) & 1;\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n        add(e, a, c);\n        sub(a, a, c);\n        add(c, b, d);\n        sub(b, b, d);\n        square(d, e);\n        square(f, a);\n        mul(a, c, a);\n        mul(c, b, e);\n        add(e, a, c);\n        sub(a, a, c);\n        square(b, a);\n        sub(c, d, f);\n        mul(a, c, _121665);\n        add(a, a, d);\n        mul(c, c, a);\n        mul(a, d, f);\n        mul(d, b, x);\n        square(b, e);\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n    }\n    for (let i = 0; i < 16; i++) {\n        x[i + 16] = a[i];\n        x[i + 32] = c[i];\n        x[i + 48] = b[i];\n        x[i + 64] = d[i];\n    }\n    const x32 = x.subarray(32);\n    const x16 = x.subarray(16);\n    inv25519(x32, x32);\n    mul(x16, x16, x32);\n    const q = new Uint8Array(32);\n    pack25519(q, x16);\n    return q;\n}\nexports.scalarMult = scalarMult;\nfunction scalarMultBase(n) {\n    return scalarMult(n, _9);\n}\nexports.scalarMultBase = scalarMultBase;\nfunction generateKeyPairFromSeed(seed) {\n    if (seed.length !== exports.SECRET_KEY_LENGTH) {\n        throw new Error(`x25519: seed must be ${exports.SECRET_KEY_LENGTH} bytes`);\n    }\n    const secretKey = new Uint8Array(seed);\n    const publicKey = scalarMultBase(secretKey);\n    return {\n        publicKey,\n        secretKey\n    };\n}\nexports.generateKeyPairFromSeed = generateKeyPairFromSeed;\nfunction generateKeyPair(prng) {\n    const seed = (0, random_1.randomBytes)(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    (0, wipe_1.wipe)(seed);\n    return result;\n}\nexports.generateKeyPair = generateKeyPair;\n/**\n * Returns a shared key between our secret key and a peer's public key.\n *\n * Throws an error if the given keys are of wrong length.\n *\n * If rejectZero is true throws if the calculated shared key is all-zero.\n * From RFC 7748:\n *\n * > Protocol designers using Diffie-Hellman over the curves defined in\n * > this document must not assume \"contributory behavior\".  Specially,\n * > contributory behavior means that both parties' private keys\n * > contribute to the resulting shared key.  Since curve25519 and\n * > curve448 have cofactors of 8 and 4 (respectively), an input point of\n * > small order will eliminate any contribution from the other party's\n * > private key.  This situation can be detected by checking for the all-\n * > zero output, which implementations MAY do, as specified in Section 6.\n * > However, a large number of existing implementations do not do this.\n *\n * IMPORTANT: the returned key is a raw result of scalar multiplication.\n * To use it as a key material, hash it with a cryptographic hash function.\n */\nfunction sharedKey(mySecretKey, theirPublicKey, rejectZero = false) {\n    if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect secret key length\");\n    }\n    if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect public key length\");\n    }\n    const result = scalarMult(mySecretKey, theirPublicKey);\n    if (rejectZero) {\n        let zeros = 0;\n        for (let i = 0; i < result.length; i++) {\n            zeros |= result[i];\n        }\n        if (zeros === 0) {\n            throw new Error(\"X25519: invalid shared key\");\n        }\n    }\n    return result;\n}\nexports.sharedKey = sharedKey;\n//# sourceMappingURL=x25519.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@stablelib/x25519/lib/x25519.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/relay-api/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/esm/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./node_modules/@walletconnect/relay-api/dist/esm/types.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_types__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers */ \"./node_modules/@walletconnect/relay-api/dist/esm/parsers.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _parsers__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _parsers__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _jsonrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsonrpc */ \"./node_modules/@walletconnect/relay-api/dist/esm/jsonrpc.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _jsonrpc__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _jsonrpc__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validators */ \"./node_modules/@walletconnect/relay-api/dist/esm/validators.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _validators__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _validators__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNFO0FBQ0E7QUFDRztBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL2luZGV4LmpzPzA5ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2pzb25ycGNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3ZhbGlkYXRvcnNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/relay-api/dist/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/relay-api/dist/esm/jsonrpc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/esm/jsonrpc.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RELAY_JSONRPC: function() { return /* binding */ RELAY_JSONRPC; }\n/* harmony export */ });\nconst RELAY_JSONRPC = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n    },\n};\n//# sourceMappingURL=jsonrpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL2pzb25ycGMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL2pzb25ycGMuanM/N2U2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUkVMQVlfSlNPTlJQQyA9IHtcbiAgICB3YWt1OiB7XG4gICAgICAgIHB1Ymxpc2g6IFwid2FrdV9wdWJsaXNoXCIsXG4gICAgICAgIGJhdGNoUHVibGlzaDogXCJ3YWt1X2JhdGNoUHVibGlzaFwiLFxuICAgICAgICBzdWJzY3JpYmU6IFwid2FrdV9zdWJzY3JpYmVcIixcbiAgICAgICAgYmF0Y2hTdWJzY3JpYmU6IFwid2FrdV9iYXRjaFN1YnNjcmliZVwiLFxuICAgICAgICBzdWJzY3JpcHRpb246IFwid2FrdV9zdWJzY3JpcHRpb25cIixcbiAgICAgICAgdW5zdWJzY3JpYmU6IFwid2FrdV91bnN1YnNjcmliZVwiLFxuICAgICAgICBiYXRjaFVuc3Vic2NyaWJlOiBcIndha3VfYmF0Y2hVbnN1YnNjcmliZVwiLFxuICAgIH0sXG4gICAgaXJuOiB7XG4gICAgICAgIHB1Ymxpc2g6IFwiaXJuX3B1Ymxpc2hcIixcbiAgICAgICAgYmF0Y2hQdWJsaXNoOiBcImlybl9iYXRjaFB1Ymxpc2hcIixcbiAgICAgICAgc3Vic2NyaWJlOiBcImlybl9zdWJzY3JpYmVcIixcbiAgICAgICAgYmF0Y2hTdWJzY3JpYmU6IFwiaXJuX2JhdGNoU3Vic2NyaWJlXCIsXG4gICAgICAgIHN1YnNjcmlwdGlvbjogXCJpcm5fc3Vic2NyaXB0aW9uXCIsXG4gICAgICAgIHVuc3Vic2NyaWJlOiBcImlybl91bnN1YnNjcmliZVwiLFxuICAgICAgICBiYXRjaFVuc3Vic2NyaWJlOiBcImlybl9iYXRjaFVuc3Vic2NyaWJlXCIsXG4gICAgfSxcbiAgICBpcmlkaXVtOiB7XG4gICAgICAgIHB1Ymxpc2g6IFwiaXJpZGl1bV9wdWJsaXNoXCIsXG4gICAgICAgIGJhdGNoUHVibGlzaDogXCJpcmlkaXVtX2JhdGNoUHVibGlzaFwiLFxuICAgICAgICBzdWJzY3JpYmU6IFwiaXJpZGl1bV9zdWJzY3JpYmVcIixcbiAgICAgICAgYmF0Y2hTdWJzY3JpYmU6IFwiaXJpZGl1bV9iYXRjaFN1YnNjcmliZVwiLFxuICAgICAgICBzdWJzY3JpcHRpb246IFwiaXJpZGl1bV9zdWJzY3JpcHRpb25cIixcbiAgICAgICAgdW5zdWJzY3JpYmU6IFwiaXJpZGl1bV91bnN1YnNjcmliZVwiLFxuICAgICAgICBiYXRjaFVuc3Vic2NyaWJlOiBcImlyaWRpdW1fYmF0Y2hVbnN1YnNjcmliZVwiLFxuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbnJwYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/relay-api/dist/esm/jsonrpc.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/relay-api/dist/esm/misc.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/esm/misc.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertType: function() { return /* binding */ assertType; },\n/* harmony export */   checkParams: function() { return /* binding */ checkParams; },\n/* harmony export */   hasExactParamsLength: function() { return /* binding */ hasExactParamsLength; },\n/* harmony export */   hasRequiredParams: function() { return /* binding */ hasRequiredParams; },\n/* harmony export */   hasRequiredParamsLength: function() { return /* binding */ hasRequiredParamsLength; },\n/* harmony export */   methodEndsWith: function() { return /* binding */ methodEndsWith; }\n/* harmony export */ });\nfunction assertType(obj, key, type = \"string\") {\n    if (!obj[key] || typeof obj[key] !== type) {\n        throw new Error(`Missing or invalid \"${key}\" param`);\n    }\n}\nfunction hasRequiredParams(params, required) {\n    let matches = true;\n    required.forEach(key => {\n        const exists = key in params;\n        if (!exists) {\n            matches = false;\n        }\n    });\n    return matches;\n}\nfunction hasExactParamsLength(params, length) {\n    return Array.isArray(params)\n        ? params.length === length\n        : Object.keys(params).length === length;\n}\nfunction hasRequiredParamsLength(params, minLength) {\n    return Array.isArray(params)\n        ? params.length >= minLength\n        : Object.keys(params).length >= minLength;\n}\nfunction checkParams(params, required, optional) {\n    const exact = !optional.length;\n    const matchesLength = exact\n        ? hasExactParamsLength(params, required.length)\n        : hasRequiredParamsLength(params, required.length);\n    if (!matchesLength)\n        return false;\n    return hasRequiredParams(params, required);\n}\nfunction methodEndsWith(method, expected, separator = \"_\") {\n    const split = method.split(separator);\n    return (split[split.length - 1].trim().toLowerCase() ===\n        expected.trim().toLowerCase());\n}\n//# sourceMappingURL=misc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL21pc2MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU87QUFDUDtBQUNBLCtDQUErQyxJQUFJO0FBQ25EO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWFwaS9kaXN0L2VzbS9taXNjLmpzPzI5Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFR5cGUob2JqLCBrZXksIHR5cGUgPSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKCFvYmpba2V5XSB8fCB0eXBlb2Ygb2JqW2tleV0gIT09IHR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIG9yIGludmFsaWQgXCIke2tleX1cIiBwYXJhbWApO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNSZXF1aXJlZFBhcmFtcyhwYXJhbXMsIHJlcXVpcmVkKSB7XG4gICAgbGV0IG1hdGNoZXMgPSB0cnVlO1xuICAgIHJlcXVpcmVkLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgZXhpc3RzID0ga2V5IGluIHBhcmFtcztcbiAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgIG1hdGNoZXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXRjaGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0V4YWN0UGFyYW1zTGVuZ3RoKHBhcmFtcywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGFyYW1zKVxuICAgICAgICA/IHBhcmFtcy5sZW5ndGggPT09IGxlbmd0aFxuICAgICAgICA6IE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID09PSBsZW5ndGg7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzUmVxdWlyZWRQYXJhbXNMZW5ndGgocGFyYW1zLCBtaW5MZW5ndGgpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXJhbXMpXG4gICAgICAgID8gcGFyYW1zLmxlbmd0aCA+PSBtaW5MZW5ndGhcbiAgICAgICAgOiBPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA+PSBtaW5MZW5ndGg7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQYXJhbXMocGFyYW1zLCByZXF1aXJlZCwgb3B0aW9uYWwpIHtcbiAgICBjb25zdCBleGFjdCA9ICFvcHRpb25hbC5sZW5ndGg7XG4gICAgY29uc3QgbWF0Y2hlc0xlbmd0aCA9IGV4YWN0XG4gICAgICAgID8gaGFzRXhhY3RQYXJhbXNMZW5ndGgocGFyYW1zLCByZXF1aXJlZC5sZW5ndGgpXG4gICAgICAgIDogaGFzUmVxdWlyZWRQYXJhbXNMZW5ndGgocGFyYW1zLCByZXF1aXJlZC5sZW5ndGgpO1xuICAgIGlmICghbWF0Y2hlc0xlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBoYXNSZXF1aXJlZFBhcmFtcyhwYXJhbXMsIHJlcXVpcmVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXRob2RFbmRzV2l0aChtZXRob2QsIGV4cGVjdGVkLCBzZXBhcmF0b3IgPSBcIl9cIikge1xuICAgIGNvbnN0IHNwbGl0ID0gbWV0aG9kLnNwbGl0KHNlcGFyYXRvcik7XG4gICAgcmV0dXJuIChzcGxpdFtzcGxpdC5sZW5ndGggLSAxXS50cmltKCkudG9Mb3dlckNhc2UoKSA9PT1cbiAgICAgICAgZXhwZWN0ZWQudHJpbSgpLnRvTG93ZXJDYXNlKCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/relay-api/dist/esm/misc.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/relay-api/dist/esm/parsers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/esm/parsers.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePublishRequest: function() { return /* binding */ parsePublishRequest; },\n/* harmony export */   parseSubscribeRequest: function() { return /* binding */ parseSubscribeRequest; },\n/* harmony export */   parseSubscriptionRequest: function() { return /* binding */ parseSubscriptionRequest; },\n/* harmony export */   parseUnsubscribeRequest: function() { return /* binding */ parseUnsubscribeRequest; }\n/* harmony export */ });\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc */ \"./node_modules/@walletconnect/relay-api/dist/esm/misc.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validators */ \"./node_modules/@walletconnect/relay-api/dist/esm/validators.js\");\n\n\nfunction parseSubscribeRequest(request) {\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isSubscribeMethod)(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    }\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isSubscribeParams)(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    }\n    const params = request.params;\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"topic\");\n    return params;\n}\nfunction parsePublishRequest(request) {\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isPublishMethod)(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid publish method\");\n    }\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isPublishParams)(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid publish params\");\n    }\n    const params = request.params;\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"topic\");\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"message\");\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"ttl\", \"number\");\n    return params;\n}\nfunction parseUnsubscribeRequest(request) {\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isUnsubscribeMethod)(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    }\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isUnsubscribeParams)(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    }\n    const params = request.params;\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"id\");\n    return params;\n}\nfunction parseSubscriptionRequest(request) {\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isSubscriptionMethod)(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    }\n    if (!(0,_validators__WEBPACK_IMPORTED_MODULE_1__.isSubscriptionParams)(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    }\n    const params = request.params;\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"id\");\n    (0,_misc__WEBPACK_IMPORTED_MODULE_0__.assertType)(params, \"data\");\n    return params;\n}\n//# sourceMappingURL=parsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL3BhcnNlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9DO0FBQ3lKO0FBQ3RMO0FBQ1AsU0FBUyw4REFBaUI7QUFDMUI7QUFDQTtBQUNBLFNBQVMsOERBQWlCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLElBQUksaURBQVU7QUFDZDtBQUNBO0FBQ087QUFDUCxTQUFTLDREQUFlO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLDREQUFlO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLElBQUksaURBQVU7QUFDZCxJQUFJLGlEQUFVO0FBQ2QsSUFBSSxpREFBVTtBQUNkO0FBQ0E7QUFDTztBQUNQLFNBQVMsZ0VBQW1CO0FBQzVCO0FBQ0E7QUFDQSxTQUFTLGdFQUFtQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlEQUFVO0FBQ2Q7QUFDQTtBQUNPO0FBQ1AsU0FBUyxpRUFBb0I7QUFDN0I7QUFDQTtBQUNBLFNBQVMsaUVBQW9CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLElBQUksaURBQVU7QUFDZCxJQUFJLGlEQUFVO0FBQ2Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hcGkvZGlzdC9lc20vcGFyc2Vycy5qcz8xNjc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydFR5cGUgfSBmcm9tIFwiLi9taXNjXCI7XG5pbXBvcnQgeyBpc1B1Ymxpc2hNZXRob2QsIGlzUHVibGlzaFBhcmFtcywgaXNTdWJzY3JpYmVNZXRob2QsIGlzU3Vic2NyaWJlUGFyYW1zLCBpc1N1YnNjcmlwdGlvbk1ldGhvZCwgaXNTdWJzY3JpcHRpb25QYXJhbXMsIGlzVW5zdWJzY3JpYmVNZXRob2QsIGlzVW5zdWJzY3JpYmVQYXJhbXMsIH0gZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3Vic2NyaWJlUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgaWYgKCFpc1N1YnNjcmliZU1ldGhvZChyZXF1ZXN0Lm1ldGhvZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCBzdWJzY3JpYmUgbWV0aG9kXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzU3Vic2NyaWJlUGFyYW1zKHJlcXVlc3QucGFyYW1zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKU09OLVJQQyBSZXF1ZXN0IGhhcyBpbnZhbGlkIHN1YnNjcmliZSBwYXJhbXNcIik7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHJlcXVlc3QucGFyYW1zO1xuICAgIGFzc2VydFR5cGUocGFyYW1zLCBcInRvcGljXCIpO1xuICAgIHJldHVybiBwYXJhbXM7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQdWJsaXNoUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgaWYgKCFpc1B1Ymxpc2hNZXRob2QocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkpTT04tUlBDIFJlcXVlc3QgaGFzIGludmFsaWQgcHVibGlzaCBtZXRob2RcIik7XG4gICAgfVxuICAgIGlmICghaXNQdWJsaXNoUGFyYW1zKHJlcXVlc3QucGFyYW1zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKU09OLVJQQyBSZXF1ZXN0IGhhcyBpbnZhbGlkIHB1Ymxpc2ggcGFyYW1zXCIpO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSByZXF1ZXN0LnBhcmFtcztcbiAgICBhc3NlcnRUeXBlKHBhcmFtcywgXCJ0b3BpY1wiKTtcbiAgICBhc3NlcnRUeXBlKHBhcmFtcywgXCJtZXNzYWdlXCIpO1xuICAgIGFzc2VydFR5cGUocGFyYW1zLCBcInR0bFwiLCBcIm51bWJlclwiKTtcbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5zdWJzY3JpYmVSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBpZiAoIWlzVW5zdWJzY3JpYmVNZXRob2QocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkpTT04tUlBDIFJlcXVlc3QgaGFzIGludmFsaWQgdW5zdWJzY3JpYmUgbWV0aG9kXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzVW5zdWJzY3JpYmVQYXJhbXMocmVxdWVzdC5wYXJhbXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkpTT04tUlBDIFJlcXVlc3QgaGFzIGludmFsaWQgdW5zdWJzY3JpYmUgcGFyYW1zXCIpO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSByZXF1ZXN0LnBhcmFtcztcbiAgICBhc3NlcnRUeXBlKHBhcmFtcywgXCJpZFwiKTtcbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3Vic2NyaXB0aW9uUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgaWYgKCFpc1N1YnNjcmlwdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSlNPTi1SUEMgUmVxdWVzdCBoYXMgaW52YWxpZCBzdWJzY3JpcHRpb24gbWV0aG9kXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzU3Vic2NyaXB0aW9uUGFyYW1zKHJlcXVlc3QucGFyYW1zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKU09OLVJQQyBSZXF1ZXN0IGhhcyBpbnZhbGlkIHN1YnNjcmlwdGlvbiBwYXJhbXNcIik7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHJlcXVlc3QucGFyYW1zO1xuICAgIGFzc2VydFR5cGUocGFyYW1zLCBcImlkXCIpO1xuICAgIGFzc2VydFR5cGUocGFyYW1zLCBcImRhdGFcIik7XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/relay-api/dist/esm/parsers.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/relay-api/dist/esm/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/esm/types.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hcGkvZGlzdC9lc20vdHlwZXMuanM/M2NlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/relay-api/dist/esm/types.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/relay-api/dist/esm/validators.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/esm/validators.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPublishMethod: function() { return /* binding */ isPublishMethod; },\n/* harmony export */   isPublishParams: function() { return /* binding */ isPublishParams; },\n/* harmony export */   isPublishRequest: function() { return /* binding */ isPublishRequest; },\n/* harmony export */   isSubscribeMethod: function() { return /* binding */ isSubscribeMethod; },\n/* harmony export */   isSubscribeParams: function() { return /* binding */ isSubscribeParams; },\n/* harmony export */   isSubscribeRequest: function() { return /* binding */ isSubscribeRequest; },\n/* harmony export */   isSubscriptionMethod: function() { return /* binding */ isSubscriptionMethod; },\n/* harmony export */   isSubscriptionParams: function() { return /* binding */ isSubscriptionParams; },\n/* harmony export */   isSubscriptionRequest: function() { return /* binding */ isSubscriptionRequest; },\n/* harmony export */   isUnsubscribeMethod: function() { return /* binding */ isUnsubscribeMethod; },\n/* harmony export */   isUnsubscribeParams: function() { return /* binding */ isUnsubscribeParams; },\n/* harmony export */   isUnsubscribeRequest: function() { return /* binding */ isUnsubscribeRequest; }\n/* harmony export */ });\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc */ \"./node_modules/@walletconnect/relay-api/dist/esm/misc.js\");\n\nfunction isSubscribeRequest(request) {\n    return isSubscribeMethod(request.method) && isSubscribeParams(request.params);\n}\nfunction isSubscribeMethod(method) {\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.methodEndsWith)(method, \"subscribe\");\n}\nfunction isSubscribeParams(params) {\n    const required = [\"topic\"];\n    const optional = [];\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.checkParams)(params, required, optional);\n}\nfunction isPublishRequest(request) {\n    return isPublishMethod(request.method) && isPublishParams(request.params);\n}\nfunction isPublishMethod(method) {\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.methodEndsWith)(method, \"publish\");\n}\nfunction isPublishParams(params) {\n    const required = [\"message\", \"topic\", \"ttl\"];\n    const optional = [\"prompt\", \"tag\"];\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.checkParams)(params, required, optional);\n}\nfunction isUnsubscribeRequest(request) {\n    return (isUnsubscribeMethod(request.method) && isUnsubscribeParams(request.params));\n}\nfunction isUnsubscribeMethod(method) {\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.methodEndsWith)(method, \"unsubscribe\");\n}\nfunction isUnsubscribeParams(params) {\n    const required = [\"id\", \"topic\"];\n    const optional = [];\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.checkParams)(params, required, optional);\n}\nfunction isSubscriptionRequest(request) {\n    return (isSubscriptionMethod(request.method) && isSubscriptionParams(request.params));\n}\nfunction isSubscriptionMethod(method) {\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.methodEndsWith)(method, \"subscription\");\n}\nfunction isSubscriptionParams(params) {\n    const required = [\"id\", \"data\"];\n    const optional = [];\n    return (0,_misc__WEBPACK_IMPORTED_MODULE_0__.checkParams)(params, required, optional);\n}\n//# sourceMappingURL=validators.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpL2Rpc3QvZXNtL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUM5QztBQUNQO0FBQ0E7QUFDTztBQUNQLFdBQVcscURBQWM7QUFDekI7QUFDTztBQUNQO0FBQ0E7QUFDQSxXQUFXLGtEQUFXO0FBQ3RCO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUCxXQUFXLHFEQUFjO0FBQ3pCO0FBQ087QUFDUDtBQUNBO0FBQ0EsV0FBVyxrREFBVztBQUN0QjtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1AsV0FBVyxxREFBYztBQUN6QjtBQUNPO0FBQ1A7QUFDQTtBQUNBLFdBQVcsa0RBQVc7QUFDdEI7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQLFdBQVcscURBQWM7QUFDekI7QUFDTztBQUNQO0FBQ0E7QUFDQSxXQUFXLGtEQUFXO0FBQ3RCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWFwaS9kaXN0L2VzbS92YWxpZGF0b3JzLmpzP2UxNGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tQYXJhbXMsIG1ldGhvZEVuZHNXaXRoIH0gZnJvbSBcIi4vbWlzY1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaWJlUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIGlzU3Vic2NyaWJlTWV0aG9kKHJlcXVlc3QubWV0aG9kKSAmJiBpc1N1YnNjcmliZVBhcmFtcyhyZXF1ZXN0LnBhcmFtcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpYmVNZXRob2QobWV0aG9kKSB7XG4gICAgcmV0dXJuIG1ldGhvZEVuZHNXaXRoKG1ldGhvZCwgXCJzdWJzY3JpYmVcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpYmVQYXJhbXMocGFyYW1zKSB7XG4gICAgY29uc3QgcmVxdWlyZWQgPSBbXCJ0b3BpY1wiXTtcbiAgICBjb25zdCBvcHRpb25hbCA9IFtdO1xuICAgIHJldHVybiBjaGVja1BhcmFtcyhwYXJhbXMsIHJlcXVpcmVkLCBvcHRpb25hbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQdWJsaXNoUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIGlzUHVibGlzaE1ldGhvZChyZXF1ZXN0Lm1ldGhvZCkgJiYgaXNQdWJsaXNoUGFyYW1zKHJlcXVlc3QucGFyYW1zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1B1Ymxpc2hNZXRob2QobWV0aG9kKSB7XG4gICAgcmV0dXJuIG1ldGhvZEVuZHNXaXRoKG1ldGhvZCwgXCJwdWJsaXNoXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHVibGlzaFBhcmFtcyhwYXJhbXMpIHtcbiAgICBjb25zdCByZXF1aXJlZCA9IFtcIm1lc3NhZ2VcIiwgXCJ0b3BpY1wiLCBcInR0bFwiXTtcbiAgICBjb25zdCBvcHRpb25hbCA9IFtcInByb21wdFwiLCBcInRhZ1wiXTtcbiAgICByZXR1cm4gY2hlY2tQYXJhbXMocGFyYW1zLCByZXF1aXJlZCwgb3B0aW9uYWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5zdWJzY3JpYmVSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gKGlzVW5zdWJzY3JpYmVNZXRob2QocmVxdWVzdC5tZXRob2QpICYmIGlzVW5zdWJzY3JpYmVQYXJhbXMocmVxdWVzdC5wYXJhbXMpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Vuc3Vic2NyaWJlTWV0aG9kKG1ldGhvZCkge1xuICAgIHJldHVybiBtZXRob2RFbmRzV2l0aChtZXRob2QsIFwidW5zdWJzY3JpYmVcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNVbnN1YnNjcmliZVBhcmFtcyhwYXJhbXMpIHtcbiAgICBjb25zdCByZXF1aXJlZCA9IFtcImlkXCIsIFwidG9waWNcIl07XG4gICAgY29uc3Qgb3B0aW9uYWwgPSBbXTtcbiAgICByZXR1cm4gY2hlY2tQYXJhbXMocGFyYW1zLCByZXF1aXJlZCwgb3B0aW9uYWwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIChpc1N1YnNjcmlwdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZCkgJiYgaXNTdWJzY3JpcHRpb25QYXJhbXMocmVxdWVzdC5wYXJhbXMpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgICByZXR1cm4gbWV0aG9kRW5kc1dpdGgobWV0aG9kLCBcInN1YnNjcmlwdGlvblwiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvblBhcmFtcyhwYXJhbXMpIHtcbiAgICBjb25zdCByZXF1aXJlZCA9IFtcImlkXCIsIFwiZGF0YVwiXTtcbiAgICBjb25zdCBvcHRpb25hbCA9IFtdO1xuICAgIHJldHVybiBjaGVja1BhcmFtcyhwYXJhbXMsIHJlcXVpcmVkLCBvcHRpb25hbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0b3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/relay-api/dist/esm/validators.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/constants/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./misc */ \"./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./time */ \"./node_modules/@walletconnect/time/dist/cjs/constants/time.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQU87QUFDL0IscUJBQXFCLG1CQUFPLENBQUMsNkVBQVE7QUFDckMscUJBQXFCLG1CQUFPLENBQUMsNkVBQVE7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL2luZGV4LmpzPzJlZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWlzY1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90aW1lXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/constants/index.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/constants/misc.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/misc.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;\nexports.ONE_HUNDRED = 100;\nexports.ONE_THOUSAND = 1000;\n//# sourceMappingURL=misc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxtQkFBbUI7QUFDMUMsbUJBQW1CO0FBQ25CLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcz9iNDM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PTkVfVEhPVVNBTkQgPSBleHBvcnRzLk9ORV9IVU5EUkVEID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfSFVORFJFRCA9IDEwMDtcbmV4cG9ydHMuT05FX1RIT1VTQU5EID0gMTAwMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/constants/time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/time.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;\nexports.ONE_SECOND = 1;\nexports.FIVE_SECONDS = 5;\nexports.TEN_SECONDS = 10;\nexports.THIRTY_SECONDS = 30;\nexports.SIXTY_SECONDS = 60;\nexports.ONE_MINUTE = exports.SIXTY_SECONDS;\nexports.FIVE_MINUTES = exports.ONE_MINUTE * 5;\nexports.TEN_MINUTES = exports.ONE_MINUTE * 10;\nexports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;\nexports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;\nexports.ONE_HOUR = exports.SIXTY_MINUTES;\nexports.THREE_HOURS = exports.ONE_HOUR * 3;\nexports.SIX_HOURS = exports.ONE_HOUR * 6;\nexports.TWELVE_HOURS = exports.ONE_HOUR * 12;\nexports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;\nexports.ONE_DAY = exports.TWENTY_FOUR_HOURS;\nexports.THREE_DAYS = exports.ONE_DAY * 3;\nexports.FIVE_DAYS = exports.ONE_DAY * 5;\nexports.SEVEN_DAYS = exports.ONE_DAY * 7;\nexports.THIRTY_DAYS = exports.ONE_DAY * 30;\nexports.ONE_WEEK = exports.SEVEN_DAYS;\nexports.TWO_WEEKS = exports.ONE_WEEK * 2;\nexports.THREE_WEEKS = exports.ONE_WEEK * 3;\nexports.FOUR_WEEKS = exports.ONE_WEEK * 4;\nexports.ONE_YEAR = exports.ONE_DAY * 365;\n//# sourceMappingURL=time.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxpQkFBaUIsR0FBRyxnQkFBZ0IsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxpQkFBaUIsR0FBRyxrQkFBa0IsR0FBRyxlQUFlLEdBQUcseUJBQXlCLEdBQUcsb0JBQW9CLEdBQUcsaUJBQWlCLEdBQUcsbUJBQW1CLEdBQUcsZ0JBQWdCLEdBQUcscUJBQXFCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CLEdBQUcsb0JBQW9CLEdBQUcsa0JBQWtCLEdBQUcscUJBQXFCLEdBQUcsc0JBQXNCLEdBQUcsbUJBQW1CLEdBQUcsb0JBQW9CLEdBQUcsa0JBQWtCO0FBQzloQixrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QixxQkFBcUI7QUFDckIsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsb0JBQW9CO0FBQ3BCLHlCQUF5QjtBQUN6QixlQUFlO0FBQ2Ysa0JBQWtCO0FBQ2xCLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvY29uc3RhbnRzL3RpbWUuanM/ZGRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT05FX1lFQVIgPSBleHBvcnRzLkZPVVJfV0VFS1MgPSBleHBvcnRzLlRIUkVFX1dFRUtTID0gZXhwb3J0cy5UV09fV0VFS1MgPSBleHBvcnRzLk9ORV9XRUVLID0gZXhwb3J0cy5USElSVFlfREFZUyA9IGV4cG9ydHMuU0VWRU5fREFZUyA9IGV4cG9ydHMuRklWRV9EQVlTID0gZXhwb3J0cy5USFJFRV9EQVlTID0gZXhwb3J0cy5PTkVfREFZID0gZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLlRIUkVFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiA9IGV4cG9ydHMuU0lYVFlfTUlOVVRFUyA9IGV4cG9ydHMuVEhJUlRZX01JTlVURVMgPSBleHBvcnRzLlRFTl9NSU5VVEVTID0gZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgPSBleHBvcnRzLlNJWFRZX1NFQ09ORFMgPSBleHBvcnRzLlRISVJUWV9TRUNPTkRTID0gZXhwb3J0cy5URU5fU0VDT05EUyA9IGV4cG9ydHMuRklWRV9TRUNPTkRTID0gZXhwb3J0cy5PTkVfU0VDT05EID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfU0VDT05EID0gMTtcbmV4cG9ydHMuRklWRV9TRUNPTkRTID0gNTtcbmV4cG9ydHMuVEVOX1NFQ09ORFMgPSAxMDtcbmV4cG9ydHMuVEhJUlRZX1NFQ09ORFMgPSAzMDtcbmV4cG9ydHMuU0lYVFlfU0VDT05EUyA9IDYwO1xuZXhwb3J0cy5PTkVfTUlOVVRFID0gZXhwb3J0cy5TSVhUWV9TRUNPTkRTO1xuZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgKiA1O1xuZXhwb3J0cy5URU5fTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDEwO1xuZXhwb3J0cy5USElSVFlfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDMwO1xuZXhwb3J0cy5TSVhUWV9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogNjA7XG5leHBvcnRzLk9ORV9IT1VSID0gZXhwb3J0cy5TSVhUWV9NSU5VVEVTO1xuZXhwb3J0cy5USFJFRV9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAzO1xuZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSICogNjtcbmV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDEyO1xuZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAyNDtcbmV4cG9ydHMuT05FX0RBWSA9IGV4cG9ydHMuVFdFTlRZX0ZPVVJfSE9VUlM7XG5leHBvcnRzLlRIUkVFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzO1xuZXhwb3J0cy5GSVZFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiA1O1xuZXhwb3J0cy5TRVZFTl9EQVlTID0gZXhwb3J0cy5PTkVfREFZICogNztcbmV4cG9ydHMuVEhJUlRZX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzMDtcbmV4cG9ydHMuT05FX1dFRUsgPSBleHBvcnRzLlNFVkVOX0RBWVM7XG5leHBvcnRzLlRXT19XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAyO1xuZXhwb3J0cy5USFJFRV9XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAzO1xuZXhwb3J0cy5GT1VSX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDQ7XG5leHBvcnRzLk9ORV9ZRUFSID0gZXhwb3J0cy5PTkVfREFZICogMzY1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/constants/time.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./utils */ \"./node_modules/@walletconnect/time/dist/cjs/utils/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"./node_modules/@walletconnect/time/dist/cjs/watch.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"./node_modules/@walletconnect/time/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"./node_modules/@walletconnect/time/dist/cjs/constants/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxpRkFBTztBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQywyRUFBUztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQyxxRUFBUztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQywyRUFBUztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQyxtRkFBYTtBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcz8yOWI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/index.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/types/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"./node_modules/@walletconnect/time/dist/cjs/types/watch.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxpRkFBTztBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQywyRUFBUztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcz8zNjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dhdGNoXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/types/index.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/types/watch.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/watch.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IWatch = void 0;\nclass IWatch {\n}\nexports.IWatch = IWatch;\n//# sourceMappingURL=watch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy93YXRjaC5qcz80YmNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JV2F0Y2ggPSB2b2lkIDA7XG5jbGFzcyBJV2F0Y2gge1xufVxuZXhwb3J0cy5JV2F0Y2ggPSBJV2F0Y2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YXRjaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/types/watch.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/utils/convert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/convert.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromMiliseconds = exports.toMiliseconds = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"./node_modules/@walletconnect/time/dist/cjs/constants/index.js\");\nfunction toMiliseconds(seconds) {\n    return seconds * constants_1.ONE_THOUSAND;\n}\nexports.toMiliseconds = toMiliseconds;\nfunction fromMiliseconds(miliseconds) {\n    return Math.floor(miliseconds / constants_1.ONE_THOUSAND);\n}\nexports.fromMiliseconds = fromMiliseconds;\n//# sourceMappingURL=convert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLHFCQUFxQjtBQUMvQyxvQkFBb0IsbUJBQU8sQ0FBQyxvRkFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2NvbnZlcnQuanM/OTkxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbU1pbGlzZWNvbmRzID0gZXhwb3J0cy50b01pbGlzZWNvbmRzID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuZnVuY3Rpb24gdG9NaWxpc2Vjb25kcyhzZWNvbmRzKSB7XG4gICAgcmV0dXJuIHNlY29uZHMgKiBjb25zdGFudHNfMS5PTkVfVEhPVVNBTkQ7XG59XG5leHBvcnRzLnRvTWlsaXNlY29uZHMgPSB0b01pbGlzZWNvbmRzO1xuZnVuY3Rpb24gZnJvbU1pbGlzZWNvbmRzKG1pbGlzZWNvbmRzKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobWlsaXNlY29uZHMgLyBjb25zdGFudHNfMS5PTkVfVEhPVVNBTkQpO1xufVxuZXhwb3J0cy5mcm9tTWlsaXNlY29uZHMgPSBmcm9tTWlsaXNlY29uZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/utils/delay.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/delay.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.delay = void 0;\nfunction delay(timeout) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(true);\n        }, timeout);\n    });\n}\nexports.delay = delay;\n//# sourceMappingURL=delay.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9kZWxheS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2RlbGF5LmpzPzliOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbGF5ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGVsYXkodGltZW91dCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./delay */ \"./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyxpRkFBTztBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQywyRUFBUztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQywrRUFBVztBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcz9iN2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlbGF5XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/utils/index.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/dist/cjs/watch.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/watch.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Watch = void 0;\nclass Watch {\n    constructor() {\n        this.timestamps = new Map();\n    }\n    start(label) {\n        if (this.timestamps.has(label)) {\n            throw new Error(`Watch already started for label: ${label}`);\n        }\n        this.timestamps.set(label, { started: Date.now() });\n    }\n    stop(label) {\n        const timestamp = this.get(label);\n        if (typeof timestamp.elapsed !== \"undefined\") {\n            throw new Error(`Watch already stopped for label: ${label}`);\n        }\n        const elapsed = Date.now() - timestamp.started;\n        this.timestamps.set(label, { started: timestamp.started, elapsed });\n    }\n    get(label) {\n        const timestamp = this.timestamps.get(label);\n        if (typeof timestamp === \"undefined\") {\n            throw new Error(`No timestamp found for label: ${label}`);\n        }\n        return timestamp;\n    }\n    elapsed(label) {\n        const timestamp = this.get(label);\n        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;\n        return elapsed;\n    }\n}\nexports.Watch = Watch;\nexports[\"default\"] = Watch;\n//# sourceMappingURL=watch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLE1BQU07QUFDdEU7QUFDQSxxQ0FBcUMscUJBQXFCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLE1BQU07QUFDdEU7QUFDQTtBQUNBLHFDQUFxQyxxQ0FBcUM7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsTUFBTTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcz8yZGM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYXRjaCA9IHZvaWQgMDtcbmNsYXNzIFdhdGNoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzdGFydChsYWJlbCkge1xuICAgICAgICBpZiAodGhpcy50aW1lc3RhbXBzLmhhcyhsYWJlbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2F0Y2ggYWxyZWFkeSBzdGFydGVkIGZvciBsYWJlbDogJHtsYWJlbH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVzdGFtcHMuc2V0KGxhYmVsLCB7IHN0YXJ0ZWQ6IERhdGUubm93KCkgfSk7XG4gICAgfVxuICAgIHN0b3AobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5nZXQobGFiZWwpO1xuICAgICAgICBpZiAodHlwZW9mIHRpbWVzdGFtcC5lbGFwc2VkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdhdGNoIGFscmVhZHkgc3RvcHBlZCBmb3IgbGFiZWw6ICR7bGFiZWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXAuc3RhcnRlZDtcbiAgICAgICAgdGhpcy50aW1lc3RhbXBzLnNldChsYWJlbCwgeyBzdGFydGVkOiB0aW1lc3RhbXAuc3RhcnRlZCwgZWxhcHNlZCB9KTtcbiAgICB9XG4gICAgZ2V0KGxhYmVsKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRoaXMudGltZXN0YW1wcy5nZXQobGFiZWwpO1xuICAgICAgICBpZiAodHlwZW9mIHRpbWVzdGFtcCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyB0aW1lc3RhbXAgZm91bmQgZm9yIGxhYmVsOiAke2xhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXA7XG4gICAgfVxuICAgIGVsYXBzZWQobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy5nZXQobGFiZWwpO1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gdGltZXN0YW1wLmVsYXBzZWQgfHwgRGF0ZS5ub3coKSAtIHRpbWVzdGFtcC5zdGFydGVkO1xuICAgICAgICByZXR1cm4gZWxhcHNlZDtcbiAgICB9XG59XG5leHBvcnRzLldhdGNoID0gV2F0Y2g7XG5leHBvcnRzLmRlZmF1bHQgPSBXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/dist/cjs/watch.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: function() { return /* binding */ J; },\n/* harmony export */   BASE16: function() { return /* binding */ p; },\n/* harmony export */   BASE64: function() { return /* binding */ x; },\n/* harmony export */   COLON: function() { return /* binding */ Gn; },\n/* harmony export */   DEFAULT_DEPTH: function() { return /* binding */ ne; },\n/* harmony export */   EMPTY_SPACE: function() { return /* binding */ H; },\n/* harmony export */   ENV_MAP: function() { return /* binding */ m; },\n/* harmony export */   MemoryStore: function() { return /* binding */ er; },\n/* harmony export */   ONE_THOUSAND: function() { return /* binding */ Wn; },\n/* harmony export */   REACT_NATIVE_PRODUCT: function() { return /* binding */ Ce; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ Fe; },\n/* harmony export */   SDK_TYPE: function() { return /* binding */ je; },\n/* harmony export */   SLASH: function() { return /* binding */ $e; },\n/* harmony export */   TYPE_0: function() { return /* binding */ Q; },\n/* harmony export */   TYPE_1: function() { return /* binding */ _; },\n/* harmony export */   UTF8: function() { return /* binding */ F; },\n/* harmony export */   appendToQueryString: function() { return /* binding */ De; },\n/* harmony export */   assertType: function() { return /* binding */ Zn; },\n/* harmony export */   buildApprovedNamespaces: function() { return /* binding */ Ut; },\n/* harmony export */   calcExpiry: function() { return /* binding */ lt; },\n/* harmony export */   capitalize: function() { return /* binding */ ot; },\n/* harmony export */   capitalizeWord: function() { return /* binding */ xe; },\n/* harmony export */   createDelayedPromise: function() { return /* binding */ st; },\n/* harmony export */   createExpiringPromise: function() { return /* binding */ it; },\n/* harmony export */   decodeTypeByte: function() { return /* binding */ $; },\n/* harmony export */   decrypt: function() { return /* binding */ Ln; },\n/* harmony export */   deriveSymKey: function() { return /* binding */ kn; },\n/* harmony export */   deserialize: function() { return /* binding */ ee; },\n/* harmony export */   encodeTypeByte: function() { return /* binding */ Pe; },\n/* harmony export */   encrypt: function() { return /* binding */ Kn; },\n/* harmony export */   engineEvent: function() { return /* binding */ ft; },\n/* harmony export */   enumify: function() { return /* binding */ rt; },\n/* harmony export */   formatAccountId: function() { return /* binding */ Ee; },\n/* harmony export */   formatAccountWithChain: function() { return /* binding */ Pn; },\n/* harmony export */   formatChainId: function() { return /* binding */ ge; },\n/* harmony export */   formatExpirerTarget: function() { return /* binding */ re; },\n/* harmony export */   formatIdTarget: function() { return /* binding */ at; },\n/* harmony export */   formatMessage: function() { return /* binding */ Cn; },\n/* harmony export */   formatMessageContext: function() { return /* binding */ Xn; },\n/* harmony export */   formatRelayParams: function() { return /* binding */ We; },\n/* harmony export */   formatRelayRpcUrl: function() { return /* binding */ Jn; },\n/* harmony export */   formatTopicTarget: function() { return /* binding */ ct; },\n/* harmony export */   formatUA: function() { return /* binding */ Me; },\n/* harmony export */   formatUri: function() { return /* binding */ Nt; },\n/* harmony export */   generateKeyPair: function() { return /* binding */ jn; },\n/* harmony export */   generateRandomBytes32: function() { return /* binding */ Dn; },\n/* harmony export */   getAccountsChains: function() { return /* binding */ A; },\n/* harmony export */   getAccountsFromNamespaces: function() { return /* binding */ Rn; },\n/* harmony export */   getAddressFromAccount: function() { return /* binding */ be; },\n/* harmony export */   getAddressesFromAccounts: function() { return /* binding */ Tn; },\n/* harmony export */   getAppMetadata: function() { return /* binding */ zn; },\n/* harmony export */   getBrowserOnlineStatus: function() { return /* binding */ dn; },\n/* harmony export */   getChainFromAccount: function() { return /* binding */ Ne; },\n/* harmony export */   getChainsFromAccounts: function() { return /* binding */ Oe; },\n/* harmony export */   getChainsFromNamespace: function() { return /* binding */ K; },\n/* harmony export */   getChainsFromNamespaces: function() { return /* binding */ An; },\n/* harmony export */   getChainsFromRequiredNamespaces: function() { return /* binding */ Un; },\n/* harmony export */   getDidAddress: function() { return /* binding */ we; },\n/* harmony export */   getDidAddressSegments: function() { return /* binding */ L; },\n/* harmony export */   getDidChainId: function() { return /* binding */ Se; },\n/* harmony export */   getEnvironment: function() { return /* binding */ R; },\n/* harmony export */   getHttpUrl: function() { return /* binding */ Qn; },\n/* harmony export */   getInternalError: function() { return /* binding */ N; },\n/* harmony export */   getJavascriptID: function() { return /* binding */ Ve; },\n/* harmony export */   getJavascriptOS: function() { return /* binding */ ke; },\n/* harmony export */   getLastItems: function() { return /* binding */ Le; },\n/* harmony export */   getNamespacedDidChainId: function() { return /* binding */ _n; },\n/* harmony export */   getNamespacesChains: function() { return /* binding */ Je; },\n/* harmony export */   getNamespacesEventsForChainId: function() { return /* binding */ Ze; },\n/* harmony export */   getNamespacesMethodsForChainId: function() { return /* binding */ Qe; },\n/* harmony export */   getNodeOnlineStatus: function() { return /* binding */ pn; },\n/* harmony export */   getReactNativeOnlineStatus: function() { return /* binding */ fn; },\n/* harmony export */   getRelayClientMetadata: function() { return /* binding */ Yn; },\n/* harmony export */   getRelayProtocolApi: function() { return /* binding */ yt; },\n/* harmony export */   getRelayProtocolName: function() { return /* binding */ mt; },\n/* harmony export */   getRequiredNamespacesFromNamespaces: function() { return /* binding */ At; },\n/* harmony export */   getSdkError: function() { return /* binding */ U; },\n/* harmony export */   getUniqueValues: function() { return /* binding */ Y; },\n/* harmony export */   handleDeeplinkRedirect: function() { return /* binding */ pt; },\n/* harmony export */   hasOverlap: function() { return /* binding */ O; },\n/* harmony export */   hashKey: function() { return /* binding */ Vn; },\n/* harmony export */   hashMessage: function() { return /* binding */ Mn; },\n/* harmony export */   isBrowser: function() { return /* binding */ q; },\n/* harmony export */   isCaipNamespace: function() { return /* binding */ oe; },\n/* harmony export */   isConformingNamespaces: function() { return /* binding */ un; },\n/* harmony export */   isExpired: function() { return /* binding */ dt; },\n/* harmony export */   isNode: function() { return /* binding */ te; },\n/* harmony export */   isOnline: function() { return /* binding */ Zt; },\n/* harmony export */   isProposalStruct: function() { return /* binding */ Dt; },\n/* harmony export */   isReactNative: function() { return /* binding */ j; },\n/* harmony export */   isSessionCompatible: function() { return /* binding */ $t; },\n/* harmony export */   isSessionStruct: function() { return /* binding */ kt; },\n/* harmony export */   isTypeOneEnvelope: function() { return /* binding */ Fn; },\n/* harmony export */   isUndefined: function() { return /* binding */ w; },\n/* harmony export */   isValidAccountId: function() { return /* binding */ en; },\n/* harmony export */   isValidAccounts: function() { return /* binding */ rn; },\n/* harmony export */   isValidActions: function() { return /* binding */ sn; },\n/* harmony export */   isValidArray: function() { return /* binding */ D; },\n/* harmony export */   isValidChainId: function() { return /* binding */ k; },\n/* harmony export */   isValidChains: function() { return /* binding */ nn; },\n/* harmony export */   isValidController: function() { return /* binding */ Vt; },\n/* harmony export */   isValidErrorReason: function() { return /* binding */ Ft; },\n/* harmony export */   isValidEvent: function() { return /* binding */ Bt; },\n/* harmony export */   isValidId: function() { return /* binding */ Lt; },\n/* harmony export */   isValidNamespaceAccounts: function() { return /* binding */ on; },\n/* harmony export */   isValidNamespaceActions: function() { return /* binding */ ce; },\n/* harmony export */   isValidNamespaceChains: function() { return /* binding */ tn; },\n/* harmony export */   isValidNamespaceMethodsOrEvents: function() { return /* binding */ ie; },\n/* harmony export */   isValidNamespaces: function() { return /* binding */ cn; },\n/* harmony export */   isValidNamespacesChainId: function() { return /* binding */ Gt; },\n/* harmony export */   isValidNamespacesEvent: function() { return /* binding */ zt; },\n/* harmony export */   isValidNamespacesRequest: function() { return /* binding */ Wt; },\n/* harmony export */   isValidNumber: function() { return /* binding */ G; },\n/* harmony export */   isValidObject: function() { return /* binding */ B; },\n/* harmony export */   isValidParams: function() { return /* binding */ xt; },\n/* harmony export */   isValidRelay: function() { return /* binding */ an; },\n/* harmony export */   isValidRelays: function() { return /* binding */ Kt; },\n/* harmony export */   isValidRequest: function() { return /* binding */ Ht; },\n/* harmony export */   isValidRequestExpiry: function() { return /* binding */ Qt; },\n/* harmony export */   isValidRequiredNamespaces: function() { return /* binding */ Mt; },\n/* harmony export */   isValidResponse: function() { return /* binding */ qt; },\n/* harmony export */   isValidString: function() { return /* binding */ h; },\n/* harmony export */   isValidUrl: function() { return /* binding */ jt; },\n/* harmony export */   mapEntries: function() { return /* binding */ tt; },\n/* harmony export */   mapToObj: function() { return /* binding */ et; },\n/* harmony export */   mergeArrays: function() { return /* binding */ S; },\n/* harmony export */   normalizeNamespaces: function() { return /* binding */ se; },\n/* harmony export */   objToMap: function() { return /* binding */ nt; },\n/* harmony export */   parseAccountId: function() { return /* binding */ z; },\n/* harmony export */   parseChainId: function() { return /* binding */ ve; },\n/* harmony export */   parseContextNames: function() { return /* binding */ Ke; },\n/* harmony export */   parseExpirerTarget: function() { return /* binding */ ut; },\n/* harmony export */   parseNamespaceKey: function() { return /* binding */ Xe; },\n/* harmony export */   parseRelayParams: function() { return /* binding */ Be; },\n/* harmony export */   parseTopic: function() { return /* binding */ Ge; },\n/* harmony export */   parseUri: function() { return /* binding */ bt; },\n/* harmony export */   serialize: function() { return /* binding */ Te; },\n/* harmony export */   subscribeToBrowserNetworkChange: function() { return /* binding */ mn; },\n/* harmony export */   subscribeToNetworkChange: function() { return /* binding */ Xt; },\n/* harmony export */   subscribeToReactNativeNetworkChange: function() { return /* binding */ yn; },\n/* harmony export */   validateDecoding: function() { return /* binding */ xn; },\n/* harmony export */   validateEncoding: function() { return /* binding */ Re; }\n/* harmony export */ });\n/* harmony import */ var _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stablelib/chacha20poly1305 */ \"./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\");\n/* harmony import */ var _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/hkdf */ \"./node_modules/@stablelib/hkdf/lib/hkdf.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stablelib/random */ \"./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stablelib/sha256 */ \"./node_modules/@stablelib/sha256/lib/sha256.js\");\n/* harmony import */ var _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stablelib/x25519 */ \"./node_modules/@stablelib/x25519/lib/x25519.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays */ \"./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/time */ \"./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/window-getters */ \"./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! query-string */ \"./node_modules/query-string/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/relay-api */ \"./node_modules/@walletconnect/relay-api/dist/esm/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\nconst M=\":\";function ve(e){const[n,t]=e.split(M);return{namespace:n,reference:t}}function ge(e){const{namespace:n,reference:t}=e;return[n,t].join(M)}function z(e){const[n,t,r]=e.split(M);return{namespace:n,reference:t,address:r}}function Ee(e){const{namespace:n,reference:t,address:r}=e;return[n,t,r].join(M)}function Y(e,n){const t=[];return e.forEach(r=>{const o=n(r);t.includes(o)||t.push(o)}),t}function be(e){const{address:n}=z(e);return n}function Ne(e){const{namespace:n,reference:t}=z(e);return ge({namespace:n,reference:t})}function Pn(e,n){const{namespace:t,reference:r}=ve(n);return Ee({namespace:t,reference:r,address:e})}function Tn(e){return Y(e,be)}function Oe(e){return Y(e,Ne)}function Rn(e,n=[]){const t=[];return Object.keys(e).forEach(r=>{if(n.length&&!n.includes(r))return;const o=e[r];t.push(...o.accounts)}),t}function An(e,n=[]){const t=[];return Object.keys(e).forEach(r=>{if(n.length&&!n.includes(r))return;const o=e[r];t.push(...Oe(o.accounts))}),t}function Un(e,n=[]){const t=[];return Object.keys(e).forEach(r=>{if(n.length&&!n.includes(r))return;const o=e[r];t.push(...K(r,o))}),t}function K(e,n){return e.includes(\":\")?[e]:n.chains||[]}const L=e=>e?.split(\":\"),Se=e=>{const n=e&&L(e);if(n)return n[3]},_n=e=>{const n=e&&L(e);if(n)return n[2]+\":\"+n[3]},we=e=>{const n=e&&L(e);if(n)return n.pop()},Cn=(e,n)=>{const t=`${e.domain} wants you to sign in with your Ethereum account:`,r=we(n),o=e.statement,s=`URI: ${e.aud}`,i=`Version: ${e.version}`,l=`Chain ID: ${Se(n)}`,d=`Nonce: ${e.nonce}`,c=`Issued At: ${e.iat}`,u=e.resources&&e.resources.length>0?`Resources:\n${e.resources.map(a=>`- ${a}`).join(`\n`)}`:void 0;return[t,r,\"\",o,\"\",s,i,l,d,c,u].filter(a=>a!=null).join(`\n`)},J=\"base10\",p=\"base16\",x=\"base64pad\",F=\"utf8\",Q=0,_=1,$n=0,Ie=1,Z=12,X=32;function jn(){const e=_stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__.generateKeyPair();return{privateKey:(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e.secretKey,p),publicKey:(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e.publicKey,p)}}function Dn(){const e=(0,_stablelib_random__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(X);return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e,p)}function kn(e,n){const t=_stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__.sharedKey((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e,p),(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(n,p),!0),r=new _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_1__.HKDF(_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.SHA256,t).expand(X);return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(r,p)}function Vn(e){const n=(0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e,p));return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n,p)}function Mn(e){const n=(0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e,F));return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n,p)}function Pe(e){return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(`${e}`,J)}function $(e){return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e,J))}function Kn(e){const n=Pe(typeof e.type<\"u\"?e.type:Q);if($(n)===_&&typeof e.senderPublicKey>\"u\")throw new Error(\"Missing sender public key for type 1 envelope\");const t=typeof e.senderPublicKey<\"u\"?(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.senderPublicKey,p):void 0,r=typeof e.iv<\"u\"?(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.iv,p):(0,_stablelib_random__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(Z),o=new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.symKey,p)).seal(r,(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.message,F));return Te({type:n,sealed:o,iv:r,senderPublicKey:t})}function Ln(e){const n=new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.symKey,p)),{sealed:t,iv:r}=ee(e.encoded),o=n.open(r,t);if(o===null)throw new Error(\"Failed to decrypt\");return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(o,F)}function Te(e){if($(e.type)===_){if(typeof e.senderPublicKey>\"u\")throw new Error(\"Missing sender public key for type 1 envelope\");return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([e.type,e.senderPublicKey,e.iv,e.sealed]),x)}return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([e.type,e.iv,e.sealed]),x)}function ee(e){const n=(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e,x),t=n.slice($n,Ie),r=Ie;if($(t)===_){const l=r+X,d=l+Z,c=n.slice(r,l),u=n.slice(l,d),a=n.slice(d);return{type:t,sealed:a,iv:u,senderPublicKey:c}}const o=r+Z,s=n.slice(r,o),i=n.slice(o);return{type:t,sealed:i,iv:s}}function xn(e,n){const t=ee(e);return Re({type:$(t.type),senderPublicKey:typeof t.senderPublicKey<\"u\"?(0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(t.senderPublicKey,p):void 0,receiverPublicKey:n?.receiverPublicKey})}function Re(e){const n=e?.type||Q;if(n===_){if(typeof e?.senderPublicKey>\"u\")throw new Error(\"missing sender public key\");if(typeof e?.receiverPublicKey>\"u\")throw new Error(\"missing receiver public key\")}return{type:n,senderPublicKey:e?.senderPublicKey,receiverPublicKey:e?.receiverPublicKey}}function Fn(e){return e.type===_&&typeof e.senderPublicKey==\"string\"&&typeof e.receiverPublicKey==\"string\"}var Hn=Object.defineProperty,Ae=Object.getOwnPropertySymbols,qn=Object.prototype.hasOwnProperty,Bn=Object.prototype.propertyIsEnumerable,Ue=(e,n,t)=>n in e?Hn(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,_e=(e,n)=>{for(var t in n||(n={}))qn.call(n,t)&&Ue(e,t,n[t]);if(Ae)for(var t of Ae(n))Bn.call(n,t)&&Ue(e,t,n[t]);return e};const Ce=\"ReactNative\",m={reactNative:\"react-native\",node:\"node\",browser:\"browser\",unknown:\"unknown\"},H=\" \",Gn=\":\",$e=\"/\",ne=2,Wn=1e3,je=\"js\";function te(){return typeof process<\"u\"&&typeof process.versions<\"u\"&&typeof process.versions.node<\"u\"}function j(){return!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getDocument)()&&!!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getNavigator)()&&navigator.product===Ce}function q(){return!te()&&!!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getNavigator)()}function R(){return j()?m.reactNative:te()?m.node:q()?m.browser:m.unknown}function De(e,n){let t=query_string__WEBPACK_IMPORTED_MODULE_9__.parse(e);return t=_e(_e({},t),n),e=query_string__WEBPACK_IMPORTED_MODULE_9__.stringify(t),e}function zn(){return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_8__.getWindowMetadata)()||{name:\"\",description:\"\",url:\"\",icons:[\"\"]}}function Yn(e,n){var t;const r=R(),o={protocol:e,version:n,env:r};return r===\"browser\"&&(o.host=((t=(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getLocation)())==null?void 0:t.host)||\"unknown\"),o}function ke(){if(R()===m.reactNative&&typeof __webpack_require__.g<\"u\"&&typeof(__webpack_require__.g==null?void 0:__webpack_require__.g.Platform)<\"u\"){const{OS:t,Version:r}=__webpack_require__.g.Platform;return[t,r].join(\"-\")}const e=(0,detect_browser__WEBPACK_IMPORTED_MODULE_11__.detect)();if(e===null)return\"unknown\";const n=e.os?e.os.replace(\" \",\"\").toLowerCase():\"unknown\";return e.type===\"browser\"?[n,e.name,e.version].join(\"-\"):[n,e.version].join(\"-\")}function Ve(){var e;const n=R();return n===m.browser?[n,((e=(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getLocation)())==null?void 0:e.host)||\"unknown\"].join(\":\"):n}function Me(e,n,t){const r=ke(),o=Ve();return[[e,n].join(\"-\"),[je,t].join(\"-\"),r,o].join(\"/\")}function Jn({protocol:e,version:n,relayUrl:t,sdkVersion:r,auth:o,projectId:s,useOnCloseEvent:i}){const l=t.split(\"?\"),d=Me(e,n,r),c={auth:o,ua:d,projectId:s,useOnCloseEvent:i||void 0},u=De(l[1]||\"\",c);return l[0]+\"?\"+u}function Qn(e){let n=(e.match(/^[^:]+(?=:\\/\\/)/gi)||[])[0];const t=typeof n<\"u\"?e.split(\"://\")[1]:e;return n=n===\"wss\"?\"https\":\"http\",[n,t].join(\"://\")}function Zn(e,n,t){if(!e[n]||typeof e[n]!==t)throw new Error(`Missing or invalid \"${n}\" param`)}function Ke(e,n=ne){return Le(e.split($e),n)}function Xn(e){return Ke(e).join(H)}function O(e,n){return e.filter(t=>n.includes(t)).length===e.length}function Le(e,n=ne){return e.slice(Math.max(e.length-n,0))}function et(e){return Object.fromEntries(e.entries())}function nt(e){return new Map(Object.entries(e))}function tt(e,n){const t={};return Object.keys(e).forEach(r=>{t[r]=n(e[r])}),t}const rt=e=>e;function xe(e){return e.trim().replace(/^\\w/,n=>n.toUpperCase())}function ot(e){return e.split(H).map(n=>xe(n)).join(H)}function st(e=_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.FIVE_MINUTES,n){const t=(0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e||_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.FIVE_MINUTES);let r,o,s;return{resolve:i=>{s&&r&&(clearTimeout(s),r(i))},reject:i=>{s&&o&&(clearTimeout(s),o(i))},done:()=>new Promise((i,l)=>{s=setTimeout(()=>{l(new Error(n))},t),r=i,o=l})}}function it(e,n,t){return new Promise(async(r,o)=>{const s=setTimeout(()=>o(new Error(t)),n);try{const i=await e;r(i)}catch(i){o(i)}clearTimeout(s)})}function re(e,n){if(typeof n==\"string\"&&n.startsWith(`${e}:`))return n;if(e.toLowerCase()===\"topic\"){if(typeof n!=\"string\")throw new Error('Value must be \"string\" for expirer target type: topic');return`topic:${n}`}else if(e.toLowerCase()===\"id\"){if(typeof n!=\"number\")throw new Error('Value must be \"number\" for expirer target type: id');return`id:${n}`}throw new Error(`Unknown expirer target type: ${e}`)}function ct(e){return re(\"topic\",e)}function at(e){return re(\"id\",e)}function ut(e){const[n,t]=e.split(\":\"),r={id:void 0,topic:void 0};if(n===\"topic\"&&typeof t==\"string\")r.topic=t;else if(n===\"id\"&&Number.isInteger(Number(t)))r.id=Number(t);else throw new Error(`Invalid target, expected id:number or topic:string, got ${n}:${t}`);return r}function lt(e,n){return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.fromMiliseconds)((n||Date.now())+(0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e))}function dt(e){return Date.now()>=(0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e)}function ft(e,n){return`${e}${n?`:${n}`:\"\"}`}function S(e=[],n=[]){return[...new Set([...e,...n])]}async function pt({id:e,topic:n,wcDeepLink:t}){try{if(!t)return;const r=typeof t==\"string\"?JSON.parse(t):t;let o=r?.href;if(typeof o!=\"string\")return;o.endsWith(\"/\")&&(o=o.slice(0,-1));const s=`${o}/wc?requestId=${e}&sessionTopic=${n}`,i=R();i===m.browser?s.startsWith(\"https://\")?window.open(s,\"_blank\",\"noreferrer noopener\"):window.open(s,\"_self\",\"noreferrer noopener\"):i===m.reactNative&&typeof(__webpack_require__.g==null?void 0:__webpack_require__.g.Linking)<\"u\"&&await __webpack_require__.g.Linking.openURL(s)}catch(r){console.error(r)}}const Fe=\"irn\";function mt(e){return e?.relay||{protocol:Fe}}function yt(e){const n=_walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__.RELAY_JSONRPC[e];if(typeof n>\"u\")throw new Error(`Relay Protocol not supported: ${e}`);return n}var ht=Object.defineProperty,He=Object.getOwnPropertySymbols,vt=Object.prototype.hasOwnProperty,gt=Object.prototype.propertyIsEnumerable,qe=(e,n,t)=>n in e?ht(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,Et=(e,n)=>{for(var t in n||(n={}))vt.call(n,t)&&qe(e,t,n[t]);if(He)for(var t of He(n))gt.call(n,t)&&qe(e,t,n[t]);return e};function Be(e,n=\"-\"){const t={},r=\"relay\"+n;return Object.keys(e).forEach(o=>{if(o.startsWith(r)){const s=o.replace(r,\"\"),i=e[o];t[s]=i}}),t}function bt(e){e=e.includes(\"wc://\")?e.replace(\"wc://\",\"\"):e,e=e.includes(\"wc:\")?e.replace(\"wc:\",\"\"):e;const n=e.indexOf(\":\"),t=e.indexOf(\"?\")!==-1?e.indexOf(\"?\"):void 0,r=e.substring(0,n),o=e.substring(n+1,t).split(\"@\"),s=typeof t<\"u\"?e.substring(t):\"\",i=query_string__WEBPACK_IMPORTED_MODULE_9__.parse(s);return{protocol:r,topic:Ge(o[0]),version:parseInt(o[1],10),symKey:i.symKey,relay:Be(i)}}function Ge(e){return e.startsWith(\"//\")?e.substring(2):e}function We(e,n=\"-\"){const t=\"relay\",r={};return Object.keys(e).forEach(o=>{const s=t+n+o;e[o]&&(r[s]=e[o])}),r}function Nt(e){return`${e.protocol}:${e.topic}@${e.version}?`+query_string__WEBPACK_IMPORTED_MODULE_9__.stringify(Et({symKey:e.symKey},We(e.relay)))}var Ot=Object.defineProperty,St=Object.defineProperties,wt=Object.getOwnPropertyDescriptors,ze=Object.getOwnPropertySymbols,It=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable,Ye=(e,n,t)=>n in e?Ot(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,Tt=(e,n)=>{for(var t in n||(n={}))It.call(n,t)&&Ye(e,t,n[t]);if(ze)for(var t of ze(n))Pt.call(n,t)&&Ye(e,t,n[t]);return e},Rt=(e,n)=>St(e,wt(n));function A(e){const n=[];return e.forEach(t=>{const[r,o]=t.split(\":\");n.push(`${r}:${o}`)}),n}function Je(e){const n=[];return Object.values(e).forEach(t=>{n.push(...A(t.accounts))}),n}function Qe(e,n){const t=[];return Object.values(e).forEach(r=>{A(r.accounts).includes(n)&&t.push(...r.methods)}),t}function Ze(e,n){const t=[];return Object.values(e).forEach(r=>{A(r.accounts).includes(n)&&t.push(...r.events)}),t}function At(e,n){const t=cn(e,n);if(t)throw new Error(t.message);const r={};for(const[o,s]of Object.entries(e))r[o]={methods:s.methods,events:s.events,chains:s.accounts.map(i=>`${i.split(\":\")[0]}:${i.split(\":\")[1]}`)};return r}function Ut(e){const{proposal:{requiredNamespaces:n,optionalNamespaces:t={}},supportedNamespaces:r}=e,o=se(n),s=se(t),i={};Object.keys(r).forEach(c=>{const u=r[c].chains,a=r[c].methods,b=r[c].events,I=r[c].accounts;u.forEach(y=>{if(!I.some(f=>f.includes(y)))throw new Error(`No accounts provided for chain ${y} in namespace ${c}`)}),i[c]={chains:u,methods:a,events:b,accounts:I}});const l=un(n,i,\"approve()\");if(l)throw new Error(l.message);const d={};return!Object.keys(n).length&&!Object.keys(t).length?i:(Object.keys(o).forEach(c=>{const u=r[c].chains.filter(y=>{var f,v;return(v=(f=o[c])==null?void 0:f.chains)==null?void 0:v.includes(y)}),a=r[c].methods.filter(y=>{var f,v;return(v=(f=o[c])==null?void 0:f.methods)==null?void 0:v.includes(y)}),b=r[c].events.filter(y=>{var f,v;return(v=(f=o[c])==null?void 0:f.events)==null?void 0:v.includes(y)}),I=u.map(y=>r[c].accounts.filter(f=>f.includes(`${y}:`))).flat();d[c]={chains:u,methods:a,events:b,accounts:I}}),Object.keys(s).forEach(c=>{var u,a,b,I,y,f;if(!r[c])return;const v=(a=(u=s[c])==null?void 0:u.chains)==null?void 0:a.filter(P=>r[c].chains.includes(P)),hn=r[c].methods.filter(P=>{var T,C;return(C=(T=s[c])==null?void 0:T.methods)==null?void 0:C.includes(P)}),vn=r[c].events.filter(P=>{var T,C;return(C=(T=s[c])==null?void 0:T.events)==null?void 0:C.includes(P)}),gn=v?.map(P=>r[c].accounts.filter(T=>T.includes(`${P}:`))).flat();d[c]={chains:S((b=d[c])==null?void 0:b.chains,v),methods:S((I=d[c])==null?void 0:I.methods,hn),events:S((y=d[c])==null?void 0:y.events,vn),accounts:S((f=d[c])==null?void 0:f.accounts,gn)}}),d)}function oe(e){return e.includes(\":\")}function Xe(e){return oe(e)?e.split(\":\")[0]:e}function se(e){var n,t,r;const o={};if(!B(e))return o;for(const[s,i]of Object.entries(e)){const l=oe(s)?[s]:i.chains,d=i.methods||[],c=i.events||[],u=Xe(s);o[u]=Rt(Tt({},o[u]),{chains:S(l,(n=o[u])==null?void 0:n.chains),methods:S(d,(t=o[u])==null?void 0:t.methods),events:S(c,(r=o[u])==null?void 0:r.events)})}return o}const _t={INVALID_METHOD:{message:\"Invalid method.\",code:1001},INVALID_EVENT:{message:\"Invalid event.\",code:1002},INVALID_UPDATE_REQUEST:{message:\"Invalid update request.\",code:1003},INVALID_EXTEND_REQUEST:{message:\"Invalid extend request.\",code:1004},INVALID_SESSION_SETTLE_REQUEST:{message:\"Invalid session settle request.\",code:1005},UNAUTHORIZED_METHOD:{message:\"Unauthorized method.\",code:3001},UNAUTHORIZED_EVENT:{message:\"Unauthorized event.\",code:3002},UNAUTHORIZED_UPDATE_REQUEST:{message:\"Unauthorized update request.\",code:3003},UNAUTHORIZED_EXTEND_REQUEST:{message:\"Unauthorized extend request.\",code:3004},USER_REJECTED:{message:\"User rejected.\",code:5e3},USER_REJECTED_CHAINS:{message:\"User rejected chains.\",code:5001},USER_REJECTED_METHODS:{message:\"User rejected methods.\",code:5002},USER_REJECTED_EVENTS:{message:\"User rejected events.\",code:5003},UNSUPPORTED_CHAINS:{message:\"Unsupported chains.\",code:5100},UNSUPPORTED_METHODS:{message:\"Unsupported methods.\",code:5101},UNSUPPORTED_EVENTS:{message:\"Unsupported events.\",code:5102},UNSUPPORTED_ACCOUNTS:{message:\"Unsupported accounts.\",code:5103},UNSUPPORTED_NAMESPACE_KEY:{message:\"Unsupported namespace key.\",code:5104},USER_DISCONNECTED:{message:\"User disconnected.\",code:6e3},SESSION_SETTLEMENT_FAILED:{message:\"Session settlement failed.\",code:7e3},WC_METHOD_UNSUPPORTED:{message:\"Unsupported wc_ method.\",code:10001}},Ct={NOT_INITIALIZED:{message:\"Not initialized.\",code:1},NO_MATCHING_KEY:{message:\"No matching key.\",code:2},RESTORE_WILL_OVERRIDE:{message:\"Restore will override.\",code:3},RESUBSCRIBED:{message:\"Resubscribed.\",code:4},MISSING_OR_INVALID:{message:\"Missing or invalid.\",code:5},EXPIRED:{message:\"Expired.\",code:6},UNKNOWN_TYPE:{message:\"Unknown type.\",code:7},MISMATCHED_TOPIC:{message:\"Mismatched topic.\",code:8},NON_CONFORMING_NAMESPACES:{message:\"Non conforming namespaces.\",code:9}};function N(e,n){const{message:t,code:r}=Ct[e];return{message:n?`${t} ${n}`:t,code:r}}function U(e,n){const{message:t,code:r}=_t[e];return{message:n?`${t} ${n}`:t,code:r}}function D(e,n){return Array.isArray(e)?typeof n<\"u\"&&e.length?e.every(n):!0:!1}function B(e){return Object.getPrototypeOf(e)===Object.prototype&&Object.keys(e).length}function w(e){return typeof e>\"u\"}function h(e,n){return n&&w(e)?!0:typeof e==\"string\"&&!!e.trim().length}function G(e,n){return n&&w(e)?!0:typeof e==\"number\"&&!isNaN(e)}function $t(e,n){const{requiredNamespaces:t}=n,r=Object.keys(e.namespaces),o=Object.keys(t);let s=!0;return O(o,r)?(r.forEach(i=>{const{accounts:l,methods:d,events:c}=e.namespaces[i],u=A(l),a=t[i];(!O(K(i,a),u)||!O(a.methods,d)||!O(a.events,c))&&(s=!1)}),s):!1}function k(e){return h(e,!1)&&e.includes(\":\")?e.split(\":\").length===2:!1}function en(e){if(h(e,!1)&&e.includes(\":\")){const n=e.split(\":\");if(n.length===3){const t=n[0]+\":\"+n[1];return!!n[2]&&k(t)}}return!1}function jt(e){if(h(e,!1))try{return typeof new URL(e)<\"u\"}catch{return!1}return!1}function Dt(e){var n;return(n=e?.proposer)==null?void 0:n.publicKey}function kt(e){return e?.topic}function Vt(e,n){let t=null;return h(e?.publicKey,!1)||(t=N(\"MISSING_OR_INVALID\",`${n} controller public key should be a string`)),t}function ie(e){let n=!0;return D(e)?e.length&&(n=e.every(t=>h(t,!1))):n=!1,n}function nn(e,n,t){let r=null;return D(n)&&n.length?n.forEach(o=>{r||k(o)||(r=U(\"UNSUPPORTED_CHAINS\",`${t}, chain ${o} should be a string and conform to \"namespace:chainId\" format`))}):k(e)||(r=U(\"UNSUPPORTED_CHAINS\",`${t}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)),r}function tn(e,n,t){let r=null;return Object.entries(e).forEach(([o,s])=>{if(r)return;const i=nn(o,K(o,s),`${n} ${t}`);i&&(r=i)}),r}function rn(e,n){let t=null;return D(e)?e.forEach(r=>{t||en(r)||(t=U(\"UNSUPPORTED_ACCOUNTS\",`${n}, account ${r} should be a string and conform to \"namespace:chainId:address\" format`))}):t=U(\"UNSUPPORTED_ACCOUNTS\",`${n}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`),t}function on(e,n){let t=null;return Object.values(e).forEach(r=>{if(t)return;const o=rn(r?.accounts,`${n} namespace`);o&&(t=o)}),t}function sn(e,n){let t=null;return ie(e?.methods)?ie(e?.events)||(t=U(\"UNSUPPORTED_EVENTS\",`${n}, events should be an array of strings or empty array for no events`)):t=U(\"UNSUPPORTED_METHODS\",`${n}, methods should be an array of strings or empty array for no methods`),t}function ce(e,n){let t=null;return Object.values(e).forEach(r=>{if(t)return;const o=sn(r,`${n}, namespace`);o&&(t=o)}),t}function Mt(e,n,t){let r=null;if(e&&B(e)){const o=ce(e,n);o&&(r=o);const s=tn(e,n,t);s&&(r=s)}else r=N(\"MISSING_OR_INVALID\",`${n}, ${t} should be an object with data`);return r}function cn(e,n){let t=null;if(e&&B(e)){const r=ce(e,n);r&&(t=r);const o=on(e,n);o&&(t=o)}else t=N(\"MISSING_OR_INVALID\",`${n}, namespaces should be an object with data`);return t}function an(e){return h(e.protocol,!0)}function Kt(e,n){let t=!1;return n&&!e?t=!0:e&&D(e)&&e.length&&e.forEach(r=>{t=an(r)}),t}function Lt(e){return typeof e==\"number\"}function xt(e){return typeof e<\"u\"&&typeof e!==null}function Ft(e){return!(!e||typeof e!=\"object\"||!e.code||!G(e.code,!1)||!e.message||!h(e.message,!1))}function Ht(e){return!(w(e)||!h(e.method,!1))}function qt(e){return!(w(e)||w(e.result)&&w(e.error)||!G(e.id,!1)||!h(e.jsonrpc,!1))}function Bt(e){return!(w(e)||!h(e.name,!1))}function Gt(e,n){return!(!k(n)||!Je(e).includes(n))}function Wt(e,n,t){return h(t,!1)?Qe(e,n).includes(t):!1}function zt(e,n,t){return h(t,!1)?Ze(e,n).includes(t):!1}function un(e,n,t){let r=null;const o=Yt(e),s=Jt(n),i=Object.keys(o),l=Object.keys(s),d=ln(Object.keys(e)),c=ln(Object.keys(n)),u=d.filter(a=>!c.includes(a));return u.length&&(r=N(\"NON_CONFORMING_NAMESPACES\",`${t} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${u.toString()}\n      Received: ${Object.keys(n).toString()}`)),O(i,l)||(r=N(\"NON_CONFORMING_NAMESPACES\",`${t} namespaces chains don't satisfy required namespaces.\n      Required: ${i.toString()}\n      Approved: ${l.toString()}`)),Object.keys(n).forEach(a=>{if(!a.includes(\":\")||r)return;const b=A(n[a].accounts);b.includes(a)||(r=N(\"NON_CONFORMING_NAMESPACES\",`${t} namespaces accounts don't satisfy namespace accounts for ${a}\n        Required: ${a}\n        Approved: ${b.toString()}`))}),i.forEach(a=>{r||(O(o[a].methods,s[a].methods)?O(o[a].events,s[a].events)||(r=N(\"NON_CONFORMING_NAMESPACES\",`${t} namespaces events don't satisfy namespace events for ${a}`)):r=N(\"NON_CONFORMING_NAMESPACES\",`${t} namespaces methods don't satisfy namespace methods for ${a}`))}),r}function Yt(e){const n={};return Object.keys(e).forEach(t=>{var r;t.includes(\":\")?n[t]=e[t]:(r=e[t].chains)==null||r.forEach(o=>{n[o]={methods:e[t].methods,events:e[t].events}})}),n}function ln(e){return[...new Set(e.map(n=>n.includes(\":\")?n.split(\":\")[0]:n))]}function Jt(e){const n={};return Object.keys(e).forEach(t=>{if(t.includes(\":\"))n[t]=e[t];else{const r=A(e[t].accounts);r?.forEach(o=>{n[o]={accounts:e[t].accounts.filter(s=>s.includes(`${o}:`)),methods:e[t].methods,events:e[t].events}})}}),n}function Qt(e,n){return G(e,!1)&&e<=n.max&&e>=n.min}function Zt(){const e=R();return new Promise(n=>{switch(e){case m.browser:n(dn());break;case m.reactNative:n(fn());break;case m.node:n(pn());break;default:n(!0)}})}function dn(){return q()&&navigator?.onLine}async function fn(){if(j()&&typeof __webpack_require__.g<\"u\"&&__webpack_require__.g!=null&&__webpack_require__.g.NetInfo){const e=await(__webpack_require__.g==null?void 0:__webpack_require__.g.NetInfo.fetch());return e?.isConnected}return!0}function pn(){return!0}function Xt(e){switch(R()){case m.browser:mn(e);break;case m.reactNative:yn(e);break;case m.node:break}}function mn(e){!j()&&q()&&(window.addEventListener(\"online\",()=>e(!0)),window.addEventListener(\"offline\",()=>e(!1)))}function yn(e){j()&&typeof __webpack_require__.g<\"u\"&&__webpack_require__.g!=null&&__webpack_require__.g.NetInfo&&__webpack_require__.g?.NetInfo.addEventListener(n=>e(n?.isConnected))}const ae={};class er{static get(n){return ae[n]}static set(n,t){ae[n]=t}static delete(n){delete ae[n]}}\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/utils/dist/index.es.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/window-getters/dist/cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-getters/dist/cjs/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;\nfunction getFromWindow(name) {\n    let res = undefined;\n    if (typeof window !== \"undefined\" && typeof window[name] !== \"undefined\") {\n        res = window[name];\n    }\n    return res;\n}\nexports.getFromWindow = getFromWindow;\nfunction getFromWindowOrThrow(name) {\n    const res = getFromWindow(name);\n    if (!res) {\n        throw new Error(`${name} is not defined in Window`);\n    }\n    return res;\n}\nexports.getFromWindowOrThrow = getFromWindowOrThrow;\nfunction getDocumentOrThrow() {\n    return getFromWindowOrThrow(\"document\");\n}\nexports.getDocumentOrThrow = getDocumentOrThrow;\nfunction getDocument() {\n    return getFromWindow(\"document\");\n}\nexports.getDocument = getDocument;\nfunction getNavigatorOrThrow() {\n    return getFromWindowOrThrow(\"navigator\");\n}\nexports.getNavigatorOrThrow = getNavigatorOrThrow;\nfunction getNavigator() {\n    return getFromWindow(\"navigator\");\n}\nexports.getNavigator = getNavigator;\nfunction getLocationOrThrow() {\n    return getFromWindowOrThrow(\"location\");\n}\nexports.getLocationOrThrow = getLocationOrThrow;\nfunction getLocation() {\n    return getFromWindow(\"location\");\n}\nexports.getLocation = getLocation;\nfunction getCryptoOrThrow() {\n    return getFromWindowOrThrow(\"crypto\");\n}\nexports.getCryptoOrThrow = getCryptoOrThrow;\nfunction getCrypto() {\n    return getFromWindow(\"crypto\");\n}\nexports.getCrypto = getCrypto;\nfunction getLocalStorageOrThrow() {\n    return getFromWindowOrThrow(\"localStorage\");\n}\nexports.getLocalStorageOrThrow = getLocalStorageOrThrow;\nfunction getLocalStorage() {\n    return getFromWindow(\"localStorage\");\n}\nexports.getLocalStorage = getLocalStorage;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnMvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsOEJBQThCLEdBQUcsaUJBQWlCLEdBQUcsd0JBQXdCLEdBQUcsbUJBQW1CLEdBQUcsMEJBQTBCLEdBQUcsb0JBQW9CLEdBQUcsMkJBQTJCLEdBQUcsbUJBQW1CLEdBQUcsMEJBQTBCLEdBQUcsNEJBQTRCLEdBQUcscUJBQXFCO0FBQ3pUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixNQUFNO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzL2Rpc3QvY2pzL2luZGV4LmpzPzdiMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/window-getters/dist/cjs/index.js\n"));

/***/ }),

/***/ "./node_modules/@walletconnect/window-metadata/dist/cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-metadata/dist/cjs/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = __webpack_require__(/*! @walletconnect/window-getters */ \"./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    }\n    catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for (let i = 0; i < links.length; i++) {\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 &&\n                            href.toLowerCase().indexOf(\"http:\") === -1 &&\n                            href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            }\n                            else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        }\n                        else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        }\n                        else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny(...args) {\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for (let i = 0; i < metaTags.length; i++) {\n            const tag = metaTags[i];\n            const attributes = [\"itemprop\", \"property\", \"name\"]\n                .map((target) => tag.getAttribute(target))\n                .filter((attr) => {\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name,\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LW1ldGFkYXRhL2Rpc3QvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix5QkFBeUIsbUJBQU8sQ0FBQyxxR0FBK0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC93aW5kb3ctbWV0YWRhdGEvZGlzdC9janMvaW5kZXguanM/MTY4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0V2luZG93TWV0YWRhdGEgPSB2b2lkIDA7XG5jb25zdCB3aW5kb3dfZ2V0dGVyc18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzXCIpO1xuZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGEoKSB7XG4gICAgbGV0IGRvYztcbiAgICBsZXQgbG9jO1xuICAgIHRyeSB7XG4gICAgICAgIGRvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gICAgICAgIGxvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0TG9jYXRpb25PclRocm93KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJY29ucygpIHtcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07XG4gICAgICAgICAgICBjb25zdCByZWwgPSBsaW5rLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICAgIGlmIChyZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImljb25cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cHM6XCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cDpcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZi5pbmRleE9mKFwiLy9cIikgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWJzb2x1dGVIcmVmID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5kZXhPZihcIi9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gbG9jLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxQYXRoID0gcGF0aC5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGZpbmFsUGF0aCArIFwiL1wiICsgaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZUhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaHJlZi5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGxvYy5wcm90b2NvbCArIGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5wdXNoKGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGFPZkFueSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG1ldGFUYWdzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWV0YVwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gbWV0YVRhZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW1wiaXRlbXByb3BcIiwgXCJwcm9wZXJ0eVwiLCBcIm5hbWVcIl1cbiAgICAgICAgICAgICAgICAubWFwKCh0YXJnZXQpID0+IHRhZy5nZXRBdHRyaWJ1dGUodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChhdHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuaW5jbHVkZXMoYXR0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubGVuZ3RoICYmIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGFnLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgICBsZXQgbmFtZSA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJuYW1lXCIsIFwib2c6c2l0ZV9uYW1lXCIsIFwib2c6dGl0bGVcIiwgXCJ0d2l0dGVyOnRpdGxlXCIpO1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBkb2MudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJkZXNjcmlwdGlvblwiLCBcIm9nOmRlc2NyaXB0aW9uXCIsIFwidHdpdHRlcjpkZXNjcmlwdGlvblwiLCBcImtleXdvcmRzXCIpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKCk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IHVybCA9IGxvYy5vcmlnaW47XG4gICAgY29uc3QgaWNvbnMgPSBnZXRJY29ucygpO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB1cmwsXG4gICAgICAgIGljb25zLFxuICAgICAgICBuYW1lLFxuICAgIH07XG4gICAgcmV0dXJuIG1ldGE7XG59XG5leHBvcnRzLmdldFdpbmRvd01ldGFkYXRhID0gZ2V0V2luZG93TWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumPrivateKeyProvider: function() { return /* binding */ EthereumPrivateKeyProvider; },\n/* harmony export */   TransactionFormatter: function() { return /* binding */ TransactionFormatter; },\n/* harmony export */   WalletConnectV2Provider: function() { return /* binding */ WalletConnectV2Provider; },\n/* harmony export */   getProviderHandlers: function() { return /* binding */ getProviderHandlers; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @metamask/rpc-errors */ \"./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @walletconnect/utils */ \"./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3auth/base */ \"./node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @web3auth/base-provider */ \"./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _ethereumjs_tx__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethereumjs/tx */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @metamask/eth-sig-util */ \"./node_modules/@metamask/eth-sig-util/dist/index.js\");\n/* harmony import */ var _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! assert */ \"./node_modules/assert/build/assert.js\");\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var jsonschema__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! jsonschema */ \"./node_modules/jsonschema/lib/index.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ethereumjs/common */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_15__);\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction resemblesAddress(str) {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\nfunction createWalletMiddleware(_ref) {\n  let {\n    getAccounts,\n    getPrivateKey,\n    processDecryptMessage,\n    processEncryptionPublicKey,\n    processEthSignMessage,\n    processPersonalMessage,\n    processTransaction,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4\n  } = _ref;\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address, req) {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts = await getAccounts(req);\n      const normalizedAccounts = accounts.map(_address => _address.toLowerCase());\n      const normalizedAddress = address.toLowerCase();\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req, res) {\n    res.result = await getAccounts(req);\n  }\n  async function lookupDefaultAccount(req, res) {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req, res) {\n    if (!processTransaction) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processTransaction(txParams, req);\n  }\n  async function signTransaction(req, res) {\n    if (!processSignTransaction) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const txParams = req.params[0] || {\n      from: \"\"\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req, res) {\n    if (!processEthSignMessage) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const extraParams = req.params[2] || {};\n    const msgParams = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n  async function signTypedData(req, res) {\n    if (!processTypedMessage) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const message = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const version = \"V1\";\n    const extraParams = req.params[2] || {};\n    const msgParams = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n  async function signTypedDataV3(req, res) {\n    if (!processTypedMessageV3) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V3\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n  async function signTypedDataV4(req, res) {\n    if (!processTypedMessageV4) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    const message = req.params[1];\n    const version = \"V4\";\n    const msgParams = {\n      data: message,\n      from: address,\n      version\n    };\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n  async function personalSign(req, res) {\n    if (!processPersonalMessage) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam = req.params[0];\n    const secondParam = req.params[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams = req.params[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address, message;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      res.warning = warning;\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n    const msgParams = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, extraParams), {}, {\n      from: address,\n      data: message\n    });\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n  async function encryptionPublicKey(req, res) {\n    if (!processEncryptionPublicKey) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const address = await validateAndNormalizeKeyholder(req.params[0], req);\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n  async function decryptMessage(req, res) {\n    if (!processDecryptMessage) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    const ciphertext = req.params[0];\n    const address = await validateAndNormalizeKeyholder(req.params[1], req);\n    const extraParams = req.params[2] || {};\n    const msgParams = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, extraParams), {}, {\n      from: address,\n      data: ciphertext\n    });\n    res.result = processDecryptMessage(msgParams, req);\n  }\n  async function fetchPrivateKey(req, res) {\n    if (!getPrivateKey) {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n    // account lookups\n    eth_accounts: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(lookupAccounts),\n    eth_private_key: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(fetchPrivateKey),\n    private_key: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(fetchPrivateKey),\n    eth_coinbase: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(sendTransaction),\n    eth_signTransaction: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTransaction),\n    // message signatures\n    eth_sign: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(ethSign),\n    eth_signTypedData: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTypedData),\n    eth_signTypedData_v3: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTypedDataV3),\n    eth_signTypedData_v4: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(signTypedDataV4),\n    personal_sign: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(personalSign),\n    eth_getEncryptionPublicKey: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(encryptionPublicKey),\n    eth_decrypt: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(decryptMessage)\n  });\n}\n\nfunction createEthMiddleware(providerHandlers) {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  } = providerHandlers;\n  const ethMiddleware = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.mergeMiddleware)([(0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n    eth_syncing: false\n  }), createWalletMiddleware({\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processEthSignMessage,\n    processSignTransaction,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage\n  })]);\n  return ethMiddleware;\n}\nfunction createChainSwitchMiddleware(_ref) {\n  let {\n    addChain,\n    switchChain\n  } = _ref;\n  async function addNewChain(req, res) {\n    var _req$params;\n    const chainParams = (_req$params = req.params) !== null && _req$params !== void 0 && _req$params.length ? req.params[0] : undefined;\n    if (!chainParams) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req, res) {\n    var _req$params2;\n    const chainParams = (_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.length ? req.params[0] : undefined;\n    if (!chainParams) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n    wallet_addEthereumChain: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(addNewChain),\n    wallet_switchEthereumChain: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(updateChain)\n  });\n}\n\n// #region account middlewares\nfunction createAccountMiddleware(_ref2) {\n  let {\n    updatePrivatekey\n  } = _ref2;\n  async function updateAccount(req, res) {\n    var _req$params3;\n    const accountParams = (_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.length ? req.params[0] : undefined;\n    if (!(accountParams !== null && accountParams !== void 0 && accountParams.privateKey)) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createScaffoldMiddleware)({\n    wallet_updateAccount: (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.createAsyncMiddleware)(updateAccount)\n  });\n}\n\n// #endregion account middlewares\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return (req, res, next, end) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\nfunction createJsonRpcClient(providerConfig) {\n  const {\n    chainId,\n    rpcTarget\n  } = providerConfig;\n  const fetchMiddleware = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_6__.createFetchMiddleware)({\n    rpcTarget\n  });\n  const networkMiddleware = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.mergeMiddleware)([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware,\n    fetchMiddleware\n  };\n}\n\nasync function getLastActiveSession(signClient) {\n  if (signClient.session.length) {\n    const lastKeyIndex = signClient.session.keys.length - 1;\n    return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n  }\n  return null;\n}\nasync function sendJrpcRequest(signClient, chainId, method, params) {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.disconnected();\n  }\n  return signClient.request({\n    topic: session.topic,\n    chainId: `eip155:${chainId}`,\n    request: {\n      method,\n      params\n    }\n  });\n}\nasync function getAccounts(signClient) {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.disconnected();\n  }\n  const accounts = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.getAccountsFromNamespaces)(session.namespaces);\n  if (accounts && accounts.length) {\n    return [...new Set(accounts.map(add => {\n      return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.parseAccountId)(add).address;\n    }))];\n  }\n  throw new Error(\"Failed to get accounts\");\n}\nfunction getProviderHandlers$1(_ref) {\n  let {\n    connector,\n    chainId\n  } = _ref;\n  return {\n    getPrivateKey: async () => {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    },\n    getAccounts: async _ => {\n      return getAccounts(connector);\n    },\n    processTransaction: async (txParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sendTransaction\", [txParams]);\n      return methodRes;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTransaction\", [txParams]);\n      return methodRes;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"personal_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData\", [msgParams.data, msgParams.from]);\n      return methodRes;\n    },\n    processTypedMessageV3: async msgParams => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v3\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessageV4: async msgParams => {\n      const methodRes = await sendJrpcRequest(connector, chainId, \"eth_signTypedData_v4\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processEncryptionPublicKey: async _ => {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    },\n    processDecryptMessage: _ => {\n      throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotSupported();\n    }\n  };\n}\n\nvar _class$1;\nclass WalletConnectV2Provider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__.BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      connector\n    } = _ref;\n    super({\n      config: {\n        chainConfig: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, config.chainConfig), {}, {\n          chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155\n        }),\n        skipLookupNetwork: !!config.skipLookupNetwork\n      },\n      state: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, state || {}), {}, {\n        chainId: \"loading\",\n        accounts: []\n      })\n    });\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, \"connector\", null);\n    this.connector = connector || null;\n  }\n  async enable() {\n    if (!this.connector) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(connector) {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n  async switchChain(_ref2) {\n    let {\n      chainId\n    } = _ref2;\n    if (!this.connector) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n      message: \"Connector is not initialized, pass wallet connect connector in constructor\",\n      code: 4902\n    });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.configure({\n      chainConfig: currentChainConfig\n    });\n    await this.setupEngine(this.connector);\n    this.lookupNetwork(this.connector);\n  }\n  async addChain(chainConfig) {\n    super.addChain(chainConfig);\n  }\n\n  // no need to implement this method in wallet connect v2.\n  async lookupNetwork(_) {\n    const newChainId = this.config.chainConfig.chainId;\n    this.update({\n      chainId: newChainId\n    });\n    this.emit(\"chainChanged\", newChainId);\n    this.emit(\"connect\", {\n      chainId: newChainId\n    });\n    return this.config.chainConfig.chainId;\n  }\n  async setupEngine(connector) {\n    const {\n      chainId\n    } = this.config.chainConfig;\n    const numChainId = parseInt(chainId, 16);\n    const providerHandlers = getProviderHandlers$1({\n      connector,\n      chainId: numChainId\n    });\n    const jrpcRes = await getAccounts(connector);\n    this.update({\n      accounts: jrpcRes || []\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.JRPCEngine();\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(networkMiddleware);\n    const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.providerFromEngine)(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  connectedTopic() {\n    var _this$connector;\n    if (!this.connector) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if ((_this$connector = this.connector) !== null && _this$connector !== void 0 && (_this$connector = _this$connector.session) !== null && _this$connector !== void 0 && _this$connector.length) {\n      var _this$connector$sessi;\n      // currently we are supporting only 1 active session\n      const lastKeyIndex = this.connector.session.keys.length - 1;\n      return (_this$connector$sessi = this.connector.session.get(this.connector.session.keys[lastKeyIndex])) === null || _this$connector$sessi === void 0 ? void 0 : _this$connector$sessi.topic;\n    }\n    return undefined;\n  }\n  checkIfChainIdAllowed(chainId) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allChains = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.getChainsFromNamespaces)(sessionData.namespaces);\n    let chainAllowed = false;\n    for (const chain of allChains) {\n      const parsedId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.parseChainId)(chain);\n      if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n        chainAllowed = true;\n        break;\n      }\n    }\n    return chainAllowed;\n  }\n  checkIfAccountAllowed(address) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allAccounts = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.getAccountsFromNamespaces)(sessionData.namespaces);\n    let accountAllowed = false;\n    for (const account of allAccounts) {\n      var _parsedAccount$addres;\n      const parsedAccount = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_16__.parseAccountId)(account);\n      if (((_parsedAccount$addres = parsedAccount.address) === null || _parsedAccount$addres === void 0 ? void 0 : _parsedAccount$addres.toLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLowerCase())) {\n        accountAllowed = true;\n        break;\n      }\n    }\n    return accountAllowed;\n  }\n  async onConnectorStateUpdate(connector) {\n    connector.events.on(\"session_event\", async payload => {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"session_event data\", payload);\n      if (!this.provider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      const {\n        event\n      } = payload.params;\n      const {\n        name,\n        data\n      } = event || {};\n      // Check if accounts changed and trigger event\n      if (name === \"accountsChanged\" && data !== null && data !== void 0 && data.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n        this.update({\n          accounts: data\n        });\n        this.emit(\"accountsChanged\", data);\n      }\n      if (event.name === \"chainChanged\") {\n        const {\n          chainId: connectedChainId,\n          rpcUrl\n        } = data;\n        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n        if (!this.checkIfChainIdAllowed(connectedHexChainId)) return;\n        // Check if chainId changed and trigger event\n        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n          const maybeConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {};\n          // Handle rpcUrl update\n          this.configure({\n            chainConfig: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, maybeConfig), {}, {\n              chainId: connectedHexChainId,\n              rpcTarget: rpcUrl,\n              chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155\n            })\n          });\n          await this.setupEngine(connector);\n        }\n      }\n    });\n  }\n}\n_class$1 = WalletConnectV2Provider;\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(WalletConnectV2Provider, \"getProviderInstance\", async params => {\n  const providerFactory = new _class$1({\n    config: {\n      chainConfig: params.chainConfig,\n      skipLookupNetwork: params.skipLookupNetwork\n    }\n  });\n  await providerFactory.setupProvider(params.connector);\n  return providerFactory;\n});\n\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](\"1\");\n\n// Setter Maps\nconst toBigNumber = {\n  hex: n => typeof n === \"string\" ? new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(n), 16) : new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](n, 16),\n  dec: n => new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](n, 10)\n};\nconst toNormalizedDenomination = {\n  WEI: bigNumber => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: bigNumber => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: bigNumber => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER)\n};\nconst toSpecifiedDenomination = {\n  WEI: bigNumber => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_UP),\n  GWEI: bigNumber => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_UP),\n  ETH: bigNumber => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_UP)\n};\nconst baseChange = {\n  hex: n => n.toString(16),\n  dec: n => new bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](n).toString(10)\n};\nconst converter = params => {\n  const {\n    value,\n    fromNumericBase,\n    fromDenomination,\n    toNumericBase,\n    toDenomination,\n    numberOfDecimals\n  } = params;\n  let convertedValue = toBigNumber[fromNumericBase](value);\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue);\n  }\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue);\n  }\n  if (numberOfDecimals) {\n    convertedValue = convertedValue.dp(numberOfDecimals, bignumber_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"].ROUND_HALF_DOWN);\n  }\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\nconst conversionUtil = (value, _ref) => {\n  let {\n    fromNumericBase = \"hex\",\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals\n  } = _ref;\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\"\n  });\n};\nfunction decGWEIToHexWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\"\n  });\n}\nfunction hexWEIToDecGWEI(decGWEI) {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\"\n  });\n}\n\nfunction normalizeGWEIDecimalNumbers(n) {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\nasync function fetchEip1159GasEstimates(url) {\n  const estimates = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_10__.get)(url);\n  const normalizedEstimates = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, estimates), {}, {\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, estimates.low), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas)\n    }),\n    medium: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, estimates.medium), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas)\n    }),\n    high: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, estimates.high), {}, {\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas)\n    })\n  });\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nasync function fetchLegacyGasPriceEstimates(url) {\n  const result = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_10__.get)(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\"\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice\n  };\n}\nconst validateTypedMessageParams = (parameters, activeChainId) => {\n  try {\n    assert__WEBPACK_IMPORTED_MODULE_11___default().ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert__WEBPACK_IMPORTED_MODULE_11___default().ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert__WEBPACK_IMPORTED_MODULE_11___default().ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert__WEBPACK_IMPORTED_MODULE_11___default().ok(typeof parameters.from === \"string\" && (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.isValidAddress)(parameters.from), '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.');\n    let data = null;\n    let chainId = null;\n    switch (parameters.version) {\n      case _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert__WEBPACK_IMPORTED_MODULE_11___default().doesNotThrow(() => {\n            data = JSON.parse(parameters.data);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert__WEBPACK_IMPORTED_MODULE_11___default().ok(Array.isArray(data), \"params.data must be an array.\");\n        assert__WEBPACK_IMPORTED_MODULE_11___default().doesNotThrow(() => {\n          (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.typedSignatureHash)(data);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V3:\n      case _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V4:\n        {\n          var _typedData$domain;\n          if (typeof parameters.data === \"string\") {\n            assert__WEBPACK_IMPORTED_MODULE_11___default().doesNotThrow(() => {\n              data = JSON.parse(parameters.data);\n            }, '\"data\" must be a valid JSON string.');\n          } else {\n            // for backward compatiblity we validate for both string and object type.\n            data = parameters.data;\n          }\n          const typedData = data;\n          assert__WEBPACK_IMPORTED_MODULE_11___default().ok(typedData.primaryType in typedData.types, `Primary type of \"${typedData.primaryType}\" has no type definition.`);\n          const validation = jsonschema__WEBPACK_IMPORTED_MODULE_12__.validate(typedData, _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.TYPED_MESSAGE_SCHEMA.properties);\n          assert__WEBPACK_IMPORTED_MODULE_11___default().strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n          chainId = (_typedData$domain = typedData.domain) === null || _typedData$domain === void 0 ? void 0 : _typedData$domain.chainId;\n          if (chainId) {\n            assert__WEBPACK_IMPORTED_MODULE_11___default().ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n            if (typeof chainId === \"string\") {\n              chainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n            }\n            assert__WEBPACK_IMPORTED_MODULE_11___default().strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n          }\n          break;\n        }\n      default:\n        assert__WEBPACK_IMPORTED_MODULE_11___default().fail(`Unknown typed data version \"${parameters.version}\"`);\n    }\n  } catch (error) {\n    throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidInput({\n      message: error === null || error === void 0 ? void 0 : error.message\n    });\n  }\n};\n\nasync function signTx(txParams, privKey, txFormatter) {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = _ethereumjs_tx__WEBPACK_IMPORTED_MODULE_7__.TransactionFactory.fromTxData(finalTxParams, {\n    common\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return Buffer.from(signedTx);\n}\nfunction getProviderHandlers(_ref) {\n  let {\n    txFormatter,\n    privKey,\n    getProviderEngineProxy\n  } = _ref;\n  return {\n    getAccounts: async _ => [`0x${Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.privateToAddress)(Buffer.from(privKey, \"hex\"))).toString(\"hex\")}`],\n    getPrivateKey: async _ => privKey,\n    processTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))]\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams, _) => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams, _) => {\n      const rawMessageSig = (0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_6__.signMessage)(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams, _) => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.personalSign)({\n        privateKey: privKeyBuffer,\n        data: msgParams.data\n      });\n      return sig;\n    },\n    processTypedMessage: async (msgParams, _) => {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n      const params = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, msgParams), {}, {\n        version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V1\n      });\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.signTypedData)({\n        privateKey: privKeyBuffer,\n        data,\n        version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V1\n      });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams, _) => {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.signTypedData)({\n        privateKey: privKeyBuffer,\n        data,\n        version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V3\n      });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams, _) => {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n        message: \"Provider is not initialized\",\n        code: 4902\n      });\n      const chainId = await providerEngineProxy.request({\n        method: \"eth_chainId\"\n      });\n      const finalChainId = Number.parseInt(chainId, (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_4__.isHexStrict)(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.signTypedData)({\n        privateKey: privKeyBuffer,\n        data,\n        version: _metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.SignTypedDataVersion.V4\n      });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address, _) => {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.info(\"processEncryptionPublicKey\", address);\n      return (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.getEncryptionPublicKey)(privKey);\n    },\n    processDecryptMessage: (msgParams, _) => {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.info(\"processDecryptMessage\", msgParams);\n      const stripped = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = (0,_metamask_eth_sig_util__WEBPACK_IMPORTED_MODULE_9__.decrypt)({\n        encryptedData: JSON.parse(buff.toString(\"utf8\")),\n        privateKey: privKey\n      });\n      return decrypted;\n    }\n  };\n}\n\nfunction bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new bignumber_js__WEBPACK_IMPORTED_MODULE_13__.BigNumber(a, 10).lt(b, 10);\n}\nfunction bnToHex(inputBn) {\n  return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(inputBn.toString(16));\n}\nfunction hexToBn(inputHex) {\n  if (bn_js__WEBPACK_IMPORTED_MODULE_15___default().isBN(inputHex)) return inputHex;\n  return new (bn_js__WEBPACK_IMPORTED_MODULE_15___default())((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(inputHex), 16);\n}\nfunction BnMultiplyByFraction(targetBN, numerator, denominator) {\n  const numberBN = new (bn_js__WEBPACK_IMPORTED_MODULE_15___default())(numerator);\n  const denomBN = new (bn_js__WEBPACK_IMPORTED_MODULE_15___default())(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n\nconst LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nconst EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nconst TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\"\n};\nconst TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\"\n};\nconst GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\"\n};\n\nclass TransactionFormatter {\n  constructor(_ref) {\n    let {\n      getProviderEngineProxy\n    } = _ref;\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, \"chainConfig\", null);\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, \"getProviderEngineProxy\", void 0);\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, \"isEIP1559Compatible\", false);\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n  async init() {\n    this.chainConfig = await this.providerProxy.request({\n      method: \"eth_provider_config\"\n    });\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n  async getCommonConfiguration() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const {\n      displayName: name,\n      chainId\n    } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__.Hardfork.Paris : _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__.Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork\n    };\n    return _ethereumjs_common__WEBPACK_IMPORTED_MODULE_14__.Common.custom(customChainParams);\n  }\n  async formatTransaction(txParams) {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const clonedTxParams = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, txParams);\n    if (clonedTxParams.nonce === undefined) clonedTxParams.nonce = await this.providerProxy.request({\n      method: \"eth_getTransactionCount\",\n      params: [txParams.from, \"latest\"]\n    });\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if user provides gas Limit, we should use it instead\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gasLimit) {\n        if (!clonedTxParams.gas) {\n          const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n          if (defaultGasLimit) {\n            clonedTxParams.gasLimit = defaultGasLimit;\n          }\n        } else {\n          clonedTxParams.gasLimit = clonedTxParams.gas;\n        }\n      }\n      return clonedTxParams;\n    }\n    if (!clonedTxParams.gasLimit) {\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n    }\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas\n    } = await this.getDefaultGasFees(clonedTxParams);\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(typeof defaultMaxPriorityFeePerGas === \"string\" ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas, typeof clonedTxParams.gasPrice === \"string\" ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.stripHexPrefix)(clonedTxParams.gasPrice) : clonedTxParams.gasPrice) ? defaultMaxPriorityFeePerGas : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice;\n    }\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n  async fetchEthGasPriceEstimate() {\n    const gasPrice = await this.providerProxy.request({\n      method: \"eth_gasPrice\",\n      params: []\n    });\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString()\n    };\n  }\n  async getEIP1559Compatibility() {\n    const latestBlock = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n    return !!supportsEIP1559;\n  }\n  async fetchGasFeeEstimateData() {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n    let gasData;\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE\n        };\n      } catch (error) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${error.message}`);\n      }\n    }\n    return gasData;\n  }\n  async getDefaultGasFees(txParams) {\n    if (!this.isEIP1559Compatible && txParams.gasPrice || this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas) {\n      return {};\n    }\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType\n      } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const {\n          medium: {\n            suggestedMaxPriorityFeePerGas,\n            suggestedMaxFeePerGas\n          } = {}\n        } = gasFeeEstimates;\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas))\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(gasFeeEstimates.medium))\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(gasFeeEstimates.gasPrice))\n        };\n      }\n    } catch (error) {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.error(error);\n    }\n    const {\n      gasPrice\n    } = await this.fetchEthGasPriceEstimate();\n    return {\n      gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(decGWEIToHexWEI(gasPrice))\n    };\n  }\n  async estimateTxGas(txMeta) {\n    const txParams = (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, txMeta);\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = await this.providerProxy.request({\n      method: \"eth_estimateGas\",\n      params: [txParams]\n    });\n    return gas;\n  }\n  async analyzeGasUsage(txMeta) {\n    const block = await this.providerProxy.request({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false]\n    });\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.warn(error);\n    }\n    return {\n      blockGasLimit: block.gasLimit,\n      estimatedGasHex\n    };\n  }\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex) {\n    let multiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.5;\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n  async determineTransactionCategory(txParameters) {\n    const {\n      data,\n      to\n    } = txParameters;\n    let code = \"\";\n    let txCategory;\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = await this.providerProxy.request({\n          method: \"eth_getCode\",\n          params: [to, \"latest\"]\n        });\n      } catch (error) {\n        _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n    return {\n      transactionCategory: txCategory,\n      code\n    };\n  }\n  async getDefaultGasLimit(txParams) {\n    const {\n      transactionCategory\n    } = await this.determineTransactionCategory((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, txParams));\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n      const TWENTY_ONE_THOUSAND = 21000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(TWENTY_ONE_THOUSAND.toString(16));\n    }\n    const {\n      blockGasLimit,\n      estimatedGasHex\n    } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_8__.addHexPrefix)(estimatedGasHex), blockGasLimit);\n    return gasLimit;\n  }\n}\n\nvar _class;\nclass EthereumPrivateKeyProvider extends _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_5__.BaseProvider {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config: {\n        chainConfig: (0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, config.chainConfig), {}, {\n          chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155\n        })\n      },\n      state\n    });\n  }\n  async enable() {\n    if (!this.state.privateKey) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n      message: \"Private key is not found in state, plz pass it in constructor state param\",\n      code: 4902\n    });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({\n      method: \"eth_accounts\"\n    });\n  }\n  async setupProvider(privKey) {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const {\n      networkMiddleware\n    } = createJsonRpcClient(this.config.chainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_3__.providerFromEngine)(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n  async updateAccount(params) {\n    if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const existingKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request({\n          method: \"eth_accounts\"\n        })\n      });\n    }\n  }\n  async switchChain(params) {\n    if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\"\n    });\n    this.configure({\n      chainConfig\n    });\n    const privKey = await this._providerEngineProxy.request({\n      method: \"eth_private_key\"\n    });\n    await this.setupProvider(privKey);\n  }\n  async lookupNetwork() {\n    if (!this._providerEngineProxy) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.custom({\n      message: \"Provider is not initialized\",\n      code: 4902\n    });\n    const {\n      chainId\n    } = this.config.chainConfig;\n    if (!chainId) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request({\n      method: \"net_version\",\n      params: []\n    });\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.providerErrors.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this.emit(\"chainChanged\", chainId);\n      this.emit(\"connect\", {\n        chainId\n      });\n    }\n    this.update({\n      chainId\n    });\n    return network;\n  }\n  getChainSwitchMiddleware() {\n    const chainSwitchHandlers = {\n      addChain: async params => {\n        const {\n          chainId,\n          chainName,\n          rpcUrls,\n          blockExplorerUrls,\n          nativeCurrency\n        } = params;\n        this.addChain({\n          chainNamespace: _web3auth_base__WEBPACK_IMPORTED_MODULE_4__.CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"ETH\",\n          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\",\n          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18\n        });\n      },\n      switchChain: async params => {\n        const {\n          chainId\n        } = params;\n        await this.switchChain({\n          chainId\n        });\n      }\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n  getAccountMiddleware() {\n    const accountHandlers = {\n      updatePrivatekey: async params => {\n        const {\n          privateKey\n        } = params;\n        await this.updateAccount({\n          privateKey\n        });\n      }\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n_class = EthereumPrivateKeyProvider;\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(EthereumPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new _class({\n    config: {\n      chainConfig: params.chainConfig\n    }\n  });\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\n\n//# sourceMappingURL=ethereumProvider.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js\n"));

/***/ }),

/***/ "./node_modules/assert/build/assert.js":
/*!*********************************************!*\
  !*** ./node_modules/assert/build/assert.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n// Currently in sync with Node.js lib/assert.js\n// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b\n\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar _require = __webpack_require__(/*! ./internal/errors */ \"./node_modules/assert/build/internal/errors.js\"),\n  _require$codes = _require.codes,\n  ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,\n  ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,\n  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\nvar AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ \"./node_modules/assert/build/internal/assert/assertion_error.js\");\nvar _require2 = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\"),\n  inspect = _require2.inspect;\nvar _require$types = (__webpack_require__(/*! util/ */ \"./node_modules/util/util.js\").types),\n  isPromise = _require$types.isPromise,\n  isRegExp = _require$types.isRegExp;\nvar objectAssign = __webpack_require__(/*! object.assign/polyfill */ \"./node_modules/next/dist/build/polyfills/object.assign/polyfill.js\")();\nvar objectIs = __webpack_require__(/*! object-is/polyfill */ \"./node_modules/object-is/polyfill.js\")();\nvar RegExpPrototypeTest = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\")('RegExp.prototype.test');\nvar errorCache = new Map();\nvar isDeepEqual;\nvar isDeepStrictEqual;\nvar parseExpressionAt;\nvar findNodeAround;\nvar decoder;\nfunction lazyLoadComparison() {\n  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ \"./node_modules/assert/build/internal/util/comparisons.js\");\n  isDeepEqual = comparison.isDeepEqual;\n  isDeepStrictEqual = comparison.isDeepStrictEqual;\n}\n\n// Escape control characters but not \\n and \\t to keep the line breaks and\n// indentation intact.\n// eslint-disable-next-line no-control-regex\nvar escapeSequencesRegExp = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]/g;\nvar meta = [\"\\\\u0000\", \"\\\\u0001\", \"\\\\u0002\", \"\\\\u0003\", \"\\\\u0004\", \"\\\\u0005\", \"\\\\u0006\", \"\\\\u0007\", '\\\\b', '', '', \"\\\\u000b\", '\\\\f', '', \"\\\\u000e\", \"\\\\u000f\", \"\\\\u0010\", \"\\\\u0011\", \"\\\\u0012\", \"\\\\u0013\", \"\\\\u0014\", \"\\\\u0015\", \"\\\\u0016\", \"\\\\u0017\", \"\\\\u0018\", \"\\\\u0019\", \"\\\\u001a\", \"\\\\u001b\", \"\\\\u001c\", \"\\\\u001d\", \"\\\\u001e\", \"\\\\u001f\"];\nvar escapeFn = function escapeFn(str) {\n  return meta[str.charCodeAt(0)];\n};\nvar warned = false;\n\n// The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\nvar NO_EXCEPTION_SENTINEL = {};\n\n// All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided. All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction innerFail(obj) {\n  if (obj.message instanceof Error) throw obj.message;\n  throw new AssertionError(obj);\n}\nfunction fail(actual, expected, message, operator, stackStartFn) {\n  var argsLen = arguments.length;\n  var internalMessage;\n  if (argsLen === 0) {\n    internalMessage = 'Failed';\n  } else if (argsLen === 1) {\n    message = actual;\n    actual = undefined;\n  } else {\n    if (warned === false) {\n      warned = true;\n      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);\n      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');\n    }\n    if (argsLen === 2) operator = '!=';\n  }\n  if (message instanceof Error) throw message;\n  var errArgs = {\n    actual: actual,\n    expected: expected,\n    operator: operator === undefined ? 'fail' : operator,\n    stackStartFn: stackStartFn || fail\n  };\n  if (message !== undefined) {\n    errArgs.message = message;\n  }\n  var err = new AssertionError(errArgs);\n  if (internalMessage) {\n    err.message = internalMessage;\n    err.generatedMessage = true;\n  }\n  throw err;\n}\nassert.fail = fail;\n\n// The AssertionError is defined in internal/error.\nassert.AssertionError = AssertionError;\nfunction innerOk(fn, argLen, value, message) {\n  if (!value) {\n    var generatedMessage = false;\n    if (argLen === 0) {\n      generatedMessage = true;\n      message = 'No value argument passed to `assert.ok()`';\n    } else if (message instanceof Error) {\n      throw message;\n    }\n    var err = new AssertionError({\n      actual: value,\n      expected: true,\n      message: message,\n      operator: '==',\n      stackStartFn: fn\n    });\n    err.generatedMessage = generatedMessage;\n    throw err;\n  }\n}\n\n// Pure assertion tests whether a value is truthy, as determined\n// by !!value.\nfunction ok() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  innerOk.apply(void 0, [ok, args.length].concat(args));\n}\nassert.ok = ok;\n\n// The equality assertion tests shallow, coercive equality with ==.\n/* eslint-disable no-restricted-properties */\nassert.equal = function equal(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  // eslint-disable-next-line eqeqeq\n  if (actual != expected) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: '==',\n      stackStartFn: equal\n    });\n  }\n};\n\n// The non-equality assertion tests for whether two objects are not\n// equal with !=.\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  // eslint-disable-next-line eqeqeq\n  if (actual == expected) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: '!=',\n      stackStartFn: notEqual\n    });\n  }\n};\n\n// The equivalence assertion tests a deep equality relation.\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (!isDeepEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'deepEqual',\n      stackStartFn: deepEqual\n    });\n  }\n};\n\n// The non-equivalence assertion tests for any deep inequality.\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (isDeepEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notDeepEqual',\n      stackStartFn: notDeepEqual\n    });\n  }\n};\n/* eslint-enable */\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (!isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'deepStrictEqual',\n      stackStartFn: deepStrictEqual\n    });\n  }\n};\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notDeepStrictEqual',\n      stackStartFn: notDeepStrictEqual\n    });\n  }\n}\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (!objectIs(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'strictEqual',\n      stackStartFn: strictEqual\n    });\n  }\n};\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (arguments.length < 2) {\n    throw new ERR_MISSING_ARGS('actual', 'expected');\n  }\n  if (objectIs(actual, expected)) {\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: 'notStrictEqual',\n      stackStartFn: notStrictEqual\n    });\n  }\n};\nvar Comparison = /*#__PURE__*/_createClass(function Comparison(obj, keys, actual) {\n  var _this = this;\n  _classCallCheck(this, Comparison);\n  keys.forEach(function (key) {\n    if (key in obj) {\n      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {\n        _this[key] = actual[key];\n      } else {\n        _this[key] = obj[key];\n      }\n    }\n  });\n});\nfunction compareExceptionKey(actual, expected, key, message, keys, fn) {\n  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {\n    if (!message) {\n      // Create placeholder objects to create a nice output.\n      var a = new Comparison(actual, keys);\n      var b = new Comparison(expected, keys, actual);\n      var err = new AssertionError({\n        actual: a,\n        expected: b,\n        operator: 'deepStrictEqual',\n        stackStartFn: fn\n      });\n      err.actual = actual;\n      err.expected = expected;\n      err.operator = fn.name;\n      throw err;\n    }\n    innerFail({\n      actual: actual,\n      expected: expected,\n      message: message,\n      operator: fn.name,\n      stackStartFn: fn\n    });\n  }\n}\nfunction expectedException(actual, expected, msg, fn) {\n  if (typeof expected !== 'function') {\n    if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);\n    // assert.doesNotThrow does not accept objects.\n    if (arguments.length === 2) {\n      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);\n    }\n\n    // Handle primitives properly.\n    if (_typeof(actual) !== 'object' || actual === null) {\n      var err = new AssertionError({\n        actual: actual,\n        expected: expected,\n        message: msg,\n        operator: 'deepStrictEqual',\n        stackStartFn: fn\n      });\n      err.operator = fn.name;\n      throw err;\n    }\n    var keys = Object.keys(expected);\n    // Special handle errors to make sure the name and the message are compared\n    // as well.\n    if (expected instanceof Error) {\n      keys.push('name', 'message');\n    } else if (keys.length === 0) {\n      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');\n    }\n    if (isDeepEqual === undefined) lazyLoadComparison();\n    keys.forEach(function (key) {\n      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {\n        return;\n      }\n      compareExceptionKey(actual, expected, key, msg, keys, fn);\n    });\n    return true;\n  }\n  // Guard instanceof against arrow functions as they don't have a prototype.\n  if (expected.prototype !== undefined && actual instanceof expected) {\n    return true;\n  }\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n  return expected.call({}, actual) === true;\n}\nfunction getActual(fn) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);\n  }\n  try {\n    fn();\n  } catch (e) {\n    return e;\n  }\n  return NO_EXCEPTION_SENTINEL;\n}\nfunction checkIsPromise(obj) {\n  // Accept native ES6 promises and promises that are implemented in a similar\n  // way. Do not accept thenables that use a function as `obj` and that have no\n  // `catch` handler.\n\n  // TODO: thenables are checked up until they have the correct methods,\n  // but according to documentation, the `then` method should receive\n  // the `fulfill` and `reject` arguments as well or it may be never resolved.\n\n  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';\n}\nfunction waitForActual(promiseFn) {\n  return Promise.resolve().then(function () {\n    var resultPromise;\n    if (typeof promiseFn === 'function') {\n      // Return a rejected promise if `promiseFn` throws synchronously.\n      resultPromise = promiseFn();\n      // Fail in case no promise is returned.\n      if (!checkIsPromise(resultPromise)) {\n        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);\n      }\n    } else if (checkIsPromise(promiseFn)) {\n      resultPromise = promiseFn;\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);\n    }\n    return Promise.resolve().then(function () {\n      return resultPromise;\n    }).then(function () {\n      return NO_EXCEPTION_SENTINEL;\n    }).catch(function (e) {\n      return e;\n    });\n  });\n}\nfunction expectsError(stackStartFn, actual, error, message) {\n  if (typeof error === 'string') {\n    if (arguments.length === 4) {\n      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);\n    }\n    if (_typeof(actual) === 'object' && actual !== null) {\n      if (actual.message === error) {\n        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', \"The error message \\\"\".concat(actual.message, \"\\\" is identical to the message.\"));\n      }\n    } else if (actual === error) {\n      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', \"The error \\\"\".concat(actual, \"\\\" is identical to the message.\"));\n    }\n    message = error;\n    error = undefined;\n  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);\n  }\n  if (actual === NO_EXCEPTION_SENTINEL) {\n    var details = '';\n    if (error && error.name) {\n      details += \" (\".concat(error.name, \")\");\n    }\n    details += message ? \": \".concat(message) : '.';\n    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';\n    innerFail({\n      actual: undefined,\n      expected: error,\n      operator: stackStartFn.name,\n      message: \"Missing expected \".concat(fnType).concat(details),\n      stackStartFn: stackStartFn\n    });\n  }\n  if (error && !expectedException(actual, error, message, stackStartFn)) {\n    throw actual;\n  }\n}\nfunction expectsNoError(stackStartFn, actual, error, message) {\n  if (actual === NO_EXCEPTION_SENTINEL) return;\n  if (typeof error === 'string') {\n    message = error;\n    error = undefined;\n  }\n  if (!error || expectedException(actual, error)) {\n    var details = message ? \": \".concat(message) : '.';\n    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';\n    innerFail({\n      actual: actual,\n      expected: error,\n      operator: stackStartFn.name,\n      message: \"Got unwanted \".concat(fnType).concat(details, \"\\n\") + \"Actual message: \\\"\".concat(actual && actual.message, \"\\\"\"),\n      stackStartFn: stackStartFn\n    });\n  }\n  throw actual;\n}\nassert.throws = function throws(promiseFn) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));\n};\nassert.rejects = function rejects(promiseFn) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  return waitForActual(promiseFn).then(function (result) {\n    return expectsError.apply(void 0, [rejects, result].concat(args));\n  });\n};\nassert.doesNotThrow = function doesNotThrow(fn) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));\n};\nassert.doesNotReject = function doesNotReject(fn) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n  return waitForActual(fn).then(function (result) {\n    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));\n  });\n};\nassert.ifError = function ifError(err) {\n  if (err !== null && err !== undefined) {\n    var message = 'ifError got unwanted exception: ';\n    if (_typeof(err) === 'object' && typeof err.message === 'string') {\n      if (err.message.length === 0 && err.constructor) {\n        message += err.constructor.name;\n      } else {\n        message += err.message;\n      }\n    } else {\n      message += inspect(err);\n    }\n    var newErr = new AssertionError({\n      actual: err,\n      expected: null,\n      operator: 'ifError',\n      message: message,\n      stackStartFn: ifError\n    });\n\n    // Make sure we actually have a stack trace!\n    var origStack = err.stack;\n    if (typeof origStack === 'string') {\n      // This will remove any duplicated frames from the error frames taken\n      // from within `ifError` and add the original error frames to the newly\n      // created ones.\n      var tmp2 = origStack.split('\\n');\n      tmp2.shift();\n      // Filter all frames existing in err.stack.\n      var tmp1 = newErr.stack.split('\\n');\n      for (var i = 0; i < tmp2.length; i++) {\n        // Find the first occurrence of the frame.\n        var pos = tmp1.indexOf(tmp2[i]);\n        if (pos !== -1) {\n          // Only keep new frames.\n          tmp1 = tmp1.slice(0, pos);\n          break;\n        }\n      }\n      newErr.stack = \"\".concat(tmp1.join('\\n'), \"\\n\").concat(tmp2.join('\\n'));\n    }\n    throw newErr;\n  }\n};\n\n// Currently in sync with Node.js lib/assert.js\n// https://github.com/nodejs/node/commit/2a871df3dfb8ea663ef5e1f8f62701ec51384ecb\nfunction internalMatch(string, regexp, message, fn, fnName) {\n  if (!isRegExp(regexp)) {\n    throw new ERR_INVALID_ARG_TYPE('regexp', 'RegExp', regexp);\n  }\n  var match = fnName === 'match';\n  if (typeof string !== 'string' || RegExpPrototypeTest(regexp, string) !== match) {\n    if (message instanceof Error) {\n      throw message;\n    }\n    var generatedMessage = !message;\n\n    // 'The input was expected to not match the regular expression ' +\n    message = message || (typeof string !== 'string' ? 'The \"string\" argument must be of type string. Received type ' + \"\".concat(_typeof(string), \" (\").concat(inspect(string), \")\") : (match ? 'The input did not match the regular expression ' : 'The input was expected to not match the regular expression ') + \"\".concat(inspect(regexp), \". Input:\\n\\n\").concat(inspect(string), \"\\n\"));\n    var err = new AssertionError({\n      actual: string,\n      expected: regexp,\n      message: message,\n      operator: fnName,\n      stackStartFn: fn\n    });\n    err.generatedMessage = generatedMessage;\n    throw err;\n  }\n}\nassert.match = function match(string, regexp, message) {\n  internalMatch(string, regexp, message, match, 'match');\n};\nassert.doesNotMatch = function doesNotMatch(string, regexp, message) {\n  internalMatch(string, regexp, message, doesNotMatch, 'doesNotMatch');\n};\n\n// Expose a strict only variant of assert\nfunction strict() {\n  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    args[_key6] = arguments[_key6];\n  }\n  innerOk.apply(void 0, [strict, args.length].concat(args));\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/assert/build/assert.js\n"));

/***/ }),

/***/ "./node_modules/assert/build/internal/assert/assertion_error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/assert/build/internal/assert/assertion_error.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n// Currently in sync with Node.js lib/internal/assert/assertion_error.js\n// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c\n\n\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _require = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\"),\n  inspect = _require.inspect;\nvar _require2 = __webpack_require__(/*! ../errors */ \"./node_modules/assert/build/internal/errors.js\"),\n  ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n  return str.substring(this_len - search.length, this_len) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\nfunction repeat(str, count) {\n  count = Math.floor(count);\n  if (str.length == 0 || count == 0) return '';\n  var maxCount = str.length * count;\n  count = Math.floor(Math.log(count) / Math.log(2));\n  while (count) {\n    str += str;\n    count--;\n  }\n  str += str.substring(0, maxCount - str.length);\n  return str;\n}\nvar blue = '';\nvar green = '';\nvar red = '';\nvar white = '';\nvar kReadableOperator = {\n  deepStrictEqual: 'Expected values to be strictly deep-equal:',\n  strictEqual: 'Expected values to be strictly equal:',\n  strictEqualObject: 'Expected \"actual\" to be reference-equal to \"expected\":',\n  deepEqual: 'Expected values to be loosely deep-equal:',\n  equal: 'Expected values to be loosely equal:',\n  notDeepStrictEqual: 'Expected \"actual\" not to be strictly deep-equal to:',\n  notStrictEqual: 'Expected \"actual\" to be strictly unequal to:',\n  notStrictEqualObject: 'Expected \"actual\" not to be reference-equal to \"expected\":',\n  notDeepEqual: 'Expected \"actual\" not to be loosely deep-equal to:',\n  notEqual: 'Expected \"actual\" to be loosely unequal to:',\n  notIdentical: 'Values identical but not reference-equal:'\n};\n\n// Comparing short primitives should just show === / !== instead of using the\n// diff.\nvar kMaxShortLength = 10;\nfunction copyError(source) {\n  var keys = Object.keys(source);\n  var target = Object.create(Object.getPrototypeOf(source));\n  keys.forEach(function (key) {\n    target[key] = source[key];\n  });\n  Object.defineProperty(target, 'message', {\n    value: source.message\n  });\n  return target;\n}\nfunction inspectValue(val) {\n  // The util.inspect default values could be changed. This makes sure the\n  // error messages contain the necessary information nevertheless.\n  return inspect(val, {\n    compact: false,\n    customInspect: false,\n    depth: 1000,\n    maxArrayLength: Infinity,\n    // Assert compares only enumerable properties (with a few exceptions).\n    showHidden: false,\n    // Having a long line as error is better than wrapping the line for\n    // comparison for now.\n    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we\n    // have meta information about the inspected properties (i.e., know where\n    // in what line the property starts and ends).\n    breakLength: Infinity,\n    // Assert does not detect proxies currently.\n    showProxy: false,\n    sorted: true,\n    // Inspect getters as we also check them when comparing entries.\n    getters: true\n  });\n}\nfunction createErrDiff(actual, expected, operator) {\n  var other = '';\n  var res = '';\n  var lastPos = 0;\n  var end = '';\n  var skipped = false;\n  var actualInspected = inspectValue(actual);\n  var actualLines = actualInspected.split('\\n');\n  var expectedLines = inspectValue(expected).split('\\n');\n  var i = 0;\n  var indicator = '';\n\n  // In case both values are objects explicitly mark them as not reference equal\n  // for the `strictEqual` operator.\n  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {\n    operator = 'strictEqualObject';\n  }\n\n  // If \"actual\" and \"expected\" fit on a single line and they are not strictly\n  // equal, check further special handling.\n  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {\n    var inputLength = actualLines[0].length + expectedLines[0].length;\n    // If the character length of \"actual\" and \"expected\" together is less than\n    // kMaxShortLength and if neither is an object and at least one of them is\n    // not `zero`, use the strict equal comparison to visualize the output.\n    if (inputLength <= kMaxShortLength) {\n      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {\n        // -0 === +0\n        return \"\".concat(kReadableOperator[operator], \"\\n\\n\") + \"\".concat(actualLines[0], \" !== \").concat(expectedLines[0], \"\\n\");\n      }\n    } else if (operator !== 'strictEqualObject') {\n      // If the stderr is a tty and the input length is lower than the current\n      // columns per line, add a mismatch indicator below the output. If it is\n      // not a tty, use a default value of 80 characters.\n      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;\n      if (inputLength < maxLength) {\n        while (actualLines[0][i] === expectedLines[0][i]) {\n          i++;\n        }\n        // Ignore the first characters.\n        if (i > 2) {\n          // Add position indicator for the first mismatch in case it is a\n          // single line and the input length is less than the column length.\n          indicator = \"\\n  \".concat(repeat(' ', i), \"^\");\n          i = 0;\n        }\n      }\n    }\n  }\n\n  // Remove all ending lines that match (this optimizes the output for\n  // readability by reducing the number of total changed lines).\n  var a = actualLines[actualLines.length - 1];\n  var b = expectedLines[expectedLines.length - 1];\n  while (a === b) {\n    if (i++ < 2) {\n      end = \"\\n  \".concat(a).concat(end);\n    } else {\n      other = a;\n    }\n    actualLines.pop();\n    expectedLines.pop();\n    if (actualLines.length === 0 || expectedLines.length === 0) break;\n    a = actualLines[actualLines.length - 1];\n    b = expectedLines[expectedLines.length - 1];\n  }\n  var maxLines = Math.max(actualLines.length, expectedLines.length);\n  // Strict equal with identical objects that are not identical by reference.\n  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })\n  if (maxLines === 0) {\n    // We have to get the result again. The lines were all removed before.\n    var _actualLines = actualInspected.split('\\n');\n\n    // Only remove lines in case it makes sense to collapse those.\n    // TODO: Accept env to always show the full error.\n    if (_actualLines.length > 30) {\n      _actualLines[26] = \"\".concat(blue, \"...\").concat(white);\n      while (_actualLines.length > 27) {\n        _actualLines.pop();\n      }\n    }\n    return \"\".concat(kReadableOperator.notIdentical, \"\\n\\n\").concat(_actualLines.join('\\n'), \"\\n\");\n  }\n  if (i > 3) {\n    end = \"\\n\".concat(blue, \"...\").concat(white).concat(end);\n    skipped = true;\n  }\n  if (other !== '') {\n    end = \"\\n  \".concat(other).concat(end);\n    other = '';\n  }\n  var printedLines = 0;\n  var msg = kReadableOperator[operator] + \"\\n\".concat(green, \"+ actual\").concat(white, \" \").concat(red, \"- expected\").concat(white);\n  var skippedMsg = \" \".concat(blue, \"...\").concat(white, \" Lines skipped\");\n  for (i = 0; i < maxLines; i++) {\n    // Only extra expected lines exist\n    var cur = i - lastPos;\n    if (actualLines.length < i + 1) {\n      // If the last diverging line is more than one line above and the\n      // current line is at least line three, add some of the former lines and\n      // also add dots to indicate skipped entries.\n      if (cur > 1 && i > 2) {\n        if (cur > 4) {\n          res += \"\\n\".concat(blue, \"...\").concat(white);\n          skipped = true;\n        } else if (cur > 3) {\n          res += \"\\n  \".concat(expectedLines[i - 2]);\n          printedLines++;\n        }\n        res += \"\\n  \".concat(expectedLines[i - 1]);\n        printedLines++;\n      }\n      // Mark the current line as the last diverging one.\n      lastPos = i;\n      // Add the expected line to the cache.\n      other += \"\\n\".concat(red, \"-\").concat(white, \" \").concat(expectedLines[i]);\n      printedLines++;\n      // Only extra actual lines exist\n    } else if (expectedLines.length < i + 1) {\n      // If the last diverging line is more than one line above and the\n      // current line is at least line three, add some of the former lines and\n      // also add dots to indicate skipped entries.\n      if (cur > 1 && i > 2) {\n        if (cur > 4) {\n          res += \"\\n\".concat(blue, \"...\").concat(white);\n          skipped = true;\n        } else if (cur > 3) {\n          res += \"\\n  \".concat(actualLines[i - 2]);\n          printedLines++;\n        }\n        res += \"\\n  \".concat(actualLines[i - 1]);\n        printedLines++;\n      }\n      // Mark the current line as the last diverging one.\n      lastPos = i;\n      // Add the actual line to the result.\n      res += \"\\n\".concat(green, \"+\").concat(white, \" \").concat(actualLines[i]);\n      printedLines++;\n      // Lines diverge\n    } else {\n      var expectedLine = expectedLines[i];\n      var actualLine = actualLines[i];\n      // If the lines diverge, specifically check for lines that only diverge by\n      // a trailing comma. In that case it is actually identical and we should\n      // mark it as such.\n      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);\n      // If the expected line has a trailing comma but is otherwise identical,\n      // add a comma at the end of the actual line. Otherwise the output could\n      // look weird as in:\n      //\n      //   [\n      //     1         // No comma at the end!\n      // +   2\n      //   ]\n      //\n      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {\n        divergingLines = false;\n        actualLine += ',';\n      }\n      if (divergingLines) {\n        // If the last diverging line is more than one line above and the\n        // current line is at least line three, add some of the former lines and\n        // also add dots to indicate skipped entries.\n        if (cur > 1 && i > 2) {\n          if (cur > 4) {\n            res += \"\\n\".concat(blue, \"...\").concat(white);\n            skipped = true;\n          } else if (cur > 3) {\n            res += \"\\n  \".concat(actualLines[i - 2]);\n            printedLines++;\n          }\n          res += \"\\n  \".concat(actualLines[i - 1]);\n          printedLines++;\n        }\n        // Mark the current line as the last diverging one.\n        lastPos = i;\n        // Add the actual line to the result and cache the expected diverging\n        // line so consecutive diverging lines show up as +++--- and not +-+-+-.\n        res += \"\\n\".concat(green, \"+\").concat(white, \" \").concat(actualLine);\n        other += \"\\n\".concat(red, \"-\").concat(white, \" \").concat(expectedLine);\n        printedLines += 2;\n        // Lines are identical\n      } else {\n        // Add all cached information to the result before adding other things\n        // and reset the cache.\n        res += other;\n        other = '';\n        // If the last diverging line is exactly one line above or if it is the\n        // very first line, add the line to the result.\n        if (cur === 1 || i === 0) {\n          res += \"\\n  \".concat(actualLine);\n          printedLines++;\n        }\n      }\n    }\n    // Inspected object to big (Show ~20 rows max)\n    if (printedLines > 20 && i < maxLines - 2) {\n      return \"\".concat(msg).concat(skippedMsg, \"\\n\").concat(res, \"\\n\").concat(blue, \"...\").concat(white).concat(other, \"\\n\") + \"\".concat(blue, \"...\").concat(white);\n    }\n  }\n  return \"\".concat(msg).concat(skipped ? skippedMsg : '', \"\\n\").concat(res).concat(other).concat(end).concat(indicator);\n}\nvar AssertionError = /*#__PURE__*/function (_Error, _inspect$custom) {\n  _inherits(AssertionError, _Error);\n  var _super = _createSuper(AssertionError);\n  function AssertionError(options) {\n    var _this;\n    _classCallCheck(this, AssertionError);\n    if (_typeof(options) !== 'object' || options === null) {\n      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);\n    }\n    var message = options.message,\n      operator = options.operator,\n      stackStartFn = options.stackStartFn;\n    var actual = options.actual,\n      expected = options.expected;\n    var limit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    if (message != null) {\n      _this = _super.call(this, String(message));\n    } else {\n      if (process.stderr && process.stderr.isTTY) {\n        // Reset on each call to make sure we handle dynamically set environment\n        // variables correct.\n        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {\n          blue = \"\\x1B[34m\";\n          green = \"\\x1B[32m\";\n          white = \"\\x1B[39m\";\n          red = \"\\x1B[31m\";\n        } else {\n          blue = '';\n          green = '';\n          white = '';\n          red = '';\n        }\n      }\n      // Prevent the error stack from being visible by duplicating the error\n      // in a very close way to the original in case both sides are actually\n      // instances of Error.\n      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {\n        actual = copyError(actual);\n        expected = copyError(expected);\n      }\n      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {\n        _this = _super.call(this, createErrDiff(actual, expected, operator));\n      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {\n        // In case the objects are equal but the operator requires unequal, show\n        // the first object and say A equals B\n        var base = kReadableOperator[operator];\n        var res = inspectValue(actual).split('\\n');\n\n        // In case \"actual\" is an object, it should not be reference equal.\n        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {\n          base = kReadableOperator.notStrictEqualObject;\n        }\n\n        // Only remove lines in case it makes sense to collapse those.\n        // TODO: Accept env to always show the full error.\n        if (res.length > 30) {\n          res[26] = \"\".concat(blue, \"...\").concat(white);\n          while (res.length > 27) {\n            res.pop();\n          }\n        }\n\n        // Only print a single input.\n        if (res.length === 1) {\n          _this = _super.call(this, \"\".concat(base, \" \").concat(res[0]));\n        } else {\n          _this = _super.call(this, \"\".concat(base, \"\\n\\n\").concat(res.join('\\n'), \"\\n\"));\n        }\n      } else {\n        var _res = inspectValue(actual);\n        var other = '';\n        var knownOperators = kReadableOperator[operator];\n        if (operator === 'notDeepEqual' || operator === 'notEqual') {\n          _res = \"\".concat(kReadableOperator[operator], \"\\n\\n\").concat(_res);\n          if (_res.length > 1024) {\n            _res = \"\".concat(_res.slice(0, 1021), \"...\");\n          }\n        } else {\n          other = \"\".concat(inspectValue(expected));\n          if (_res.length > 512) {\n            _res = \"\".concat(_res.slice(0, 509), \"...\");\n          }\n          if (other.length > 512) {\n            other = \"\".concat(other.slice(0, 509), \"...\");\n          }\n          if (operator === 'deepEqual' || operator === 'equal') {\n            _res = \"\".concat(knownOperators, \"\\n\\n\").concat(_res, \"\\n\\nshould equal\\n\\n\");\n          } else {\n            other = \" \".concat(operator, \" \").concat(other);\n          }\n        }\n        _this = _super.call(this, \"\".concat(_res).concat(other));\n      }\n    }\n    Error.stackTraceLimit = limit;\n    _this.generatedMessage = !message;\n    Object.defineProperty(_assertThisInitialized(_this), 'name', {\n      value: 'AssertionError [ERR_ASSERTION]',\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n    _this.code = 'ERR_ASSERTION';\n    _this.actual = actual;\n    _this.expected = expected;\n    _this.operator = operator;\n    if (Error.captureStackTrace) {\n      // eslint-disable-next-line no-restricted-syntax\n      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);\n    }\n    // Create error message including the error code in the name.\n    _this.stack;\n    // Reset the name.\n    _this.name = 'AssertionError';\n    return _possibleConstructorReturn(_this);\n  }\n  _createClass(AssertionError, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \" [\").concat(this.code, \"]: \").concat(this.message);\n    }\n  }, {\n    key: _inspect$custom,\n    value: function value(recurseTimes, ctx) {\n      // This limits the `actual` and `expected` property default inspection to\n      // the minimum depth. Otherwise those values would be too verbose compared\n      // to the actual error message which contains a combined view of these two\n      // input values.\n      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {\n        customInspect: false,\n        depth: 0\n      }));\n    }\n  }]);\n  return AssertionError;\n}( /*#__PURE__*/_wrapNativeSuper(Error), inspect.custom);\nmodule.exports = AssertionError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/assert/build/internal/assert/assertion_error.js\n"));

/***/ }),

/***/ "./node_modules/assert/build/internal/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/assert/build/internal/errors.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Currently in sync with Node.js lib/internal/errors.js\n// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f\n\n/* eslint node-core/documented-errors: \"error\" */\n/* eslint node-core/alphabetize-errors: \"error\" */\n/* eslint node-core/prefer-util-format-errors: \"error\" */\n\n\n\n// The whole point behind this internal module is to allow Node.js to no\n// longer be forced to treat every error message change as a semver-major\n// change. The NodeError classes here all expose a `code` property whose\n// value statically and permanently identifies the error. While the error\n// message may change, the code should not.\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar codes = {};\n\n// Lazy loaded\nvar assert;\nvar util;\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n  var NodeError = /*#__PURE__*/function (_Base) {\n    _inherits(NodeError, _Base);\n    var _super = _createSuper(NodeError);\n    function NodeError(arg1, arg2, arg3) {\n      var _this;\n      _classCallCheck(this, NodeError);\n      _this = _super.call(this, getMessage(arg1, arg2, arg3));\n      _this.code = code;\n      return _this;\n    }\n    return _createClass(NodeError);\n  }(Base);\n  codes[code] = NodeError;\n}\n\n// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n  return str.substring(this_len - search.length, this_len) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\ncreateErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The \"%s\" argument is ambiguous. %s', TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ \"./node_modules/assert/build/assert.js\");\n  assert(typeof name === 'string', \"'name' must be a string\");\n\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n  var msg;\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  // TODO(BridgeAR): Improve the output by showing `null` and similar.\n  msg += \". Received type \".concat(_typeof(actual));\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {\n  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';\n  if (util === undefined) util = __webpack_require__(/*! util/ */ \"./node_modules/util/util.js\");\n  var inspected = util.inspect(value);\n  if (inspected.length > 128) {\n    inspected = \"\".concat(inspected.slice(0, 128), \"...\");\n  }\n  return \"The argument '\".concat(name, \"' \").concat(reason, \". Received \").concat(inspected);\n}, TypeError, RangeError);\ncreateErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {\n  var type;\n  if (value && value.constructor && value.constructor.name) {\n    type = \"instance of \".concat(value.constructor.name);\n  } else {\n    type = \"type \".concat(_typeof(value));\n  }\n  return \"Expected \".concat(input, \" to be returned from the \\\"\").concat(name, \"\\\"\") + \" function but got \".concat(type, \".\");\n}, TypeError);\ncreateErrorType('ERR_MISSING_ARGS', function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ \"./node_modules/assert/build/assert.js\");\n  assert(args.length > 0, 'At least one arg needs to be specified');\n  var msg = 'The ';\n  var len = args.length;\n  args = args.map(function (a) {\n    return \"\\\"\".concat(a, \"\\\"\");\n  });\n  switch (len) {\n    case 1:\n      msg += \"\".concat(args[0], \" argument\");\n      break;\n    case 2:\n      msg += \"\".concat(args[0], \" and \").concat(args[1], \" arguments\");\n      break;\n    default:\n      msg += args.slice(0, len - 1).join(', ');\n      msg += \", and \".concat(args[len - 1], \" arguments\");\n      break;\n  }\n  return \"\".concat(msg, \" must be specified\");\n}, TypeError);\nmodule.exports.codes = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/assert/build/internal/errors.js\n"));

/***/ }),

/***/ "./node_modules/assert/build/internal/util/comparisons.js":
/*!****************************************************************!*\
  !*** ./node_modules/assert/build/internal/util/comparisons.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Currently in sync with Node.js lib/internal/util/comparisons.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar regexFlagsSupported = /a/g.flags !== undefined;\nvar arrayFromSet = function arrayFromSet(set) {\n  var array = [];\n  set.forEach(function (value) {\n    return array.push(value);\n  });\n  return array;\n};\nvar arrayFromMap = function arrayFromMap(map) {\n  var array = [];\n  map.forEach(function (value, key) {\n    return array.push([key, value]);\n  });\n  return array;\n};\nvar objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ \"./node_modules/object-is/index.js\");\nvar objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {\n  return [];\n};\nvar numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ \"./node_modules/is-nan/index.js\");\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\nvar hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\nvar propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);\nvar objectToString = uncurryThis(Object.prototype.toString);\nvar _require$types = (__webpack_require__(/*! util/ */ \"./node_modules/util/util.js\").types),\n  isAnyArrayBuffer = _require$types.isAnyArrayBuffer,\n  isArrayBufferView = _require$types.isArrayBufferView,\n  isDate = _require$types.isDate,\n  isMap = _require$types.isMap,\n  isRegExp = _require$types.isRegExp,\n  isSet = _require$types.isSet,\n  isNativeError = _require$types.isNativeError,\n  isBoxedPrimitive = _require$types.isBoxedPrimitive,\n  isNumberObject = _require$types.isNumberObject,\n  isStringObject = _require$types.isStringObject,\n  isBooleanObject = _require$types.isBooleanObject,\n  isBigIntObject = _require$types.isBigIntObject,\n  isSymbolObject = _require$types.isSymbolObject,\n  isFloat32Array = _require$types.isFloat32Array,\n  isFloat64Array = _require$types.isFloat64Array;\nfunction isNonIndex(key) {\n  if (key.length === 0 || key.length > 10) return true;\n  for (var i = 0; i < key.length; i++) {\n    var code = key.charCodeAt(i);\n    if (code < 48 || code > 57) return true;\n  }\n  // The maximum size for an array is 2 ** 32 -1.\n  return key.length === 10 && key >= Math.pow(2, 32);\n}\nfunction getOwnNonIndexProperties(value) {\n  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));\n}\n\n// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  var x = a.length;\n  var y = b.length;\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar ONLY_ENUMERABLE = undefined;\nvar kStrict = true;\nvar kLoose = false;\nvar kNoIterator = 0;\nvar kIsArray = 1;\nvar kIsSet = 2;\nvar kIsMap = 3;\n\n// Check if they have the same source and flags\nfunction areSimilarRegExps(a, b) {\n  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);\n}\nfunction areSimilarFloatArrays(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  for (var offset = 0; offset < a.byteLength; offset++) {\n    if (a[offset] !== b[offset]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction areSimilarTypedArrays(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;\n}\nfunction areEqualArrayBuffers(buf1, buf2) {\n  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;\n}\nfunction isEqualBoxedPrimitive(val1, val2) {\n  if (isNumberObject(val1)) {\n    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));\n  }\n  if (isStringObject(val1)) {\n    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);\n  }\n  if (isBooleanObject(val1)) {\n    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);\n  }\n  if (isBigIntObject(val1)) {\n    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);\n  }\n  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);\n}\n\n// Notes: Type tags are historical [[Class]] properties that can be set by\n// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS\n// and retrieved using Object.prototype.toString.call(obj) in JS\n// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring\n// for a list of tags pre-defined in the spec.\n// There are some unspecified tags in the wild too (e.g. typed array tags).\n// Since tags can be altered, they only serve fast failures\n//\n// Typed arrays and buffers are checked by comparing the content in their\n// underlying ArrayBuffer. This optimization requires that it's\n// reasonable to interpret their underlying memory in the same way,\n// which is checked by comparing their type tags.\n// (e.g. a Uint8Array and a Uint16Array with the same memory content\n// could still be different because they will be interpreted differently).\n//\n// For strict comparison, objects should have\n// a) The same built-in type tags\n// b) The same prototypes.\n\nfunction innerDeepEqual(val1, val2, strict, memos) {\n  // All identical values are equivalent, as determined by ===.\n  if (val1 === val2) {\n    if (val1 !== 0) return true;\n    return strict ? objectIs(val1, val2) : true;\n  }\n\n  // Check more closely if val1 and val2 are equal.\n  if (strict) {\n    if (_typeof(val1) !== 'object') {\n      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);\n    }\n    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {\n      return false;\n    }\n    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {\n      return false;\n    }\n  } else {\n    if (val1 === null || _typeof(val1) !== 'object') {\n      if (val2 === null || _typeof(val2) !== 'object') {\n        // eslint-disable-next-line eqeqeq\n        return val1 == val2;\n      }\n      return false;\n    }\n    if (val2 === null || _typeof(val2) !== 'object') {\n      return false;\n    }\n  }\n  var val1Tag = objectToString(val1);\n  var val2Tag = objectToString(val2);\n  if (val1Tag !== val2Tag) {\n    return false;\n  }\n  if (Array.isArray(val1)) {\n    // Check for sparse arrays and general fast path\n    if (val1.length !== val2.length) {\n      return false;\n    }\n    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);\n    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);\n  }\n  // [browserify] This triggers on certain types in IE (Map/Set) so we don't\n  // wan't to early return out of the rest of the checks. However we can check\n  // if the second value is one of these values and the first isn't.\n  if (val1Tag === '[object Object]') {\n    // return keyCheck(val1, val2, strict, memos, kNoIterator);\n    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {\n      return false;\n    }\n  }\n  if (isDate(val1)) {\n    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {\n      return false;\n    }\n  } else if (isRegExp(val1)) {\n    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {\n      return false;\n    }\n  } else if (isNativeError(val1) || val1 instanceof Error) {\n    // Do not compare the stack as it might differ even though the error itself\n    // is otherwise identical.\n    if (val1.message !== val2.message || val1.name !== val2.name) {\n      return false;\n    }\n  } else if (isArrayBufferView(val1)) {\n    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {\n      if (!areSimilarFloatArrays(val1, val2)) {\n        return false;\n      }\n    } else if (!areSimilarTypedArrays(val1, val2)) {\n      return false;\n    }\n    // Buffer.compare returns true, so val1.length === val2.length. If they both\n    // only contain numeric keys, we don't need to exam further than checking\n    // the symbols.\n    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);\n    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);\n    if (_keys.length !== _keys2.length) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);\n  } else if (isSet(val1)) {\n    if (!isSet(val2) || val1.size !== val2.size) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kIsSet);\n  } else if (isMap(val1)) {\n    if (!isMap(val2) || val1.size !== val2.size) {\n      return false;\n    }\n    return keyCheck(val1, val2, strict, memos, kIsMap);\n  } else if (isAnyArrayBuffer(val1)) {\n    if (!areEqualArrayBuffers(val1, val2)) {\n      return false;\n    }\n  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {\n    return false;\n  }\n  return keyCheck(val1, val2, strict, memos, kNoIterator);\n}\nfunction getEnumerables(val, keys) {\n  return keys.filter(function (k) {\n    return propertyIsEnumerable(val, k);\n  });\n}\nfunction keyCheck(val1, val2, strict, memos, iterationType, aKeys) {\n  // For all remaining Object pairs, including Array, objects and Maps,\n  // equivalence is determined by having:\n  // a) The same number of owned enumerable properties\n  // b) The same set of keys/indexes (although not necessarily the same order)\n  // c) Equivalent values for every corresponding key/index\n  // d) For Sets and Maps, equal contents\n  // Note: this accounts for both named and indexed properties on Arrays.\n  if (arguments.length === 5) {\n    aKeys = Object.keys(val1);\n    var bKeys = Object.keys(val2);\n\n    // The pair must have the same number of owned properties.\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n  }\n\n  // Cheap key test\n  var i = 0;\n  for (; i < aKeys.length; i++) {\n    if (!hasOwnProperty(val2, aKeys[i])) {\n      return false;\n    }\n  }\n  if (strict && arguments.length === 5) {\n    var symbolKeysA = objectGetOwnPropertySymbols(val1);\n    if (symbolKeysA.length !== 0) {\n      var count = 0;\n      for (i = 0; i < symbolKeysA.length; i++) {\n        var key = symbolKeysA[i];\n        if (propertyIsEnumerable(val1, key)) {\n          if (!propertyIsEnumerable(val2, key)) {\n            return false;\n          }\n          aKeys.push(key);\n          count++;\n        } else if (propertyIsEnumerable(val2, key)) {\n          return false;\n        }\n      }\n      var symbolKeysB = objectGetOwnPropertySymbols(val2);\n      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {\n        return false;\n      }\n    } else {\n      var _symbolKeysB = objectGetOwnPropertySymbols(val2);\n      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {\n        return false;\n      }\n    }\n  }\n  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {\n    return true;\n  }\n\n  // Use memos to handle cycles.\n  if (memos === undefined) {\n    memos = {\n      val1: new Map(),\n      val2: new Map(),\n      position: 0\n    };\n  } else {\n    // We prevent up to two map.has(x) calls by directly retrieving the value\n    // and checking for undefined. The map can only contain numbers, so it is\n    // safe to check for undefined only.\n    var val2MemoA = memos.val1.get(val1);\n    if (val2MemoA !== undefined) {\n      var val2MemoB = memos.val2.get(val2);\n      if (val2MemoB !== undefined) {\n        return val2MemoA === val2MemoB;\n      }\n    }\n    memos.position++;\n  }\n  memos.val1.set(val1, memos.position);\n  memos.val2.set(val2, memos.position);\n  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);\n  memos.val1.delete(val1);\n  memos.val2.delete(val2);\n  return areEq;\n}\nfunction setHasEqualElement(set, val1, strict, memo) {\n  // Go looking.\n  var setValues = arrayFromSet(set);\n  for (var i = 0; i < setValues.length; i++) {\n    var val2 = setValues[i];\n    if (innerDeepEqual(val1, val2, strict, memo)) {\n      // Remove the matching element to make sure we do not check that again.\n      set.delete(val2);\n      return true;\n    }\n  }\n  return false;\n}\n\n// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using\n// Sadly it is not possible to detect corresponding values properly in case the\n// type is a string, number, bigint or boolean. The reason is that those values\n// can match lots of different string values (e.g., 1n == '+00001').\nfunction findLooseMatchingPrimitives(prim) {\n  switch (_typeof(prim)) {\n    case 'undefined':\n      return null;\n    case 'object':\n      // Only pass in null as object!\n      return undefined;\n    case 'symbol':\n      return false;\n    case 'string':\n      prim = +prim;\n    // Loose equal entries exist only if the string is possible to convert to\n    // a regular number and not NaN.\n    // Fall through\n    case 'number':\n      if (numberIsNaN(prim)) {\n        return false;\n      }\n  }\n  return true;\n}\nfunction setMightHaveLoosePrim(a, b, prim) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) return altValue;\n  return b.has(altValue) && !a.has(altValue);\n}\nfunction mapMightHaveLoosePrim(a, b, prim, item, memo) {\n  var altValue = findLooseMatchingPrimitives(prim);\n  if (altValue != null) {\n    return altValue;\n  }\n  var curB = b.get(altValue);\n  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {\n    return false;\n  }\n  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);\n}\nfunction setEquiv(a, b, strict, memo) {\n  // This is a lazily initiated Set of entries which have to be compared\n  // pairwise.\n  var set = null;\n  var aValues = arrayFromSet(a);\n  for (var i = 0; i < aValues.length; i++) {\n    var val = aValues[i];\n    // Note: Checking for the objects first improves the performance for object\n    // heavy sets but it is a minor slow down for primitives. As they are fast\n    // to check this improves the worst case scenario instead.\n    if (_typeof(val) === 'object' && val !== null) {\n      if (set === null) {\n        set = new Set();\n      }\n      // If the specified value doesn't exist in the second set its an not null\n      // object (or non strict only: a not matching primitive) we'll need to go\n      // hunting for something thats deep-(strict-)equal to it. To make this\n      // O(n log n) complexity we have to copy these values in a new set first.\n      set.add(val);\n    } else if (!b.has(val)) {\n      if (strict) return false;\n\n      // Fast path to detect missing string, symbol, undefined and null values.\n      if (!setMightHaveLoosePrim(a, b, val)) {\n        return false;\n      }\n      if (set === null) {\n        set = new Set();\n      }\n      set.add(val);\n    }\n  }\n  if (set !== null) {\n    var bValues = arrayFromSet(b);\n    for (var _i = 0; _i < bValues.length; _i++) {\n      var _val = bValues[_i];\n      // We have to check if a primitive value is already\n      // matching and only if it's not, go hunting for it.\n      if (_typeof(_val) === 'object' && _val !== null) {\n        if (!setHasEqualElement(set, _val, strict, memo)) return false;\n      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {\n        return false;\n      }\n    }\n    return set.size === 0;\n  }\n  return true;\n}\nfunction mapHasEqualEntry(set, map, key1, item1, strict, memo) {\n  // To be able to handle cases like:\n  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])\n  // ... we need to consider *all* matching keys, not just the first we find.\n  var setValues = arrayFromSet(set);\n  for (var i = 0; i < setValues.length; i++) {\n    var key2 = setValues[i];\n    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {\n      set.delete(key2);\n      return true;\n    }\n  }\n  return false;\n}\nfunction mapEquiv(a, b, strict, memo) {\n  var set = null;\n  var aEntries = arrayFromMap(a);\n  for (var i = 0; i < aEntries.length; i++) {\n    var _aEntries$i = _slicedToArray(aEntries[i], 2),\n      key = _aEntries$i[0],\n      item1 = _aEntries$i[1];\n    if (_typeof(key) === 'object' && key !== null) {\n      if (set === null) {\n        set = new Set();\n      }\n      set.add(key);\n    } else {\n      // By directly retrieving the value we prevent another b.has(key) check in\n      // almost all possible cases.\n      var item2 = b.get(key);\n      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {\n        if (strict) return false;\n        // Fast path to detect missing string, symbol, undefined and null\n        // keys.\n        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;\n        if (set === null) {\n          set = new Set();\n        }\n        set.add(key);\n      }\n    }\n  }\n  if (set !== null) {\n    var bEntries = arrayFromMap(b);\n    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {\n      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),\n        _key = _bEntries$_i[0],\n        item = _bEntries$_i[1];\n      if (_typeof(_key) === 'object' && _key !== null) {\n        if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;\n      } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {\n        return false;\n      }\n    }\n    return set.size === 0;\n  }\n  return true;\n}\nfunction objEquiv(a, b, strict, keys, memos, iterationType) {\n  // Sets and maps don't have their entries accessible via normal object\n  // properties.\n  var i = 0;\n  if (iterationType === kIsSet) {\n    if (!setEquiv(a, b, strict, memos)) {\n      return false;\n    }\n  } else if (iterationType === kIsMap) {\n    if (!mapEquiv(a, b, strict, memos)) {\n      return false;\n    }\n  } else if (iterationType === kIsArray) {\n    for (; i < a.length; i++) {\n      if (hasOwnProperty(a, i)) {\n        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {\n          return false;\n        }\n      } else if (hasOwnProperty(b, i)) {\n        return false;\n      } else {\n        // Array is sparse.\n        var keysA = Object.keys(a);\n        for (; i < keysA.length; i++) {\n          var key = keysA[i];\n          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {\n            return false;\n          }\n        }\n        if (keysA.length !== Object.keys(b).length) {\n          return false;\n        }\n        return true;\n      }\n    }\n  }\n\n  // The pair must have equivalent values for every corresponding key.\n  // Possibly expensive deep test:\n  for (i = 0; i < keys.length; i++) {\n    var _key2 = keys[i];\n    if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isDeepEqual(val1, val2) {\n  return innerDeepEqual(val1, val2, kLoose);\n}\nfunction isDeepStrictEqual(val1, val2) {\n  return innerDeepEqual(val1, val2, kStrict);\n}\nmodule.exports = {\n  isDeepEqual: isDeepEqual,\n  isDeepStrictEqual: isDeepStrictEqual\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/assert/build/internal/util/comparisons.js\n"));

/***/ }),

/***/ "./node_modules/decode-uri-component/index.js":
/*!****************************************************!*\
  !*** ./node_modules/decode-uri-component/index.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher) || [];\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYix1QkFBdUIsRUFBRTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxrQkFBa0IsbUJBQW1CO0FBQ3JDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsb0JBQW9CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qcz9hZjBkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xudmFyIHNpbmdsZU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJyl8KFteJV0rPyknLCAnZ2knKTtcbnZhciBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJykrJywgJ2dpJyk7XG5cbmZ1bmN0aW9uIGRlY29kZUNvbXBvbmVudHMoY29tcG9uZW50cywgc3BsaXQpIHtcblx0dHJ5IHtcblx0XHQvLyBUcnkgdG8gZGVjb2RlIHRoZSBlbnRpcmUgc3RyaW5nIGZpcnN0XG5cdFx0cmV0dXJuIFtkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSldO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpIHx8IFtdO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/decode-uri-component/index.js\n"));

/***/ }),

/***/ "./node_modules/define-properties/index.js":
/*!*************************************************!*\
  !*** ./node_modules/define-properties/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar keys = __webpack_require__(/*! object-keys */ \"./node_modules/object-keys/index.js\");\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar defineDataProperty = __webpack_require__(/*! define-data-property */ \"./node_modules/define-data-property/index.js\");\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar supportsDescriptors = __webpack_require__(/*! has-property-descriptors */ \"./node_modules/has-property-descriptors/index.js\")();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object) {\n\t\tif (predicate === true) {\n\t\t\tif (object[name] === value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (!isFunction(predicate) || !predicate()) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (supportsDescriptors) {\n\t\tdefineDataProperty(object, name, value, true);\n\t} else {\n\t\tdefineDataProperty(object, name, value);\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLHdEQUFhO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQywwRUFBc0I7O0FBRXZEO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsbUJBQU8sQ0FBQyxrRkFBMEI7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzP2ViZTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZGVmaW5lLWRhdGEtcHJvcGVydHknKTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0ZGVmaW5lRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUsIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/define-properties/index.js\n"));

/***/ }),

/***/ "./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BotInfo: function() { return /* binding */ BotInfo; },\n/* harmony export */   BrowserInfo: function() { return /* binding */ BrowserInfo; },\n/* harmony export */   NodeInfo: function() { return /* binding */ NodeInfo; },\n/* harmony export */   ReactNativeInfo: function() { return /* binding */ ReactNativeInfo; },\n/* harmony export */   SearchBotDeviceInfo: function() { return /* binding */ SearchBotDeviceInfo; },\n/* harmony export */   browserName: function() { return /* binding */ browserName; },\n/* harmony export */   detect: function() { return /* binding */ detect; },\n/* harmony export */   detectOS: function() { return /* binding */ detectOS; },\n/* harmony export */   getNodeVersion: function() { return /* binding */ getNodeVersion; },\n/* harmony export */   parseUserAgent: function() { return /* binding */ parseUserAgent; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\n\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\n\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\n\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\n\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\n\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/detect-browser/es/index.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/keccak.js":
/*!******************************************************!*\
  !*** ./node_modules/ethereum-cryptography/keccak.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;\nconst sha3_1 = __webpack_require__(/*! @noble/hashes/sha3 */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/utils.js\");\nexports.keccak224 = (0, utils_js_1.wrapHash)(sha3_1.keccak_224);\nexports.keccak256 = (() => {\n    const k = (0, utils_js_1.wrapHash)(sha3_1.keccak_256);\n    k.create = sha3_1.keccak_256.create;\n    return k;\n})();\nexports.keccak384 = (0, utils_js_1.wrapHash)(sha3_1.keccak_384);\nexports.keccak512 = (0, utils_js_1.wrapHash)(sha3_1.keccak_512);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUI7QUFDN0UsZUFBZSxtQkFBTyxDQUFDLG1HQUFvQjtBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyxpRUFBWTtBQUN2QyxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxpQkFBaUI7QUFDakIsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrLmpzPzliMDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmtlY2NhazUxMiA9IGV4cG9ydHMua2VjY2FrMzg0ID0gZXhwb3J0cy5rZWNjYWsyNTYgPSBleHBvcnRzLmtlY2NhazIyNCA9IHZvaWQgMDtcbmNvbnN0IHNoYTNfMSA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL3NoYTNcIik7XG5jb25zdCB1dGlsc19qc18xID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5leHBvcnRzLmtlY2NhazIyNCA9ICgwLCB1dGlsc19qc18xLndyYXBIYXNoKShzaGEzXzEua2VjY2FrXzIyNCk7XG5leHBvcnRzLmtlY2NhazI1NiA9ICgoKSA9PiB7XG4gICAgY29uc3QgayA9ICgwLCB1dGlsc19qc18xLndyYXBIYXNoKShzaGEzXzEua2VjY2FrXzI1Nik7XG4gICAgay5jcmVhdGUgPSBzaGEzXzEua2VjY2FrXzI1Ni5jcmVhdGU7XG4gICAgcmV0dXJuIGs7XG59KSgpO1xuZXhwb3J0cy5rZWNjYWszODQgPSAoMCwgdXRpbHNfanNfMS53cmFwSGFzaCkoc2hhM18xLmtlY2Nha18zODQpO1xuZXhwb3J0cy5rZWNjYWs1MTIgPSAoMCwgdXRpbHNfanNfMS53cmFwSGFzaCkoc2hhM18xLmtlY2Nha181MTIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/keccak.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/_shortw_utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/_shortw_utils.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createCurve = exports.getHash = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst hmac_1 = __webpack_require__(/*! @noble/hashes/hmac */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/hmac.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\nconst weierstrass_js_1 = __webpack_require__(/*! ./abstract/weierstrass.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/weierstrass.js\");\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),\n        randomBytes: utils_1.randomBytes,\n    };\n}\nexports.getHash = getHash;\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\nexports.createCurve = createCurve;\n//# sourceMappingURL=_shortw_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL19zaG9ydHdfdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsZUFBZTtBQUNyQztBQUNBLGVBQWUsbUJBQU8sQ0FBQyxtR0FBb0I7QUFDM0MsZ0JBQWdCLG1CQUFPLENBQUMscUdBQXFCO0FBQzdDLHlCQUF5QixtQkFBTyxDQUFDLDBIQUEyQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsaUVBQWlFLCtCQUErQjtBQUNoRywyQkFBMkIsNEJBQTRCO0FBQ3ZEO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvX3Nob3J0d191dGlscy5qcz83YWJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVDdXJ2ZSA9IGV4cG9ydHMuZ2V0SGFzaCA9IHZvaWQgMDtcbi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmNvbnN0IGhtYWNfMSA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL2htYWNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvdXRpbHNcIik7XG5jb25zdCB3ZWllcnN0cmFzc19qc18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanNcIik7XG4vLyBjb25uZWN0cyBub2JsZS1jdXJ2ZXMgdG8gbm9ibGUtaGFzaGVzXG5mdW5jdGlvbiBnZXRIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoYXNoLFxuICAgICAgICBobWFjOiAoa2V5LCAuLi5tc2dzKSA9PiAoMCwgaG1hY18xLmhtYWMpKGhhc2gsIGtleSwgKDAsIHV0aWxzXzEuY29uY2F0Qnl0ZXMpKC4uLm1zZ3MpKSxcbiAgICAgICAgcmFuZG9tQnl0ZXM6IHV0aWxzXzEucmFuZG9tQnl0ZXMsXG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0SGFzaCA9IGdldEhhc2g7XG5mdW5jdGlvbiBjcmVhdGVDdXJ2ZShjdXJ2ZURlZiwgZGVmSGFzaCkge1xuICAgIGNvbnN0IGNyZWF0ZSA9IChoYXNoKSA9PiAoMCwgd2VpZXJzdHJhc3NfanNfMS53ZWllcnN0cmFzcykoeyAuLi5jdXJ2ZURlZiwgLi4uZ2V0SGFzaChoYXNoKSB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLmNyZWF0ZShkZWZIYXNoKSwgY3JlYXRlIH0pO1xufVxuZXhwb3J0cy5jcmVhdGVDdXJ2ZSA9IGNyZWF0ZUN1cnZlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3Nob3J0d191dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/_shortw_utils.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/curve.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/curve.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateBasic = exports.wNAF = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nconst modular_js_1 = __webpack_require__(/*! ./modular.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexports.wNAF = wNAF;\nfunction validateBasic(curve) {\n    (0, modular_js_1.validateField)(curve.Fp);\n    (0, utils_js_1.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nexports.validateBasic = validateBasic;\n//# sourceMappingURL=curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2Fic3RyYWN0L2N1cnZlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLFlBQVk7QUFDcEM7QUFDQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlHQUFjO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLHFHQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6QyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxnQkFBZ0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQW1CO0FBQ2hDLEtBQUs7QUFDTDtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2Fic3RyYWN0L2N1cnZlLmpzPzk5YTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlQmFzaWMgPSBleHBvcnRzLndOQUYgPSB2b2lkIDA7XG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG4vLyBBYmVsaWFuIGdyb3VwIHV0aWxpdGllc1xuY29uc3QgbW9kdWxhcl9qc18xID0gcmVxdWlyZShcIi4vbW9kdWxhci5qc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbi8vIEVsbGlwdGljIGN1cnZlIG11bHRpcGxpY2F0aW9uIG9mIFBvaW50IGJ5IHNjYWxhci4gRnJhZ2lsZS5cbi8vIFNjYWxhcnMgc2hvdWxkIGFsd2F5cyBiZSBsZXNzIHRoYW4gY3VydmUgb3JkZXI6IHRoaXMgc2hvdWxkIGJlIGNoZWNrZWQgaW5zaWRlIG9mIGEgY3VydmUgaXRzZWxmLlxuLy8gQ3JlYXRlcyBwcmVjb21wdXRhdGlvbiB0YWJsZXMgZm9yIGZhc3QgbXVsdGlwbGljYXRpb246XG4vLyAtIHByaXZhdGUgc2NhbGFyIGlzIHNwbGl0IGJ5IGZpeGVkIHNpemUgd2luZG93cyBvZiBXIGJpdHNcbi8vIC0gZXZlcnkgd2luZG93IHBvaW50IGlzIGNvbGxlY3RlZCBmcm9tIHdpbmRvdydzIHRhYmxlICYgYWRkZWQgdG8gYWNjdW11bGF0b3Jcbi8vIC0gc2luY2Ugd2luZG93cyBhcmUgZGlmZmVyZW50LCBzYW1lIHBvaW50IGluc2lkZSB0YWJsZXMgd29uJ3QgYmUgYWNjZXNzZWQgbW9yZSB0aGFuIG9uY2UgcGVyIGNhbGNcbi8vIC0gZWFjaCBtdWx0aXBsaWNhdGlvbiBpcyAnTWF0aC5jZWlsKENVUlZFX09SREVSIC8g8J2RiikgKyAxJyBwb2ludCBhZGRpdGlvbnMgKGZpeGVkIGZvciBhbnkgc2NhbGFyKVxuLy8gLSArMSB3aW5kb3cgaXMgbmVjY2Vzc2FyeSBmb3Igd05BRlxuLy8gLSB3TkFGIHJlZHVjZXMgdGFibGUgc2l6ZTogMnggbGVzcyBtZW1vcnkgKyAyeCBmYXN0ZXIgZ2VuZXJhdGlvbiwgYnV0IDEwJSBzbG93ZXIgbXVsdGlwbGljYXRpb25cbi8vIFRPRE86IFJlc2VhcmNoIHJldHVybmluZyAyZCBKUyBhcnJheSBvZiB3aW5kb3dzLCBpbnN0ZWFkIG9mIGEgc2luZ2xlIHdpbmRvdy4gVGhpcyB3b3VsZCBhbGxvd1xuLy8gd2luZG93cyB0byBiZSBpbiBkaWZmZXJlbnQgbWVtb3J5IGxvY2F0aW9uc1xuZnVuY3Rpb24gd05BRihjLCBiaXRzKSB7XG4gICAgY29uc3QgY29uc3RUaW1lTmVnYXRlID0gKGNvbmRpdGlvbiwgaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBuZWcgPSBpdGVtLm5lZ2F0ZSgpO1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uID8gbmVnIDogaXRlbTtcbiAgICB9O1xuICAgIGNvbnN0IG9wdHMgPSAoVykgPT4ge1xuICAgICAgICBjb25zdCB3aW5kb3dzID0gTWF0aC5jZWlsKGJpdHMgLyBXKSArIDE7IC8vICsxLCBiZWNhdXNlXG4gICAgICAgIGNvbnN0IHdpbmRvd1NpemUgPSAyICoqIChXIC0gMSk7IC8vIC0xIGJlY2F1c2Ugd2Ugc2tpcCB6ZXJvXG4gICAgICAgIHJldHVybiB7IHdpbmRvd3MsIHdpbmRvd1NpemUgfTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnN0VGltZU5lZ2F0ZSxcbiAgICAgICAgLy8gbm9uLWNvbnN0IHRpbWUgbXVsdGlwbGljYXRpb24gbGFkZGVyXG4gICAgICAgIHVuc2FmZUxhZGRlcihlbG0sIG4pIHtcbiAgICAgICAgICAgIGxldCBwID0gYy5aRVJPO1xuICAgICAgICAgICAgbGV0IGQgPSBlbG07XG4gICAgICAgICAgICB3aGlsZSAobiA+IF8wbikge1xuICAgICAgICAgICAgICAgIGlmIChuICYgXzFuKVxuICAgICAgICAgICAgICAgICAgICBwID0gcC5hZGQoZCk7XG4gICAgICAgICAgICAgICAgZCA9IGQuZG91YmxlKCk7XG4gICAgICAgICAgICAgICAgbiA+Pj0gXzFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgd05BRiBwcmVjb21wdXRhdGlvbiB3aW5kb3cuIFVzZWQgZm9yIGNhY2hpbmcuXG4gICAgICAgICAqIERlZmF1bHQgd2luZG93IHNpemUgaXMgc2V0IGJ5IGB1dGlscy5wcmVjb21wdXRlKClgIGFuZCBpcyBlcXVhbCB0byA4LlxuICAgICAgICAgKiBOdW1iZXIgb2YgcHJlY29tcHV0ZWQgcG9pbnRzIGRlcGVuZHMgb24gdGhlIGN1cnZlIHNpemU6XG4gICAgICAgICAqIDJeKPCdkYriiJIxKSAqIChNYXRoLmNlaWwo8J2RmyAvIPCdkYopICsgMSksIHdoZXJlOlxuICAgICAgICAgKiAtIPCdkYogaXMgdGhlIHdpbmRvdyBzaXplXG4gICAgICAgICAqIC0g8J2RmyBpcyB0aGUgYml0bGVuZ3RoIG9mIHRoZSBjdXJ2ZSBvcmRlci5cbiAgICAgICAgICogRm9yIGEgMjU2LWJpdCBjdXJ2ZSBhbmQgd2luZG93IHNpemUgOCwgdGhlIG51bWJlciBvZiBwcmVjb21wdXRlZCBwb2ludHMgaXMgMTI4ICogMzMgPSA0MjI0LlxuICAgICAgICAgKiBAcmV0dXJucyBwcmVjb21wdXRlZCBwb2ludCB0YWJsZXMgZmxhdHRlbmVkIHRvIGEgc2luZ2xlIGFycmF5XG4gICAgICAgICAqL1xuICAgICAgICBwcmVjb21wdXRlV2luZG93KGVsbSwgVykge1xuICAgICAgICAgICAgY29uc3QgeyB3aW5kb3dzLCB3aW5kb3dTaXplIH0gPSBvcHRzKFcpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgICAgICAgICBsZXQgcCA9IGVsbTtcbiAgICAgICAgICAgIGxldCBiYXNlID0gcDtcbiAgICAgICAgICAgIGZvciAobGV0IHdpbmRvdyA9IDA7IHdpbmRvdyA8IHdpbmRvd3M7IHdpbmRvdysrKSB7XG4gICAgICAgICAgICAgICAgYmFzZSA9IHA7XG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goYmFzZSk7XG4gICAgICAgICAgICAgICAgLy8gPTEsIGJlY2F1c2Ugd2Ugc2tpcCB6ZXJvXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB3aW5kb3dTaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYmFzZSA9IGJhc2UuYWRkKHApO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChiYXNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcCA9IGJhc2UuZG91YmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcG9pbnRzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50cyBlYyBtdWx0aXBsaWNhdGlvbiB1c2luZyBwcmVjb21wdXRlZCB0YWJsZXMgYW5kIHctYXJ5IG5vbi1hZGphY2VudCBmb3JtLlxuICAgICAgICAgKiBAcGFyYW0gVyB3aW5kb3cgc2l6ZVxuICAgICAgICAgKiBAcGFyYW0gcHJlY29tcHV0ZXMgcHJlY29tcHV0ZWQgdGFibGVzXG4gICAgICAgICAqIEBwYXJhbSBuIHNjYWxhciAod2UgZG9uJ3QgY2hlY2sgaGVyZSwgYnV0IHNob3VsZCBiZSBsZXNzIHRoYW4gY3VydmUgb3JkZXIpXG4gICAgICAgICAqIEByZXR1cm5zIHJlYWwgYW5kIGZha2UgKGZvciBjb25zdC10aW1lKSBwb2ludHNcbiAgICAgICAgICovXG4gICAgICAgIHdOQUYoVywgcHJlY29tcHV0ZXMsIG4pIHtcbiAgICAgICAgICAgIC8vIFRPRE86IG1heWJlIGNoZWNrIHRoYXQgc2NhbGFyIGlzIGxlc3MgdGhhbiBncm91cCBvcmRlcj8gd05BRiBiZWhhdmlvdXMgaXMgdW5kZWZpbmVkIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gQnV0IG5lZWQgdG8gY2FyZWZ1bGx5IHJlbW92ZSBvdGhlciBjaGVja3MgYmVmb3JlIHdOQUYuIE9SREVSID09IGJpdHMgaGVyZVxuICAgICAgICAgICAgY29uc3QgeyB3aW5kb3dzLCB3aW5kb3dTaXplIH0gPSBvcHRzKFcpO1xuICAgICAgICAgICAgbGV0IHAgPSBjLlpFUk87XG4gICAgICAgICAgICBsZXQgZiA9IGMuQkFTRTtcbiAgICAgICAgICAgIGNvbnN0IG1hc2sgPSBCaWdJbnQoMiAqKiBXIC0gMSk7IC8vIENyZWF0ZSBtYXNrIHdpdGggVyBvbmVzOiAwYjExMTEgZm9yIFc9NCBldGMuXG4gICAgICAgICAgICBjb25zdCBtYXhOdW1iZXIgPSAyICoqIFc7XG4gICAgICAgICAgICBjb25zdCBzaGlmdEJ5ID0gQmlnSW50KFcpO1xuICAgICAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3aW5kb3cgKiB3aW5kb3dTaXplO1xuICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgVyBiaXRzLlxuICAgICAgICAgICAgICAgIGxldCB3Yml0cyA9IE51bWJlcihuICYgbWFzayk7XG4gICAgICAgICAgICAgICAgLy8gU2hpZnQgbnVtYmVyIGJ5IFcgYml0cy5cbiAgICAgICAgICAgICAgICBuID4+PSBzaGlmdEJ5O1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBiaXRzIGFyZSBiaWdnZXIgdGhhbiBtYXggc2l6ZSwgd2UnbGwgc3BsaXQgdGhvc2UuXG4gICAgICAgICAgICAgICAgLy8gKzIyNCA9PiAyNTYgLSAzMlxuICAgICAgICAgICAgICAgIGlmICh3Yml0cyA+IHdpbmRvd1NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgd2JpdHMgLT0gbWF4TnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBuICs9IF8xbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjb2RlIHdhcyBmaXJzdCB3cml0dGVuIHdpdGggYXNzdW1wdGlvbiB0aGF0ICdmJyBhbmQgJ3AnIHdpbGwgbmV2ZXIgYmUgaW5maW5pdHkgcG9pbnQ6XG4gICAgICAgICAgICAgICAgLy8gc2luY2UgZWFjaCBhZGRpdGlvbiBpcyBtdWx0aXBsaWVkIGJ5IDIgKiogVywgaXQgY2Fubm90IGNhbmNlbCBlYWNoIG90aGVyLiBIb3dldmVyLFxuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5lZ2F0ZSBub3c6IGl0IGlzIHBvc3NpYmxlIHRoYXQgbmVnYXRlZCBlbGVtZW50IGZyb20gbG93IHZhbHVlXG4gICAgICAgICAgICAgICAgLy8gd291bGQgYmUgdGhlIHNhbWUgYXMgaGlnaCBlbGVtZW50LCB3aGljaCB3aWxsIGNyZWF0ZSBjYXJyeSBpbnRvIG5leHQgd2luZG93LlxuICAgICAgICAgICAgICAgIC8vIEl0J3Mgbm90IG9idmlvdXMgaG93IHRoaXMgY2FuIGZhaWwsIGJ1dCBzdGlsbCB3b3J0aCBpbnZlc3RpZ2F0aW5nIGxhdGVyLlxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlJ3JlIG9udG8gWmVybyBwb2ludC5cbiAgICAgICAgICAgICAgICAvLyBBZGQgcmFuZG9tIHBvaW50IGluc2lkZSBjdXJyZW50IHdpbmRvdyB0byBmLlxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldDEgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0MiA9IG9mZnNldCArIE1hdGguYWJzKHdiaXRzKSAtIDE7IC8vIC0xIGJlY2F1c2Ugd2Ugc2tpcCB6ZXJvXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZDEgPSB3aW5kb3cgJSAyICE9PSAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmQyID0gd2JpdHMgPCAwO1xuICAgICAgICAgICAgICAgIGlmICh3Yml0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgcGFydCBmb3IgY29uc3QtdGltZSBnZXRQdWJsaWNLZXlcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYuYWRkKGNvbnN0VGltZU5lZ2F0ZShjb25kMSwgcHJlY29tcHV0ZXNbb2Zmc2V0MV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLmFkZChjb25zdFRpbWVOZWdhdGUoY29uZDIsIHByZWNvbXB1dGVzW29mZnNldDJdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSklULWNvbXBpbGVyIHNob3VsZCBub3QgZWxpbWluYXRlIGYgaGVyZSwgc2luY2UgaXQgd2lsbCBsYXRlciBiZSB1c2VkIGluIG5vcm1hbGl6ZVooKVxuICAgICAgICAgICAgLy8gRXZlbiBpZiB0aGUgdmFyaWFibGUgaXMgc3RpbGwgdW51c2VkLCB0aGVyZSBhcmUgc29tZSBjaGVja3Mgd2hpY2ggd2lsbFxuICAgICAgICAgICAgLy8gdGhyb3cgYW4gZXhjZXB0aW9uLCBzbyBjb21waWxlciBuZWVkcyB0byBwcm92ZSB0aGV5IHdvbid0IGhhcHBlbiwgd2hpY2ggaXMgaGFyZC5cbiAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlcmUgaXMgYSB3YXkgdG8gRiBiZSBpbmZpbml0eS1wb2ludCBldmVuIGlmIHAgaXMgbm90LFxuICAgICAgICAgICAgLy8gd2hpY2ggbWFrZXMgaXQgbGVzcyBjb25zdC10aW1lOiBhcm91bmQgMSBiaWdpbnQgbXVsdGlwbHkuXG4gICAgICAgICAgICByZXR1cm4geyBwLCBmIH07XG4gICAgICAgIH0sXG4gICAgICAgIHdOQUZDYWNoZWQoUCwgcHJlY29tcHV0ZXNNYXAsIG4sIHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgVyA9IFAuX1dJTkRPV19TSVpFIHx8IDE7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcHJlY29tcHV0ZXMgb24gYSBmaXJzdCBydW4sIHJldXNlIHRoZW0gYWZ0ZXJcbiAgICAgICAgICAgIGxldCBjb21wID0gcHJlY29tcHV0ZXNNYXAuZ2V0KFApO1xuICAgICAgICAgICAgaWYgKCFjb21wKSB7XG4gICAgICAgICAgICAgICAgY29tcCA9IHRoaXMucHJlY29tcHV0ZVdpbmRvdyhQLCBXKTtcbiAgICAgICAgICAgICAgICBpZiAoVyAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVjb21wdXRlc01hcC5zZXQoUCwgdHJhbnNmb3JtKGNvbXApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53TkFGKFcsIGNvbXAsIG4pO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLndOQUYgPSB3TkFGO1xuZnVuY3Rpb24gdmFsaWRhdGVCYXNpYyhjdXJ2ZSkge1xuICAgICgwLCBtb2R1bGFyX2pzXzEudmFsaWRhdGVGaWVsZCkoY3VydmUuRnApO1xuICAgICgwLCB1dGlsc19qc18xLnZhbGlkYXRlT2JqZWN0KShjdXJ2ZSwge1xuICAgICAgICBuOiAnYmlnaW50JyxcbiAgICAgICAgaDogJ2JpZ2ludCcsXG4gICAgICAgIEd4OiAnZmllbGQnLFxuICAgICAgICBHeTogJ2ZpZWxkJyxcbiAgICB9LCB7XG4gICAgICAgIG5CaXRMZW5ndGg6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICAgICAgbkJ5dGVMZW5ndGg6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICB9KTtcbiAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIC4uLigwLCBtb2R1bGFyX2pzXzEubkxlbmd0aCkoY3VydmUubiwgY3VydmUubkJpdExlbmd0aCksXG4gICAgICAgIC4uLmN1cnZlLFxuICAgICAgICAuLi57IHA6IGN1cnZlLkZwLk9SREVSIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLnZhbGlkYXRlQmFzaWMgPSB2YWxpZGF0ZUJhc2ljO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VydmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/curve.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/hash-to-curve.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/hash-to-curve.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;\nconst modular_js_1 = __webpack_require__(/*! ./modular.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\");\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array)\n        return dst;\n    if (typeof dst === 'string')\n        return (0, utils_js_1.utf8ToBytes)(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = utils_js_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0, utils_js_1.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\nexports.expand_message_xmd = expand_message_xmd;\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\nexports.expand_message_xof = expand_message_xof;\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0, utils_js_1.validateObject)(options, {\n        DST: 'string',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexports.hash_to_field = hash_to_field;\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexports.isogenyMap = isogenyMap;\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve\n        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\nexports.createHasher = createHasher;\n//# sourceMappingURL=hash-to-curve.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/hash-to-curve.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\");\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nexports.mod = mod;\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\nexports.pow = pow;\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\nexports.pow2 = pow2;\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nexports.invert = invert;\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexports.tonelliShanks = tonelliShanks;\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\nexports.FpSqrt = FpSqrt;\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0, utils_js_1.validateObject)(field, opts);\n}\nexports.validateField = validateField;\n// Generic field functions\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\nexports.FpPow = FpPow;\n// 0 is non-invertible: non-batched version will throw on 0\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexports.FpInvertBatch = FpInvertBatch;\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexports.FpDiv = FpDiv;\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\nexports.FpIsSquare = FpIsSquare;\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\nexports.nLength = nLength;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0, utils_js_1.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexports.Field = Field;\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexports.FpSqrtOdd = FpSqrtOdd;\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\nexports.FpSqrtEven = FpSqrtEven;\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0, utils_js_1.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\nexports.hashToPrivateScalar = hashToPrivateScalar;\n//# sourceMappingURL=modular.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexports.numberToHexUnpadded = numberToHexUnpadded;\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\nexports.hexToNumber = hexToNumber;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexports.bytesToNumberBE = bytesToNumberBE;\nfunction bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexports.bytesToNumberLE = bytesToNumberLE;\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexports.numberToBytesBE = numberToBytesBE;\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\nexports.numberToBytesLE = numberToBytesLE;\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\nexports.numberToVarBytesBE = numberToVarBytesBE;\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\nexports.ensureBytes = ensureBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\nexports.equalBytes = equalBytes;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\nexports.bitLen = bitLen;\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\nexports.bitGet = bitGet;\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\nexports.bitSet = bitSet;\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\nexports.createHmacDrbg = createHmacDrbg;\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\nexports.validateObject = validateObject;\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2Fic3RyYWN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHNCQUFzQixHQUFHLGVBQWUsR0FBRyxjQUFjLEdBQUcsY0FBYyxHQUFHLGNBQWMsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxtQkFBbUIsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUIsR0FBRyx1QkFBdUIsR0FBRyx1QkFBdUIsR0FBRyx1QkFBdUIsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRywyQkFBMkIsR0FBRyxrQkFBa0I7QUFDOWE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGFBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGdDQUFnQyxJQUFJO0FBQ3BDO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLElBQUk7QUFDOUM7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTyxpQ0FBaUMsSUFBSSxZQUFZLEVBQUU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPLFdBQVcsZ0JBQWdCLGFBQWEsSUFBSTtBQUM5RTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxXQUFXO0FBQ3ZFLDBEQUEwRDtBQUMxRDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsdUJBQXVCLDRCQUE0QjtBQUNuRDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNENBQTRDO0FBQzVDLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRCw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELEtBQUs7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsa0JBQWtCLEdBQUcsS0FBSyxHQUFHLFdBQVcsY0FBYyxLQUFLO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxjQUFjLFdBQVcsV0FBVyxZQUFZLElBQUk7QUFDcEQsa0NBQWtDLG9CQUFvQixJQUFJLGFBQWEsR0FBRztBQUMxRTtBQUNBLGtDQUFrQyxVQUFVLElBQUksU0FBUztBQUN6RCxrQ0FBa0Msb0JBQW9CLElBQUksU0FBUztBQUNuRSxrQ0FBa0MsMkJBQTJCO0FBQzdELGtDQUFrQyx3QkFBd0I7QUFDMUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9hYnN0cmFjdC91dGlscy5qcz9lMGViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZU9iamVjdCA9IGV4cG9ydHMuY3JlYXRlSG1hY0RyYmcgPSBleHBvcnRzLmJpdE1hc2sgPSBleHBvcnRzLmJpdFNldCA9IGV4cG9ydHMuYml0R2V0ID0gZXhwb3J0cy5iaXRMZW4gPSBleHBvcnRzLnV0ZjhUb0J5dGVzID0gZXhwb3J0cy5lcXVhbEJ5dGVzID0gZXhwb3J0cy5jb25jYXRCeXRlcyA9IGV4cG9ydHMuZW5zdXJlQnl0ZXMgPSBleHBvcnRzLm51bWJlclRvVmFyQnl0ZXNCRSA9IGV4cG9ydHMubnVtYmVyVG9CeXRlc0xFID0gZXhwb3J0cy5udW1iZXJUb0J5dGVzQkUgPSBleHBvcnRzLmJ5dGVzVG9OdW1iZXJMRSA9IGV4cG9ydHMuYnl0ZXNUb051bWJlckJFID0gZXhwb3J0cy5oZXhUb0J5dGVzID0gZXhwb3J0cy5oZXhUb051bWJlciA9IGV4cG9ydHMubnVtYmVyVG9IZXhVbnBhZGRlZCA9IGV4cG9ydHMuYnl0ZXNUb0hleCA9IHZvaWQgMDtcbi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbi8vIDEwMCBsaW5lcyBvZiBjb2RlIGluIHRoZSBmaWxlIGFyZSBkdXBsaWNhdGVkIGZyb20gbm9ibGUtaGFzaGVzICh1dGlscykuXG4vLyBUaGlzIGlzIE9LOiBgYWJzdHJhY3RgIGRpcmVjdG9yeSBkb2VzIG5vdCB1c2Ugbm9ibGUtaGFzaGVzLlxuLy8gVXNlciBtYXkgb3B0LWluIGludG8gdXNpbmcgZGlmZmVyZW50IGhhc2hpbmcgbGlicmFyeS4gVGhpcyB3YXksIG5vYmxlLWhhc2hlc1xuLy8gd29uJ3QgYmUgaW5jbHVkZWQgaW50byB0aGVpciBidW5kbGUuXG5jb25zdCBfMG4gPSBCaWdJbnQoMCk7XG5jb25zdCBfMW4gPSBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSBCaWdJbnQoMik7XG5jb25zdCB1OGEgPSAoYSkgPT4gYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7XG5jb25zdCBoZXhlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAodiwgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4vKipcbiAqIEBleGFtcGxlIGJ5dGVzVG9IZXgoVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSkpIC8vICdjYWZlMDEyMydcbiAqL1xuZnVuY3Rpb24gYnl0ZXNUb0hleChieXRlcykge1xuICAgIGlmICghdThhKGJ5dGVzKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG4gICAgLy8gcHJlLWNhY2hpbmcgaW1wcm92ZXMgdGhlIHNwZWVkIDZ4XG4gICAgbGV0IGhleCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4ICs9IGhleGVzW2J5dGVzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbmV4cG9ydHMuYnl0ZXNUb0hleCA9IGJ5dGVzVG9IZXg7XG5mdW5jdGlvbiBudW1iZXJUb0hleFVucGFkZGVkKG51bSkge1xuICAgIGNvbnN0IGhleCA9IG51bS50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggJiAxID8gYDAke2hleH1gIDogaGV4O1xufVxuZXhwb3J0cy5udW1iZXJUb0hleFVucGFkZGVkID0gbnVtYmVyVG9IZXhVbnBhZGRlZDtcbmZ1bmN0aW9uIGhleFRvTnVtYmVyKGhleCkge1xuICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgJyArIHR5cGVvZiBoZXgpO1xuICAgIC8vIEJpZyBFbmRpYW5cbiAgICByZXR1cm4gQmlnSW50KGhleCA9PT0gJycgPyAnMCcgOiBgMHgke2hleH1gKTtcbn1cbmV4cG9ydHMuaGV4VG9OdW1iZXIgPSBoZXhUb051bWJlcjtcbi8qKlxuICogQGV4YW1wbGUgaGV4VG9CeXRlcygnY2FmZTAxMjMnKSAvLyBVaW50OEFycmF5LmZyb20oWzB4Y2EsIDB4ZmUsIDB4MDEsIDB4MjNdKVxuICovXG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleCkge1xuICAgIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgJyArIHR5cGVvZiBoZXgpO1xuICAgIGNvbnN0IGxlbiA9IGhleC5sZW5ndGg7XG4gICAgaWYgKGxlbiAlIDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncGFkZGVkIGhleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCB1bnBhZGRlZCBoZXggb2YgbGVuZ3RoICcgKyBsZW4pO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobGVuIC8gMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBqID0gaSAqIDI7XG4gICAgICAgIGNvbnN0IGhleEJ5dGUgPSBoZXguc2xpY2UoaiwgaiArIDIpO1xuICAgICAgICBjb25zdCBieXRlID0gTnVtYmVyLnBhcnNlSW50KGhleEJ5dGUsIDE2KTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihieXRlKSB8fCBieXRlIDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBieXRlIHNlcXVlbmNlJyk7XG4gICAgICAgIGFycmF5W2ldID0gYnl0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy5oZXhUb0J5dGVzID0gaGV4VG9CeXRlcztcbi8vIEJFOiBCaWcgRW5kaWFuLCBMRTogTGl0dGxlIEVuZGlhblxuZnVuY3Rpb24gYnl0ZXNUb051bWJlckJFKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGhleFRvTnVtYmVyKGJ5dGVzVG9IZXgoYnl0ZXMpKTtcbn1cbmV4cG9ydHMuYnl0ZXNUb051bWJlckJFID0gYnl0ZXNUb051bWJlckJFO1xuZnVuY3Rpb24gYnl0ZXNUb051bWJlckxFKGJ5dGVzKSB7XG4gICAgaWYgKCF1OGEoYnl0ZXMpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgICByZXR1cm4gaGV4VG9OdW1iZXIoYnl0ZXNUb0hleChVaW50OEFycmF5LmZyb20oYnl0ZXMpLnJldmVyc2UoKSkpO1xufVxuZXhwb3J0cy5ieXRlc1RvTnVtYmVyTEUgPSBieXRlc1RvTnVtYmVyTEU7XG5mdW5jdGlvbiBudW1iZXJUb0J5dGVzQkUobiwgbGVuKSB7XG4gICAgcmV0dXJuIGhleFRvQnl0ZXMobi50b1N0cmluZygxNikucGFkU3RhcnQobGVuICogMiwgJzAnKSk7XG59XG5leHBvcnRzLm51bWJlclRvQnl0ZXNCRSA9IG51bWJlclRvQnl0ZXNCRTtcbmZ1bmN0aW9uIG51bWJlclRvQnl0ZXNMRShuLCBsZW4pIHtcbiAgICByZXR1cm4gbnVtYmVyVG9CeXRlc0JFKG4sIGxlbikucmV2ZXJzZSgpO1xufVxuZXhwb3J0cy5udW1iZXJUb0J5dGVzTEUgPSBudW1iZXJUb0J5dGVzTEU7XG4vLyBVbnBhZGRlZCwgcmFyZWx5IHVzZWRcbmZ1bmN0aW9uIG51bWJlclRvVmFyQnl0ZXNCRShuKSB7XG4gICAgcmV0dXJuIGhleFRvQnl0ZXMobnVtYmVyVG9IZXhVbnBhZGRlZChuKSk7XG59XG5leHBvcnRzLm51bWJlclRvVmFyQnl0ZXNCRSA9IG51bWJlclRvVmFyQnl0ZXNCRTtcbi8qKlxuICogVGFrZXMgaGV4IHN0cmluZyBvciBVaW50OEFycmF5LCBjb252ZXJ0cyB0byBVaW50OEFycmF5LlxuICogVmFsaWRhdGVzIG91dHB1dCBsZW5ndGguXG4gKiBXaWxsIHRocm93IGVycm9yIGZvciBvdGhlciB0eXBlcy5cbiAqIEBwYXJhbSB0aXRsZSBkZXNjcmlwdGl2ZSB0aXRsZSBmb3IgYW4gZXJyb3IgZS5nLiAncHJpdmF0ZSBrZXknXG4gKiBAcGFyYW0gaGV4IGhleCBzdHJpbmcgb3IgVWludDhBcnJheVxuICogQHBhcmFtIGV4cGVjdGVkTGVuZ3RoIG9wdGlvbmFsLCB3aWxsIGNvbXBhcmUgdG8gcmVzdWx0IGFycmF5J3MgbGVuZ3RoXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBlbnN1cmVCeXRlcyh0aXRsZSwgaGV4LCBleHBlY3RlZExlbmd0aCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXMgPSBoZXhUb0J5dGVzKGhleCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aXRsZX0gbXVzdCBiZSB2YWxpZCBoZXggc3RyaW5nLCBnb3QgXCIke2hleH1cIi4gQ2F1c2U6ICR7ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh1OGEoaGV4KSkge1xuICAgICAgICAvLyBVaW50OEFycmF5LmZyb20oKSBpbnN0ZWFkIG9mIGhhc2guc2xpY2UoKSBiZWNhdXNlIG5vZGUuanMgQnVmZmVyXG4gICAgICAgIC8vIGlzIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXksIGFuZCBpdHMgc2xpY2UoKSBjcmVhdGVzICoqbXV0YWJsZSoqIGNvcHlcbiAgICAgICAgcmVzID0gVWludDhBcnJheS5mcm9tKGhleCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGl0bGV9IG11c3QgYmUgaGV4IHN0cmluZyBvciBVaW50OEFycmF5YCk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IHJlcy5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBleHBlY3RlZExlbmd0aCA9PT0gJ251bWJlcicgJiYgbGVuICE9PSBleHBlY3RlZExlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RpdGxlfSBleHBlY3RlZCAke2V4cGVjdGVkTGVuZ3RofSBieXRlcywgZ290ICR7bGVufWApO1xuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmVuc3VyZUJ5dGVzID0gZW5zdXJlQnl0ZXM7XG4vKipcbiAqIENvcGllcyBzZXZlcmFsIFVpbnQ4QXJyYXlzIGludG8gb25lLlxuICovXG5mdW5jdGlvbiBjb25jYXRCeXRlcyguLi5hcnJheXMpIHtcbiAgICBjb25zdCByID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlzLnJlZHVjZSgoc3VtLCBhKSA9PiBzdW0gKyBhLmxlbmd0aCwgMCkpO1xuICAgIGxldCBwYWQgPSAwOyAvLyB3YWxrIHRocm91Z2ggZWFjaCBpdGVtLCBlbnN1cmUgdGhleSBoYXZlIHByb3BlciB0eXBlXG4gICAgYXJyYXlzLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgaWYgKCF1OGEoYSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgICAgICAgci5zZXQoYSwgcGFkKTtcbiAgICAgICAgcGFkICs9IGEubGVuZ3RoO1xuICAgIH0pO1xuICAgIHJldHVybiByO1xufVxuZXhwb3J0cy5jb25jYXRCeXRlcyA9IGNvbmNhdEJ5dGVzO1xuZnVuY3Rpb24gZXF1YWxCeXRlcyhiMSwgYjIpIHtcbiAgICAvLyBXZSBkb24ndCBjYXJlIGFib3V0IHRpbWluZyBhdHRhY2tzIGhlcmVcbiAgICBpZiAoYjEubGVuZ3RoICE9PSBiMi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGIxLmxlbmd0aDsgaSsrKVxuICAgICAgICBpZiAoYjFbaV0gIT09IGIyW2ldKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5lcXVhbEJ5dGVzID0gZXF1YWxCeXRlcztcbi8qKlxuICogQGV4YW1wbGUgdXRmOFRvQnl0ZXMoJ2FiYycpIC8vIG5ldyBVaW50OEFycmF5KFs5NywgOTgsIDk5XSlcbiAqL1xuZnVuY3Rpb24gdXRmOFRvQnl0ZXMoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHV0ZjhUb0J5dGVzIGV4cGVjdGVkIHN0cmluZywgZ290ICR7dHlwZW9mIHN0cn1gKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cikpOyAvLyBodHRwczovL2J1Z3ppbC5sYS8xNjgxODA5XG59XG5leHBvcnRzLnV0ZjhUb0J5dGVzID0gdXRmOFRvQnl0ZXM7XG4vLyBCaXQgb3BlcmF0aW9uc1xuLyoqXG4gKiBDYWxjdWxhdGVzIGFtb3VudCBvZiBiaXRzIGluIGEgYmlnaW50LlxuICogU2FtZSBhcyBgbi50b1N0cmluZygyKS5sZW5ndGhgXG4gKi9cbmZ1bmN0aW9uIGJpdExlbihuKSB7XG4gICAgbGV0IGxlbjtcbiAgICBmb3IgKGxlbiA9IDA7IG4gPiBfMG47IG4gPj49IF8xbiwgbGVuICs9IDEpXG4gICAgICAgIDtcbiAgICByZXR1cm4gbGVuO1xufVxuZXhwb3J0cy5iaXRMZW4gPSBiaXRMZW47XG4vKipcbiAqIEdldHMgc2luZ2xlIGJpdCBhdCBwb3NpdGlvbi5cbiAqIE5PVEU6IGZpcnN0IGJpdCBwb3NpdGlvbiBpcyAwIChzYW1lIGFzIGFycmF5cylcbiAqIFNhbWUgYXMgYCEhK0FycmF5LmZyb20obi50b1N0cmluZygyKSkucmV2ZXJzZSgpW3Bvc11gXG4gKi9cbmZ1bmN0aW9uIGJpdEdldChuLCBwb3MpIHtcbiAgICByZXR1cm4gKG4gPj4gQmlnSW50KHBvcykpICYgXzFuO1xufVxuZXhwb3J0cy5iaXRHZXQgPSBiaXRHZXQ7XG4vKipcbiAqIFNldHMgc2luZ2xlIGJpdCBhdCBwb3NpdGlvbi5cbiAqL1xuY29uc3QgYml0U2V0ID0gKG4sIHBvcywgdmFsdWUpID0+IHtcbiAgICByZXR1cm4gbiB8ICgodmFsdWUgPyBfMW4gOiBfMG4pIDw8IEJpZ0ludChwb3MpKTtcbn07XG5leHBvcnRzLmJpdFNldCA9IGJpdFNldDtcbi8qKlxuICogQ2FsY3VsYXRlIG1hc2sgZm9yIE4gYml0cy4gTm90IHVzaW5nICoqIG9wZXJhdG9yIHdpdGggYmlnaW50cyBiZWNhdXNlIG9mIG9sZCBlbmdpbmVzLlxuICogU2FtZSBhcyBCaWdJbnQoYDBiJHtBcnJheShpKS5maWxsKCcxJykuam9pbignJyl9YClcbiAqL1xuY29uc3QgYml0TWFzayA9IChuKSA9PiAoXzJuIDw8IEJpZ0ludChuIC0gMSkpIC0gXzFuO1xuZXhwb3J0cy5iaXRNYXNrID0gYml0TWFzaztcbi8vIERSQkdcbmNvbnN0IHU4biA9IChkYXRhKSA9PiBuZXcgVWludDhBcnJheShkYXRhKTsgLy8gY3JlYXRlcyBVaW50OEFycmF5XG5jb25zdCB1OGZyID0gKGFycikgPT4gVWludDhBcnJheS5mcm9tKGFycik7IC8vIGFub3RoZXIgc2hvcnRjdXRcbi8qKlxuICogTWluaW1hbCBITUFDLURSQkcgZnJvbSBOSVNUIDgwMC05MCBmb3IgUkZDNjk3OSBzaWdzLlxuICogQHJldHVybnMgZnVuY3Rpb24gdGhhdCB3aWxsIGNhbGwgRFJCRyB1bnRpbCAybmQgYXJnIHJldHVybnMgc29tZXRoaW5nIG1lYW5pbmdmdWxcbiAqIEBleGFtcGxlXG4gKiAgIGNvbnN0IGRyYmcgPSBjcmVhdGVIbWFjRFJCRzxLZXk+KDMyLCAzMiwgaG1hYyk7XG4gKiAgIGRyYmcoc2VlZCwgYnl0ZXNUb0tleSk7IC8vIGJ5dGVzVG9LZXkgbXVzdCByZXR1cm4gS2V5IG9yIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBjcmVhdGVIbWFjRHJiZyhoYXNoTGVuLCBxQnl0ZUxlbiwgaG1hY0ZuKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoTGVuICE9PSAnbnVtYmVyJyB8fCBoYXNoTGVuIDwgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYXNoTGVuIG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAodHlwZW9mIHFCeXRlTGVuICE9PSAnbnVtYmVyJyB8fCBxQnl0ZUxlbiA8IDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncUJ5dGVMZW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIGlmICh0eXBlb2YgaG1hY0ZuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2htYWNGbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAvLyBTdGVwIEIsIFN0ZXAgQzogc2V0IGhhc2hMZW4gdG8gOCpjZWlsKGhsZW4vOClcbiAgICBsZXQgdiA9IHU4bihoYXNoTGVuKTsgLy8gTWluaW1hbCBub24tZnVsbC1zcGVjIEhNQUMtRFJCRyBmcm9tIE5JU1QgODAwLTkwIGZvciBSRkM2OTc5IHNpZ3MuXG4gICAgbGV0IGsgPSB1OG4oaGFzaExlbik7IC8vIFN0ZXBzIEIgYW5kIEMgb2YgUkZDNjk3OSAzLjI6IHNldCBoYXNoTGVuLCBpbiBvdXIgY2FzZSBhbHdheXMgc2FtZVxuICAgIGxldCBpID0gMDsgLy8gSXRlcmF0aW9ucyBjb3VudGVyLCB3aWxsIHRocm93IHdoZW4gb3ZlciAxMDAwXG4gICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICAgIHYuZmlsbCgxKTtcbiAgICAgICAgay5maWxsKDApO1xuICAgICAgICBpID0gMDtcbiAgICB9O1xuICAgIGNvbnN0IGggPSAoLi4uYikgPT4gaG1hY0ZuKGssIHYsIC4uLmIpOyAvLyBobWFjKGspKHYsIC4uLnZhbHVlcylcbiAgICBjb25zdCByZXNlZWQgPSAoc2VlZCA9IHU4bigpKSA9PiB7XG4gICAgICAgIC8vIEhNQUMtRFJCRyByZXNlZWQoKSBmdW5jdGlvbi4gU3RlcHMgRC1HXG4gICAgICAgIGsgPSBoKHU4ZnIoWzB4MDBdKSwgc2VlZCk7IC8vIGsgPSBobWFjKGsgfHwgdiB8fCAweDAwIHx8IHNlZWQpXG4gICAgICAgIHYgPSBoKCk7IC8vIHYgPSBobWFjKGsgfHwgdilcbiAgICAgICAgaWYgKHNlZWQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBrID0gaCh1OGZyKFsweDAxXSksIHNlZWQpOyAvLyBrID0gaG1hYyhrIHx8IHYgfHwgMHgwMSB8fCBzZWVkKVxuICAgICAgICB2ID0gaCgpOyAvLyB2ID0gaG1hYyhrIHx8IHYpXG4gICAgfTtcbiAgICBjb25zdCBnZW4gPSAoKSA9PiB7XG4gICAgICAgIC8vIEhNQUMtRFJCRyBnZW5lcmF0ZSgpIGZ1bmN0aW9uXG4gICAgICAgIGlmIChpKysgPj0gMTAwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZHJiZzogdHJpZWQgMTAwMCB2YWx1ZXMnKTtcbiAgICAgICAgbGV0IGxlbiA9IDA7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICB3aGlsZSAobGVuIDwgcUJ5dGVMZW4pIHtcbiAgICAgICAgICAgIHYgPSBoKCk7XG4gICAgICAgICAgICBjb25zdCBzbCA9IHYuc2xpY2UoKTtcbiAgICAgICAgICAgIG91dC5wdXNoKHNsKTtcbiAgICAgICAgICAgIGxlbiArPSB2Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoLi4ub3V0KTtcbiAgICB9O1xuICAgIGNvbnN0IGdlblVudGlsID0gKHNlZWQsIHByZWQpID0+IHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgcmVzZWVkKHNlZWQpOyAvLyBTdGVwcyBELUdcbiAgICAgICAgbGV0IHJlcyA9IHVuZGVmaW5lZDsgLy8gU3RlcCBIOiBncmluZCB1bnRpbCBrIGlzIGluIFsxLi5uLTFdXG4gICAgICAgIHdoaWxlICghKHJlcyA9IHByZWQoZ2VuKCkpKSlcbiAgICAgICAgICAgIHJlc2VlZCgpO1xuICAgICAgICByZXNldCgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgcmV0dXJuIGdlblVudGlsO1xufVxuZXhwb3J0cy5jcmVhdGVIbWFjRHJiZyA9IGNyZWF0ZUhtYWNEcmJnO1xuLy8gVmFsaWRhdGluZyBjdXJ2ZXMgYW5kIGZpZWxkc1xuY29uc3QgdmFsaWRhdG9yRm5zID0ge1xuICAgIGJpZ2ludDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2JpZ2ludCcsXG4gICAgZnVuY3Rpb246ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicsXG4gICAgYm9vbGVhbjogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nLFxuICAgIHN0cmluZzogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycsXG4gICAgaXNTYWZlSW50ZWdlcjogKHZhbCkgPT4gTnVtYmVyLmlzU2FmZUludGVnZXIodmFsKSxcbiAgICBhcnJheTogKHZhbCkgPT4gQXJyYXkuaXNBcnJheSh2YWwpLFxuICAgIGZpZWxkOiAodmFsLCBvYmplY3QpID0+IG9iamVjdC5GcC5pc1ZhbGlkKHZhbCksXG4gICAgaGFzaDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcih2YWwub3V0cHV0TGVuKSxcbn07XG4vLyB0eXBlIFJlY29yZDxLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCBUPiA9IHsgW1AgaW4gS106IFQ7IH1cbmZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KG9iamVjdCwgdmFsaWRhdG9ycywgb3B0VmFsaWRhdG9ycyA9IHt9KSB7XG4gICAgY29uc3QgY2hlY2tGaWVsZCA9IChmaWVsZE5hbWUsIHR5cGUsIGlzT3B0aW9uYWwpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tWYWwgPSB2YWxpZGF0b3JGbnNbdHlwZV07XG4gICAgICAgIGlmICh0eXBlb2YgY2hlY2tWYWwgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsaWRhdG9yIFwiJHt0eXBlfVwiLCBleHBlY3RlZCBmdW5jdGlvbmApO1xuICAgICAgICBjb25zdCB2YWwgPSBvYmplY3RbZmllbGROYW1lXTtcbiAgICAgICAgaWYgKGlzT3B0aW9uYWwgJiYgdmFsID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghY2hlY2tWYWwodmFsLCBvYmplY3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGFyYW0gJHtTdHJpbmcoZmllbGROYW1lKX09JHt2YWx9ICgke3R5cGVvZiB2YWx9KSwgZXhwZWN0ZWQgJHt0eXBlfWApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IFtmaWVsZE5hbWUsIHR5cGVdIG9mIE9iamVjdC5lbnRyaWVzKHZhbGlkYXRvcnMpKVxuICAgICAgICBjaGVja0ZpZWxkKGZpZWxkTmFtZSwgdHlwZSwgZmFsc2UpO1xuICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgdHlwZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0VmFsaWRhdG9ycykpXG4gICAgICAgIGNoZWNrRmllbGQoZmllbGROYW1lLCB0eXBlLCB0cnVlKTtcbiAgICByZXR1cm4gb2JqZWN0O1xufVxuZXhwb3J0cy52YWxpZGF0ZU9iamVjdCA9IHZhbGlkYXRlT2JqZWN0O1xuLy8gdmFsaWRhdGUgdHlwZSB0ZXN0c1xuLy8gY29uc3QgbzogeyBhOiBudW1iZXI7IGI6IG51bWJlcjsgYzogbnVtYmVyIH0gPSB7IGE6IDEsIGI6IDUsIGM6IDYgfTtcbi8vIGNvbnN0IHowID0gdmFsaWRhdGVPYmplY3QobywgeyBhOiAnaXNTYWZlSW50ZWdlcicgfSwgeyBjOiAnYmlnaW50JyB9KTsgLy8gT2shXG4vLyAvLyBTaG91bGQgZmFpbCB0eXBlLWNoZWNrXG4vLyBjb25zdCB6MSA9IHZhbGlkYXRlT2JqZWN0KG8sIHsgYTogJ3RtcCcgfSwgeyBjOiAnenonIH0pO1xuLy8gY29uc3QgejIgPSB2YWxpZGF0ZU9iamVjdChvLCB7IGE6ICdpc1NhZmVJbnRlZ2VyJyB9LCB7IGM6ICd6eicgfSk7XG4vLyBjb25zdCB6MyA9IHZhbGlkYXRlT2JqZWN0KG8sIHsgdGVzdDogJ2Jvb2xlYW4nLCB6OiAnYnVnJyB9KTtcbi8vIGNvbnN0IHo0ID0gdmFsaWRhdGVPYmplY3QobywgeyBhOiAnYm9vbGVhbicsIHo6ICdidWcnIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/weierstrass.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/weierstrass.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nconst mod = __webpack_require__(/*! ./modular.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js\");\nconst ut = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\");\nconst curve_js_1 = __webpack_require__(/*! ./curve.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/curve.js\");\nfunction validatePointOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexports.DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = exports.DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = exports.DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((c, point, isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            // Zero is valid point too!\n            if (this.is0()) {\n                if (CURVE.allowInfinityPoint)\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nexports.weierstrassPoints = weierstrassPoints;\nfunction validateOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return exports.DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size (nBitLength+64)\n         * as per FIPS 186 B.4.1 with modulo bias being neglible.\n         */\n        randomPrivateKey: () => {\n            const rand = CURVE.randomBytes(Fp.BYTES + 8);\n            const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n            return ut.numberToBytesBE(num, CURVE.nByteLength);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof exports.DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\nexports.weierstrass = weierstrass;\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n//# sourceMappingURL=weierstrass.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/weierstrass.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/curves/secp256k1.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/curves/secp256k1.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\nconst modular_js_1 = __webpack_require__(/*! ./abstract/modular.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/modular.js\");\nconst weierstrass_js_1 = __webpack_require__(/*! ./abstract/weierstrass.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/weierstrass.js\");\nconst utils_js_1 = __webpack_require__(/*! ./abstract/utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/utils.js\");\nconst hash_to_curve_js_1 = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/abstract/hash-to-curve.js\");\nconst _shortw_utils_js_1 = __webpack_require__(/*! ./_shortw_utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/_shortw_utils.js\");\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0, modular_js_1.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0, modular_js_1.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0, modular_js_1.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0, modular_js_1.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0, modular_js_1.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0, modular_js_1.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0, modular_js_1.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0, modular_js_1.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0, modular_js_1.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0, modular_js_1.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0, modular_js_1.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0, modular_js_1.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256_1.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);\nconst modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);\nconst modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);\nconst Point = exports.secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {\n    const m = (0, utils_js_1.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n    const m = (0, utils_js_1.ensureBytes)('message', message);\n    const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexports.schnorr = (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: utils_js_1.numberToBytesBE,\n        bytesToNumberBE: utils_js_1.bytesToNumberBE,\n        taggedHash,\n        mod: modular_js_1.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256_1.sha256,\n}))();\nexports.hashToCurve = (() => htf.hashToCurve)();\nexports.encodeToCurve = (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/curves/secp256k1.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports[\"default\"] = assert;\n//# sourceMappingURL=_assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL19hc3NlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLGNBQWMsR0FBRyxZQUFZLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRyxjQUFjO0FBQzlGO0FBQ0E7QUFDQSxtREFBbUQsRUFBRTtBQUNyRDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsUUFBUSxrQkFBa0IsU0FBUztBQUM1RjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLElBQUk7QUFDckY7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL19hc3NlcnQuanM/Y2UyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3V0cHV0ID0gZXhwb3J0cy5leGlzdHMgPSBleHBvcnRzLmhhc2ggPSBleHBvcnRzLmJ5dGVzID0gZXhwb3J0cy5ib29sID0gZXhwb3J0cy5udW1iZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV3JvbmcgcG9zaXRpdmUgaW50ZWdlcjogJHtufWApO1xufVxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG5mdW5jdGlvbiBib29sKGIpIHtcbiAgICBpZiAodHlwZW9mIGIgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBib29sZWFuLCBub3QgJHtifWApO1xufVxuZXhwb3J0cy5ib29sID0gYm9vbDtcbmZ1bmN0aW9uIGJ5dGVzKGIsIC4uLmxlbmd0aHMpIHtcbiAgICBpZiAoIShiIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpO1xuICAgIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYi5sZW5ndGgpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFVpbnQ4QXJyYXkgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiLmxlbmd0aH1gKTtcbn1cbmV4cG9ydHMuYnl0ZXMgPSBieXRlcztcbmZ1bmN0aW9uIGhhc2goaGFzaCkge1xuICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaGFzaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBudW1iZXIoaGFzaC5vdXRwdXRMZW4pO1xuICAgIG51bWJlcihoYXNoLmJsb2NrTGVuKTtcbn1cbmV4cG9ydHMuaGFzaCA9IGhhc2g7XG5mdW5jdGlvbiBleGlzdHMoaW5zdGFuY2UsIGNoZWNrRmluaXNoZWQgPSB0cnVlKSB7XG4gICAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCcpO1xuICAgIGlmIChjaGVja0ZpbmlzaGVkICYmIGluc3RhbmNlLmZpbmlzaGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQnKTtcbn1cbmV4cG9ydHMuZXhpc3RzID0gZXhpc3RzO1xuZnVuY3Rpb24gb3V0cHV0KG91dCwgaW5zdGFuY2UpIHtcbiAgICBieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICAgIH1cbn1cbmV4cG9ydHMub3V0cHV0ID0gb3V0cHV0O1xuY29uc3QgYXNzZXJ0ID0ge1xuICAgIG51bWJlcixcbiAgICBib29sLFxuICAgIGJ5dGVzLFxuICAgIGhhc2gsXG4gICAgZXhpc3RzLFxuICAgIG91dHB1dCxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXNzZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_sha2.js":
/*!********************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_sha2.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SHA2 = void 0;\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL19zaGEyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWixxQkFBcUIsbUJBQU8sQ0FBQyxnR0FBYztBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DLGNBQWMsTUFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQXFEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL19zaGEyLmpzPzQxYjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNIQTIgPSB2b2lkIDA7XG5jb25zdCBfYXNzZXJ0X2pzXzEgPSByZXF1aXJlKFwiLi9fYXNzZXJ0LmpzXCIpO1xuY29uc3QgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuLy8gUG9seWZpbGwgZm9yIFNhZmFyaSAxNFxuZnVuY3Rpb24gc2V0QmlnVWludDY0KHZpZXcsIGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKSB7XG4gICAgaWYgKHR5cGVvZiB2aWV3LnNldEJpZ1VpbnQ2NCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHZpZXcuc2V0QmlnVWludDY0KGJ5dGVPZmZzZXQsIHZhbHVlLCBpc0xFKTtcbiAgICBjb25zdCBfMzJuID0gQmlnSW50KDMyKTtcbiAgICBjb25zdCBfdTMyX21heCA9IEJpZ0ludCgweGZmZmZmZmZmKTtcbiAgICBjb25zdCB3aCA9IE51bWJlcigodmFsdWUgPj4gXzMybikgJiBfdTMyX21heCk7XG4gICAgY29uc3Qgd2wgPSBOdW1iZXIodmFsdWUgJiBfdTMyX21heCk7XG4gICAgY29uc3QgaCA9IGlzTEUgPyA0IDogMDtcbiAgICBjb25zdCBsID0gaXNMRSA/IDAgOiA0O1xuICAgIHZpZXcuc2V0VWludDMyKGJ5dGVPZmZzZXQgKyBoLCB3aCwgaXNMRSk7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGwsIHdsLCBpc0xFKTtcbn1cbi8vIEJhc2UgU0hBMiBjbGFzcyAoUkZDIDYyMzQpXG5jbGFzcyBTSEEyIGV4dGVuZHMgdXRpbHNfanNfMS5IYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSAoMCwgdXRpbHNfanNfMS5jcmVhdGVWaWV3KSh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIF9hc3NlcnRfanNfMS5kZWZhdWx0LmV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gKDAsIHV0aWxzX2pzXzEudG9CeXRlcykoZGF0YSk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBsZW47KSB7XG4gICAgICAgICAgICBjb25zdCB0YWtlID0gTWF0aC5taW4oYmxvY2tMZW4gLSB0aGlzLnBvcywgbGVuIC0gcG9zKTtcbiAgICAgICAgICAgIC8vIEZhc3QgcGF0aDogd2UgaGF2ZSBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gaW5wdXQsIGNhc3QgaXQgdG8gdmlldyBhbmQgcHJvY2Vzc1xuICAgICAgICAgICAgaWYgKHRha2UgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVZpZXcgPSAoMCwgdXRpbHNfanNfMS5jcmVhdGVWaWV3KShkYXRhKTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgYmxvY2tMZW4gPD0gbGVuIC0gcG9zOyBwb3MgKz0gYmxvY2tMZW4pXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyhkYXRhVmlldywgcG9zKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlci5zZXQoZGF0YS5zdWJhcnJheShwb3MsIHBvcyArIHRha2UpLCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSB0YWtlO1xuICAgICAgICAgICAgcG9zICs9IHRha2U7XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCArPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yb3VuZENsZWFuKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBfYXNzZXJ0X2pzXzEuZGVmYXVsdC5leGlzdHModGhpcyk7XG4gICAgICAgIF9hc3NlcnRfanNfMS5kZWZhdWx0Lm91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpbiBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gKDAsIHV0aWxzX2pzXzEuY3JlYXRlVmlldykob3V0KTtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5vdXRwdXRMZW47XG4gICAgICAgIC8vIE5PVEU6IHdlIGRvIGRpdmlzaW9uIGJ5IDQgbGF0ZXIsIHdoaWNoIHNob3VsZCBiZSBmdXNlZCBpbiBzaW5nbGUgb3Agd2l0aCBtb2R1bG8gYnkgSklUXG4gICAgICAgIGlmIChsZW4gJSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIHNob3VsZCBiZSBhbGlnbmVkIHRvIDMyYml0Jyk7XG4gICAgICAgIGNvbnN0IG91dExlbiA9IGxlbiAvIDQ7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgaWYgKG91dExlbiA+IHN0YXRlLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignX3NoYTI6IG91dHB1dExlbiBiaWdnZXIgdGhhbiBzdGF0ZScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dExlbjsgaSsrKVxuICAgICAgICAgICAgb3ZpZXcuc2V0VWludDMyKDQgKiBpLCBzdGF0ZVtpXSwgaXNMRSk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKGJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJ1ZmZlci5zbGljZSgwLCBvdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICB0byB8fCAodG8gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpKTtcbiAgICAgICAgdG8uc2V0KC4uLnRoaXMuZ2V0KCkpO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBidWZmZXIsIGxlbmd0aCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgcG9zIH0gPSB0aGlzO1xuICAgICAgICB0by5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRvLnBvcyA9IHBvcztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICBpZiAobGVuZ3RoICUgYmxvY2tMZW4pXG4gICAgICAgICAgICB0by5idWZmZXIuc2V0KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG59XG5leHBvcnRzLlNIQTIgPSBTSEEyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3NoYTIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_sha2.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports[\"default\"] = u64;\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL191NjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVyxHQUFHLGFBQWEsR0FBRyxhQUFhLEdBQUcsZUFBZTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvX3U2NC5qcz8wYmFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hZGQgPSBleHBvcnRzLnRvQmlnID0gZXhwb3J0cy5zcGxpdCA9IGV4cG9ydHMuZnJvbUJpZyA9IHZvaWQgMDtcbmNvbnN0IFUzMl9NQVNLNjQgPSBCaWdJbnQoMiAqKiAzMiAtIDEpO1xuY29uc3QgXzMybiA9IEJpZ0ludCgzMik7XG4vLyBXZSBhcmUgbm90IHVzaW5nIEJpZ1VpbnQ2NEFycmF5LCBiZWNhdXNlIHRoZXkgYXJlIGV4dHJlbWVseSBzbG93IGFzIHBlciAyMDIyXG5mdW5jdGlvbiBmcm9tQmlnKG4sIGxlID0gZmFsc2UpIHtcbiAgICBpZiAobGUpXG4gICAgICAgIHJldHVybiB7IGg6IE51bWJlcihuICYgVTMyX01BU0s2NCksIGw6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIH07XG4gICAgcmV0dXJuIHsgaDogTnVtYmVyKChuID4+IF8zMm4pICYgVTMyX01BU0s2NCkgfCAwLCBsOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpIHwgMCB9O1xufVxuZXhwb3J0cy5mcm9tQmlnID0gZnJvbUJpZztcbmZ1bmN0aW9uIHNwbGl0KGxzdCwgbGUgPSBmYWxzZSkge1xuICAgIGxldCBBaCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBoLCBsIH0gPSBmcm9tQmlnKGxzdFtpXSwgbGUpO1xuICAgICAgICBbQWhbaV0sIEFsW2ldXSA9IFtoLCBsXTtcbiAgICB9XG4gICAgcmV0dXJuIFtBaCwgQWxdO1xufVxuZXhwb3J0cy5zcGxpdCA9IHNwbGl0O1xuY29uc3QgdG9CaWcgPSAoaCwgbCkgPT4gKEJpZ0ludChoID4+PiAwKSA8PCBfMzJuKSB8IEJpZ0ludChsID4+PiAwKTtcbmV4cG9ydHMudG9CaWcgPSB0b0JpZztcbi8vIGZvciBTaGlmdCBpbiBbMCwgMzIpXG5jb25zdCBzaHJTSCA9IChoLCBsLCBzKSA9PiBoID4+PiBzO1xuY29uc3Qgc2hyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXG5jb25zdCByb3RyU0ggPSAoaCwgbCwgcykgPT4gKGggPj4+IHMpIHwgKGwgPDwgKDMyIC0gcykpO1xuY29uc3Qgcm90clNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gKDMyLCA2NCksIE5PVEU6IDMyIGlzIHNwZWNpYWwgY2FzZS5cbmNvbnN0IHJvdHJCSCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoNjQgLSBzKSkgfCAobCA+Pj4gKHMgLSAzMikpO1xuY29uc3Qgcm90ckJMID0gKGgsIGwsIHMpID0+IChoID4+PiAocyAtIDMyKSkgfCAobCA8PCAoNjQgLSBzKSk7XG4vLyBSaWdodCByb3RhdGUgZm9yIHNoaWZ0PT09MzIgKGp1c3Qgc3dhcHMgbCZoKVxuY29uc3Qgcm90cjMySCA9IChoLCBsKSA9PiBsO1xuY29uc3Qgcm90cjMyTCA9IChoLCBsKSA9PiBoO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XG5jb25zdCByb3RsU0wgPSAoaCwgbCwgcykgPT4gKGwgPDwgcykgfCAoaCA+Pj4gKDMyIC0gcykpO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RsQkggPSAoaCwgbCwgcykgPT4gKGwgPDwgKHMgLSAzMikpIHwgKGggPj4+ICg2NCAtIHMpKTtcbmNvbnN0IHJvdGxCTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAocyAtIDMyKSkgfCAobCA+Pj4gKDY0IC0gcykpO1xuLy8gSlMgdXNlcyAzMi1iaXQgc2lnbmVkIGludGVnZXJzIGZvciBiaXR3aXNlIG9wZXJhdGlvbnMgd2hpY2ggbWVhbnMgd2UgY2Fubm90XG4vLyBzaW1wbGUgdGFrZSBjYXJyeSBvdXQgb2YgbG93IGJpdCBzdW0gYnkgc2hpZnQsIHdlIG5lZWQgdG8gdXNlIGRpdmlzaW9uLlxuLy8gUmVtb3ZpbmcgXCJleHBvcnRcIiBoYXMgNSUgcGVyZiBwZW5hbHR5IC1fLVxuZnVuY3Rpb24gYWRkKEFoLCBBbCwgQmgsIEJsKSB7XG4gICAgY29uc3QgbCA9IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApO1xuICAgIHJldHVybiB7IGg6IChBaCArIEJoICsgKChsIC8gMiAqKiAzMikgfCAwKSkgfCAwLCBsOiBsIHwgMCB9O1xufVxuZXhwb3J0cy5hZGQgPSBhZGQ7XG4vLyBBZGRpdGlvbiB3aXRoIG1vcmUgdGhhbiAyIGVsZW1lbnRzXG5jb25zdCBhZGQzTCA9IChBbCwgQmwsIENsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCk7XG5jb25zdCBhZGQzSCA9IChsb3csIEFoLCBCaCwgQ2gpID0+IChBaCArIEJoICsgQ2ggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmNvbnN0IGFkZDRMID0gKEFsLCBCbCwgQ2wsIERsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApO1xuY29uc3QgYWRkNEggPSAobG93LCBBaCwgQmgsIENoLCBEaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ1TCA9IChBbCwgQmwsIENsLCBEbCwgRWwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCkgKyAoRWwgPj4+IDApO1xuY29uc3QgYWRkNUggPSAobG93LCBBaCwgQmgsIENoLCBEaCwgRWgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArIEVoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IHU2NCA9IHtcbiAgICBmcm9tQmlnLCBzcGxpdCwgdG9CaWc6IGV4cG9ydHMudG9CaWcsXG4gICAgc2hyU0gsIHNoclNMLFxuICAgIHJvdHJTSCwgcm90clNMLCByb3RyQkgsIHJvdHJCTCxcbiAgICByb3RyMzJILCByb3RyMzJMLFxuICAgIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCxcbiAgICBhZGQsIGFkZDNMLCBhZGQzSCwgYWRkNEwsIGFkZDRILCBhZGQ1SCwgYWRkNUwsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gdTY0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3U2NC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/crypto.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/crypto.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.crypto = void 0;\nexports.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvY3J5cHRvLmpzPzgzYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyeXB0byA9IHZvaWQgMDtcbmV4cG9ydHMuY3J5cHRvID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnICYmICdjcnlwdG8nIGluIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzLmNyeXB0byA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/crypto.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/hmac.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/hmac.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmac = exports.HMAC = void 0;\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2htYWMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWSxHQUFHLFlBQVk7QUFDM0IscUJBQXFCLG1CQUFPLENBQUMsZ0dBQWM7QUFDM0MsbUJBQW1CLG1CQUFPLENBQUMsNEZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakUsZ0JBQWdCLHlEQUF5RDtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1jcnlwdG9ncmFwaHkvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvaG1hYy5qcz85NGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5obWFjID0gZXhwb3J0cy5ITUFDID0gdm9pZCAwO1xuY29uc3QgX2Fzc2VydF9qc18xID0gcmVxdWlyZShcIi4vX2Fzc2VydC5qc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbi8vIEhNQUMgKFJGQyAyMTA0KVxuY2xhc3MgSE1BQyBleHRlbmRzIHV0aWxzX2pzXzEuSGFzaCB7XG4gICAgY29uc3RydWN0b3IoaGFzaCwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIF9hc3NlcnRfanNfMS5kZWZhdWx0Lmhhc2goaGFzaCk7XG4gICAgICAgIGNvbnN0IGtleSA9ICgwLCB1dGlsc19qc18xLnRvQnl0ZXMpKF9rZXkpO1xuICAgICAgICB0aGlzLmlIYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmlIYXNoLnVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgaW5zdGFuY2Ugb2YgY2xhc3Mgd2hpY2ggZXh0ZW5kcyB1dGlscy5IYXNoJyk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW4gPSB0aGlzLmlIYXNoLmJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IHRoaXMuaUhhc2gub3V0cHV0TGVuO1xuICAgICAgICBjb25zdCBibG9ja0xlbiA9IHRoaXMuYmxvY2tMZW47XG4gICAgICAgIGNvbnN0IHBhZCA9IG5ldyBVaW50OEFycmF5KGJsb2NrTGVuKTtcbiAgICAgICAgLy8gYmxvY2tMZW4gY2FuIGJlIGJpZ2dlciB0aGFuIG91dHB1dExlblxuICAgICAgICBwYWQuc2V0KGtleS5sZW5ndGggPiBibG9ja0xlbiA/IGhhc2guY3JlYXRlKCkudXBkYXRlKGtleSkuZGlnZXN0KCkgOiBrZXkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2O1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICAvLyBCeSBkb2luZyB1cGRhdGUgKHByb2Nlc3Npbmcgb2YgZmlyc3QgYmxvY2spIG9mIG91dGVyIGhhc2ggaGVyZSB3ZSBjYW4gcmUtdXNlIGl0IGJldHdlZW4gbXVsdGlwbGUgY2FsbHMgdmlhIGNsb25lXG4gICAgICAgIHRoaXMub0hhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICAvLyBVbmRvIGludGVybmFsIFhPUiAmJiBhcHBseSBvdXRlciBYT1JcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNiBeIDB4NWM7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIHBhZC5maWxsKDApO1xuICAgIH1cbiAgICB1cGRhdGUoYnVmKSB7XG4gICAgICAgIF9hc3NlcnRfanNfMS5kZWZhdWx0LmV4aXN0cyh0aGlzKTtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUoYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIF9hc3NlcnRfanNfMS5kZWZhdWx0LmV4aXN0cyh0aGlzKTtcbiAgICAgICAgX2Fzc2VydF9qc18xLmRlZmF1bHQuYnl0ZXMob3V0LCB0aGlzLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmlIYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUob3V0KTtcbiAgICAgICAgdGhpcy5vSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIH1cbiAgICBkaWdlc3QoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMub0hhc2gub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIF9jbG9uZUludG8odG8pIHtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZSB3aXRob3V0IGNhbGxpbmcgY29uc3RydWN0b3Igc2luY2Uga2V5IGFscmVhZHkgaW4gc3RhdGUgYW5kIHdlIGRvbid0IGtub3cgaXQuXG4gICAgICAgIHRvIHx8ICh0byA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCB7fSkpO1xuICAgICAgICBjb25zdCB7IG9IYXNoLCBpSGFzaCwgZmluaXNoZWQsIGRlc3Ryb3llZCwgYmxvY2tMZW4sIG91dHB1dExlbiB9ID0gdGhpcztcbiAgICAgICAgdG8gPSB0bztcbiAgICAgICAgdG8uZmluaXNoZWQgPSBmaW5pc2hlZDtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gZGVzdHJveWVkO1xuICAgICAgICB0by5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLm9IYXNoID0gb0hhc2guX2Nsb25lSW50byh0by5vSGFzaCk7XG4gICAgICAgIHRvLmlIYXNoID0gaUhhc2guX2Nsb25lSW50byh0by5pSGFzaCk7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9IYXNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5pSGFzaC5kZXN0cm95KCk7XG4gICAgfVxufVxuZXhwb3J0cy5ITUFDID0gSE1BQztcbi8qKlxuICogSE1BQzogUkZDMjEwNCBtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIGNvZGUuXG4gKiBAcGFyYW0gaGFzaCAtIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCBlLmcuIHNoYTI1NlxuICogQHBhcmFtIGtleSAtIG1lc3NhZ2Uga2V5XG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1lc3NhZ2UgZGF0YVxuICovXG5jb25zdCBobWFjID0gKGhhc2gsIGtleSwgbWVzc2FnZSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCk7XG5leHBvcnRzLmhtYWMgPSBobWFjO1xuZXhwb3J0cy5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/hmac.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = __webpack_require__(/*! ./_sha2.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_sha2.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = __webpack_require__(/*! ./_assert.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js\");\nconst _u64_js_1 = __webpack_require__(/*! ./_u64.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nconst crypto_1 = __webpack_require__(/*! @noble/hashes/crypto */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/crypto.js\");\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/secp256k1.js":
/*!*********************************************************!*\
  !*** ./node_modules/ethereum-cryptography/secp256k1.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.secp256k1 = void 0;\nvar secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"./node_modules/ethereum-cryptography/node_modules/@noble/curves/secp256k1.js\");\nObject.defineProperty(exports, \"secp256k1\", ({ enumerable: true, get: function () { return secp256k1_1.secp256k1; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsa0JBQWtCLG1CQUFPLENBQUMsNkdBQXlCO0FBQ25ELDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMS5qcz8yN2NlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZWNwMjU2azEgPSB2b2lkIDA7XG52YXIgc2VjcDI1NmsxXzEgPSByZXF1aXJlKFwiQG5vYmxlL2N1cnZlcy9zZWNwMjU2azFcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZWNwMjU2azFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlY3AyNTZrMV8xLnNlY3AyNTZrMTsgfSB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/secp256k1.js\n"));

/***/ }),

/***/ "./node_modules/ethereum-cryptography/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/ethereum-cryptography/utils.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;\nconst _assert_1 = __importDefault(__webpack_require__(/*! @noble/hashes/_assert */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js\"));\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\nconst assertBool = _assert_1.default.bool;\nexports.assertBool = assertBool;\nconst assertBytes = _assert_1.default.bytes;\nexports.assertBytes = assertBytes;\nvar utils_2 = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js\");\nObject.defineProperty(exports, \"bytesToHex\", ({ enumerable: true, get: function () { return utils_2.bytesToHex; } }));\nObject.defineProperty(exports, \"toHex\", ({ enumerable: true, get: function () { return utils_2.bytesToHex; } }));\nObject.defineProperty(exports, \"concatBytes\", ({ enumerable: true, get: function () { return utils_2.concatBytes; } }));\nObject.defineProperty(exports, \"createView\", ({ enumerable: true, get: function () { return utils_2.createView; } }));\nObject.defineProperty(exports, \"utf8ToBytes\", ({ enumerable: true, get: function () { return utils_2.utf8ToBytes; } }));\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nexports.bytesToUtf8 = bytesToUtf8;\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0, utils_1.hexToBytes)(sliced);\n}\nexports.hexToBytes = hexToBytes;\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equalsBytes = equalsBytes;\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _assert_1.default.bytes(msg);\n        return hash(msg);\n    };\n}\nexports.wrapHash = wrapHash;\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nexports.crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire =  true &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxnQkFBZ0IsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxtQkFBbUIsR0FBRyxrQkFBa0IsR0FBRyxtQkFBbUIsR0FBRyxhQUFhLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CLEdBQUcsa0JBQWtCO0FBQ25QLGtDQUFrQyxtQkFBTyxDQUFDLHlHQUF1QjtBQUNqRSxnQkFBZ0IsbUJBQU8sQ0FBQyxxR0FBcUI7QUFDN0M7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSxtQkFBbUI7QUFDbkIsY0FBYyxtQkFBTyxDQUFDLHFHQUFxQjtBQUMzQyw4Q0FBNkMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDbkgseUNBQXdDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQzlHLCtDQUE4QyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNySCw4Q0FBNkMsRUFBRSxxQ0FBcUMsOEJBQThCLEVBQUM7QUFDbkgsK0NBQThDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsY0FBYztBQUNkO0FBQ0Esd0JBQXdCLEtBQTZCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS91dGlscy5qcz81NDNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcnlwdG8gPSBleHBvcnRzLndyYXBIYXNoID0gZXhwb3J0cy5lcXVhbHNCeXRlcyA9IGV4cG9ydHMuaGV4VG9CeXRlcyA9IGV4cG9ydHMuYnl0ZXNUb1V0ZjggPSBleHBvcnRzLnV0ZjhUb0J5dGVzID0gZXhwb3J0cy5jcmVhdGVWaWV3ID0gZXhwb3J0cy5jb25jYXRCeXRlcyA9IGV4cG9ydHMudG9IZXggPSBleHBvcnRzLmJ5dGVzVG9IZXggPSBleHBvcnRzLmFzc2VydEJ5dGVzID0gZXhwb3J0cy5hc3NlcnRCb29sID0gdm9pZCAwO1xuY29uc3QgX2Fzc2VydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL19hc3NlcnRcIikpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL3V0aWxzXCIpO1xuY29uc3QgYXNzZXJ0Qm9vbCA9IF9hc3NlcnRfMS5kZWZhdWx0LmJvb2w7XG5leHBvcnRzLmFzc2VydEJvb2wgPSBhc3NlcnRCb29sO1xuY29uc3QgYXNzZXJ0Qnl0ZXMgPSBfYXNzZXJ0XzEuZGVmYXVsdC5ieXRlcztcbmV4cG9ydHMuYXNzZXJ0Qnl0ZXMgPSBhc3NlcnRCeXRlcztcbnZhciB1dGlsc18yID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvdXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJieXRlc1RvSGV4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18yLmJ5dGVzVG9IZXg7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0hleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMi5ieXRlc1RvSGV4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uY2F0Qnl0ZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzIuY29uY2F0Qnl0ZXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVWaWV3XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18yLmNyZWF0ZVZpZXc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1dGY4VG9CeXRlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMi51dGY4VG9CeXRlczsgfSB9KTtcbi8vIGJ1Zi50b1N0cmluZygndXRmOCcpIC0+IGJ5dGVzVG9VdGY4KGJ1ZilcbmZ1bmN0aW9uIGJ5dGVzVG9VdGY4KGRhdGEpIHtcbiAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgYnl0ZXNUb1V0ZjggZXhwZWN0ZWQgVWludDhBcnJheSwgZ290ICR7dHlwZW9mIGRhdGF9YCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZGF0YSk7XG59XG5leHBvcnRzLmJ5dGVzVG9VdGY4ID0gYnl0ZXNUb1V0Zjg7XG5mdW5jdGlvbiBoZXhUb0J5dGVzKGRhdGEpIHtcbiAgICBjb25zdCBzbGljZWQgPSBkYXRhLnN0YXJ0c1dpdGgoXCIweFwiKSA/IGRhdGEuc3Vic3RyaW5nKDIpIDogZGF0YTtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuaGV4VG9CeXRlcykoc2xpY2VkKTtcbn1cbmV4cG9ydHMuaGV4VG9CeXRlcyA9IGhleFRvQnl0ZXM7XG4vLyBidWYuZXF1YWxzKGJ1ZjIpIC0+IGVxdWFsc0J5dGVzKGJ1ZiwgYnVmMilcbmZ1bmN0aW9uIGVxdWFsc0J5dGVzKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmVxdWFsc0J5dGVzID0gZXF1YWxzQnl0ZXM7XG4vLyBJbnRlcm5hbCB1dGlsc1xuZnVuY3Rpb24gd3JhcEhhc2goaGFzaCkge1xuICAgIHJldHVybiAobXNnKSA9PiB7XG4gICAgICAgIF9hc3NlcnRfMS5kZWZhdWx0LmJ5dGVzKG1zZyk7XG4gICAgICAgIHJldHVybiBoYXNoKG1zZyk7XG4gICAgfTtcbn1cbmV4cG9ydHMud3JhcEhhc2ggPSB3cmFwSGFzaDtcbi8vIFRPRE8odjMpOiBzd2l0Y2ggYXdheSBmcm9tIG5vZGUgY3J5cHRvLCByZW1vdmUgdGhpcyB1bm5lY2Vzc2FyeSB2YXJpYWJsZS5cbmV4cG9ydHMuY3J5cHRvID0gKCgpID0+IHtcbiAgICBjb25zdCB3ZWJDcnlwdG8gPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIiAmJiBcImNyeXB0b1wiIGluIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzLmNyeXB0byA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBub2RlUmVxdWlyZSA9IHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIG1vZHVsZS5yZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgbW9kdWxlLnJlcXVpcmUuYmluZChtb2R1bGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGU6IG5vZGVSZXF1aXJlICYmICF3ZWJDcnlwdG8gPyBub2RlUmVxdWlyZShcImNyeXB0b1wiKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgd2ViOiB3ZWJDcnlwdG9cbiAgICB9O1xufSkoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ethereum-cryptography/utils.js\n"));

/***/ }),

/***/ "./node_modules/ethjs-util/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ethjs-util/lib/index.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\nvar isHexPrefixed = __webpack_require__(/*! is-hex-prefixed */ \"./node_modules/is-hex-prefixed/src/index.js\");\nvar stripHexPrefix = __webpack_require__(/*! strip-hex-prefix */ \"./node_modules/strip-hex-prefix/src/index.js\");\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ethjs-util/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/filter-obj/index.js":
/*!******************************************!*\
  !*** ./node_modules/filter-obj/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlsdGVyLW9iai9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9maWx0ZXItb2JqL2luZGV4LmpzP2VmZTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBwcmVkaWNhdGUpIHtcblx0dmFyIHJldCA9IHt9O1xuXHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdHZhciBpc0FyciA9IEFycmF5LmlzQXJyYXkocHJlZGljYXRlKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIga2V5ID0ga2V5c1tpXTtcblx0XHR2YXIgdmFsID0gb2JqW2tleV07XG5cblx0XHRpZiAoaXNBcnIgPyBwcmVkaWNhdGUuaW5kZXhPZihrZXkpICE9PSAtMSA6IHByZWRpY2F0ZShrZXksIHZhbCwgb2JqKSkge1xuXHRcdFx0cmV0W2tleV0gPSB2YWw7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/filter-obj/index.js\n"));

/***/ }),

/***/ "./node_modules/is-hex-prefixed/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/is-hex-prefixed/src/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param {String} str the string input value\n * @return {Boolean} a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nmodule.exports = function isHexPrefixed(str) {\n  if (typeof str !== 'string') {\n    throw new Error(\"[is-hex-prefixed] value must be type 'string', is currently type \" + (typeof str) + \", while checking isHexPrefixed.\");\n  }\n\n  return str.slice(0, 2) === '0x';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtaGV4LXByZWZpeGVkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaXMtaGV4LXByZWZpeGVkL3NyYy9pbmRleC5qcz83NzViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJucyBhIGBCb29sZWFuYCBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgYSBgU3RyaW5nYCBzdGFydHMgd2l0aCAnMHgnXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgaW5wdXQgdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGEgYm9vbGVhbiBpZiBpdCBpcyBvciBpcyBub3QgaGV4IHByZWZpeGVkXG4gKiBAdGhyb3dzIGlmIHRoZSBzdHIgaW5wdXQgaXMgbm90IGEgc3RyaW5nXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNIZXhQcmVmaXhlZChzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2lzLWhleC1wcmVmaXhlZF0gdmFsdWUgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCBpcyBjdXJyZW50bHkgdHlwZSBcIiArICh0eXBlb2Ygc3RyKSArIFwiLCB3aGlsZSBjaGVja2luZyBpc0hleFByZWZpeGVkLlwiKTtcbiAgfVxuXG4gIHJldHVybiBzdHIuc2xpY2UoMCwgMikgPT09ICcweCc7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/is-hex-prefixed/src/index.js\n"));

/***/ }),

/***/ "./node_modules/is-nan/implementation.js":
/*!***********************************************!*\
  !*** ./node_modules/is-nan/implementation.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\nmodule.exports = function isNaN(value) {\n\treturn value !== value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtbmFuL2ltcGxlbWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaXMtbmFuL2ltcGxlbWVudGF0aW9uLmpzPzM1MTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/is-nan/implementation.js\n"));

/***/ }),

/***/ "./node_modules/is-nan/index.js":
/*!**************************************!*\
  !*** ./node_modules/is-nan/index.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar callBind = __webpack_require__(/*! call-bind */ \"./node_modules/call-bind/index.js\");\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/is-nan/implementation.js\");\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/is-nan/polyfill.js\");\nvar shim = __webpack_require__(/*! ./shim */ \"./node_modules/is-nan/shim.js\");\n\nvar polyfill = callBind(getPolyfill(), Number);\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtbmFuL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyxvREFBVztBQUNsQyxhQUFhLG1CQUFPLENBQUMsb0VBQW1COztBQUV4QyxxQkFBcUIsbUJBQU8sQ0FBQyxpRUFBa0I7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMscURBQVk7QUFDdEMsV0FBVyxtQkFBTyxDQUFDLDZDQUFROztBQUUzQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2lzLW5hbi9pbmRleC5qcz8zOWYwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgTnVtYmVyKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/is-nan/index.js\n"));

/***/ }),

/***/ "./node_modules/is-nan/polyfill.js":
/*!*****************************************!*\
  !*** ./node_modules/is-nan/polyfill.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/is-nan/implementation.js\");\n\nmodule.exports = function getPolyfill() {\n\tif (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {\n\t\treturn Number.isNaN;\n\t}\n\treturn implementation;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtbmFuL3BvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLGlFQUFrQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9pcy1uYW4vcG9seWZpbGwuanM/MTc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKE51bWJlci5pc05hTiAmJiBOdW1iZXIuaXNOYU4oTmFOKSAmJiAhTnVtYmVyLmlzTmFOKCdhJykpIHtcblx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOO1xuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/is-nan/polyfill.js\n"));

/***/ }),

/***/ "./node_modules/is-nan/shim.js":
/*!*************************************!*\
  !*** ./node_modules/is-nan/shim.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/is-nan/polyfill.js\");\n\n/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */\n\nmodule.exports = function shimNumberIsNaN() {\n\tvar polyfill = getPolyfill();\n\tdefine(Number, { isNaN: polyfill }, {\n\t\tisNaN: function testIsNaN() {\n\t\t\treturn Number.isNaN !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtbmFuL3NoaW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLG9FQUFtQjtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxxREFBWTs7QUFFdEM7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2lzLW5hbi9zaGltLmpzPzUxZmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1OdW1iZXJJc05hTigpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE51bWJlciwgeyBpc05hTjogcG9seWZpbGwgfSwge1xuXHRcdGlzTmFOOiBmdW5jdGlvbiB0ZXN0SXNOYU4oKSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/is-nan/shim.js\n"));

/***/ }),

/***/ "./node_modules/jsonschema/lib/attribute.js":
/*!**************************************************!*\
  !*** ./node_modules/jsonschema/lib/attribute.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\");\n\n/** @type ValidatorResult */\nvar ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */\nvar SchemaError = helpers.SchemaError;\n\nvar attribute = {};\n\nattribute.ignoreProperties = {\n  // informative properties\n  'id': true,\n  'default': true,\n  'description': true,\n  'title': true,\n  // arguments to other properties\n  'additionalItems': true,\n  'then': true,\n  'else': true,\n  // special-handled properties\n  '$schema': true,\n  '$ref': true,\n  'extends': true,\n};\n\n/**\n * @name validators\n */\nvar validators = attribute.validators = {};\n\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.type = function validateType (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var types = Array.isArray(schema.type) ? schema.type : [schema.type];\n  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n    var list = types.map(function (v) {\n      if(!v) return;\n      var id = v.$id || v.id;\n      return id ? ('<' + id + '>') : (v+'');\n    });\n    result.addError({\n      name: 'type',\n      argument: list,\n      message: \"is not of a type(s) \" + list,\n    });\n  }\n  return result;\n};\n\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema){\n  var throwError = options.throwError;\n  var throwAll = options.throwAll;\n  options.throwError = false;\n  options.throwAll = false;\n  var res = this.validateSchema(instance, schema, options, ctx);\n  options.throwError = throwError;\n  options.throwAll = throwAll;\n\n  if (!res.valid && callback instanceof Function) {\n    callback(res);\n  }\n  return res.valid;\n}\n\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.anyOf = function validateAnyOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  if (!Array.isArray(schema.anyOf)){\n    throw new SchemaError(\"anyOf must be an array\");\n  }\n  if (!schema.anyOf.some(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res){inner.importErrors(res);}\n    ))) {\n    var list = schema.anyOf.map(function (v, i) {\n      var id = v.$id || v.id;\n      if(id) return '<' + id + '>';\n      return(v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n    });\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'anyOf',\n      argument: list,\n      message: \"is not any of \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.allOf = function validateAllOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.allOf)){\n    throw new SchemaError(\"allOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var self = this;\n  schema.allOf.forEach(function(v, i){\n    var valid = self.validateSchema(instance, v, options, ctx);\n    if(!valid.valid){\n      var id = v.$id || v.id;\n      var msg = id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n      result.addError({\n        name: 'allOf',\n        argument: { id: msg, length: valid.errors.length, valid: valid },\n        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',\n      });\n      result.importErrors(valid);\n    }\n  });\n  return result;\n};\n\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.oneOf = function validateOneOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.oneOf)){\n    throw new SchemaError(\"oneOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  var count = schema.oneOf.filter(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res) {inner.importErrors(res);}\n    ) ).length;\n  var list = schema.oneOf.map(function (v, i) {\n    var id = v.$id || v.id;\n    return id || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n  });\n  if (count!==1) {\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'oneOf',\n      argument: list,\n      message: \"is not exactly one from \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates \"then\" or \"else\" depending on the result of validating \"if\"\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.if = function validateIf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) return null;\n  if (!helpers.isSchema(schema.if)) throw new Error('Expected \"if\" keyword to be a schema');\n  var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var res;\n  if(ifValid){\n    if (schema.then === undefined) return;\n    if (!helpers.isSchema(schema.then)) throw new Error('Expected \"then\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));\n    result.importErrors(res);\n  }else{\n    if (schema.else === undefined) return;\n    if (!helpers.isSchema(schema.else)) throw new Error('Expected \"else\" keyword to be a schema');\n    res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));\n    result.importErrors(res);\n  }\n  return result;\n};\n\nfunction getEnumerableProperty(object, key){\n  // Determine if `key` shows up in `for(var key in object)`\n  // First test Object.hasOwnProperty.call as an optimization: that guarantees it does\n  if(Object.hasOwnProperty.call(object, key)) return object[key];\n  // Test `key in object` as an optimization; false means it won't\n  if(!(key in object)) return;\n  while( (object = Object.getPrototypeOf(object)) ){\n    if(Object.propertyIsEnumerable.call(object, key)) return object[key];\n  }\n}\n\n/**\n * Validates propertyNames\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.propertyNames = function validatePropertyNames (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var subschema = schema.propertyNames!==undefined ? schema.propertyNames : {};\n  if(!helpers.isSchema(subschema)) throw new SchemaError('Expected \"propertyNames\" to be a schema (object or boolean)');\n\n  for (var property in instance) {\n    if(getEnumerableProperty(instance, property) !== undefined){\n      var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));\n      result.importErrors(res);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.properties = function validateProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var properties = schema.properties || {};\n  for (var property in properties) {\n    var subschema = properties[property];\n    if(subschema===undefined){\n      continue;\n    }else if(subschema===null){\n      throw new SchemaError('Unexpected null, expected schema in \"properties\"');\n    }\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, subschema, options, ctx);\n    }\n    var prop = getEnumerableProperty(instance, property);\n    var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n  return result;\n};\n\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */\nfunction testAdditionalProperty (instance, schema, options, ctx, property, result) {\n  if(!this.types.object(instance)) return;\n  if (schema.properties && schema.properties[property] !== undefined) {\n    return;\n  }\n  if (schema.additionalProperties === false) {\n    result.addError({\n      name: 'additionalProperties',\n      argument: property,\n      message: \"is not allowed to have the additional property \" + JSON.stringify(property),\n    });\n  } else {\n    var additionalProperties = schema.additionalProperties || {};\n\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n    }\n\n    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n}\n\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var patternProperties = schema.patternProperties || {};\n\n  for (var property in instance) {\n    var test = true;\n    for (var pattern in patternProperties) {\n      var subschema = patternProperties[pattern];\n      if(subschema===undefined){\n        continue;\n      }else if(subschema===null){\n        throw new SchemaError('Unexpected null, expected schema in \"patternProperties\"');\n      }\n      try {\n        var regexp = new RegExp(pattern, 'u');\n      } catch(_e) {\n        // In the event the stricter handling causes an error, fall back on the forgiving handling\n        // DEPRECATED\n        regexp = new RegExp(pattern);\n      }\n      if (!regexp.test(property)) {\n        continue;\n      }\n      test = false;\n\n      if (typeof options.preValidateProperty == 'function') {\n        options.preValidateProperty(instance, property, subschema, options, ctx);\n      }\n\n      var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));\n      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n      result.importErrors(res);\n    }\n    if (test) {\n      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  // if patternProperties is defined then we'll test when that one is called instead\n  if (schema.patternProperties) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in instance) {\n    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minProperties = function validateMinProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length >= schema.minProperties)) {\n    result.addError({\n      name: 'minProperties',\n      argument: schema.minProperties,\n      message: \"does not meet minimum property length of \" + schema.minProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length <= schema.maxProperties)) {\n    result.addError({\n      name: 'maxProperties',\n      argument: schema.maxProperties,\n      message: \"does not meet maximum property length of \" + schema.maxProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.items = function validateItems (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.items===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  instance.every(function (value, i) {\n    if(Array.isArray(schema.items)){\n      var items =  schema.items[i]===undefined ? schema.additionalItems : schema.items[i];\n    }else{\n      var items = schema.items;\n    }\n    if (items === undefined) {\n      return true;\n    }\n    if (items === false) {\n      result.addError({\n        name: 'items',\n        message: \"additionalItems not permitted\",\n      });\n      return false;\n    }\n    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;\n    result.importErrors(res);\n    return true;\n  });\n  return result;\n};\n\n/**\n * Validates the \"contains\" keyword\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.contains = function validateContains (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (schema.contains===undefined) return;\n  if (!helpers.isSchema(schema.contains)) throw new Error('Expected \"contains\" keyword to be a schema');\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var count = instance.some(function (value, i) {\n    var res = self.validateSchema(value, schema.contains, options, ctx.makeChild(schema.contains, i));\n    return res.errors.length===0;\n  });\n  if(count===false){\n    result.addError({\n      name: 'contains',\n      argument: schema.contains,\n      message: \"must contain an item matching given schema\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minimum = function validateMinimum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n    if(!(instance > schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than \" + schema.minimum,\n      });\n    }\n  } else {\n    if(!(instance >= schema.minimum)){\n      result.addError({\n        name: 'minimum',\n        argument: schema.minimum,\n        message: \"must be greater than or equal to \" + schema.minimum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maximum = function validateMaximum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n    if(!(instance < schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than \" + schema.maximum,\n      });\n    }\n  } else {\n    if(!(instance <= schema.maximum)){\n      result.addError({\n        name: 'maximum',\n        argument: schema.maximum,\n        message: \"must be less than or equal to \" + schema.maximum,\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMinimum = function validateExclusiveMinimum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMinimum, which is handled by the \"minimum\" keyword.\n  if(typeof schema.exclusiveMinimum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance > schema.exclusiveMinimum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMinimum',\n      argument: schema.exclusiveMinimum,\n      message: \"must be strictly greater than \" + schema.exclusiveMinimum,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates the number form of exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.exclusiveMaximum = function validateExclusiveMaximum (instance, schema, options, ctx) {\n  // Support the boolean form of exclusiveMaximum, which is handled by the \"maximum\" keyword.\n  if(typeof schema.exclusiveMaximum === 'boolean') return;\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = instance < schema.exclusiveMaximum;\n  if (!valid) {\n    result.addError({\n      name: 'exclusiveMaximum',\n      argument: schema.exclusiveMaximum,\n      message: \"must be strictly less than \" + schema.exclusiveMaximum,\n    });\n  }\n  return result;\n};\n\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */\nvar validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {\n  if (!this.types.number(instance)) return;\n\n  var validationArgument = schema[validationType];\n  if (validationArgument == 0) {\n    throw new SchemaError(validationType + \" cannot be zero\");\n  }\n\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  var instanceDecimals = helpers.getDecimalPlaces(instance);\n  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n\n  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);\n  var multiplier = Math.pow(10, maxDecimals);\n\n  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n    result.addError({\n      name: validationType,\n      argument:  validationArgument,\n      message: errorMessage + JSON.stringify(validationArgument),\n    });\n  }\n\n  return result;\n};\n\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.required = function validateRequired (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (instance === undefined && schema.required === true) {\n    // A boolean form is implemented for reverse-compatibility with schemas written against older drafts\n    result.addError({\n      name: 'required',\n      message: \"is required\",\n    });\n  } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n    schema.required.forEach(function(n){\n      if(getEnumerableProperty(instance, n)===undefined){\n        result.addError({\n          name: 'required',\n          argument: n,\n          message: \"requires property \" + JSON.stringify(n),\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.pattern = function validatePattern (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var pattern = schema.pattern;\n  try {\n    var regexp = new RegExp(pattern, 'u');\n  } catch(_e) {\n    // In the event the stricter handling causes an error, fall back on the forgiving handling\n    // DEPRECATED\n    regexp = new RegExp(pattern);\n  }\n  if (!instance.match(regexp)) {\n    result.addError({\n      name: 'pattern',\n      argument: schema.pattern,\n      message: \"does not match pattern \" + JSON.stringify(schema.pattern.toString()),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */\nvalidators.format = function validateFormat (instance, schema, options, ctx) {\n  if (instance===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n    result.addError({\n      name: 'format',\n      argument: schema.format,\n      message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minLength = function validateMinLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length >= schema.minLength)) {\n    result.addError({\n      name: 'minLength',\n      argument: schema.minLength,\n      message: \"does not meet minimum length of \" + schema.minLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxLength = function validateMaxLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length <= schema.maxLength)) {\n    result.addError({\n      name: 'maxLength',\n      argument: schema.maxLength,\n      message: \"does not meet maximum length of \" + schema.maxLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minItems = function validateMinItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length >= schema.minItems)) {\n    result.addError({\n      name: 'minItems',\n      argument: schema.minItems,\n      message: \"does not meet minimum length of \" + schema.minItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxItems = function validateMaxItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length <= schema.maxItems)) {\n    result.addError({\n      name: 'maxItems',\n      argument: schema.maxItems,\n      message: \"does not meet maximum length of \" + schema.maxItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */\nfunction testArrays (v, i, a) {\n  var j, len = a.length;\n  for (j = i + 1, len; j < len; j++) {\n    if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (schema.uniqueItems!==true) return;\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.dependencies = function validateDependencies (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in schema.dependencies) {\n    if (instance[property] === undefined) {\n      continue;\n    }\n    var dep = schema.dependencies[property];\n    var childContext = ctx.makeChild(dep, property);\n    if (typeof dep == 'string') {\n      dep = [dep];\n    }\n    if (Array.isArray(dep)) {\n      dep.forEach(function (prop) {\n        if (instance[prop] === undefined) {\n          result.addError({\n            // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n            // Can we make these the same? Or should we create different error types?\n            name: 'dependencies',\n            argument: childContext.propertyPath,\n            message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath,\n          });\n        }\n      });\n    } else {\n      var res = this.validateSchema(instance, dep, options, childContext);\n      if(result.instance !== res.instance) result.instance = res.instance;\n      if (res && res.errors.length) {\n        result.addError({\n          name: 'dependencies',\n          argument: childContext.propertyPath,\n          message: \"does not meet dependency required by \" + childContext.propertyPath,\n        });\n        result.importErrors(res);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['enum'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema['enum'])) {\n    throw new SchemaError(\"enum expects an array\", schema);\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {\n    result.addError({\n      name: 'enum',\n      argument: schema['enum'],\n      message: \"is not one of enum values: \" + schema['enum'].map(String).join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['const'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!helpers.deepCompareStrict(schema['const'], instance)) {\n    result.addError({\n      name: 'const',\n      argument: schema['const'],\n      message: \"does not exactly match expected constant: \" + schema['const'],\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {\n  var self = this;\n  if(instance===undefined) return null;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var notTypes = schema.not || schema.disallow;\n  if(!notTypes) return null;\n  if(!Array.isArray(notTypes)) notTypes=[notTypes];\n  notTypes.forEach(function (type) {\n    if (self.testType(instance, schema, options, ctx, type)) {\n      var id = type && (type.$id || type.id);\n      var schemaId = id || type;\n      result.addError({\n        name: 'not',\n        argument: schemaId,\n        message: \"is of prohibited type \" + schemaId,\n      });\n    }\n  });\n  return result;\n};\n\nmodule.exports = attribute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsonschema/lib/attribute.js\n"));

/***/ }),

/***/ "./node_modules/jsonschema/lib/helpers.js":
/*!************************************************!*\
  !*** ./node_modules/jsonschema/lib/helpers.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar uri = __webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\");\n\nvar ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, path, name, argument) {\n  if(Array.isArray(path)){\n    this.path = path;\n    this.property = path.reduce(function(sum, item){\n      return sum + makeSuffix(item);\n    }, 'instance');\n  }else if(path !== undefined){\n    this.property = path;\n  }\n  if (message) {\n    this.message = message;\n  }\n  if (schema) {\n    var id = schema.$id || schema.id;\n    this.schema = id || schema;\n  }\n  if (instance !== undefined) {\n    this.instance = instance;\n  }\n  this.name = name;\n  this.argument = argument;\n  this.stack = this.toString();\n};\n\nValidationError.prototype.toString = function toString() {\n  return this.property + ' ' + this.message;\n};\n\nvar ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {\n  this.instance = instance;\n  this.schema = schema;\n  this.options = options;\n  this.path = ctx.path;\n  this.propertyPath = ctx.propertyPath;\n  this.errors = [];\n  this.throwError = options && options.throwError;\n  this.throwFirst = options && options.throwFirst;\n  this.throwAll = options && options.throwAll;\n  this.disableFormat = options && options.disableFormat === true;\n};\n\nValidatorResult.prototype.addError = function addError(detail) {\n  var err;\n  if (typeof detail == 'string') {\n    err = new ValidationError(detail, this.instance, this.schema, this.path);\n  } else {\n    if (!detail) throw new Error('Missing error detail');\n    if (!detail.message) throw new Error('Missing error message');\n    if (!detail.name) throw new Error('Missing validator type');\n    err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);\n  }\n\n  this.errors.push(err);\n  if (this.throwFirst) {\n    throw new ValidatorResultError(this);\n  }else if(this.throwError){\n    throw err;\n  }\n  return err;\n};\n\nValidatorResult.prototype.importErrors = function importErrors(res) {\n  if (typeof res == 'string' || (res && res.validatorType)) {\n    this.addError(res);\n  } else if (res && res.errors) {\n    this.errors = this.errors.concat(res.errors);\n  }\n};\n\nfunction stringizer (v,i){\n  return i+': '+v.toString()+'\\n';\n}\nValidatorResult.prototype.toString = function toString(res) {\n  return this.errors.map(stringizer).join('');\n};\n\nObject.defineProperty(ValidatorResult.prototype, \"valid\", { get: function() {\n  return !this.errors.length;\n} });\n\nmodule.exports.ValidatorResultError = ValidatorResultError;\nfunction ValidatorResultError(result) {\n  if(Error.captureStackTrace){\n    Error.captureStackTrace(this, ValidatorResultError);\n  }\n  this.instance = result.instance;\n  this.schema = result.schema;\n  this.options = result.options;\n  this.errors = result.errors;\n}\nValidatorResultError.prototype = new Error();\nValidatorResultError.prototype.constructor = ValidatorResultError;\nValidatorResultError.prototype.name = \"Validation Error\";\n\n/**\n * Describes a problem with a Schema which prevents validation of an instance\n * @name SchemaError\n * @constructor\n */\nvar SchemaError = exports.SchemaError = function SchemaError (msg, schema) {\n  this.message = msg;\n  this.schema = schema;\n  Error.call(this, msg);\n  Error.captureStackTrace(this, SchemaError);\n};\nSchemaError.prototype = Object.create(Error.prototype,\n  {\n    constructor: {value: SchemaError, enumerable: false},\n    name: {value: 'SchemaError', enumerable: false},\n  });\n\nvar SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, path, base, schemas) {\n  this.schema = schema;\n  this.options = options;\n  if(Array.isArray(path)){\n    this.path = path;\n    this.propertyPath = path.reduce(function(sum, item){\n      return sum + makeSuffix(item);\n    }, 'instance');\n  }else{\n    this.propertyPath = path;\n  }\n  this.base = base;\n  this.schemas = schemas;\n};\n\nSchemaContext.prototype.resolve = function resolve (target) {\n  return uri.resolve(this.base, target);\n};\n\nSchemaContext.prototype.makeChild = function makeChild(schema, propertyName){\n  var path = (propertyName===undefined) ? this.path : this.path.concat([propertyName]);\n  var id = schema.$id || schema.id;\n  var base = uri.resolve(this.base, id||'');\n  var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));\n  if(id && !ctx.schemas[base]){\n    ctx.schemas[base] = schema;\n  }\n  return ctx;\n};\n\nvar FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {\n  // 7.3.1. Dates, Times, and Duration\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  'date': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n  'duration': /P(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S)|\\d+(D|M(\\d+D)?|Y(\\d+M(\\d+D)?)?)(T\\d+(H(\\d+M(\\d+S)?)?|M(\\d+S)?|S))?|\\d+W)/i,\n\n  // 7.3.2. Email Addresses\n  // TODO: fix the email production\n  'email': /^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'idn-email': /^(\"(?:[!#-\\[\\]-\\u{10FFFF}]|\\\\[\\t -\\u{10FFFF}])*\"|[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*)@([!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}](?:\\.?[!#-'*+\\-/-9=?A-Z\\^-\\u{10FFFF}])*|\\[[!-Z\\^-\\u{10FFFF}]*\\])$/u,\n\n  // 7.3.3. Hostnames\n\n  // 7.3.4. IP Addresses\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  // FIXME whitespace is invalid\n  'ipv6': /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n\n  // 7.3.5. Resource Identifiers\n  // TODO: A more accurate regular expression for \"uri\" goes:\n  // [A-Za-z][+\\-.0-9A-Za-z]*:((/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?)?#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])|/?%[0-9A-Fa-f]{2}|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*(#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?)?\n  'uri': /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n  'uri-reference': /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/,\n  'iri': /^[a-zA-Z][a-zA-Z0-9+.-]*:[^\\s]*$/,\n  'iri-reference': /^(((([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|(([A-Za-z][+\\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~-\\u{10FFFF}]|[A-Za-z][+\\-.0-9A-Za-z]*[!$&-*,;=@_~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~-\\u{10FFFF}])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*)?|([A-Za-z][+\\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}]|[/?])|\\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|([A-Za-z][+\\-.0-9A-Za-z]*:)?\\/((%[0-9A-Fa-f]{2}|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)(:\\d*)?[/?]|[!$&-.0-;=?-Z_a-z~-\\u{10FFFF}])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~-\\u{10FFFF}])*|\\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~-\\u{10FFFF}])+(:\\d*)?|(\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?:\\d*|\\[(([Vv][0-9A-Fa-f]+\\.[!$&-.0-;=A-Z_a-z~-\\u{10FFFF}]+)?|[.0-:A-Fa-f]+)\\])?)?|[A-Za-z][+\\-.0-9A-Za-z]*:?)?$/u,\n  'uuid': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n\n  // 7.3.6. uri-template\n  'uri-template': /(%[0-9a-f]{2}|[!#$&(-;=?@\\[\\]_a-z~]|\\{[!#&+,./;=?@|]?(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?(,(%[0-9a-f]{2}|[0-9_a-z])(\\.?(%[0-9a-f]{2}|[0-9_a-z]))*(:[1-9]\\d{0,3}|\\*)?)*\\})*/iu,\n\n  // 7.3.7. JSON Pointers\n  'json-pointer': /^(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*$/iu,\n  'relative-json-pointer': /^\\d+(#|(\\/([\\x00-\\x2e0-@\\[-}\\x7f]|~[01])*)*)$/iu,\n\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n\n  'utc-millisec': function (input) {\n    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  },\n\n  // 7.3.8. regex\n  'regex': function (input) {\n    var result = true;\n    try {\n      new RegExp(input);\n    } catch (e) {\n      result = false;\n    }\n    return result;\n  },\n\n  // Other definitions\n  // \"style\" was removed from JSON Schema in draft-4 and is deprecated\n  'style': /[\\r\\n\\t ]*[^\\r\\n\\t ][^:]*:[\\r\\n\\t ]*[^\\r\\n\\t ;]*[\\r\\n\\t ]*;?/,\n  // \"color\" was removed from JSON Schema in draft-4 and is deprecated\n  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n  'phone': /^\\+(?:[0-9] ?){6,14}[0-9]$/,\n  'alpha': /^[a-zA-Z]+$/,\n  'alphanumeric': /^[a-zA-Z0-9]+$/,\n};\n\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nexports.isFormat = function isFormat (input, format, validator) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  } else if (validator && validator.customFormats &&\n      typeof validator.customFormats[format] === 'function') {\n    return validator.customFormats[format](input);\n  }\n  return true;\n};\n\nvar makeSuffix = exports.makeSuffix = function makeSuffix (key) {\n  key = key.toString();\n  // This function could be capable of outputting valid a ECMAScript string, but the\n  // resulting code for testing which form to use would be tens of thousands of characters long\n  // That means this will use the name form for some illegal forms\n  if (!key.match(/[.\\s\\[\\]]/) && !key.match(/^[\\d]/)) {\n    return '.' + key;\n  }\n  if (key.match(/^\\d+$/)) {\n    return '[' + key + ']';\n  }\n  return '[' + JSON.stringify(key) + ']';\n};\n\nexports.deepCompareStrict = function deepCompareStrict (a, b) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    return a.every(function (v, i) {\n      return deepCompareStrict(a[i], b[i]);\n    });\n  }\n  if (typeof a === 'object') {\n    if (!a || !b) {\n      return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n    return aKeys.every(function (v) {\n      return deepCompareStrict(a[v], b[v]);\n    });\n  }\n  return a === b;\n};\n\nfunction deepMerger (target, dst, e, i) {\n  if (typeof e === 'object') {\n    dst[i] = deepMerge(target[i], e);\n  } else {\n    if (target.indexOf(e) === -1) {\n      dst.push(e);\n    }\n  }\n}\n\nfunction copyist (src, dst, key) {\n  dst[key] = src[key];\n}\n\nfunction copyistWithDeepMerge (target, src, dst, key) {\n  if (typeof src[key] !== 'object' || !src[key]) {\n    dst[key] = src[key];\n  }\n  else {\n    if (!target[key]) {\n      dst[key] = src[key];\n    } else {\n      dst[key] = deepMerge(target[key], src[key]);\n    }\n  }\n}\n\nfunction deepMerge (target, src) {\n  var array = Array.isArray(src);\n  var dst = array && [] || {};\n\n  if (array) {\n    target = target || [];\n    dst = dst.concat(target);\n    src.forEach(deepMerger.bind(null, target, dst));\n  } else {\n    if (target && typeof target === 'object') {\n      Object.keys(target).forEach(copyist.bind(null, target, dst));\n    }\n    Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));\n  }\n\n  return dst;\n}\n\nmodule.exports.deepMerge = deepMerge;\n\n/**\n * Validates instance against the provided schema\n * Implements URI+JSON Pointer encoding, e.g. \"%7e\"=\"~0\"=>\"~\", \"~1\"=\"%2f\"=>\"/\"\n * @param o\n * @param s The path to walk o along\n * @return any\n */\nexports.objectGetPath = function objectGetPath(o, s) {\n  var parts = s.split('/').slice(1);\n  var k;\n  while (typeof (k=parts.shift()) == 'string') {\n    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));\n    if (!(n in o)) return;\n    o = o[n];\n  }\n  return o;\n};\n\nfunction pathEncoder (v) {\n  return '/'+encodeURIComponent(v).replace(/~/g,'%7E');\n}\n/**\n * Accept an Array of property names and return a JSON Pointer URI fragment\n * @param Array a\n * @return {String}\n */\nexports.encodePath = function encodePointer(a){\n  // ~ must be encoded explicitly because hacks\n  // the slash is encoded by encodeURIComponent\n  return a.map(pathEncoder).join('');\n};\n\n\n/**\n * Calculate the number of decimal places a number uses\n * We need this to get correct results out of multipleOf and divisibleBy\n * when either figure is has decimal places, due to IEEE-754 float issues.\n * @param number\n * @returns {number}\n */\nexports.getDecimalPlaces = function getDecimalPlaces(number) {\n\n  var decimalPlaces = 0;\n  if (isNaN(number)) return decimalPlaces;\n\n  if (typeof number !== 'number') {\n    number = Number(number);\n  }\n\n  var parts = number.toString().split('e');\n  if (parts.length === 2) {\n    if (parts[1][0] !== '-') {\n      return decimalPlaces;\n    } else {\n      decimalPlaces = Number(parts[1].slice(1));\n    }\n  }\n\n  var decimalParts = parts[0].split('.');\n  if (decimalParts.length === 2) {\n    decimalPlaces += decimalParts[1].length;\n  }\n\n  return decimalPlaces;\n};\n\nexports.isSchema = function isSchema(val){\n  return (typeof val === 'object' && val) || (typeof val === 'boolean');\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsonschema/lib/helpers.js\n"));

/***/ }),

/***/ "./node_modules/jsonschema/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/jsonschema/lib/index.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar Validator = module.exports.Validator = __webpack_require__(/*! ./validator */ \"./node_modules/jsonschema/lib/validator.js\");\n\nmodule.exports.ValidatorResult = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\").ValidatorResult;\nmodule.exports.ValidatorResultError = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\").ValidatorResultError;\nmodule.exports.ValidationError = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\").ValidationError;\nmodule.exports.SchemaError = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\").SchemaError;\nmodule.exports.SchemaScanResult = __webpack_require__(/*! ./scan */ \"./node_modules/jsonschema/lib/scan.js\").SchemaScanResult;\nmodule.exports.scan = __webpack_require__(/*! ./scan */ \"./node_modules/jsonschema/lib/scan.js\").scan;\n\nmodule.exports.validate = function (instance, schema, options) {\n  var v = new Validator();\n  return v.validate(instance, schema, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanNvbnNjaGVtYS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLCtHQUFpRDs7QUFFakUsaUlBQXFFO0FBQ3JFLDJJQUErRTtBQUMvRSxpSUFBcUU7QUFDckUseUhBQTZEO0FBQzdELDZIQUFvRTtBQUNwRSxxR0FBNEM7O0FBRTVDLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2pzb25zY2hlbWEvbGliL2luZGV4LmpzPzJhYjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVmFsaWRhdG9yID0gbW9kdWxlLmV4cG9ydHMuVmFsaWRhdG9yID0gcmVxdWlyZSgnLi92YWxpZGF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMuVmFsaWRhdG9yUmVzdWx0ID0gcmVxdWlyZSgnLi9oZWxwZXJzJykuVmFsaWRhdG9yUmVzdWx0O1xubW9kdWxlLmV4cG9ydHMuVmFsaWRhdG9yUmVzdWx0RXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMnKS5WYWxpZGF0b3JSZXN1bHRFcnJvcjtcbm1vZHVsZS5leHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycycpLlZhbGlkYXRpb25FcnJvcjtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYUVycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzJykuU2NoZW1hRXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5TY2hlbWFTY2FuUmVzdWx0ID0gcmVxdWlyZSgnLi9zY2FuJykuU2NoZW1hU2NhblJlc3VsdDtcbm1vZHVsZS5leHBvcnRzLnNjYW4gPSByZXF1aXJlKCcuL3NjYW4nKS5zY2FuO1xuXG5tb2R1bGUuZXhwb3J0cy52YWxpZGF0ZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgc2NoZW1hLCBvcHRpb25zKSB7XG4gIHZhciB2ID0gbmV3IFZhbGlkYXRvcigpO1xuICByZXR1cm4gdi52YWxpZGF0ZShpbnN0YW5jZSwgc2NoZW1hLCBvcHRpb25zKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/jsonschema/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/jsonschema/lib/scan.js":
/*!*********************************************!*\
  !*** ./node_modules/jsonschema/lib/scan.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar urilib = __webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\");\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var id = schema.$id || schema.id;\n    var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+ourBase+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!Array.isArray(schemas)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvanNvbnNjaGVtYS9saWIvc2Nhbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsa0VBQUs7QUFDMUIsY0FBYyxtQkFBTyxDQUFDLDJEQUFXOztBQUVqQywrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2pzb25zY2hlbWEvbGliL3NjYW4uanM/YjRiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHVyaWxpYiA9IHJlcXVpcmUoJ3VybCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxubW9kdWxlLmV4cG9ydHMuU2NoZW1hU2NhblJlc3VsdCA9IFNjaGVtYVNjYW5SZXN1bHQ7XG5mdW5jdGlvbiBTY2hlbWFTY2FuUmVzdWx0KGZvdW5kLCByZWYpe1xuICB0aGlzLmlkID0gZm91bmQ7XG4gIHRoaXMucmVmID0gcmVmO1xufVxuXG4vKipcbiAqIEFkZHMgYSBzY2hlbWEgd2l0aCBhIGNlcnRhaW4gdXJuIHRvIHRoZSBWYWxpZGF0b3IgaW5zdGFuY2UuXG4gKiBAcGFyYW0gc3RyaW5nIHVyaVxuICogQHBhcmFtIG9iamVjdCBzY2hlbWFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xubW9kdWxlLmV4cG9ydHMuc2NhbiA9IGZ1bmN0aW9uIHNjYW4oYmFzZSwgc2NoZW1hKXtcbiAgZnVuY3Rpb24gc2NhblNjaGVtYShiYXNldXJpLCBzY2hlbWEpe1xuICAgIGlmKCFzY2hlbWEgfHwgdHlwZW9mIHNjaGVtYSE9J29iamVjdCcpIHJldHVybjtcbiAgICAvLyBNYXJrIGFsbCByZWZlcmVuY2VkIHNjaGVtYXMgc28gd2UgY2FuIHRlbGwgbGF0ZXIgd2hpY2ggc2NoZW1hcyBhcmUgcmVmZXJyZWQgdG8sIGJ1dCBuZXZlciBkZWZpbmVkXG4gICAgaWYoc2NoZW1hLiRyZWYpe1xuICAgICAgdmFyIHJlc29sdmVkVXJpID0gdXJpbGliLnJlc29sdmUoYmFzZXVyaSwgc2NoZW1hLiRyZWYpO1xuICAgICAgcmVmW3Jlc29sdmVkVXJpXSA9IHJlZltyZXNvbHZlZFVyaV0gPyByZWZbcmVzb2x2ZWRVcmldKzEgOiAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaWQgPSBzY2hlbWEuJGlkIHx8IHNjaGVtYS5pZDtcbiAgICB2YXIgb3VyQmFzZSA9IGlkID8gdXJpbGliLnJlc29sdmUoYmFzZXVyaSwgaWQpIDogYmFzZXVyaTtcbiAgICBpZiAob3VyQmFzZSkge1xuICAgICAgLy8gSWYgdGhlcmUncyBubyBmcmFnbWVudCwgYXBwZW5kIGFuIGVtcHR5IG9uZVxuICAgICAgaWYob3VyQmFzZS5pbmRleE9mKCcjJyk8MCkgb3VyQmFzZSArPSAnIyc7XG4gICAgICBpZihmb3VuZFtvdXJCYXNlXSl7XG4gICAgICAgIGlmKCFoZWxwZXJzLmRlZXBDb21wYXJlU3RyaWN0KGZvdW5kW291ckJhc2VdLCBzY2hlbWEpKXtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NjaGVtYSA8JytvdXJCYXNlKyc+IGFscmVhZHkgZXhpc3RzIHdpdGggZGlmZmVyZW50IGRlZmluaXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm91bmRbb3VyQmFzZV07XG4gICAgICB9XG4gICAgICBmb3VuZFtvdXJCYXNlXSA9IHNjaGVtYTtcbiAgICAgIC8vIHN0cmlwIHRyYWlsaW5nIGZyYWdtZW50XG4gICAgICBpZihvdXJCYXNlW291ckJhc2UubGVuZ3RoLTFdPT0nIycpe1xuICAgICAgICBmb3VuZFtvdXJCYXNlLnN1YnN0cmluZygwLCBvdXJCYXNlLmxlbmd0aC0xKV0gPSBzY2hlbWE7XG4gICAgICB9XG4gICAgfVxuICAgIHNjYW5BcnJheShvdXJCYXNlKycvaXRlbXMnLCAoQXJyYXkuaXNBcnJheShzY2hlbWEuaXRlbXMpP3NjaGVtYS5pdGVtczpbc2NoZW1hLml0ZW1zXSkpO1xuICAgIHNjYW5BcnJheShvdXJCYXNlKycvZXh0ZW5kcycsIChBcnJheS5pc0FycmF5KHNjaGVtYS5leHRlbmRzKT9zY2hlbWEuZXh0ZW5kczpbc2NoZW1hLmV4dGVuZHNdKSk7XG4gICAgc2NhblNjaGVtYShvdXJCYXNlKycvYWRkaXRpb25hbEl0ZW1zJywgc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyk7XG4gICAgc2Nhbk9iamVjdChvdXJCYXNlKycvcHJvcGVydGllcycsIHNjaGVtYS5wcm9wZXJ0aWVzKTtcbiAgICBzY2FuU2NoZW1hKG91ckJhc2UrJy9hZGRpdGlvbmFsUHJvcGVydGllcycsIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyk7XG4gICAgc2Nhbk9iamVjdChvdXJCYXNlKycvZGVmaW5pdGlvbnMnLCBzY2hlbWEuZGVmaW5pdGlvbnMpO1xuICAgIHNjYW5PYmplY3Qob3VyQmFzZSsnL3BhdHRlcm5Qcm9wZXJ0aWVzJywgc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKTtcbiAgICBzY2FuT2JqZWN0KG91ckJhc2UrJy9kZXBlbmRlbmNpZXMnLCBzY2hlbWEuZGVwZW5kZW5jaWVzKTtcbiAgICBzY2FuQXJyYXkob3VyQmFzZSsnL2Rpc2FsbG93Jywgc2NoZW1hLmRpc2FsbG93KTtcbiAgICBzY2FuQXJyYXkob3VyQmFzZSsnL2FsbE9mJywgc2NoZW1hLmFsbE9mKTtcbiAgICBzY2FuQXJyYXkob3VyQmFzZSsnL2FueU9mJywgc2NoZW1hLmFueU9mKTtcbiAgICBzY2FuQXJyYXkob3VyQmFzZSsnL29uZU9mJywgc2NoZW1hLm9uZU9mKTtcbiAgICBzY2FuU2NoZW1hKG91ckJhc2UrJy9ub3QnLCBzY2hlbWEubm90KTtcbiAgfVxuICBmdW5jdGlvbiBzY2FuQXJyYXkoYmFzZXVyaSwgc2NoZW1hcyl7XG4gICAgaWYoIUFycmF5LmlzQXJyYXkoc2NoZW1hcykpIHJldHVybjtcbiAgICBmb3IodmFyIGk9MDsgaTxzY2hlbWFzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHNjYW5TY2hlbWEoYmFzZXVyaSsnLycraSwgc2NoZW1hc1tpXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNjYW5PYmplY3QoYmFzZXVyaSwgc2NoZW1hcyl7XG4gICAgaWYoIXNjaGVtYXMgfHwgdHlwZW9mIHNjaGVtYXMhPSdvYmplY3QnKSByZXR1cm47XG4gICAgZm9yKHZhciBwIGluIHNjaGVtYXMpe1xuICAgICAgc2NhblNjaGVtYShiYXNldXJpKycvJytwLCBzY2hlbWFzW3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZm91bmQgPSB7fTtcbiAgdmFyIHJlZiA9IHt9O1xuICBzY2FuU2NoZW1hKGJhc2UsIHNjaGVtYSk7XG4gIHJldHVybiBuZXcgU2NoZW1hU2NhblJlc3VsdChmb3VuZCwgcmVmKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/jsonschema/lib/scan.js\n"));

/***/ }),

/***/ "./node_modules/jsonschema/lib/validator.js":
/*!**************************************************!*\
  !*** ./node_modules/jsonschema/lib/validator.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar urilib = __webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\");\n\nvar attribute = __webpack_require__(/*! ./attribute */ \"./node_modules/jsonschema/lib/attribute.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"./node_modules/jsonschema/lib/helpers.js\");\nvar scanSchema = (__webpack_require__(/*! ./scan */ \"./node_modules/jsonschema/lib/scan.js\").scan);\nvar ValidatorResult = helpers.ValidatorResult;\nvar ValidatorResultError = helpers.ValidatorResultError;\nvar SchemaError = helpers.SchemaError;\nvar SchemaContext = helpers.SchemaContext;\n//var anonymousBase = 'vnd.jsonschema:///';\nvar anonymousBase = '/';\n\n/**\n * Creates a new Validator object\n * @name Validator\n * @constructor\n */\nvar Validator = function Validator () {\n  // Allow a validator instance to override global custom formats or to have their\n  // own custom formats.\n  this.customFormats = Object.create(Validator.prototype.customFormats);\n  this.schemas = {};\n  this.unresolvedRefs = [];\n\n  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.\n  this.types = Object.create(types);\n  this.attributes = Object.create(attribute.validators);\n};\n\n// Allow formats to be registered globally.\nValidator.prototype.customFormats = {};\n\n// Hint at the presence of a property\nValidator.prototype.schemas = null;\nValidator.prototype.types = null;\nValidator.prototype.attributes = null;\nValidator.prototype.unresolvedRefs = null;\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param schema\n * @param urn\n * @return {Object}\n */\nValidator.prototype.addSchema = function addSchema (schema, base) {\n  var self = this;\n  if (!schema) {\n    return null;\n  }\n  var scan = scanSchema(base||anonymousBase, schema);\n  var ourUri = base || schema.$id || schema.id;\n  for(var uri in scan.id){\n    this.schemas[uri] = scan.id[uri];\n  }\n  for(var uri in scan.ref){\n    // If this schema is already defined, it will be filtered out by the next step\n    this.unresolvedRefs.push(uri);\n  }\n  // Remove newly defined schemas from unresolvedRefs\n  this.unresolvedRefs = this.unresolvedRefs.filter(function(uri){\n    return typeof self.schemas[uri]==='undefined';\n  });\n  return this.schemas[ourUri];\n};\n\nValidator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {\n  if(!Array.isArray(schemas)) return;\n  for(var i=0; i<schemas.length; i++){\n    this.addSubSchema(baseuri, schemas[i]);\n  }\n};\n\nValidator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {\n  if(!schemas || typeof schemas!='object') return;\n  for(var p in schemas){\n    this.addSubSchema(baseuri, schemas[p]);\n  }\n};\n\n\n\n/**\n * Sets all the schemas of the Validator instance.\n * @param schemas\n */\nValidator.prototype.setSchemas = function setSchemas (schemas) {\n  this.schemas = schemas;\n};\n\n/**\n * Returns the schema of a certain urn\n * @param urn\n */\nValidator.prototype.getSchema = function getSchema (urn) {\n  return this.schemas[urn];\n};\n\n/**\n * Validates instance against the provided schema\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {Array}\n */\nValidator.prototype.validate = function validate (instance, schema, options, ctx) {\n  if((typeof schema !== 'boolean' && typeof schema !== 'object') || schema === null){\n    throw new SchemaError('Expected `schema` to be an object or boolean');\n  }\n  if (!options) {\n    options = {};\n  }\n  // This section indexes subschemas in the provided schema, so they don't need to be added with Validator#addSchema\n  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI\n  var id = schema.$id || schema.id;\n  var base = urilib.resolve(options.base||anonymousBase, id||'');\n  if(!ctx){\n    ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));\n    if (!ctx.schemas[base]) {\n      ctx.schemas[base] = schema;\n    }\n    var found = scanSchema(base, schema);\n    for(var n in found.id){\n      var sch = found.id[n];\n      ctx.schemas[n] = sch;\n    }\n  }\n  if(options.required && instance===undefined){\n    var result = new ValidatorResult(instance, schema, options, ctx);\n    result.addError('is required, but is undefined');\n    return result;\n  }\n  var result = this.validateSchema(instance, schema, options, ctx);\n  if (!result) {\n    throw new Error('Result undefined');\n  }else if(options.throwAll && result.errors.length){\n    throw new ValidatorResultError(result);\n  }\n  return result;\n};\n\n/**\n* @param Object schema\n* @return mixed schema uri or false\n*/\nfunction shouldResolve(schema) {\n  var ref = (typeof schema === 'string') ? schema : schema.$ref;\n  if (typeof ref=='string') return ref;\n  return false;\n}\n\n/**\n * Validates an instance against the schema (the actual work horse)\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @private\n * @return {ValidatorResult}\n */\nValidator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  // Support for the true/false schemas\n  if(typeof schema==='boolean') {\n    if(schema===true){\n      // `true` is always valid\n      schema = {};\n    }else if(schema===false){\n      // `false` is always invalid\n      schema = {type: []};\n    }\n  }else if(!schema){\n    // This might be a string\n    throw new Error(\"schema is undefined\");\n  }\n\n  if (schema['extends']) {\n    if (Array.isArray(schema['extends'])) {\n      var schemaobj = {schema: schema, ctx: ctx};\n      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));\n      schema = schemaobj.schema;\n      schemaobj.schema = null;\n      schemaobj.ctx = null;\n      schemaobj = null;\n    } else {\n      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));\n    }\n  }\n\n  // If passed a string argument, load that schema URI\n  var switchSchema = shouldResolve(schema);\n  if (switchSchema) {\n    var resolved = this.resolve(schema, switchSchema, ctx);\n    var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);\n    return this.validateSchema(instance, resolved.subschema, options, subctx);\n  }\n\n  var skipAttributes = options && options.skipAttributes || [];\n  // Validate each schema attribute against the instance\n  for (var key in schema) {\n    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {\n      var validatorErr = null;\n      var validator = this.attributes[key];\n      if (validator) {\n        validatorErr = validator.call(this, instance, schema, options, ctx);\n      } else if (options.allowUnknownAttributes === false) {\n        // This represents an error with the schema itself, not an invalid instance\n        throw new SchemaError(\"Unsupported attribute: \" + key, schema);\n      }\n      if (validatorErr) {\n        result.importErrors(validatorErr);\n      }\n    }\n  }\n\n  if (typeof options.rewrite == 'function') {\n    var value = options.rewrite.call(this, instance, schema, options, ctx);\n    result.instance = value;\n  }\n  return result;\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.schemaTraverser = function schemaTraverser (schemaobj, s) {\n  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.superResolve = function superResolve (schema, ctx) {\n  var ref = shouldResolve(schema);\n  if(ref) {\n    return this.resolve(schema, ref, ctx).subschema;\n  }\n  return schema;\n};\n\n/**\n* @private\n* @param Object schema\n* @param Object switchSchema\n* @param SchemaContext ctx\n* @return Object resolved schemas {subschema:String, switchSchema: String}\n* @throws SchemaError\n*/\nValidator.prototype.resolve = function resolve (schema, switchSchema, ctx) {\n  switchSchema = ctx.resolve(switchSchema);\n  // First see if the schema exists under the provided URI\n  if (ctx.schemas[switchSchema]) {\n    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};\n  }\n  // Else try walking the property pointer\n  var parsed = urilib.parse(switchSchema);\n  var fragment = parsed && parsed.hash;\n  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);\n  if (!document || !ctx.schemas[document]) {\n    throw new SchemaError(\"no such schema <\" + switchSchema + \">\", schema);\n  }\n  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));\n  if(subschema===undefined){\n    throw new SchemaError(\"no such schema \" + fragment + \" located in <\" + document + \">\", schema);\n  }\n  return {subschema: subschema, switchSchema: switchSchema};\n};\n\n/**\n * Tests whether the instance if of a certain type.\n * @private\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @param type\n * @return {boolean}\n */\nValidator.prototype.testType = function validateType (instance, schema, options, ctx, type) {\n  if(type===undefined){\n    return;\n  }else if(type===null){\n    throw new SchemaError('Unexpected null in \"type\" keyword');\n  }\n  if (typeof this.types[type] == 'function') {\n    return this.types[type].call(this, instance);\n  }\n  if (type && typeof type == 'object') {\n    var res = this.validateSchema(instance, type, options, ctx);\n    return res === undefined || !(res && res.errors.length);\n  }\n  // Undefined or properties not on the list are acceptable, same as not being defined\n  return true;\n};\n\nvar types = Validator.prototype.types = {};\ntypes.string = function testString (instance) {\n  return typeof instance == 'string';\n};\ntypes.number = function testNumber (instance) {\n  // isFinite returns false for NaN, Infinity, and -Infinity\n  return typeof instance == 'number' && isFinite(instance);\n};\ntypes.integer = function testInteger (instance) {\n  return (typeof instance == 'number') && instance % 1 === 0;\n};\ntypes.boolean = function testBoolean (instance) {\n  return typeof instance == 'boolean';\n};\ntypes.array = function testArray (instance) {\n  return Array.isArray(instance);\n};\ntypes['null'] = function testNull (instance) {\n  return instance === null;\n};\ntypes.date = function testDate (instance) {\n  return instance instanceof Date;\n};\ntypes.any = function testAny (instance) {\n  return true;\n};\ntypes.object = function testObject (instance) {\n  // TODO: fix this - see #15\n  return instance && (typeof instance === 'object') && !(Array.isArray(instance)) && !(instance instanceof Date);\n};\n\nmodule.exports = Validator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsonschema/lib/validator.js\n"));

/***/ }),

/***/ "./node_modules/micro-ftch/index.js":
/*!******************************************!*\
  !*** ./node_modules/micro-ftch/index.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvalidStatusCodeError = exports.InvalidCertError = void 0;\nconst DEFAULT_OPT = Object.freeze({\n    redirect: true,\n    expectStatusCode: 200,\n    headers: {},\n    full: false,\n    keepAlive: true,\n    cors: false,\n    referrer: false,\n    sslAllowSelfSigned: false,\n    _redirectCount: 0,\n});\nclass InvalidCertError extends Error {\n    constructor(msg, fingerprint256) {\n        super(msg);\n        this.fingerprint256 = fingerprint256;\n    }\n}\nexports.InvalidCertError = InvalidCertError;\nclass InvalidStatusCodeError extends Error {\n    constructor(statusCode) {\n        super(`Request Failed. Status Code: ${statusCode}`);\n        this.statusCode = statusCode;\n    }\n}\nexports.InvalidStatusCodeError = InvalidStatusCodeError;\nfunction detectType(b, type) {\n    if (!type || type === 'text' || type === 'json') {\n        try {\n            let text = new TextDecoder('utf8', { fatal: true }).decode(b);\n            if (type === 'text')\n                return text;\n            try {\n                return JSON.parse(text);\n            }\n            catch (err) {\n                if (type === 'json')\n                    throw err;\n                return text;\n            }\n        }\n        catch (err) {\n            if (type === 'text' || type === 'json')\n                throw err;\n        }\n    }\n    return b;\n}\nlet agents = {};\nfunction fetchNode(url, _options) {\n    let options = { ...DEFAULT_OPT, ..._options };\n    const http = __webpack_require__(/*! http */ \"./node_modules/next/dist/compiled/stream-http/index.js\");\n    const https = __webpack_require__(/*! https */ \"./node_modules/next/dist/compiled/https-browserify/index.js\");\n    const zlib = __webpack_require__(/*! zlib */ \"./node_modules/next/dist/compiled/browserify-zlib/index.js\");\n    const { promisify } = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n    const { resolve: urlResolve } = __webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\");\n    const isSecure = !!/^https/.test(url);\n    let opts = {\n        method: options.method || 'GET',\n        headers: { 'Accept-Encoding': 'gzip, deflate, br' },\n    };\n    const compactFP = (s) => s.replace(/:| /g, '').toLowerCase();\n    if (options.keepAlive) {\n        const agentOpt = {\n            keepAlive: true,\n            keepAliveMsecs: 30 * 1000,\n            maxFreeSockets: 1024,\n            maxCachedSessions: 1024,\n        };\n        const agentKey = [\n            isSecure,\n            isSecure && options.sslPinnedCertificates?.map((i) => compactFP(i)).sort(),\n        ].join();\n        opts.agent =\n            agents[agentKey] || (agents[agentKey] = new (isSecure ? https : http).Agent(agentOpt));\n    }\n    if (options.type === 'json')\n        opts.headers['Content-Type'] = 'application/json';\n    if (options.data) {\n        if (!options.method)\n            opts.method = 'POST';\n        opts.body = options.type === 'json' ? JSON.stringify(options.data) : options.data;\n    }\n    opts.headers = { ...opts.headers, ...options.headers };\n    if (options.sslAllowSelfSigned)\n        opts.rejectUnauthorized = false;\n    const handleRes = async (res) => {\n        const status = res.statusCode;\n        if (options.redirect && 300 <= status && status < 400 && res.headers['location']) {\n            if (options._redirectCount == 10)\n                throw new Error('Request failed. Too much redirects.');\n            options._redirectCount += 1;\n            return await fetchNode(urlResolve(url, res.headers['location']), options);\n        }\n        if (options.expectStatusCode && status !== options.expectStatusCode) {\n            res.resume();\n            throw new InvalidStatusCodeError(status);\n        }\n        let buf = [];\n        for await (const chunk of res)\n            buf.push(chunk);\n        let bytes = Buffer.concat(buf);\n        const encoding = res.headers['content-encoding'];\n        if (encoding === 'br')\n            bytes = await promisify(zlib.brotliDecompress)(bytes);\n        if (encoding === 'gzip' || encoding === 'deflate')\n            bytes = await promisify(zlib.unzip)(bytes);\n        const body = detectType(bytes, options.type);\n        if (options.full)\n            return { headers: res.headers, status, body };\n        return body;\n    };\n    return new Promise((resolve, reject) => {\n        const handleError = async (err) => {\n            if (err && err.code === 'DEPTH_ZERO_SELF_SIGNED_CERT') {\n                try {\n                    await fetchNode(url, { ...options, sslAllowSelfSigned: true, sslPinnedCertificates: [] });\n                }\n                catch (e) {\n                    if (e && e.fingerprint256) {\n                        err = new InvalidCertError(`Self-signed SSL certificate: ${e.fingerprint256}`, e.fingerprint256);\n                    }\n                }\n            }\n            reject(err);\n        };\n        const req = (isSecure ? https : http).request(url, opts, (res) => {\n            res.on('error', handleError);\n            (async () => {\n                try {\n                    resolve(await handleRes(res));\n                }\n                catch (error) {\n                    reject(error);\n                }\n            })();\n        });\n        req.on('error', handleError);\n        const pinned = options.sslPinnedCertificates?.map((i) => compactFP(i));\n        const mfetchSecureConnect = (socket) => {\n            const fp256 = compactFP(socket.getPeerCertificate()?.fingerprint256 || '');\n            if (!fp256 && socket.isSessionReused())\n                return;\n            if (pinned.includes(fp256))\n                return;\n            req.emit('error', new InvalidCertError(`Invalid SSL certificate: ${fp256} Expected: ${pinned}`, fp256));\n            return req.abort();\n        };\n        if (options.sslPinnedCertificates) {\n            req.on('socket', (socket) => {\n                const hasListeners = socket\n                    .listeners('secureConnect')\n                    .map((i) => (i.name || '').replace('bound ', ''))\n                    .includes('mfetchSecureConnect');\n                if (hasListeners)\n                    return;\n                socket.on('secureConnect', mfetchSecureConnect.bind(null, socket));\n            });\n        }\n        if (options.keepAlive)\n            req.setNoDelay(true);\n        if (opts.body)\n            req.write(opts.body);\n        req.end();\n    });\n}\nconst SAFE_HEADERS = new Set(['Accept', 'Accept-Language', 'Content-Language', 'Content-Type'].map((i) => i.toLowerCase()));\nconst FORBIDDEN_HEADERS = new Set(['Accept-Charset', 'Accept-Encoding', 'Access-Control-Request-Headers', 'Access-Control-Request-Method',\n    'Connection', 'Content-Length', 'Cookie', 'Cookie2', 'Date', 'DNT', 'Expect', 'Host', 'Keep-Alive', 'Origin', 'Referer', 'TE', 'Trailer',\n    'Transfer-Encoding', 'Upgrade', 'Via'].map((i) => i.toLowerCase()));\nasync function fetchBrowser(url, _options) {\n    let options = { ...DEFAULT_OPT, ..._options };\n    const headers = new Headers();\n    if (options.type === 'json')\n        headers.set('Content-Type', 'application/json');\n    let parsed = new URL(url);\n    if (parsed.username) {\n        const auth = btoa(`${parsed.username}:${parsed.password}`);\n        headers.set('Authorization', `Basic ${auth}`);\n        parsed.username = '';\n        parsed.password = '';\n    }\n    url = '' + parsed;\n    for (let k in options.headers) {\n        const name = k.toLowerCase();\n        if (SAFE_HEADERS.has(name) || (options.cors && !FORBIDDEN_HEADERS.has(name)))\n            headers.set(k, options.headers[k]);\n    }\n    let opts = { headers, redirect: options.redirect ? 'follow' : 'manual' };\n    if (!options.referrer)\n        opts.referrerPolicy = 'no-referrer';\n    if (options.cors)\n        opts.mode = 'cors';\n    if (options.data) {\n        if (!options.method)\n            opts.method = 'POST';\n        opts.body = options.type === 'json' ? JSON.stringify(options.data) : options.data;\n    }\n    const res = await fetch(url, opts);\n    if (options.expectStatusCode && res.status !== options.expectStatusCode)\n        throw new InvalidStatusCodeError(res.status);\n    const body = detectType(new Uint8Array(await res.arrayBuffer()), options.type);\n    if (options.full)\n        return { headers: Object.fromEntries(res.headers.entries()), status: res.status, body };\n    return body;\n}\nconst IS_NODE = !!(typeof process == 'object' &&\n    process.versions &&\n    process.versions.node &&\n    process.versions.v8);\nfunction fetchUrl(url, options) {\n    const fn = IS_NODE ? fetchNode : fetchBrowser;\n    return fn(url, options);\n}\nexports[\"default\"] = fetchUrl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/micro-ftch/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object.assign/polyfill.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object.assign/polyfill.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = function() {\n    return Object.assign;\n};\n\n//# sourceMappingURL=polyfill.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9vYmplY3QuYXNzaWduL3BvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL29iamVjdC5hc3NpZ24vcG9seWZpbGwuanM/OWEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ247XG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2x5ZmlsbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/polyfills/object.assign/polyfill.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/browserify-zlib/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/browserify-zlib/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n(function(){\"use strict\";var e={742:function(e,t,i){var a=i(491);var r=i(562);var n=i(450);var s=i(324);var l=i(320);for(var f in l){t[f]=l[f]}t.NONE=0;t.DEFLATE=1;t.INFLATE=2;t.GZIP=3;t.GUNZIP=4;t.DEFLATERAW=5;t.INFLATERAW=6;t.UNZIP=7;var o=31;var h=139;function Zlib(e){if(typeof e!==\"number\"||e<t.DEFLATE||e>t.UNZIP){throw new TypeError(\"Bad argument\")}this.dictionary=null;this.err=0;this.flush=0;this.init_done=false;this.level=0;this.memLevel=0;this.mode=e;this.strategy=0;this.windowBits=0;this.write_in_progress=false;this.pending_close=false;this.gzip_id_bytes_read=0}Zlib.prototype.close=function(){if(this.write_in_progress){this.pending_close=true;return}this.pending_close=false;a(this.init_done,\"close before init\");a(this.mode<=t.UNZIP);if(this.mode===t.DEFLATE||this.mode===t.GZIP||this.mode===t.DEFLATERAW){n.deflateEnd(this.strm)}else if(this.mode===t.INFLATE||this.mode===t.GUNZIP||this.mode===t.INFLATERAW||this.mode===t.UNZIP){s.inflateEnd(this.strm)}this.mode=t.NONE;this.dictionary=null};Zlib.prototype.write=function(e,t,i,a,r,n,s){return this._write(true,e,t,i,a,r,n,s)};Zlib.prototype.writeSync=function(e,t,i,a,r,n,s){return this._write(false,e,t,i,a,r,n,s)};Zlib.prototype._write=function(e,i,r,n,s,l,f,o){a.equal(arguments.length,8);a(this.init_done,\"write before init\");a(this.mode!==t.NONE,\"already finalized\");a.equal(false,this.write_in_progress,\"write already in progress\");a.equal(false,this.pending_close,\"close is pending\");this.write_in_progress=true;a.equal(false,i===undefined,\"must provide flush value\");this.write_in_progress=true;if(i!==t.Z_NO_FLUSH&&i!==t.Z_PARTIAL_FLUSH&&i!==t.Z_SYNC_FLUSH&&i!==t.Z_FULL_FLUSH&&i!==t.Z_FINISH&&i!==t.Z_BLOCK){throw new Error(\"Invalid flush value\")}if(r==null){r=Buffer.alloc(0);s=0;n=0}this.strm.avail_in=s;this.strm.input=r;this.strm.next_in=n;this.strm.avail_out=o;this.strm.output=l;this.strm.next_out=f;this.flush=i;if(!e){this._process();if(this._checkError()){return this._afterSync()}return}var h=this;process.nextTick((function(){h._process();h._after()}));return this};Zlib.prototype._afterSync=function(){var e=this.strm.avail_out;var t=this.strm.avail_in;this.write_in_progress=false;return[t,e]};Zlib.prototype._process=function(){var e=null;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=n.deflate(this.strm,this.flush);break;case t.UNZIP:if(this.strm.avail_in>0){e=this.strm.next_in}switch(this.gzip_id_bytes_read){case 0:if(e===null){break}if(this.strm.input[e]===o){this.gzip_id_bytes_read=1;e++;if(this.strm.avail_in===1){break}}else{this.mode=t.INFLATE;break}case 1:if(e===null){break}if(this.strm.input[e]===h){this.gzip_id_bytes_read=2;this.mode=t.GUNZIP}else{this.mode=t.INFLATE}break;default:throw new Error(\"invalid number of gzip magic number bytes read\")}case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:this.err=s.inflate(this.strm,this.flush);if(this.err===t.Z_NEED_DICT&&this.dictionary){this.err=s.inflateSetDictionary(this.strm,this.dictionary);if(this.err===t.Z_OK){this.err=s.inflate(this.strm,this.flush)}else if(this.err===t.Z_DATA_ERROR){this.err=t.Z_NEED_DICT}}while(this.strm.avail_in>0&&this.mode===t.GUNZIP&&this.err===t.Z_STREAM_END&&this.strm.next_in[0]!==0){this.reset();this.err=s.inflate(this.strm,this.flush)}break;default:throw new Error(\"Unknown mode \"+this.mode)}};Zlib.prototype._checkError=function(){switch(this.err){case t.Z_OK:case t.Z_BUF_ERROR:if(this.strm.avail_out!==0&&this.flush===t.Z_FINISH){this._error(\"unexpected end of file\");return false}break;case t.Z_STREAM_END:break;case t.Z_NEED_DICT:if(this.dictionary==null){this._error(\"Missing dictionary\")}else{this._error(\"Bad dictionary\")}return false;default:this._error(\"Zlib error\");return false}return true};Zlib.prototype._after=function(){if(!this._checkError()){return}var e=this.strm.avail_out;var t=this.strm.avail_in;this.write_in_progress=false;this.callback(t,e);if(this.pending_close){this.close()}};Zlib.prototype._error=function(e){if(this.strm.msg){e=this.strm.msg}this.onerror(e,this.err);this.write_in_progress=false;if(this.pending_close){this.close()}};Zlib.prototype.init=function(e,i,r,n,s){a(arguments.length===4||arguments.length===5,\"init(windowBits, level, memLevel, strategy, [dictionary])\");a(e>=8&&e<=15,\"invalid windowBits\");a(i>=-1&&i<=9,\"invalid compression level\");a(r>=1&&r<=9,\"invalid memlevel\");a(n===t.Z_FILTERED||n===t.Z_HUFFMAN_ONLY||n===t.Z_RLE||n===t.Z_FIXED||n===t.Z_DEFAULT_STRATEGY,\"invalid strategy\");this._init(i,e,r,n,s);this._setDictionary()};Zlib.prototype.params=function(){throw new Error(\"deflateParams Not supported\")};Zlib.prototype.reset=function(){this._reset();this._setDictionary()};Zlib.prototype._init=function(e,i,a,l,f){this.level=e;this.windowBits=i;this.memLevel=a;this.strategy=l;this.flush=t.Z_NO_FLUSH;this.err=t.Z_OK;if(this.mode===t.GZIP||this.mode===t.GUNZIP){this.windowBits+=16}if(this.mode===t.UNZIP){this.windowBits+=32}if(this.mode===t.DEFLATERAW||this.mode===t.INFLATERAW){this.windowBits=-1*this.windowBits}this.strm=new r;switch(this.mode){case t.DEFLATE:case t.GZIP:case t.DEFLATERAW:this.err=n.deflateInit2(this.strm,this.level,t.Z_DEFLATED,this.windowBits,this.memLevel,this.strategy);break;case t.INFLATE:case t.GUNZIP:case t.INFLATERAW:case t.UNZIP:this.err=s.inflateInit2(this.strm,this.windowBits);break;default:throw new Error(\"Unknown mode \"+this.mode)}if(this.err!==t.Z_OK){this._error(\"Init error\")}this.dictionary=f;this.write_in_progress=false;this.init_done=true};Zlib.prototype._setDictionary=function(){if(this.dictionary==null){return}this.err=t.Z_OK;switch(this.mode){case t.DEFLATE:case t.DEFLATERAW:this.err=n.deflateSetDictionary(this.strm,this.dictionary);break;default:break}if(this.err!==t.Z_OK){this._error(\"Failed to set dictionary\")}};Zlib.prototype._reset=function(){this.err=t.Z_OK;switch(this.mode){case t.DEFLATE:case t.DEFLATERAW:case t.GZIP:this.err=n.deflateReset(this.strm);break;case t.INFLATE:case t.INFLATERAW:case t.GUNZIP:this.err=s.inflateReset(this.strm);break;default:break}if(this.err!==t.Z_OK){this._error(\"Failed to reset stream\")}};t.Zlib=Zlib},23:function(e,t,i){var a=i(300).Buffer;var r=i(781).Transform;var n=i(742);var s=i(837);var l=i(491).ok;var f=i(300).kMaxLength;var o=\"Cannot create final Buffer. It would be larger \"+\"than 0x\"+f.toString(16)+\" bytes\";n.Z_MIN_WINDOWBITS=8;n.Z_MAX_WINDOWBITS=15;n.Z_DEFAULT_WINDOWBITS=15;n.Z_MIN_CHUNK=64;n.Z_MAX_CHUNK=Infinity;n.Z_DEFAULT_CHUNK=16*1024;n.Z_MIN_MEMLEVEL=1;n.Z_MAX_MEMLEVEL=9;n.Z_DEFAULT_MEMLEVEL=8;n.Z_MIN_LEVEL=-1;n.Z_MAX_LEVEL=9;n.Z_DEFAULT_LEVEL=n.Z_DEFAULT_COMPRESSION;var h=Object.keys(n);for(var _=0;_<h.length;_++){var d=h[_];if(d.match(/^Z/)){Object.defineProperty(t,d,{enumerable:true,value:n[d],writable:false})}}var u={Z_OK:n.Z_OK,Z_STREAM_END:n.Z_STREAM_END,Z_NEED_DICT:n.Z_NEED_DICT,Z_ERRNO:n.Z_ERRNO,Z_STREAM_ERROR:n.Z_STREAM_ERROR,Z_DATA_ERROR:n.Z_DATA_ERROR,Z_MEM_ERROR:n.Z_MEM_ERROR,Z_BUF_ERROR:n.Z_BUF_ERROR,Z_VERSION_ERROR:n.Z_VERSION_ERROR};var c=Object.keys(u);for(var v=0;v<c.length;v++){var b=c[v];u[u[b]]=b}Object.defineProperty(t,\"codes\",{enumerable:true,value:Object.freeze(u),writable:false});t.Deflate=Deflate;t.Inflate=Inflate;t.Gzip=Gzip;t.Gunzip=Gunzip;t.DeflateRaw=DeflateRaw;t.InflateRaw=InflateRaw;t.Unzip=Unzip;t.createDeflate=function(e){return new Deflate(e)};t.createInflate=function(e){return new Inflate(e)};t.createDeflateRaw=function(e){return new DeflateRaw(e)};t.createInflateRaw=function(e){return new InflateRaw(e)};t.createGzip=function(e){return new Gzip(e)};t.createGunzip=function(e){return new Gunzip(e)};t.createUnzip=function(e){return new Unzip(e)};t.deflate=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Deflate(t),e,i)};t.deflateSync=function(e,t){return zlibBufferSync(new Deflate(t),e)};t.gzip=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Gzip(t),e,i)};t.gzipSync=function(e,t){return zlibBufferSync(new Gzip(t),e)};t.deflateRaw=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new DeflateRaw(t),e,i)};t.deflateRawSync=function(e,t){return zlibBufferSync(new DeflateRaw(t),e)};t.unzip=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Unzip(t),e,i)};t.unzipSync=function(e,t){return zlibBufferSync(new Unzip(t),e)};t.inflate=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Inflate(t),e,i)};t.inflateSync=function(e,t){return zlibBufferSync(new Inflate(t),e)};t.gunzip=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new Gunzip(t),e,i)};t.gunzipSync=function(e,t){return zlibBufferSync(new Gunzip(t),e)};t.inflateRaw=function(e,t,i){if(typeof t===\"function\"){i=t;t={}}return zlibBuffer(new InflateRaw(t),e,i)};t.inflateRawSync=function(e,t){return zlibBufferSync(new InflateRaw(t),e)};function zlibBuffer(e,t,i){var r=[];var n=0;e.on(\"error\",onError);e.on(\"end\",onEnd);e.end(t);flow();function flow(){var t;while(null!==(t=e.read())){r.push(t);n+=t.length}e.once(\"readable\",flow)}function onError(t){e.removeListener(\"end\",onEnd);e.removeListener(\"readable\",flow);i(t)}function onEnd(){var t;var s=null;if(n>=f){s=new RangeError(o)}else{t=a.concat(r,n)}r=[];e.close();i(s,t)}}function zlibBufferSync(e,t){if(typeof t===\"string\")t=a.from(t);if(!a.isBuffer(t))throw new TypeError(\"Not a string or buffer\");var i=e._finishFlushFlag;return e._processChunk(t,i)}function Deflate(e){if(!(this instanceof Deflate))return new Deflate(e);Zlib.call(this,e,n.DEFLATE)}function Inflate(e){if(!(this instanceof Inflate))return new Inflate(e);Zlib.call(this,e,n.INFLATE)}function Gzip(e){if(!(this instanceof Gzip))return new Gzip(e);Zlib.call(this,e,n.GZIP)}function Gunzip(e){if(!(this instanceof Gunzip))return new Gunzip(e);Zlib.call(this,e,n.GUNZIP)}function DeflateRaw(e){if(!(this instanceof DeflateRaw))return new DeflateRaw(e);Zlib.call(this,e,n.DEFLATERAW)}function InflateRaw(e){if(!(this instanceof InflateRaw))return new InflateRaw(e);Zlib.call(this,e,n.INFLATERAW)}function Unzip(e){if(!(this instanceof Unzip))return new Unzip(e);Zlib.call(this,e,n.UNZIP)}function isValidFlushFlag(e){return e===n.Z_NO_FLUSH||e===n.Z_PARTIAL_FLUSH||e===n.Z_SYNC_FLUSH||e===n.Z_FULL_FLUSH||e===n.Z_FINISH||e===n.Z_BLOCK}function Zlib(e,i){var s=this;this._opts=e=e||{};this._chunkSize=e.chunkSize||t.Z_DEFAULT_CHUNK;r.call(this,e);if(e.flush&&!isValidFlushFlag(e.flush)){throw new Error(\"Invalid flush flag: \"+e.flush)}if(e.finishFlush&&!isValidFlushFlag(e.finishFlush)){throw new Error(\"Invalid flush flag: \"+e.finishFlush)}this._flushFlag=e.flush||n.Z_NO_FLUSH;this._finishFlushFlag=typeof e.finishFlush!==\"undefined\"?e.finishFlush:n.Z_FINISH;if(e.chunkSize){if(e.chunkSize<t.Z_MIN_CHUNK||e.chunkSize>t.Z_MAX_CHUNK){throw new Error(\"Invalid chunk size: \"+e.chunkSize)}}if(e.windowBits){if(e.windowBits<t.Z_MIN_WINDOWBITS||e.windowBits>t.Z_MAX_WINDOWBITS){throw new Error(\"Invalid windowBits: \"+e.windowBits)}}if(e.level){if(e.level<t.Z_MIN_LEVEL||e.level>t.Z_MAX_LEVEL){throw new Error(\"Invalid compression level: \"+e.level)}}if(e.memLevel){if(e.memLevel<t.Z_MIN_MEMLEVEL||e.memLevel>t.Z_MAX_MEMLEVEL){throw new Error(\"Invalid memLevel: \"+e.memLevel)}}if(e.strategy){if(e.strategy!=t.Z_FILTERED&&e.strategy!=t.Z_HUFFMAN_ONLY&&e.strategy!=t.Z_RLE&&e.strategy!=t.Z_FIXED&&e.strategy!=t.Z_DEFAULT_STRATEGY){throw new Error(\"Invalid strategy: \"+e.strategy)}}if(e.dictionary){if(!a.isBuffer(e.dictionary)){throw new Error(\"Invalid dictionary: it should be a Buffer instance\")}}this._handle=new n.Zlib(i);var l=this;this._hadError=false;this._handle.onerror=function(e,i){_close(l);l._hadError=true;var a=new Error(e);a.errno=i;a.code=t.codes[i];l.emit(\"error\",a)};var f=t.Z_DEFAULT_COMPRESSION;if(typeof e.level===\"number\")f=e.level;var o=t.Z_DEFAULT_STRATEGY;if(typeof e.strategy===\"number\")o=e.strategy;this._handle.init(e.windowBits||t.Z_DEFAULT_WINDOWBITS,f,e.memLevel||t.Z_DEFAULT_MEMLEVEL,o,e.dictionary);this._buffer=a.allocUnsafe(this._chunkSize);this._offset=0;this._level=f;this._strategy=o;this.once(\"end\",this.close);Object.defineProperty(this,\"_closed\",{get:function(){return!s._handle},configurable:true,enumerable:true})}s.inherits(Zlib,r);Zlib.prototype.params=function(e,i,a){if(e<t.Z_MIN_LEVEL||e>t.Z_MAX_LEVEL){throw new RangeError(\"Invalid compression level: \"+e)}if(i!=t.Z_FILTERED&&i!=t.Z_HUFFMAN_ONLY&&i!=t.Z_RLE&&i!=t.Z_FIXED&&i!=t.Z_DEFAULT_STRATEGY){throw new TypeError(\"Invalid strategy: \"+i)}if(this._level!==e||this._strategy!==i){var r=this;this.flush(n.Z_SYNC_FLUSH,(function(){l(r._handle,\"zlib binding closed\");r._handle.params(e,i);if(!r._hadError){r._level=e;r._strategy=i;if(a)a()}}))}else{process.nextTick(a)}};Zlib.prototype.reset=function(){l(this._handle,\"zlib binding closed\");return this._handle.reset()};Zlib.prototype._flush=function(e){this._transform(a.alloc(0),\"\",e)};Zlib.prototype.flush=function(e,t){var i=this;var r=this._writableState;if(typeof e===\"function\"||e===undefined&&!t){t=e;e=n.Z_FULL_FLUSH}if(r.ended){if(t)process.nextTick(t)}else if(r.ending){if(t)this.once(\"end\",t)}else if(r.needDrain){if(t){this.once(\"drain\",(function(){return i.flush(e,t)}))}}else{this._flushFlag=e;this.write(a.alloc(0),\"\",t)}};Zlib.prototype.close=function(e){_close(this,e);process.nextTick(emitCloseNT,this)};function _close(e,t){if(t)process.nextTick(t);if(!e._handle)return;e._handle.close();e._handle=null}function emitCloseNT(e){e.emit(\"close\")}Zlib.prototype._transform=function(e,t,i){var r;var s=this._writableState;var l=s.ending||s.ended;var f=l&&(!e||s.length===e.length);if(e!==null&&!a.isBuffer(e))return i(new Error(\"invalid input\"));if(!this._handle)return i(new Error(\"zlib binding closed\"));if(f)r=this._finishFlushFlag;else{r=this._flushFlag;if(e.length>=s.length){this._flushFlag=this._opts.flush||n.Z_NO_FLUSH}}this._processChunk(e,r,i)};Zlib.prototype._processChunk=function(e,t,i){var r=e&&e.length;var n=this._chunkSize-this._offset;var s=0;var h=this;var _=typeof i===\"function\";if(!_){var d=[];var u=0;var c;this.on(\"error\",(function(e){c=e}));l(this._handle,\"zlib binding closed\");do{var v=this._handle.writeSync(t,e,s,r,this._buffer,this._offset,n)}while(!this._hadError&&callback(v[0],v[1]));if(this._hadError){throw c}if(u>=f){_close(this);throw new RangeError(o)}var b=a.concat(d,u);_close(this);return b}l(this._handle,\"zlib binding closed\");var w=this._handle.write(t,e,s,r,this._buffer,this._offset,n);w.buffer=e;w.callback=callback;function callback(f,o){if(this){this.buffer=null;this.callback=null}if(h._hadError)return;var c=n-o;l(c>=0,\"have should not go down\");if(c>0){var v=h._buffer.slice(h._offset,h._offset+c);h._offset+=c;if(_){h.push(v)}else{d.push(v);u+=v.length}}if(o===0||h._offset>=h._chunkSize){n=h._chunkSize;h._offset=0;h._buffer=a.allocUnsafe(h._chunkSize)}if(o===0){s+=r-f;r=f;if(!_)return true;var b=h._handle.write(t,e,s,r,h._buffer,h._offset,h._chunkSize);b.callback=callback;b.buffer=e;return}if(!_)return false;i()}};s.inherits(Deflate,Zlib);s.inherits(Inflate,Zlib);s.inherits(Gzip,Zlib);s.inherits(Gunzip,Zlib);s.inherits(DeflateRaw,Zlib);s.inherits(InflateRaw,Zlib);s.inherits(Unzip,Zlib)},380:function(e,t){var i=typeof Uint8Array!==\"undefined\"&&typeof Uint16Array!==\"undefined\"&&typeof Int32Array!==\"undefined\";function _has(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){var t=Array.prototype.slice.call(arguments,1);while(t.length){var i=t.shift();if(!i){continue}if(typeof i!==\"object\"){throw new TypeError(i+\"must be non-object\")}for(var a in i){if(_has(i,a)){e[a]=i[a]}}}return e};t.shrinkBuf=function(e,t){if(e.length===t){return e}if(e.subarray){return e.subarray(0,t)}e.length=t;return e};var a={arraySet:function(e,t,i,a,r){if(t.subarray&&e.subarray){e.set(t.subarray(i,i+a),r);return}for(var n=0;n<a;n++){e[r+n]=t[i+n]}},flattenChunks:function(e){var t,i,a,r,n,s;a=0;for(t=0,i=e.length;t<i;t++){a+=e[t].length}s=new Uint8Array(a);r=0;for(t=0,i=e.length;t<i;t++){n=e[t];s.set(n,r);r+=n.length}return s}};var r={arraySet:function(e,t,i,a,r){for(var n=0;n<a;n++){e[r+n]=t[i+n]}},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){if(e){t.Buf8=Uint8Array;t.Buf16=Uint16Array;t.Buf32=Int32Array;t.assign(t,a)}else{t.Buf8=Array;t.Buf16=Array;t.Buf32=Array;t.assign(t,r)}};t.setTyped(i)},496:function(e){function adler32(e,t,i,a){var r=e&65535|0,n=e>>>16&65535|0,s=0;while(i!==0){s=i>2e3?2e3:i;i-=s;do{r=r+t[a++]|0;n=n+r|0}while(--s);r%=65521;n%=65521}return r|n<<16|0}e.exports=adler32},320:function(e){e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},307:function(e){function makeTable(){var e,t=[];for(var i=0;i<256;i++){e=i;for(var a=0;a<8;a++){e=e&1?3988292384^e>>>1:e>>>1}t[i]=e}return t}var t=makeTable();function crc32(e,i,a,r){var n=t,s=r+a;e^=-1;for(var l=r;l<s;l++){e=e>>>8^n[(e^i[l])&255]}return e^-1}e.exports=crc32},450:function(e,t,i){var a=i(380);var r=i(842);var n=i(496);var s=i(307);var l=i(31);var f=0;var o=1;var h=3;var _=4;var d=5;var u=0;var c=1;var v=-2;var b=-3;var w=-5;var p=-1;var g=1;var m=2;var k=3;var y=4;var E=0;var z=2;var Z=8;var x=9;var I=15;var R=8;var S=29;var L=256;var A=L+1+S;var T=30;var F=19;var N=2*A+1;var D=15;var B=3;var U=258;var O=U+B+1;var M=32;var C=42;var G=69;var H=73;var P=91;var K=103;var W=113;var V=666;var q=1;var X=2;var Y=3;var j=4;var J=3;function err(e,t){e.msg=l[t];return t}function rank(e){return(e<<1)-(e>4?9:0)}function zero(e){var t=e.length;while(--t>=0){e[t]=0}}function flush_pending(e){var t=e.state;var i=t.pending;if(i>e.avail_out){i=e.avail_out}if(i===0){return}a.arraySet(e.output,t.pending_buf,t.pending_out,i,e.next_out);e.next_out+=i;t.pending_out+=i;e.total_out+=i;e.avail_out-=i;t.pending-=i;if(t.pending===0){t.pending_out=0}}function flush_block_only(e,t){r._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t);e.block_start=e.strstart;flush_pending(e.strm)}function put_byte(e,t){e.pending_buf[e.pending++]=t}function putShortMSB(e,t){e.pending_buf[e.pending++]=t>>>8&255;e.pending_buf[e.pending++]=t&255}function read_buf(e,t,i,r){var l=e.avail_in;if(l>r){l=r}if(l===0){return 0}e.avail_in-=l;a.arraySet(t,e.input,e.next_in,l,i);if(e.state.wrap===1){e.adler=n(e.adler,t,l,i)}else if(e.state.wrap===2){e.adler=s(e.adler,t,l,i)}e.next_in+=l;e.total_in+=l;return l}function longest_match(e,t){var i=e.max_chain_length;var a=e.strstart;var r;var n;var s=e.prev_length;var l=e.nice_match;var f=e.strstart>e.w_size-O?e.strstart-(e.w_size-O):0;var o=e.window;var h=e.w_mask;var _=e.prev;var d=e.strstart+U;var u=o[a+s-1];var c=o[a+s];if(e.prev_length>=e.good_match){i>>=2}if(l>e.lookahead){l=e.lookahead}do{r=t;if(o[r+s]!==c||o[r+s-1]!==u||o[r]!==o[a]||o[++r]!==o[a+1]){continue}a+=2;r++;do{}while(o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&o[++a]===o[++r]&&a<d);n=U-(d-a);a=d-U;if(n>s){e.match_start=t;s=n;if(n>=l){break}u=o[a+s-1];c=o[a+s]}}while((t=_[t&h])>f&&--i!==0);if(s<=e.lookahead){return s}return e.lookahead}function fill_window(e){var t=e.w_size;var i,r,n,s,l;do{s=e.window_size-e.lookahead-e.strstart;if(e.strstart>=t+(t-O)){a.arraySet(e.window,e.window,t,t,0);e.match_start-=t;e.strstart-=t;e.block_start-=t;r=e.hash_size;i=r;do{n=e.head[--i];e.head[i]=n>=t?n-t:0}while(--r);r=t;i=r;do{n=e.prev[--i];e.prev[i]=n>=t?n-t:0}while(--r);s+=t}if(e.strm.avail_in===0){break}r=read_buf(e.strm,e.window,e.strstart+e.lookahead,s);e.lookahead+=r;if(e.lookahead+e.insert>=B){l=e.strstart-e.insert;e.ins_h=e.window[l];e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;while(e.insert){e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+B-1])&e.hash_mask;e.prev[l&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=l;l++;e.insert--;if(e.lookahead+e.insert<B){break}}}}while(e.lookahead<O&&e.strm.avail_in!==0)}function deflate_stored(e,t){var i=65535;if(i>e.pending_buf_size-5){i=e.pending_buf_size-5}for(;;){if(e.lookahead<=1){fill_window(e);if(e.lookahead===0&&t===f){return q}if(e.lookahead===0){break}}e.strstart+=e.lookahead;e.lookahead=0;var a=e.block_start+i;if(e.strstart===0||e.strstart>=a){e.lookahead=e.strstart-a;e.strstart=a;flush_block_only(e,false);if(e.strm.avail_out===0){return q}}if(e.strstart-e.block_start>=e.w_size-O){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=0;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.strstart>e.block_start){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return q}function deflate_fast(e,t){var i;var a;for(;;){if(e.lookahead<O){fill_window(e);if(e.lookahead<O&&t===f){return q}if(e.lookahead===0){break}}i=0;if(e.lookahead>=B){e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}if(i!==0&&e.strstart-i<=e.w_size-O){e.match_length=longest_match(e,i)}if(e.match_length>=B){a=r._tr_tally(e,e.strstart-e.match_start,e.match_length-B);e.lookahead-=e.match_length;if(e.match_length<=e.max_lazy_match&&e.lookahead>=B){e.match_length--;do{e.strstart++;e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}while(--e.match_length!==0);e.strstart++}else{e.strstart+=e.match_length;e.match_length=0;e.ins_h=e.window[e.strstart];e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask}}else{a=r._tr_tally(e,0,e.window[e.strstart]);e.lookahead--;e.strstart++}if(a){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=e.strstart<B-1?e.strstart:B-1;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function deflate_slow(e,t){var i;var a;var n;for(;;){if(e.lookahead<O){fill_window(e);if(e.lookahead<O&&t===f){return q}if(e.lookahead===0){break}}i=0;if(e.lookahead>=B){e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}e.prev_length=e.match_length;e.prev_match=e.match_start;e.match_length=B-1;if(i!==0&&e.prev_length<e.max_lazy_match&&e.strstart-i<=e.w_size-O){e.match_length=longest_match(e,i);if(e.match_length<=5&&(e.strategy===g||e.match_length===B&&e.strstart-e.match_start>4096)){e.match_length=B-1}}if(e.prev_length>=B&&e.match_length<=e.prev_length){n=e.strstart+e.lookahead-B;a=r._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-B);e.lookahead-=e.prev_length-1;e.prev_length-=2;do{if(++e.strstart<=n){e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+B-1])&e.hash_mask;i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h];e.head[e.ins_h]=e.strstart}}while(--e.prev_length!==0);e.match_available=0;e.match_length=B-1;e.strstart++;if(a){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}else if(e.match_available){a=r._tr_tally(e,0,e.window[e.strstart-1]);if(a){flush_block_only(e,false)}e.strstart++;e.lookahead--;if(e.strm.avail_out===0){return q}}else{e.match_available=1;e.strstart++;e.lookahead--}}if(e.match_available){a=r._tr_tally(e,0,e.window[e.strstart-1]);e.match_available=0}e.insert=e.strstart<B-1?e.strstart:B-1;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function deflate_rle(e,t){var i;var a;var n,s;var l=e.window;for(;;){if(e.lookahead<=U){fill_window(e);if(e.lookahead<=U&&t===f){return q}if(e.lookahead===0){break}}e.match_length=0;if(e.lookahead>=B&&e.strstart>0){n=e.strstart-1;a=l[n];if(a===l[++n]&&a===l[++n]&&a===l[++n]){s=e.strstart+U;do{}while(a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&a===l[++n]&&n<s);e.match_length=U-(s-n);if(e.match_length>e.lookahead){e.match_length=e.lookahead}}}if(e.match_length>=B){i=r._tr_tally(e,1,e.match_length-B);e.lookahead-=e.match_length;e.strstart+=e.match_length;e.match_length=0}else{i=r._tr_tally(e,0,e.window[e.strstart]);e.lookahead--;e.strstart++}if(i){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=0;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function deflate_huff(e,t){var i;for(;;){if(e.lookahead===0){fill_window(e);if(e.lookahead===0){if(t===f){return q}break}}e.match_length=0;i=r._tr_tally(e,0,e.window[e.strstart]);e.lookahead--;e.strstart++;if(i){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}}e.insert=0;if(t===_){flush_block_only(e,true);if(e.strm.avail_out===0){return Y}return j}if(e.last_lit){flush_block_only(e,false);if(e.strm.avail_out===0){return q}}return X}function Config(e,t,i,a,r){this.good_length=e;this.max_lazy=t;this.nice_length=i;this.max_chain=a;this.func=r}var Q;Q=[new Config(0,0,0,0,deflate_stored),new Config(4,4,8,4,deflate_fast),new Config(4,5,16,8,deflate_fast),new Config(4,6,32,32,deflate_fast),new Config(4,4,16,16,deflate_slow),new Config(8,16,32,32,deflate_slow),new Config(8,16,128,128,deflate_slow),new Config(8,32,128,256,deflate_slow),new Config(32,128,258,1024,deflate_slow),new Config(32,258,258,4096,deflate_slow)];function lm_init(e){e.window_size=2*e.w_size;zero(e.head);e.max_lazy_match=Q[e.level].max_lazy;e.good_match=Q[e.level].good_length;e.nice_match=Q[e.level].nice_length;e.max_chain_length=Q[e.level].max_chain;e.strstart=0;e.block_start=0;e.lookahead=0;e.insert=0;e.match_length=e.prev_length=B-1;e.match_available=0;e.ins_h=0}function DeflateState(){this.strm=null;this.status=0;this.pending_buf=null;this.pending_buf_size=0;this.pending_out=0;this.pending=0;this.wrap=0;this.gzhead=null;this.gzindex=0;this.method=Z;this.last_flush=-1;this.w_size=0;this.w_bits=0;this.w_mask=0;this.window=null;this.window_size=0;this.prev=null;this.head=null;this.ins_h=0;this.hash_size=0;this.hash_bits=0;this.hash_mask=0;this.hash_shift=0;this.block_start=0;this.match_length=0;this.prev_match=0;this.match_available=0;this.strstart=0;this.match_start=0;this.lookahead=0;this.prev_length=0;this.max_chain_length=0;this.max_lazy_match=0;this.level=0;this.strategy=0;this.good_match=0;this.nice_match=0;this.dyn_ltree=new a.Buf16(N*2);this.dyn_dtree=new a.Buf16((2*T+1)*2);this.bl_tree=new a.Buf16((2*F+1)*2);zero(this.dyn_ltree);zero(this.dyn_dtree);zero(this.bl_tree);this.l_desc=null;this.d_desc=null;this.bl_desc=null;this.bl_count=new a.Buf16(D+1);this.heap=new a.Buf16(2*A+1);zero(this.heap);this.heap_len=0;this.heap_max=0;this.depth=new a.Buf16(2*A+1);zero(this.depth);this.l_buf=0;this.lit_bufsize=0;this.last_lit=0;this.d_buf=0;this.opt_len=0;this.static_len=0;this.matches=0;this.insert=0;this.bi_buf=0;this.bi_valid=0}function deflateResetKeep(e){var t;if(!e||!e.state){return err(e,v)}e.total_in=e.total_out=0;e.data_type=z;t=e.state;t.pending=0;t.pending_out=0;if(t.wrap<0){t.wrap=-t.wrap}t.status=t.wrap?C:W;e.adler=t.wrap===2?0:1;t.last_flush=f;r._tr_init(t);return u}function deflateReset(e){var t=deflateResetKeep(e);if(t===u){lm_init(e.state)}return t}function deflateSetHeader(e,t){if(!e||!e.state){return v}if(e.state.wrap!==2){return v}e.state.gzhead=t;return u}function deflateInit2(e,t,i,r,n,s){if(!e){return v}var l=1;if(t===p){t=6}if(r<0){l=0;r=-r}else if(r>15){l=2;r-=16}if(n<1||n>x||i!==Z||r<8||r>15||t<0||t>9||s<0||s>y){return err(e,v)}if(r===8){r=9}var f=new DeflateState;e.state=f;f.strm=e;f.wrap=l;f.gzhead=null;f.w_bits=r;f.w_size=1<<f.w_bits;f.w_mask=f.w_size-1;f.hash_bits=n+7;f.hash_size=1<<f.hash_bits;f.hash_mask=f.hash_size-1;f.hash_shift=~~((f.hash_bits+B-1)/B);f.window=new a.Buf8(f.w_size*2);f.head=new a.Buf16(f.hash_size);f.prev=new a.Buf16(f.w_size);f.lit_bufsize=1<<n+6;f.pending_buf_size=f.lit_bufsize*4;f.pending_buf=new a.Buf8(f.pending_buf_size);f.d_buf=1*f.lit_bufsize;f.l_buf=(1+2)*f.lit_bufsize;f.level=t;f.strategy=s;f.method=i;return deflateReset(e)}function deflateInit(e,t){return deflateInit2(e,t,Z,I,R,E)}function deflate(e,t){var i,a;var n,l;if(!e||!e.state||t>d||t<0){return e?err(e,v):v}a=e.state;if(!e.output||!e.input&&e.avail_in!==0||a.status===V&&t!==_){return err(e,e.avail_out===0?w:v)}a.strm=e;i=a.last_flush;a.last_flush=t;if(a.status===C){if(a.wrap===2){e.adler=0;put_byte(a,31);put_byte(a,139);put_byte(a,8);if(!a.gzhead){put_byte(a,0);put_byte(a,0);put_byte(a,0);put_byte(a,0);put_byte(a,0);put_byte(a,a.level===9?2:a.strategy>=m||a.level<2?4:0);put_byte(a,J);a.status=W}else{put_byte(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(!a.gzhead.extra?0:4)+(!a.gzhead.name?0:8)+(!a.gzhead.comment?0:16));put_byte(a,a.gzhead.time&255);put_byte(a,a.gzhead.time>>8&255);put_byte(a,a.gzhead.time>>16&255);put_byte(a,a.gzhead.time>>24&255);put_byte(a,a.level===9?2:a.strategy>=m||a.level<2?4:0);put_byte(a,a.gzhead.os&255);if(a.gzhead.extra&&a.gzhead.extra.length){put_byte(a,a.gzhead.extra.length&255);put_byte(a,a.gzhead.extra.length>>8&255)}if(a.gzhead.hcrc){e.adler=s(e.adler,a.pending_buf,a.pending,0)}a.gzindex=0;a.status=G}}else{var b=Z+(a.w_bits-8<<4)<<8;var p=-1;if(a.strategy>=m||a.level<2){p=0}else if(a.level<6){p=1}else if(a.level===6){p=2}else{p=3}b|=p<<6;if(a.strstart!==0){b|=M}b+=31-b%31;a.status=W;putShortMSB(a,b);if(a.strstart!==0){putShortMSB(a,e.adler>>>16);putShortMSB(a,e.adler&65535)}e.adler=1}}if(a.status===G){if(a.gzhead.extra){n=a.pending;while(a.gzindex<(a.gzhead.extra.length&65535)){if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}flush_pending(e);n=a.pending;if(a.pending===a.pending_buf_size){break}}put_byte(a,a.gzhead.extra[a.gzindex]&255);a.gzindex++}if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}if(a.gzindex===a.gzhead.extra.length){a.gzindex=0;a.status=H}}else{a.status=H}}if(a.status===H){if(a.gzhead.name){n=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}flush_pending(e);n=a.pending;if(a.pending===a.pending_buf_size){l=1;break}}if(a.gzindex<a.gzhead.name.length){l=a.gzhead.name.charCodeAt(a.gzindex++)&255}else{l=0}put_byte(a,l)}while(l!==0);if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}if(l===0){a.gzindex=0;a.status=P}}else{a.status=P}}if(a.status===P){if(a.gzhead.comment){n=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}flush_pending(e);n=a.pending;if(a.pending===a.pending_buf_size){l=1;break}}if(a.gzindex<a.gzhead.comment.length){l=a.gzhead.comment.charCodeAt(a.gzindex++)&255}else{l=0}put_byte(a,l)}while(l!==0);if(a.gzhead.hcrc&&a.pending>n){e.adler=s(e.adler,a.pending_buf,a.pending-n,n)}if(l===0){a.status=K}}else{a.status=K}}if(a.status===K){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size){flush_pending(e)}if(a.pending+2<=a.pending_buf_size){put_byte(a,e.adler&255);put_byte(a,e.adler>>8&255);e.adler=0;a.status=W}}else{a.status=W}}if(a.pending!==0){flush_pending(e);if(e.avail_out===0){a.last_flush=-1;return u}}else if(e.avail_in===0&&rank(t)<=rank(i)&&t!==_){return err(e,w)}if(a.status===V&&e.avail_in!==0){return err(e,w)}if(e.avail_in!==0||a.lookahead!==0||t!==f&&a.status!==V){var g=a.strategy===m?deflate_huff(a,t):a.strategy===k?deflate_rle(a,t):Q[a.level].func(a,t);if(g===Y||g===j){a.status=V}if(g===q||g===Y){if(e.avail_out===0){a.last_flush=-1}return u}if(g===X){if(t===o){r._tr_align(a)}else if(t!==d){r._tr_stored_block(a,0,0,false);if(t===h){zero(a.head);if(a.lookahead===0){a.strstart=0;a.block_start=0;a.insert=0}}}flush_pending(e);if(e.avail_out===0){a.last_flush=-1;return u}}}if(t!==_){return u}if(a.wrap<=0){return c}if(a.wrap===2){put_byte(a,e.adler&255);put_byte(a,e.adler>>8&255);put_byte(a,e.adler>>16&255);put_byte(a,e.adler>>24&255);put_byte(a,e.total_in&255);put_byte(a,e.total_in>>8&255);put_byte(a,e.total_in>>16&255);put_byte(a,e.total_in>>24&255)}else{putShortMSB(a,e.adler>>>16);putShortMSB(a,e.adler&65535)}flush_pending(e);if(a.wrap>0){a.wrap=-a.wrap}return a.pending!==0?u:c}function deflateEnd(e){var t;if(!e||!e.state){return v}t=e.state.status;if(t!==C&&t!==G&&t!==H&&t!==P&&t!==K&&t!==W&&t!==V){return err(e,v)}e.state=null;return t===W?err(e,b):u}function deflateSetDictionary(e,t){var i=t.length;var r;var s,l;var f;var o;var h;var _;var d;if(!e||!e.state){return v}r=e.state;f=r.wrap;if(f===2||f===1&&r.status!==C||r.lookahead){return v}if(f===1){e.adler=n(e.adler,t,i,0)}r.wrap=0;if(i>=r.w_size){if(f===0){zero(r.head);r.strstart=0;r.block_start=0;r.insert=0}d=new a.Buf8(r.w_size);a.arraySet(d,t,i-r.w_size,r.w_size,0);t=d;i=r.w_size}o=e.avail_in;h=e.next_in;_=e.input;e.avail_in=i;e.next_in=0;e.input=t;fill_window(r);while(r.lookahead>=B){s=r.strstart;l=r.lookahead-(B-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[s+B-1])&r.hash_mask;r.prev[s&r.w_mask]=r.head[r.ins_h];r.head[r.ins_h]=s;s++}while(--l);r.strstart=s;r.lookahead=B-1;fill_window(r)}r.strstart+=r.lookahead;r.block_start=r.strstart;r.insert=r.lookahead;r.lookahead=0;r.match_length=r.prev_length=B-1;r.match_available=0;e.next_in=h;e.input=_;e.avail_in=o;r.wrap=f;return u}t.deflateInit=deflateInit;t.deflateInit2=deflateInit2;t.deflateReset=deflateReset;t.deflateResetKeep=deflateResetKeep;t.deflateSetHeader=deflateSetHeader;t.deflate=deflate;t.deflateEnd=deflateEnd;t.deflateSetDictionary=deflateSetDictionary;t.deflateInfo=\"pako deflate (from Nodeca project)\"},333:function(e){var t=30;var i=12;e.exports=function inflate_fast(e,a){var r;var n;var s;var l;var f;var o;var h;var _;var d;var u;var c;var v;var b;var w;var p;var g;var m;var k;var y;var E;var z;var Z;var x;var I,R;r=e.state;n=e.next_in;I=e.input;s=n+(e.avail_in-5);l=e.next_out;R=e.output;f=l-(a-e.avail_out);o=l+(e.avail_out-257);h=r.dmax;_=r.wsize;d=r.whave;u=r.wnext;c=r.window;v=r.hold;b=r.bits;w=r.lencode;p=r.distcode;g=(1<<r.lenbits)-1;m=(1<<r.distbits)-1;e:do{if(b<15){v+=I[n++]<<b;b+=8;v+=I[n++]<<b;b+=8}k=w[v&g];t:for(;;){y=k>>>24;v>>>=y;b-=y;y=k>>>16&255;if(y===0){R[l++]=k&65535}else if(y&16){E=k&65535;y&=15;if(y){if(b<y){v+=I[n++]<<b;b+=8}E+=v&(1<<y)-1;v>>>=y;b-=y}if(b<15){v+=I[n++]<<b;b+=8;v+=I[n++]<<b;b+=8}k=p[v&m];i:for(;;){y=k>>>24;v>>>=y;b-=y;y=k>>>16&255;if(y&16){z=k&65535;y&=15;if(b<y){v+=I[n++]<<b;b+=8;if(b<y){v+=I[n++]<<b;b+=8}}z+=v&(1<<y)-1;if(z>h){e.msg=\"invalid distance too far back\";r.mode=t;break e}v>>>=y;b-=y;y=l-f;if(z>y){y=z-y;if(y>d){if(r.sane){e.msg=\"invalid distance too far back\";r.mode=t;break e}}Z=0;x=c;if(u===0){Z+=_-y;if(y<E){E-=y;do{R[l++]=c[Z++]}while(--y);Z=l-z;x=R}}else if(u<y){Z+=_+u-y;y-=u;if(y<E){E-=y;do{R[l++]=c[Z++]}while(--y);Z=0;if(u<E){y=u;E-=y;do{R[l++]=c[Z++]}while(--y);Z=l-z;x=R}}}else{Z+=u-y;if(y<E){E-=y;do{R[l++]=c[Z++]}while(--y);Z=l-z;x=R}}while(E>2){R[l++]=x[Z++];R[l++]=x[Z++];R[l++]=x[Z++];E-=3}if(E){R[l++]=x[Z++];if(E>1){R[l++]=x[Z++]}}}else{Z=l-z;do{R[l++]=R[Z++];R[l++]=R[Z++];R[l++]=R[Z++];E-=3}while(E>2);if(E){R[l++]=R[Z++];if(E>1){R[l++]=R[Z++]}}}}else if((y&64)===0){k=p[(k&65535)+(v&(1<<y)-1)];continue i}else{e.msg=\"invalid distance code\";r.mode=t;break e}break}}else if((y&64)===0){k=w[(k&65535)+(v&(1<<y)-1)];continue t}else if(y&32){r.mode=i;break e}else{e.msg=\"invalid literal/length code\";r.mode=t;break e}break}}while(n<s&&l<o);E=b>>3;n-=E;b-=E<<3;v&=(1<<b)-1;e.next_in=n;e.next_out=l;e.avail_in=n<s?5+(s-n):5-(n-s);e.avail_out=l<o?257+(o-l):257-(l-o);r.hold=v;r.bits=b;return}},324:function(e,t,i){var a=i(380);var r=i(496);var n=i(307);var s=i(333);var l=i(19);var f=0;var o=1;var h=2;var _=4;var d=5;var u=6;var c=0;var v=1;var b=2;var w=-2;var p=-3;var g=-4;var m=-5;var k=8;var y=1;var E=2;var z=3;var Z=4;var x=5;var I=6;var R=7;var S=8;var L=9;var A=10;var T=11;var F=12;var N=13;var D=14;var B=15;var U=16;var O=17;var M=18;var C=19;var G=20;var H=21;var P=22;var K=23;var W=24;var V=25;var q=26;var X=27;var Y=28;var j=29;var J=30;var Q=31;var $=32;var ee=852;var te=592;var ie=15;var ae=ie;function zswap32(e){return(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24)}function InflateState(){this.mode=0;this.last=false;this.wrap=0;this.havedict=false;this.flags=0;this.dmax=0;this.check=0;this.total=0;this.head=null;this.wbits=0;this.wsize=0;this.whave=0;this.wnext=0;this.window=null;this.hold=0;this.bits=0;this.length=0;this.offset=0;this.extra=0;this.lencode=null;this.distcode=null;this.lenbits=0;this.distbits=0;this.ncode=0;this.nlen=0;this.ndist=0;this.have=0;this.next=null;this.lens=new a.Buf16(320);this.work=new a.Buf16(288);this.lendyn=null;this.distdyn=null;this.sane=0;this.back=0;this.was=0}function inflateResetKeep(e){var t;if(!e||!e.state){return w}t=e.state;e.total_in=e.total_out=t.total=0;e.msg=\"\";if(t.wrap){e.adler=t.wrap&1}t.mode=y;t.last=0;t.havedict=0;t.dmax=32768;t.head=null;t.hold=0;t.bits=0;t.lencode=t.lendyn=new a.Buf32(ee);t.distcode=t.distdyn=new a.Buf32(te);t.sane=1;t.back=-1;return c}function inflateReset(e){var t;if(!e||!e.state){return w}t=e.state;t.wsize=0;t.whave=0;t.wnext=0;return inflateResetKeep(e)}function inflateReset2(e,t){var i;var a;if(!e||!e.state){return w}a=e.state;if(t<0){i=0;t=-t}else{i=(t>>4)+1;if(t<48){t&=15}}if(t&&(t<8||t>15)){return w}if(a.window!==null&&a.wbits!==t){a.window=null}a.wrap=i;a.wbits=t;return inflateReset(e)}function inflateInit2(e,t){var i;var a;if(!e){return w}a=new InflateState;e.state=a;a.window=null;i=inflateReset2(e,t);if(i!==c){e.state=null}return i}function inflateInit(e){return inflateInit2(e,ae)}var re=true;var ne,se;function fixedtables(e){if(re){var t;ne=new a.Buf32(512);se=new a.Buf32(32);t=0;while(t<144){e.lens[t++]=8}while(t<256){e.lens[t++]=9}while(t<280){e.lens[t++]=7}while(t<288){e.lens[t++]=8}l(o,e.lens,0,288,ne,0,e.work,{bits:9});t=0;while(t<32){e.lens[t++]=5}l(h,e.lens,0,32,se,0,e.work,{bits:5});re=false}e.lencode=ne;e.lenbits=9;e.distcode=se;e.distbits=5}function updatewindow(e,t,i,r){var n;var s=e.state;if(s.window===null){s.wsize=1<<s.wbits;s.wnext=0;s.whave=0;s.window=new a.Buf8(s.wsize)}if(r>=s.wsize){a.arraySet(s.window,t,i-s.wsize,s.wsize,0);s.wnext=0;s.whave=s.wsize}else{n=s.wsize-s.wnext;if(n>r){n=r}a.arraySet(s.window,t,i-r,n,s.wnext);r-=n;if(r){a.arraySet(s.window,t,i-r,r,0);s.wnext=r;s.whave=s.wsize}else{s.wnext+=n;if(s.wnext===s.wsize){s.wnext=0}if(s.whave<s.wsize){s.whave+=n}}}return 0}function inflate(e,t){var i;var ee,te;var ie;var ae;var re,ne;var se;var le;var fe,oe;var he;var _e;var de;var ue=0;var ce,ve,be;var we,pe,ge;var me;var ke;var ye=new a.Buf8(4);var Ee;var ze;var Ze=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&e.avail_in!==0){return w}i=e.state;if(i.mode===F){i.mode=N}ae=e.next_out;te=e.output;ne=e.avail_out;ie=e.next_in;ee=e.input;re=e.avail_in;se=i.hold;le=i.bits;fe=re;oe=ne;ke=c;e:for(;;){switch(i.mode){case y:if(i.wrap===0){i.mode=N;break}while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(i.wrap&2&&se===35615){i.check=0;ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0);se=0;le=0;i.mode=E;break}i.flags=0;if(i.head){i.head.done=false}if(!(i.wrap&1)||(((se&255)<<8)+(se>>8))%31){e.msg=\"incorrect header check\";i.mode=J;break}if((se&15)!==k){e.msg=\"unknown compression method\";i.mode=J;break}se>>>=4;le-=4;me=(se&15)+8;if(i.wbits===0){i.wbits=me}else if(me>i.wbits){e.msg=\"invalid window size\";i.mode=J;break}i.dmax=1<<me;e.adler=i.check=1;i.mode=se&512?A:F;se=0;le=0;break;case E:while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.flags=se;if((i.flags&255)!==k){e.msg=\"unknown compression method\";i.mode=J;break}if(i.flags&57344){e.msg=\"unknown header flags set\";i.mode=J;break}if(i.head){i.head.text=se>>8&1}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0)}se=0;le=0;i.mode=z;case z:while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(i.head){i.head.time=se}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;ye[2]=se>>>16&255;ye[3]=se>>>24&255;i.check=n(i.check,ye,4,0)}se=0;le=0;i.mode=Z;case Z:while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(i.head){i.head.xflags=se&255;i.head.os=se>>8}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0)}se=0;le=0;i.mode=x;case x:if(i.flags&1024){while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.length=se;if(i.head){i.head.extra_len=se}if(i.flags&512){ye[0]=se&255;ye[1]=se>>>8&255;i.check=n(i.check,ye,2,0)}se=0;le=0}else if(i.head){i.head.extra=null}i.mode=I;case I:if(i.flags&1024){he=i.length;if(he>re){he=re}if(he){if(i.head){me=i.head.extra_len-i.length;if(!i.head.extra){i.head.extra=new Array(i.head.extra_len)}a.arraySet(i.head.extra,ee,ie,he,me)}if(i.flags&512){i.check=n(i.check,ee,he,ie)}re-=he;ie+=he;i.length-=he}if(i.length){break e}}i.length=0;i.mode=R;case R:if(i.flags&2048){if(re===0){break e}he=0;do{me=ee[ie+he++];if(i.head&&me&&i.length<65536){i.head.name+=String.fromCharCode(me)}}while(me&&he<re);if(i.flags&512){i.check=n(i.check,ee,he,ie)}re-=he;ie+=he;if(me){break e}}else if(i.head){i.head.name=null}i.length=0;i.mode=S;case S:if(i.flags&4096){if(re===0){break e}he=0;do{me=ee[ie+he++];if(i.head&&me&&i.length<65536){i.head.comment+=String.fromCharCode(me)}}while(me&&he<re);if(i.flags&512){i.check=n(i.check,ee,he,ie)}re-=he;ie+=he;if(me){break e}}else if(i.head){i.head.comment=null}i.mode=L;case L:if(i.flags&512){while(le<16){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(se!==(i.check&65535)){e.msg=\"header crc mismatch\";i.mode=J;break}se=0;le=0}if(i.head){i.head.hcrc=i.flags>>9&1;i.head.done=true}e.adler=i.check=0;i.mode=F;break;case A:while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}e.adler=i.check=zswap32(se);se=0;le=0;i.mode=T;case T:if(i.havedict===0){e.next_out=ae;e.avail_out=ne;e.next_in=ie;e.avail_in=re;i.hold=se;i.bits=le;return b}e.adler=i.check=1;i.mode=F;case F:if(t===d||t===u){break e}case N:if(i.last){se>>>=le&7;le-=le&7;i.mode=X;break}while(le<3){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.last=se&1;se>>>=1;le-=1;switch(se&3){case 0:i.mode=D;break;case 1:fixedtables(i);i.mode=G;if(t===u){se>>>=2;le-=2;break e}break;case 2:i.mode=O;break;case 3:e.msg=\"invalid block type\";i.mode=J}se>>>=2;le-=2;break;case D:se>>>=le&7;le-=le&7;while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if((se&65535)!==(se>>>16^65535)){e.msg=\"invalid stored block lengths\";i.mode=J;break}i.length=se&65535;se=0;le=0;i.mode=B;if(t===u){break e}case B:i.mode=U;case U:he=i.length;if(he){if(he>re){he=re}if(he>ne){he=ne}if(he===0){break e}a.arraySet(te,ee,ie,he,ae);re-=he;ie+=he;ne-=he;ae+=he;i.length-=he;break}i.mode=F;break;case O:while(le<14){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.nlen=(se&31)+257;se>>>=5;le-=5;i.ndist=(se&31)+1;se>>>=5;le-=5;i.ncode=(se&15)+4;se>>>=4;le-=4;if(i.nlen>286||i.ndist>30){e.msg=\"too many length or distance symbols\";i.mode=J;break}i.have=0;i.mode=M;case M:while(i.have<i.ncode){while(le<3){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.lens[Ze[i.have++]]=se&7;se>>>=3;le-=3}while(i.have<19){i.lens[Ze[i.have++]]=0}i.lencode=i.lendyn;i.lenbits=7;Ee={bits:i.lenbits};ke=l(f,i.lens,0,19,i.lencode,0,i.work,Ee);i.lenbits=Ee.bits;if(ke){e.msg=\"invalid code lengths set\";i.mode=J;break}i.have=0;i.mode=C;case C:while(i.have<i.nlen+i.ndist){for(;;){ue=i.lencode[se&(1<<i.lenbits)-1];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(be<16){se>>>=ce;le-=ce;i.lens[i.have++]=be}else{if(be===16){ze=ce+2;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=ce;le-=ce;if(i.have===0){e.msg=\"invalid bit length repeat\";i.mode=J;break}me=i.lens[i.have-1];he=3+(se&3);se>>>=2;le-=2}else if(be===17){ze=ce+3;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=ce;le-=ce;me=0;he=3+(se&7);se>>>=3;le-=3}else{ze=ce+7;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=ce;le-=ce;me=0;he=11+(se&127);se>>>=7;le-=7}if(i.have+he>i.nlen+i.ndist){e.msg=\"invalid bit length repeat\";i.mode=J;break}while(he--){i.lens[i.have++]=me}}}if(i.mode===J){break}if(i.lens[256]===0){e.msg=\"invalid code -- missing end-of-block\";i.mode=J;break}i.lenbits=9;Ee={bits:i.lenbits};ke=l(o,i.lens,0,i.nlen,i.lencode,0,i.work,Ee);i.lenbits=Ee.bits;if(ke){e.msg=\"invalid literal/lengths set\";i.mode=J;break}i.distbits=6;i.distcode=i.distdyn;Ee={bits:i.distbits};ke=l(h,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,Ee);i.distbits=Ee.bits;if(ke){e.msg=\"invalid distances set\";i.mode=J;break}i.mode=G;if(t===u){break e}case G:i.mode=H;case H:if(re>=6&&ne>=258){e.next_out=ae;e.avail_out=ne;e.next_in=ie;e.avail_in=re;i.hold=se;i.bits=le;s(e,oe);ae=e.next_out;te=e.output;ne=e.avail_out;ie=e.next_in;ee=e.input;re=e.avail_in;se=i.hold;le=i.bits;if(i.mode===F){i.back=-1}break}i.back=0;for(;;){ue=i.lencode[se&(1<<i.lenbits)-1];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(ve&&(ve&240)===0){we=ce;pe=ve;ge=be;for(;;){ue=i.lencode[ge+((se&(1<<we+pe)-1)>>we)];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(we+ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=we;le-=we;i.back+=we}se>>>=ce;le-=ce;i.back+=ce;i.length=be;if(ve===0){i.mode=q;break}if(ve&32){i.back=-1;i.mode=F;break}if(ve&64){e.msg=\"invalid literal/length code\";i.mode=J;break}i.extra=ve&15;i.mode=P;case P:if(i.extra){ze=i.extra;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.length+=se&(1<<i.extra)-1;se>>>=i.extra;le-=i.extra;i.back+=i.extra}i.was=i.length;i.mode=K;case K:for(;;){ue=i.distcode[se&(1<<i.distbits)-1];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if((ve&240)===0){we=ce;pe=ve;ge=be;for(;;){ue=i.distcode[ge+((se&(1<<we+pe)-1)>>we)];ce=ue>>>24;ve=ue>>>16&255;be=ue&65535;if(we+ce<=le){break}if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}se>>>=we;le-=we;i.back+=we}se>>>=ce;le-=ce;i.back+=ce;if(ve&64){e.msg=\"invalid distance code\";i.mode=J;break}i.offset=be;i.extra=ve&15;i.mode=W;case W:if(i.extra){ze=i.extra;while(le<ze){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}i.offset+=se&(1<<i.extra)-1;se>>>=i.extra;le-=i.extra;i.back+=i.extra}if(i.offset>i.dmax){e.msg=\"invalid distance too far back\";i.mode=J;break}i.mode=V;case V:if(ne===0){break e}he=oe-ne;if(i.offset>he){he=i.offset-he;if(he>i.whave){if(i.sane){e.msg=\"invalid distance too far back\";i.mode=J;break}}if(he>i.wnext){he-=i.wnext;_e=i.wsize-he}else{_e=i.wnext-he}if(he>i.length){he=i.length}de=i.window}else{de=te;_e=ae-i.offset;he=i.length}if(he>ne){he=ne}ne-=he;i.length-=he;do{te[ae++]=de[_e++]}while(--he);if(i.length===0){i.mode=H}break;case q:if(ne===0){break e}te[ae++]=i.length;ne--;i.mode=H;break;case X:if(i.wrap){while(le<32){if(re===0){break e}re--;se|=ee[ie++]<<le;le+=8}oe-=ne;e.total_out+=oe;i.total+=oe;if(oe){e.adler=i.check=i.flags?n(i.check,te,oe,ae-oe):r(i.check,te,oe,ae-oe)}oe=ne;if((i.flags?se:zswap32(se))!==i.check){e.msg=\"incorrect data check\";i.mode=J;break}se=0;le=0}i.mode=Y;case Y:if(i.wrap&&i.flags){while(le<32){if(re===0){break e}re--;se+=ee[ie++]<<le;le+=8}if(se!==(i.total&4294967295)){e.msg=\"incorrect length check\";i.mode=J;break}se=0;le=0}i.mode=j;case j:ke=v;break e;case J:ke=p;break e;case Q:return g;case $:default:return w}}e.next_out=ae;e.avail_out=ne;e.next_in=ie;e.avail_in=re;i.hold=se;i.bits=le;if(i.wsize||oe!==e.avail_out&&i.mode<J&&(i.mode<X||t!==_)){if(updatewindow(e,e.output,e.next_out,oe-e.avail_out)){i.mode=Q;return g}}fe-=e.avail_in;oe-=e.avail_out;e.total_in+=fe;e.total_out+=oe;i.total+=oe;if(i.wrap&&oe){e.adler=i.check=i.flags?n(i.check,te,oe,e.next_out-oe):r(i.check,te,oe,e.next_out-oe)}e.data_type=i.bits+(i.last?64:0)+(i.mode===F?128:0)+(i.mode===G||i.mode===B?256:0);if((fe===0&&oe===0||t===_)&&ke===c){ke=m}return ke}function inflateEnd(e){if(!e||!e.state){return w}var t=e.state;if(t.window){t.window=null}e.state=null;return c}function inflateGetHeader(e,t){var i;if(!e||!e.state){return w}i=e.state;if((i.wrap&2)===0){return w}i.head=t;t.done=false;return c}function inflateSetDictionary(e,t){var i=t.length;var a;var n;var s;if(!e||!e.state){return w}a=e.state;if(a.wrap!==0&&a.mode!==T){return w}if(a.mode===T){n=1;n=r(n,t,i,0);if(n!==a.check){return p}}s=updatewindow(e,t,i,i);if(s){a.mode=Q;return g}a.havedict=1;return c}t.inflateReset=inflateReset;t.inflateReset2=inflateReset2;t.inflateResetKeep=inflateResetKeep;t.inflateInit=inflateInit;t.inflateInit2=inflateInit2;t.inflate=inflate;t.inflateEnd=inflateEnd;t.inflateGetHeader=inflateGetHeader;t.inflateSetDictionary=inflateSetDictionary;t.inflateInfo=\"pako inflate (from Nodeca project)\"},19:function(e,t,i){var a=i(380);var r=15;var n=852;var s=592;var l=0;var f=1;var o=2;var h=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0];var _=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78];var d=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0];var u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function inflate_table(e,t,i,c,v,b,w,p){var g=p.bits;var m=0;var k=0;var y=0,E=0;var z=0;var Z=0;var x=0;var I=0;var R=0;var S=0;var L;var A;var T;var F;var N;var D=null;var B=0;var U;var O=new a.Buf16(r+1);var M=new a.Buf16(r+1);var C=null;var G=0;var H,P,K;for(m=0;m<=r;m++){O[m]=0}for(k=0;k<c;k++){O[t[i+k]]++}z=g;for(E=r;E>=1;E--){if(O[E]!==0){break}}if(z>E){z=E}if(E===0){v[b++]=1<<24|64<<16|0;v[b++]=1<<24|64<<16|0;p.bits=1;return 0}for(y=1;y<E;y++){if(O[y]!==0){break}}if(z<y){z=y}I=1;for(m=1;m<=r;m++){I<<=1;I-=O[m];if(I<0){return-1}}if(I>0&&(e===l||E!==1)){return-1}M[1]=0;for(m=1;m<r;m++){M[m+1]=M[m]+O[m]}for(k=0;k<c;k++){if(t[i+k]!==0){w[M[t[i+k]]++]=k}}if(e===l){D=C=w;U=19}else if(e===f){D=h;B-=257;C=_;G-=257;U=256}else{D=d;C=u;U=-1}S=0;k=0;m=y;N=b;Z=z;x=0;T=-1;R=1<<z;F=R-1;if(e===f&&R>n||e===o&&R>s){return 1}for(;;){H=m-x;if(w[k]<U){P=0;K=w[k]}else if(w[k]>U){P=C[G+w[k]];K=D[B+w[k]]}else{P=32+64;K=0}L=1<<m-x;A=1<<Z;y=A;do{A-=L;v[N+(S>>x)+A]=H<<24|P<<16|K|0}while(A!==0);L=1<<m-1;while(S&L){L>>=1}if(L!==0){S&=L-1;S+=L}else{S=0}k++;if(--O[m]===0){if(m===E){break}m=t[i+w[k]]}if(m>z&&(S&F)!==T){if(x===0){x=z}N+=y;Z=m-x;I=1<<Z;while(Z+x<E){I-=O[Z+x];if(I<=0){break}Z++;I<<=1}R+=1<<Z;if(e===f&&R>n||e===o&&R>s){return 1}T=S&F;v[T]=z<<24|Z<<16|N-b|0}}if(S!==0){v[N+S]=m-x<<24|64<<16|0}p.bits=z;return 0}},31:function(e){e.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},842:function(e,t,i){var a=i(380);var r=4;var n=0;var s=1;var l=2;function zero(e){var t=e.length;while(--t>=0){e[t]=0}}var f=0;var o=1;var h=2;var _=3;var d=258;var u=29;var c=256;var v=c+1+u;var b=30;var w=19;var p=2*v+1;var g=15;var m=16;var k=7;var y=256;var E=16;var z=17;var Z=18;var x=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];var I=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];var R=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];var S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];var L=512;var A=new Array((v+2)*2);zero(A);var T=new Array(b*2);zero(T);var F=new Array(L);zero(F);var N=new Array(d-_+1);zero(N);var D=new Array(u);zero(D);var B=new Array(b);zero(B);function StaticTreeDesc(e,t,i,a,r){this.static_tree=e;this.extra_bits=t;this.extra_base=i;this.elems=a;this.max_length=r;this.has_stree=e&&e.length}var U;var O;var M;function TreeDesc(e,t){this.dyn_tree=e;this.max_code=0;this.stat_desc=t}function d_code(e){return e<256?F[e]:F[256+(e>>>7)]}function put_short(e,t){e.pending_buf[e.pending++]=t&255;e.pending_buf[e.pending++]=t>>>8&255}function send_bits(e,t,i){if(e.bi_valid>m-i){e.bi_buf|=t<<e.bi_valid&65535;put_short(e,e.bi_buf);e.bi_buf=t>>m-e.bi_valid;e.bi_valid+=i-m}else{e.bi_buf|=t<<e.bi_valid&65535;e.bi_valid+=i}}function send_code(e,t,i){send_bits(e,i[t*2],i[t*2+1])}function bi_reverse(e,t){var i=0;do{i|=e&1;e>>>=1;i<<=1}while(--t>0);return i>>>1}function bi_flush(e){if(e.bi_valid===16){put_short(e,e.bi_buf);e.bi_buf=0;e.bi_valid=0}else if(e.bi_valid>=8){e.pending_buf[e.pending++]=e.bi_buf&255;e.bi_buf>>=8;e.bi_valid-=8}}function gen_bitlen(e,t){var i=t.dyn_tree;var a=t.max_code;var r=t.stat_desc.static_tree;var n=t.stat_desc.has_stree;var s=t.stat_desc.extra_bits;var l=t.stat_desc.extra_base;var f=t.stat_desc.max_length;var o;var h,_;var d;var u;var c;var v=0;for(d=0;d<=g;d++){e.bl_count[d]=0}i[e.heap[e.heap_max]*2+1]=0;for(o=e.heap_max+1;o<p;o++){h=e.heap[o];d=i[i[h*2+1]*2+1]+1;if(d>f){d=f;v++}i[h*2+1]=d;if(h>a){continue}e.bl_count[d]++;u=0;if(h>=l){u=s[h-l]}c=i[h*2];e.opt_len+=c*(d+u);if(n){e.static_len+=c*(r[h*2+1]+u)}}if(v===0){return}do{d=f-1;while(e.bl_count[d]===0){d--}e.bl_count[d]--;e.bl_count[d+1]+=2;e.bl_count[f]--;v-=2}while(v>0);for(d=f;d!==0;d--){h=e.bl_count[d];while(h!==0){_=e.heap[--o];if(_>a){continue}if(i[_*2+1]!==d){e.opt_len+=(d-i[_*2+1])*i[_*2];i[_*2+1]=d}h--}}}function gen_codes(e,t,i){var a=new Array(g+1);var r=0;var n;var s;for(n=1;n<=g;n++){a[n]=r=r+i[n-1]<<1}for(s=0;s<=t;s++){var l=e[s*2+1];if(l===0){continue}e[s*2]=bi_reverse(a[l]++,l)}}function tr_static_init(){var e;var t;var i;var a;var r;var n=new Array(g+1);i=0;for(a=0;a<u-1;a++){D[a]=i;for(e=0;e<1<<x[a];e++){N[i++]=a}}N[i-1]=a;r=0;for(a=0;a<16;a++){B[a]=r;for(e=0;e<1<<I[a];e++){F[r++]=a}}r>>=7;for(;a<b;a++){B[a]=r<<7;for(e=0;e<1<<I[a]-7;e++){F[256+r++]=a}}for(t=0;t<=g;t++){n[t]=0}e=0;while(e<=143){A[e*2+1]=8;e++;n[8]++}while(e<=255){A[e*2+1]=9;e++;n[9]++}while(e<=279){A[e*2+1]=7;e++;n[7]++}while(e<=287){A[e*2+1]=8;e++;n[8]++}gen_codes(A,v+1,n);for(e=0;e<b;e++){T[e*2+1]=5;T[e*2]=bi_reverse(e,5)}U=new StaticTreeDesc(A,x,c+1,v,g);O=new StaticTreeDesc(T,I,0,b,g);M=new StaticTreeDesc(new Array(0),R,0,w,k)}function init_block(e){var t;for(t=0;t<v;t++){e.dyn_ltree[t*2]=0}for(t=0;t<b;t++){e.dyn_dtree[t*2]=0}for(t=0;t<w;t++){e.bl_tree[t*2]=0}e.dyn_ltree[y*2]=1;e.opt_len=e.static_len=0;e.last_lit=e.matches=0}function bi_windup(e){if(e.bi_valid>8){put_short(e,e.bi_buf)}else if(e.bi_valid>0){e.pending_buf[e.pending++]=e.bi_buf}e.bi_buf=0;e.bi_valid=0}function copy_block(e,t,i,r){bi_windup(e);if(r){put_short(e,i);put_short(e,~i)}a.arraySet(e.pending_buf,e.window,t,i,e.pending);e.pending+=i}function smaller(e,t,i,a){var r=t*2;var n=i*2;return e[r]<e[n]||e[r]===e[n]&&a[t]<=a[i]}function pqdownheap(e,t,i){var a=e.heap[i];var r=i<<1;while(r<=e.heap_len){if(r<e.heap_len&&smaller(t,e.heap[r+1],e.heap[r],e.depth)){r++}if(smaller(t,a,e.heap[r],e.depth)){break}e.heap[i]=e.heap[r];i=r;r<<=1}e.heap[i]=a}function compress_block(e,t,i){var a;var r;var n=0;var s;var l;if(e.last_lit!==0){do{a=e.pending_buf[e.d_buf+n*2]<<8|e.pending_buf[e.d_buf+n*2+1];r=e.pending_buf[e.l_buf+n];n++;if(a===0){send_code(e,r,t)}else{s=N[r];send_code(e,s+c+1,t);l=x[s];if(l!==0){r-=D[s];send_bits(e,r,l)}a--;s=d_code(a);send_code(e,s,i);l=I[s];if(l!==0){a-=B[s];send_bits(e,a,l)}}}while(n<e.last_lit)}send_code(e,y,t)}function build_tree(e,t){var i=t.dyn_tree;var a=t.stat_desc.static_tree;var r=t.stat_desc.has_stree;var n=t.stat_desc.elems;var s,l;var f=-1;var o;e.heap_len=0;e.heap_max=p;for(s=0;s<n;s++){if(i[s*2]!==0){e.heap[++e.heap_len]=f=s;e.depth[s]=0}else{i[s*2+1]=0}}while(e.heap_len<2){o=e.heap[++e.heap_len]=f<2?++f:0;i[o*2]=1;e.depth[o]=0;e.opt_len--;if(r){e.static_len-=a[o*2+1]}}t.max_code=f;for(s=e.heap_len>>1;s>=1;s--){pqdownheap(e,i,s)}o=n;do{s=e.heap[1];e.heap[1]=e.heap[e.heap_len--];pqdownheap(e,i,1);l=e.heap[1];e.heap[--e.heap_max]=s;e.heap[--e.heap_max]=l;i[o*2]=i[s*2]+i[l*2];e.depth[o]=(e.depth[s]>=e.depth[l]?e.depth[s]:e.depth[l])+1;i[s*2+1]=i[l*2+1]=o;e.heap[1]=o++;pqdownheap(e,i,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1];gen_bitlen(e,t);gen_codes(i,f,e.bl_count)}function scan_tree(e,t,i){var a;var r=-1;var n;var s=t[0*2+1];var l=0;var f=7;var o=4;if(s===0){f=138;o=3}t[(i+1)*2+1]=65535;for(a=0;a<=i;a++){n=s;s=t[(a+1)*2+1];if(++l<f&&n===s){continue}else if(l<o){e.bl_tree[n*2]+=l}else if(n!==0){if(n!==r){e.bl_tree[n*2]++}e.bl_tree[E*2]++}else if(l<=10){e.bl_tree[z*2]++}else{e.bl_tree[Z*2]++}l=0;r=n;if(s===0){f=138;o=3}else if(n===s){f=6;o=3}else{f=7;o=4}}}function send_tree(e,t,i){var a;var r=-1;var n;var s=t[0*2+1];var l=0;var f=7;var o=4;if(s===0){f=138;o=3}for(a=0;a<=i;a++){n=s;s=t[(a+1)*2+1];if(++l<f&&n===s){continue}else if(l<o){do{send_code(e,n,e.bl_tree)}while(--l!==0)}else if(n!==0){if(n!==r){send_code(e,n,e.bl_tree);l--}send_code(e,E,e.bl_tree);send_bits(e,l-3,2)}else if(l<=10){send_code(e,z,e.bl_tree);send_bits(e,l-3,3)}else{send_code(e,Z,e.bl_tree);send_bits(e,l-11,7)}l=0;r=n;if(s===0){f=138;o=3}else if(n===s){f=6;o=3}else{f=7;o=4}}}function build_bl_tree(e){var t;scan_tree(e,e.dyn_ltree,e.l_desc.max_code);scan_tree(e,e.dyn_dtree,e.d_desc.max_code);build_tree(e,e.bl_desc);for(t=w-1;t>=3;t--){if(e.bl_tree[S[t]*2+1]!==0){break}}e.opt_len+=3*(t+1)+5+5+4;return t}function send_all_trees(e,t,i,a){var r;send_bits(e,t-257,5);send_bits(e,i-1,5);send_bits(e,a-4,4);for(r=0;r<a;r++){send_bits(e,e.bl_tree[S[r]*2+1],3)}send_tree(e,e.dyn_ltree,t-1);send_tree(e,e.dyn_dtree,i-1)}function detect_data_type(e){var t=4093624447;var i;for(i=0;i<=31;i++,t>>>=1){if(t&1&&e.dyn_ltree[i*2]!==0){return n}}if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0){return s}for(i=32;i<c;i++){if(e.dyn_ltree[i*2]!==0){return s}}return n}var C=false;function _tr_init(e){if(!C){tr_static_init();C=true}e.l_desc=new TreeDesc(e.dyn_ltree,U);e.d_desc=new TreeDesc(e.dyn_dtree,O);e.bl_desc=new TreeDesc(e.bl_tree,M);e.bi_buf=0;e.bi_valid=0;init_block(e)}function _tr_stored_block(e,t,i,a){send_bits(e,(f<<1)+(a?1:0),3);copy_block(e,t,i,true)}function _tr_align(e){send_bits(e,o<<1,3);send_code(e,y,A);bi_flush(e)}function _tr_flush_block(e,t,i,a){var n,s;var f=0;if(e.level>0){if(e.strm.data_type===l){e.strm.data_type=detect_data_type(e)}build_tree(e,e.l_desc);build_tree(e,e.d_desc);f=build_bl_tree(e);n=e.opt_len+3+7>>>3;s=e.static_len+3+7>>>3;if(s<=n){n=s}}else{n=s=i+5}if(i+4<=n&&t!==-1){_tr_stored_block(e,t,i,a)}else if(e.strategy===r||s===n){send_bits(e,(o<<1)+(a?1:0),3);compress_block(e,A,T)}else{send_bits(e,(h<<1)+(a?1:0),3);send_all_trees(e,e.l_desc.max_code+1,e.d_desc.max_code+1,f+1);compress_block(e,e.dyn_ltree,e.dyn_dtree)}init_block(e);if(a){bi_windup(e)}}function _tr_tally(e,t,i){e.pending_buf[e.d_buf+e.last_lit*2]=t>>>8&255;e.pending_buf[e.d_buf+e.last_lit*2+1]=t&255;e.pending_buf[e.l_buf+e.last_lit]=i&255;e.last_lit++;if(t===0){e.dyn_ltree[i*2]++}else{e.matches++;t--;e.dyn_ltree[(N[i]+c+1)*2]++;e.dyn_dtree[d_code(t)*2]++}return e.last_lit===e.lit_bufsize-1}t._tr_init=_tr_init;t._tr_stored_block=_tr_stored_block;t._tr_flush_block=_tr_flush_block;t._tr_tally=_tr_tally;t._tr_align=_tr_align},562:function(e){function ZStream(){this.input=null;this.next_in=0;this.avail_in=0;this.total_in=0;this.output=null;this.next_out=0;this.avail_out=0;this.total_out=0;this.msg=\"\";this.state=null;this.data_type=2;this.adler=0}e.exports=ZStream},491:function(e){e.exports=__webpack_require__(/*! assert */ \"./node_modules/assert/build/assert.js\")},300:function(e){e.exports=__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")},781:function(e){e.exports=__webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\")},837:function(e){e.exports=__webpack_require__(/*! util */ \"./node_modules/util/util.js\")}};var t={};function __nccwpck_require__(i){var a=t[i];if(a!==undefined){return a.exports}var r=t[i]={exports:{}};var n=true;try{e[i](r,r.exports,__nccwpck_require__);n=false}finally{if(n)delete t[i]}return r.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var i=__nccwpck_require__(23);module.exports=i})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/browserify-zlib/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/https-browserify/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/https-browserify/index.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var r={528:function(r,e,t){var o=t(685);var a=t(310);var i=r.exports;for(var n in o){if(o.hasOwnProperty(n))i[n]=o[n]}i.request=function(r,e){r=validateParams(r);return o.request.call(this,r,e)};i.get=function(r,e){r=validateParams(r);return o.get.call(this,r,e)};function validateParams(r){if(typeof r===\"string\"){r=a.parse(r)}if(!r.protocol){r.protocol=\"https:\"}if(r.protocol!==\"https:\"){throw new Error('Protocol \"'+r.protocol+'\" not supported. Expected \"https:\"')}return r}},685:function(r){\"use strict\";r.exports=__webpack_require__(/*! http */ \"./node_modules/next/dist/compiled/stream-http/index.js\")},310:function(r){\"use strict\";r.exports=__webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\")}};var e={};function __nccwpck_require__(t){var o=e[t];if(o!==undefined){return o.exports}var a=e[t]={exports:{}};var i=true;try{r[t](a,a.exports,__nccwpck_require__);i=false}finally{if(i)delete e[t]}return a.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(528);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL2h0dHBzLWJyb3dzZXJpZnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksT0FBTyxvQkFBb0IsYUFBYSxhQUFhLGdCQUFnQixnQkFBZ0IsaUNBQWlDLHdCQUF3QixvQkFBb0IsaUNBQWlDLG9CQUFvQixvQkFBb0IsNkJBQTZCLDJCQUEyQix3QkFBd0IsYUFBYSxnQkFBZ0Isb0JBQW9CLDBCQUEwQiw4RUFBOEUsVUFBVSxpQkFBaUIsYUFBYSxVQUFVLG1CQUFPLENBQUMsb0VBQU0sRUFBRSxpQkFBaUIsYUFBYSxVQUFVLG1CQUFPLENBQUMsa0VBQUssSUFBSSxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSywrQkFBK0IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvaHR0cHMtYnJvd3NlcmlmeS9pbmRleC5qcz8zOGNmIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciByPXs1Mjg6ZnVuY3Rpb24ocixlLHQpe3ZhciBvPXQoNjg1KTt2YXIgYT10KDMxMCk7dmFyIGk9ci5leHBvcnRzO2Zvcih2YXIgbiBpbiBvKXtpZihvLmhhc093blByb3BlcnR5KG4pKWlbbl09b1tuXX1pLnJlcXVlc3Q9ZnVuY3Rpb24ocixlKXtyPXZhbGlkYXRlUGFyYW1zKHIpO3JldHVybiBvLnJlcXVlc3QuY2FsbCh0aGlzLHIsZSl9O2kuZ2V0PWZ1bmN0aW9uKHIsZSl7cj12YWxpZGF0ZVBhcmFtcyhyKTtyZXR1cm4gby5nZXQuY2FsbCh0aGlzLHIsZSl9O2Z1bmN0aW9uIHZhbGlkYXRlUGFyYW1zKHIpe2lmKHR5cGVvZiByPT09XCJzdHJpbmdcIil7cj1hLnBhcnNlKHIpfWlmKCFyLnByb3RvY29sKXtyLnByb3RvY29sPVwiaHR0cHM6XCJ9aWYoci5wcm90b2NvbCE9PVwiaHR0cHM6XCIpe3Rocm93IG5ldyBFcnJvcignUHJvdG9jb2wgXCInK3IucHJvdG9jb2wrJ1wiIG5vdCBzdXBwb3J0ZWQuIEV4cGVjdGVkIFwiaHR0cHM6XCInKX1yZXR1cm4gcn19LDY4NTpmdW5jdGlvbihyKXtcInVzZSBzdHJpY3RcIjtyLmV4cG9ydHM9cmVxdWlyZShcImh0dHBcIil9LDMxMDpmdW5jdGlvbihyKXtcInVzZSBzdHJpY3RcIjtyLmV4cG9ydHM9cmVxdWlyZShcInVybFwiKX19O3ZhciBlPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIG89ZVt0XTtpZihvIT09dW5kZWZpbmVkKXtyZXR1cm4gby5leHBvcnRzfXZhciBhPWVbdF09e2V4cG9ydHM6e319O3ZhciBpPXRydWU7dHJ5e3JbdF0oYSxhLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7aT1mYWxzZX1maW5hbGx5e2lmKGkpZGVsZXRlIGVbdF19cmV0dXJuIGEuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg1MjgpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/https-browserify/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/native-url/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/native-url/index.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={452:function(e){\"use strict\";e.exports=__webpack_require__(/*! next/dist/compiled/querystring-es3 */ \"./node_modules/next/dist/compiled/querystring-es3/index.js\")}};var t={};function __nccwpck_require__(o){var a=t[o];if(a!==undefined){return a.exports}var s=t[o]={exports:{}};var n=true;try{e[o](s,s.exports,__nccwpck_require__);n=false}finally{if(n)delete t[o]}return s.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var o={};!function(){var e=o;var t,a=(t=__nccwpck_require__(452))&&\"object\"==typeof t&&\"default\"in t?t.default:t,s=/https?|ftp|gopher|file/;function r(e){\"string\"==typeof e&&(e=d(e));var t=function(e,t,o){var a=e.auth,s=e.hostname,n=e.protocol||\"\",p=e.pathname||\"\",c=e.hash||\"\",i=e.query||\"\",u=!1;a=a?encodeURIComponent(a).replace(/%3A/i,\":\")+\"@\":\"\",e.host?u=a+e.host:s&&(u=a+(~s.indexOf(\":\")?\"[\"+s+\"]\":s),e.port&&(u+=\":\"+e.port)),i&&\"object\"==typeof i&&(i=t.encode(i));var f=e.search||i&&\"?\"+i||\"\";return n&&\":\"!==n.substr(-1)&&(n+=\":\"),e.slashes||(!n||o.test(n))&&!1!==u?(u=\"//\"+(u||\"\"),p&&\"/\"!==p[0]&&(p=\"/\"+p)):u||(u=\"\"),c&&\"#\"!==c[0]&&(c=\"#\"+c),f&&\"?\"!==f[0]&&(f=\"?\"+f),{protocol:n,host:u,pathname:p=p.replace(/[?#]/g,encodeURIComponent),search:f=f.replace(\"#\",\"%23\"),hash:c}}(e,a,s);return\"\"+t.protocol+t.host+t.pathname+t.search+t.hash}var n=\"http://\",p=\"w.w\",c=n+p,i=/^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,u=/https?|ftp|gopher|file/;function h(e,t){var o=\"string\"==typeof e?d(e):e;e=\"object\"==typeof e?r(e):e;var a=d(t),s=\"\";o.protocol&&!o.slashes&&(s=o.protocol,e=e.replace(o.protocol,\"\"),s+=\"/\"===t[0]||\"/\"===e[0]?\"/\":\"\"),s&&a.protocol&&(s=\"\",a.slashes||(s=a.protocol,t=t.replace(a.protocol,\"\")));var p=e.match(i);p&&!a.protocol&&(e=e.substr((s=p[1]+(p[2]||\"\")).length),/^\\/\\/[^/]/.test(t)&&(s=s.slice(0,-1)));var f=new URL(e,c+\"/\"),m=new URL(t,f).toString().replace(c,\"\"),v=a.protocol||o.protocol;return v+=o.slashes||a.slashes?\"//\":\"\",!s&&v?m=m.replace(n,v):s&&(m=m.replace(n,\"\")),u.test(m)||~t.indexOf(\".\")||\"/\"===e.slice(-1)||\"/\"===t.slice(-1)||\"/\"!==m.slice(-1)||(m=m.slice(0,-1)),s&&(m=s+(\"/\"===m[0]?m.substr(1):m)),m}function l(){}l.prototype.parse=d,l.prototype.format=r,l.prototype.resolve=h,l.prototype.resolveObject=h;var f=/^https?|ftp|gopher|file/,m=/^(.*?)([#?].*)/,v=/^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,_=/^([a-z0-9.+-]*:)?\\/\\/\\/*/i,b=/^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;function d(e,t,o){if(void 0===t&&(t=!1),void 0===o&&(o=!1),e&&\"object\"==typeof e&&e instanceof l)return e;var s=(e=e.trim()).match(m);e=s?s[1].replace(/\\\\/g,\"/\")+s[2]:e.replace(/\\\\/g,\"/\"),b.test(e)&&\"/\"!==e.slice(-1)&&(e+=\"/\");var n=!/(^javascript)/.test(e)&&e.match(v),i=_.test(e),u=\"\";n&&(f.test(n[1])||(u=n[1].toLowerCase(),e=\"\"+n[2]+n[3]),n[2]||(i=!1,f.test(n[1])?(u=n[1],e=\"\"+n[3]):e=\"//\"+n[3]),3!==n[2].length&&1!==n[2].length||(u=n[1],e=\"/\"+n[3]));var g,y=(s?s[1]:e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/),w=y&&y[1],x=new l,C=\"\",U=\"\";try{g=new URL(e)}catch(t){C=t,u||o||!/^\\/\\//.test(e)||/^\\/\\/.+[@.]/.test(e)||(U=\"/\",e=e.substr(1));try{g=new URL(e,c)}catch(e){return x.protocol=u,x.href=u,x}}x.slashes=i&&!U,x.host=g.host===p?\"\":g.host,x.hostname=g.hostname===p?\"\":g.hostname.replace(/(\\[|\\])/g,\"\"),x.protocol=C?u||null:g.protocol,x.search=g.search.replace(/\\\\/g,\"%5C\"),x.hash=g.hash.replace(/\\\\/g,\"%5C\");var j=e.split(\"#\");!x.search&&~j[0].indexOf(\"?\")&&(x.search=\"?\"),x.hash||\"\"!==j[1]||(x.hash=\"#\"),x.query=t?a.decode(g.search.substr(1)):x.search.substr(1),x.pathname=U+(n?function(e){return e.replace(/['^|`]/g,(function(e){return\"%\"+e.charCodeAt().toString(16).toUpperCase()})).replace(/((?:%[0-9A-F]{2})+)/g,(function(e,t){try{return decodeURIComponent(t).split(\"\").map((function(e){var t=e.charCodeAt();return t>256||/^[a-z0-9]$/i.test(e)?e:\"%\"+t.toString(16).toUpperCase()})).join(\"\")}catch(e){return t}}))}(g.pathname):g.pathname),\"about:\"===x.protocol&&\"blank\"===x.pathname&&(x.protocol=\"\",x.pathname=\"\"),C&&\"/\"!==e[0]&&(x.pathname=x.pathname.substr(1)),u&&!f.test(u)&&\"/\"!==e.slice(-1)&&\"/\"===x.pathname&&(x.pathname=\"\"),x.path=x.pathname+x.search,x.auth=[g.username,g.password].map(decodeURIComponent).filter(Boolean).join(\":\"),x.port=g.port,w&&!x.host.endsWith(w)&&(x.host+=w,x.port=w.slice(1)),x.href=U?\"\"+x.pathname+x.search+x.hash:r(x);var q=/^(file)/.test(x.href)?[\"host\",\"hostname\"]:[];return Object.keys(x).forEach((function(e){~q.indexOf(e)||(x[e]=x[e]||null)})),x}e.parse=d,e.format=r,e.resolve=h,e.resolveObject=function(e,t){return d(h(e,t))},e.Url=l}();module.exports=o})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL25hdGl2ZS11cmwvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksT0FBTyxnQkFBZ0IsYUFBYSxVQUFVLG1CQUFPLENBQUMsc0dBQW9DLElBQUksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssU0FBUyxZQUFZLFFBQVEsK0dBQStHLGNBQWMsNkJBQTZCLHNCQUFzQiw0RkFBNEYsNktBQTZLLDZCQUE2QixpTEFBaUwseUdBQXlHLFFBQVEsc0RBQXNELHVHQUF1RyxnQkFBZ0IsZ0NBQWdDLDRCQUE0QixnQkFBZ0IsOEtBQThLLGlCQUFpQixnR0FBZ0csd0ZBQXdGLGtPQUFrTyxjQUFjLDJGQUEyRiwwRUFBMEUsSUFBSSw2REFBNkQsSUFBSSxhQUFhLGtCQUFrQix3RkFBd0YsNEJBQTRCLDZGQUE2Riw0REFBNEQsd0tBQXdLLDJGQUEyRixJQUFJLGFBQWEsU0FBUyx5RUFBeUUsSUFBSSxlQUFlLFNBQVMsZ0NBQWdDLHFOQUFxTixtQkFBbUIsb0tBQW9LLHdDQUF3QyxvREFBb0QsMEJBQTBCLEVBQUUscUJBQXFCLElBQUksd0RBQXdELHFCQUFxQix1RUFBdUUsWUFBWSxTQUFTLFVBQVUsR0FBRyxxYkFBcWIsb0RBQW9ELDJDQUEyQyxpQ0FBaUMsS0FBSywrREFBK0QsaUJBQWlCLFNBQVMsR0FBRyxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9uYXRpdmUtdXJsL2luZGV4LmpzPzcyNDUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezQ1MjpmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9cmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9xdWVyeXN0cmluZy1lczNcIil9fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKG8pe3ZhciBhPXRbb107aWYoYSE9PXVuZGVmaW5lZCl7cmV0dXJuIGEuZXhwb3J0c312YXIgcz10W29dPXtleHBvcnRzOnt9fTt2YXIgbj10cnVlO3RyeXtlW29dKHMscy5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO249ZmFsc2V9ZmluYWxseXtpZihuKWRlbGV0ZSB0W29dfXJldHVybiBzLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBvPXt9OyFmdW5jdGlvbigpe3ZhciBlPW87dmFyIHQsYT0odD1fX25jY3dwY2tfcmVxdWlyZV9fKDQ1MikpJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJkZWZhdWx0XCJpbiB0P3QuZGVmYXVsdDp0LHM9L2h0dHBzP3xmdHB8Z29waGVyfGZpbGUvO2Z1bmN0aW9uIHIoZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWQoZSkpO3ZhciB0PWZ1bmN0aW9uKGUsdCxvKXt2YXIgYT1lLmF1dGgscz1lLmhvc3RuYW1lLG49ZS5wcm90b2NvbHx8XCJcIixwPWUucGF0aG5hbWV8fFwiXCIsYz1lLmhhc2h8fFwiXCIsaT1lLnF1ZXJ5fHxcIlwiLHU9ITE7YT1hP2VuY29kZVVSSUNvbXBvbmVudChhKS5yZXBsYWNlKC8lM0EvaSxcIjpcIikrXCJAXCI6XCJcIixlLmhvc3Q/dT1hK2UuaG9zdDpzJiYodT1hKyh+cy5pbmRleE9mKFwiOlwiKT9cIltcIitzK1wiXVwiOnMpLGUucG9ydCYmKHUrPVwiOlwiK2UucG9ydCkpLGkmJlwib2JqZWN0XCI9PXR5cGVvZiBpJiYoaT10LmVuY29kZShpKSk7dmFyIGY9ZS5zZWFyY2h8fGkmJlwiP1wiK2l8fFwiXCI7cmV0dXJuIG4mJlwiOlwiIT09bi5zdWJzdHIoLTEpJiYobis9XCI6XCIpLGUuc2xhc2hlc3x8KCFufHxvLnRlc3QobikpJiYhMSE9PXU/KHU9XCIvL1wiKyh1fHxcIlwiKSxwJiZcIi9cIiE9PXBbMF0mJihwPVwiL1wiK3ApKTp1fHwodT1cIlwiKSxjJiZcIiNcIiE9PWNbMF0mJihjPVwiI1wiK2MpLGYmJlwiP1wiIT09ZlswXSYmKGY9XCI/XCIrZikse3Byb3RvY29sOm4saG9zdDp1LHBhdGhuYW1lOnA9cC5yZXBsYWNlKC9bPyNdL2csZW5jb2RlVVJJQ29tcG9uZW50KSxzZWFyY2g6Zj1mLnJlcGxhY2UoXCIjXCIsXCIlMjNcIiksaGFzaDpjfX0oZSxhLHMpO3JldHVyblwiXCIrdC5wcm90b2NvbCt0Lmhvc3QrdC5wYXRobmFtZSt0LnNlYXJjaCt0Lmhhc2h9dmFyIG49XCJodHRwOi8vXCIscD1cIncud1wiLGM9bitwLGk9L14oW2EtejAtOS4rLV0qOlxcL1xcL1xcLykoW2EtejAtOS4rLV06XFwvKik/L2ksdT0vaHR0cHM/fGZ0cHxnb3BoZXJ8ZmlsZS87ZnVuY3Rpb24gaChlLHQpe3ZhciBvPVwic3RyaW5nXCI9PXR5cGVvZiBlP2QoZSk6ZTtlPVwib2JqZWN0XCI9PXR5cGVvZiBlP3IoZSk6ZTt2YXIgYT1kKHQpLHM9XCJcIjtvLnByb3RvY29sJiYhby5zbGFzaGVzJiYocz1vLnByb3RvY29sLGU9ZS5yZXBsYWNlKG8ucHJvdG9jb2wsXCJcIikscys9XCIvXCI9PT10WzBdfHxcIi9cIj09PWVbMF0/XCIvXCI6XCJcIikscyYmYS5wcm90b2NvbCYmKHM9XCJcIixhLnNsYXNoZXN8fChzPWEucHJvdG9jb2wsdD10LnJlcGxhY2UoYS5wcm90b2NvbCxcIlwiKSkpO3ZhciBwPWUubWF0Y2goaSk7cCYmIWEucHJvdG9jb2wmJihlPWUuc3Vic3RyKChzPXBbMV0rKHBbMl18fFwiXCIpKS5sZW5ndGgpLC9eXFwvXFwvW14vXS8udGVzdCh0KSYmKHM9cy5zbGljZSgwLC0xKSkpO3ZhciBmPW5ldyBVUkwoZSxjK1wiL1wiKSxtPW5ldyBVUkwodCxmKS50b1N0cmluZygpLnJlcGxhY2UoYyxcIlwiKSx2PWEucHJvdG9jb2x8fG8ucHJvdG9jb2w7cmV0dXJuIHYrPW8uc2xhc2hlc3x8YS5zbGFzaGVzP1wiLy9cIjpcIlwiLCFzJiZ2P209bS5yZXBsYWNlKG4sdik6cyYmKG09bS5yZXBsYWNlKG4sXCJcIikpLHUudGVzdChtKXx8fnQuaW5kZXhPZihcIi5cIil8fFwiL1wiPT09ZS5zbGljZSgtMSl8fFwiL1wiPT09dC5zbGljZSgtMSl8fFwiL1wiIT09bS5zbGljZSgtMSl8fChtPW0uc2xpY2UoMCwtMSkpLHMmJihtPXMrKFwiL1wiPT09bVswXT9tLnN1YnN0cigxKTptKSksbX1mdW5jdGlvbiBsKCl7fWwucHJvdG90eXBlLnBhcnNlPWQsbC5wcm90b3R5cGUuZm9ybWF0PXIsbC5wcm90b3R5cGUucmVzb2x2ZT1oLGwucHJvdG90eXBlLnJlc29sdmVPYmplY3Q9aDt2YXIgZj0vXmh0dHBzP3xmdHB8Z29waGVyfGZpbGUvLG09L14oLio/KShbIz9dLiopLyx2PS9eKFthLXowLTkuKy1dKjopKFxcL3swLDN9KSguKikvaSxfPS9eKFthLXowLTkuKy1dKjopP1xcL1xcL1xcLyovaSxiPS9eKFthLXowLTkuKy1dKjopKFxcL3swLDJ9KVxcWyguKilcXF0kL2k7ZnVuY3Rpb24gZChlLHQsbyl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLHZvaWQgMD09PW8mJihvPSExKSxlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSBpbnN0YW5jZW9mIGwpcmV0dXJuIGU7dmFyIHM9KGU9ZS50cmltKCkpLm1hdGNoKG0pO2U9cz9zWzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikrc1syXTplLnJlcGxhY2UoL1xcXFwvZyxcIi9cIiksYi50ZXN0KGUpJiZcIi9cIiE9PWUuc2xpY2UoLTEpJiYoZSs9XCIvXCIpO3ZhciBuPSEvKF5qYXZhc2NyaXB0KS8udGVzdChlKSYmZS5tYXRjaCh2KSxpPV8udGVzdChlKSx1PVwiXCI7biYmKGYudGVzdChuWzFdKXx8KHU9blsxXS50b0xvd2VyQ2FzZSgpLGU9XCJcIituWzJdK25bM10pLG5bMl18fChpPSExLGYudGVzdChuWzFdKT8odT1uWzFdLGU9XCJcIituWzNdKTplPVwiLy9cIituWzNdKSwzIT09blsyXS5sZW5ndGgmJjEhPT1uWzJdLmxlbmd0aHx8KHU9blsxXSxlPVwiL1wiK25bM10pKTt2YXIgZyx5PShzP3NbMV06ZSkubWF0Y2goL15odHRwcz86XFwvXFwvW14vXSsoOlswLTldKykoPz1cXC98JCkvKSx3PXkmJnlbMV0seD1uZXcgbCxDPVwiXCIsVT1cIlwiO3RyeXtnPW5ldyBVUkwoZSl9Y2F0Y2godCl7Qz10LHV8fG98fCEvXlxcL1xcLy8udGVzdChlKXx8L15cXC9cXC8uK1tALl0vLnRlc3QoZSl8fChVPVwiL1wiLGU9ZS5zdWJzdHIoMSkpO3RyeXtnPW5ldyBVUkwoZSxjKX1jYXRjaChlKXtyZXR1cm4geC5wcm90b2NvbD11LHguaHJlZj11LHh9fXguc2xhc2hlcz1pJiYhVSx4Lmhvc3Q9Zy5ob3N0PT09cD9cIlwiOmcuaG9zdCx4Lmhvc3RuYW1lPWcuaG9zdG5hbWU9PT1wP1wiXCI6Zy5ob3N0bmFtZS5yZXBsYWNlKC8oXFxbfFxcXSkvZyxcIlwiKSx4LnByb3RvY29sPUM/dXx8bnVsbDpnLnByb3RvY29sLHguc2VhcmNoPWcuc2VhcmNoLnJlcGxhY2UoL1xcXFwvZyxcIiU1Q1wiKSx4Lmhhc2g9Zy5oYXNoLnJlcGxhY2UoL1xcXFwvZyxcIiU1Q1wiKTt2YXIgaj1lLnNwbGl0KFwiI1wiKTsheC5zZWFyY2gmJn5qWzBdLmluZGV4T2YoXCI/XCIpJiYoeC5zZWFyY2g9XCI/XCIpLHguaGFzaHx8XCJcIiE9PWpbMV18fCh4Lmhhc2g9XCIjXCIpLHgucXVlcnk9dD9hLmRlY29kZShnLnNlYXJjaC5zdWJzdHIoMSkpOnguc2VhcmNoLnN1YnN0cigxKSx4LnBhdGhuYW1lPVUrKG4/ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvWydefGBdL2csKGZ1bmN0aW9uKGUpe3JldHVyblwiJVwiK2UuY2hhckNvZGVBdCgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSkpLnJlcGxhY2UoLygoPzolWzAtOUEtRl17Mn0pKykvZywoZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh0KS5zcGxpdChcIlwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhckNvZGVBdCgpO3JldHVybiB0PjI1Nnx8L15bYS16MC05XSQvaS50ZXN0KGUpP2U6XCIlXCIrdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX0pKS5qb2luKFwiXCIpfWNhdGNoKGUpe3JldHVybiB0fX0pKX0oZy5wYXRobmFtZSk6Zy5wYXRobmFtZSksXCJhYm91dDpcIj09PXgucHJvdG9jb2wmJlwiYmxhbmtcIj09PXgucGF0aG5hbWUmJih4LnByb3RvY29sPVwiXCIseC5wYXRobmFtZT1cIlwiKSxDJiZcIi9cIiE9PWVbMF0mJih4LnBhdGhuYW1lPXgucGF0aG5hbWUuc3Vic3RyKDEpKSx1JiYhZi50ZXN0KHUpJiZcIi9cIiE9PWUuc2xpY2UoLTEpJiZcIi9cIj09PXgucGF0aG5hbWUmJih4LnBhdGhuYW1lPVwiXCIpLHgucGF0aD14LnBhdGhuYW1lK3guc2VhcmNoLHguYXV0aD1bZy51c2VybmFtZSxnLnBhc3N3b3JkXS5tYXAoZGVjb2RlVVJJQ29tcG9uZW50KS5maWx0ZXIoQm9vbGVhbikuam9pbihcIjpcIikseC5wb3J0PWcucG9ydCx3JiYheC5ob3N0LmVuZHNXaXRoKHcpJiYoeC5ob3N0Kz13LHgucG9ydD13LnNsaWNlKDEpKSx4LmhyZWY9VT9cIlwiK3gucGF0aG5hbWUreC5zZWFyY2greC5oYXNoOnIoeCk7dmFyIHE9L14oZmlsZSkvLnRlc3QoeC5ocmVmKT9bXCJob3N0XCIsXCJob3N0bmFtZVwiXTpbXTtyZXR1cm4gT2JqZWN0LmtleXMoeCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7fnEuaW5kZXhPZihlKXx8KHhbZV09eFtlXXx8bnVsbCl9KSkseH1lLnBhcnNlPWQsZS5mb3JtYXQ9cixlLnJlc29sdmU9aCxlLnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZChoKGUsdCkpfSxlLlVybD1sfSgpO21vZHVsZS5leHBvcnRzPW99KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/native-url/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/querystring-es3/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/querystring-es3/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){\"use strict\";var e={815:function(e){function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}e.exports=function(e,n,t,o){n=n||\"&\";t=t||\"=\";var a={};if(typeof e!==\"string\"||e.length===0){return a}var i=/\\+/g;e=e.split(n);var u=1e3;if(o&&typeof o.maxKeys===\"number\"){u=o.maxKeys}var c=e.length;if(u>0&&c>u){c=u}for(var p=0;p<c;++p){var f=e[p].replace(i,\"%20\"),s=f.indexOf(t),_,l,y,d;if(s>=0){_=f.substr(0,s);l=f.substr(s+1)}else{_=f;l=\"\"}y=decodeURIComponent(_);d=decodeURIComponent(l);if(!hasOwnProperty(a,y)){a[y]=d}else if(r(a[y])){a[y].push(d)}else{a[y]=[a[y],d]}}return a};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"}},577:function(e){var stringifyPrimitive=function(e){switch(typeof e){case\"string\":return e;case\"boolean\":return e?\"true\":\"false\";case\"number\":return isFinite(e)?e:\"\";default:return\"\"}};e.exports=function(e,t,o,a){t=t||\"&\";o=o||\"=\";if(e===null){e=undefined}if(typeof e===\"object\"){return map(n(e),(function(n){var a=encodeURIComponent(stringifyPrimitive(n))+o;if(r(e[n])){return map(e[n],(function(e){return a+encodeURIComponent(stringifyPrimitive(e))})).join(t)}else{return a+encodeURIComponent(stringifyPrimitive(e[n]))}})).join(t)}if(!a)return\"\";return encodeURIComponent(stringifyPrimitive(a))+o+encodeURIComponent(stringifyPrimitive(e))};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"};function map(e,r){if(e.map)return e.map(r);var n=[];for(var t=0;t<e.length;t++){n.push(r(e[t],t))}return n}var n=Object.keys||function(e){var r=[];for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))r.push(n)}return r}}};var r={};function __nccwpck_require__(n){var t=r[n];if(t!==undefined){return t.exports}var o=r[n]={exports:{}};var a=true;try{e[n](o,o.exports,__nccwpck_require__);a=false}finally{if(a)delete r[n]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var n={};!function(){var e=n;e.decode=e.parse=__nccwpck_require__(815);e.encode=e.stringify=__nccwpck_require__(577)}();module.exports=n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxhQUFhLE9BQU8sZ0JBQWdCLDZCQUE2QixpREFBaUQsNEJBQTRCLFNBQVMsU0FBUyxTQUFTLHNDQUFzQyxTQUFTLFlBQVksYUFBYSxVQUFVLG1DQUFtQyxZQUFZLGVBQWUsYUFBYSxJQUFJLFlBQVksSUFBSSxLQUFLLG1EQUFtRCxTQUFTLGdCQUFnQixnQkFBZ0IsS0FBSyxJQUFJLEtBQUssd0JBQXdCLHdCQUF3Qix5QkFBeUIsT0FBTyxpQkFBaUIsYUFBYSxLQUFLLGVBQWUsVUFBVSxpQ0FBaUMsNkRBQTZELGlCQUFpQixtQ0FBbUMsaUJBQWlCLHNCQUFzQixzQ0FBc0MscUNBQXFDLG1CQUFtQiw0QkFBNEIsU0FBUyxTQUFTLGFBQWEsWUFBWSx3QkFBd0IsNkJBQTZCLGtEQUFrRCxZQUFZLDZCQUE2QixtREFBbUQsV0FBVyxLQUFLLHVEQUF1RCxXQUFXLGVBQWUsOEZBQThGLGlDQUFpQyw2REFBNkQsa0JBQWtCLHlCQUF5QixTQUFTLFlBQVksV0FBVyxLQUFLLGtCQUFrQixTQUFTLCtCQUErQixTQUFTLGdCQUFnQix1REFBdUQsWUFBWSxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSyxTQUFTLFlBQVksUUFBUSwwQ0FBMEMsOENBQThDLEdBQUcsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzPzI0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezgxNTpmdW5jdGlvbihlKXtmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShlLHIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHQsbyl7bj1ufHxcIiZcIjt0PXR8fFwiPVwiO3ZhciBhPXt9O2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcInx8ZS5sZW5ndGg9PT0wKXtyZXR1cm4gYX12YXIgaT0vXFwrL2c7ZT1lLnNwbGl0KG4pO3ZhciB1PTFlMztpZihvJiZ0eXBlb2Ygby5tYXhLZXlzPT09XCJudW1iZXJcIil7dT1vLm1heEtleXN9dmFyIGM9ZS5sZW5ndGg7aWYodT4wJiZjPnUpe2M9dX1mb3IodmFyIHA9MDtwPGM7KytwKXt2YXIgZj1lW3BdLnJlcGxhY2UoaSxcIiUyMFwiKSxzPWYuaW5kZXhPZih0KSxfLGwseSxkO2lmKHM+PTApe189Zi5zdWJzdHIoMCxzKTtsPWYuc3Vic3RyKHMrMSl9ZWxzZXtfPWY7bD1cIlwifXk9ZGVjb2RlVVJJQ29tcG9uZW50KF8pO2Q9ZGVjb2RlVVJJQ29tcG9uZW50KGwpO2lmKCFoYXNPd25Qcm9wZXJ0eShhLHkpKXthW3ldPWR9ZWxzZSBpZihyKGFbeV0pKXthW3ldLnB1c2goZCl9ZWxzZXthW3ldPVthW3ldLGRdfX1yZXR1cm4gYX07dmFyIHI9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT09PVwiW29iamVjdCBBcnJheV1cIn19LDU3NzpmdW5jdGlvbihlKXt2YXIgc3RyaW5naWZ5UHJpbWl0aXZlPWZ1bmN0aW9uKGUpe3N3aXRjaCh0eXBlb2YgZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGU7Y2FzZVwiYm9vbGVhblwiOnJldHVybiBlP1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoZSk/ZTpcIlwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbyxhKXt0PXR8fFwiJlwiO289b3x8XCI9XCI7aWYoZT09PW51bGwpe2U9dW5kZWZpbmVkfWlmKHR5cGVvZiBlPT09XCJvYmplY3RcIil7cmV0dXJuIG1hcChuKGUpLChmdW5jdGlvbihuKXt2YXIgYT1lbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG4pKStvO2lmKHIoZVtuXSkpe3JldHVybiBtYXAoZVtuXSwoZnVuY3Rpb24oZSl7cmV0dXJuIGErZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShlKSl9KSkuam9pbih0KX1lbHNle3JldHVybiBhK2VuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoZVtuXSkpfX0pKS5qb2luKHQpfWlmKCFhKXJldHVyblwiXCI7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoYSkpK28rZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShlKSl9O3ZhciByPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk9PT1cIltvYmplY3QgQXJyYXldXCJ9O2Z1bmN0aW9uIG1hcChlLHIpe2lmKGUubWFwKXJldHVybiBlLm1hcChyKTt2YXIgbj1bXTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7bi5wdXNoKHIoZVt0XSx0KSl9cmV0dXJuIG59dmFyIG49T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciByPVtdO2Zvcih2YXIgbiBpbiBlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSlyLnB1c2gobil9cmV0dXJuIHJ9fX07dmFyIHI9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhuKXt2YXIgdD1yW25dO2lmKHQhPT11bmRlZmluZWQpe3JldHVybiB0LmV4cG9ydHN9dmFyIG89cltuXT17ZXhwb3J0czp7fX07dmFyIGE9dHJ1ZTt0cnl7ZVtuXShvLG8uZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTthPWZhbHNlfWZpbmFsbHl7aWYoYSlkZWxldGUgcltuXX1yZXR1cm4gby5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgbj17fTshZnVuY3Rpb24oKXt2YXIgZT1uO2UuZGVjb2RlPWUucGFyc2U9X19uY2N3cGNrX3JlcXVpcmVfXyg4MTUpO2UuZW5jb2RlPWUuc3RyaW5naWZ5PV9fbmNjd3Bja19yZXF1aXJlX18oNTc3KX0oKTttb2R1bGUuZXhwb3J0cz1ufSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/querystring-es3/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/stream-http/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/stream-http/index.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n(function(){var e={523:function(e){e.exports={100:\"Continue\",101:\"Switching Protocols\",102:\"Processing\",200:\"OK\",201:\"Created\",202:\"Accepted\",203:\"Non-Authoritative Information\",204:\"No Content\",205:\"Reset Content\",206:\"Partial Content\",207:\"Multi-Status\",208:\"Already Reported\",226:\"IM Used\",300:\"Multiple Choices\",301:\"Moved Permanently\",302:\"Found\",303:\"See Other\",304:\"Not Modified\",305:\"Use Proxy\",307:\"Temporary Redirect\",308:\"Permanent Redirect\",400:\"Bad Request\",401:\"Unauthorized\",402:\"Payment Required\",403:\"Forbidden\",404:\"Not Found\",405:\"Method Not Allowed\",406:\"Not Acceptable\",407:\"Proxy Authentication Required\",408:\"Request Timeout\",409:\"Conflict\",410:\"Gone\",411:\"Length Required\",412:\"Precondition Failed\",413:\"Payload Too Large\",414:\"URI Too Long\",415:\"Unsupported Media Type\",416:\"Range Not Satisfiable\",417:\"Expectation Failed\",418:\"I'm a teapot\",421:\"Misdirected Request\",422:\"Unprocessable Entity\",423:\"Locked\",424:\"Failed Dependency\",425:\"Unordered Collection\",426:\"Upgrade Required\",428:\"Precondition Required\",429:\"Too Many Requests\",431:\"Request Header Fields Too Large\",451:\"Unavailable For Legal Reasons\",500:\"Internal Server Error\",501:\"Not Implemented\",502:\"Bad Gateway\",503:\"Service Unavailable\",504:\"Gateway Timeout\",505:\"HTTP Version Not Supported\",506:\"Variant Also Negotiates\",507:\"Insufficient Storage\",508:\"Loop Detected\",509:\"Bandwidth Limit Exceeded\",510:\"Not Extended\",511:\"Network Authentication Required\"}},782:function(e){if(typeof Object.create===\"function\"){e.exports=function inherits(e,t){if(t){e.super_=t;e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}})}}}else{e.exports=function inherits(e,t){if(t){e.super_=t;var TempCtor=function(){};TempCtor.prototype=t.prototype;e.prototype=new TempCtor;e.prototype.constructor=e}}}},646:function(e){\"use strict\";const t={};function createErrorType(e,r,n){if(!n){n=Error}function getMessage(e,t,n){if(typeof r===\"string\"){return r}else{return r(e,t,n)}}class NodeError extends n{constructor(e,t,r){super(getMessage(e,t,r))}}NodeError.prototype.name=n.name;NodeError.prototype.code=e;t[e]=NodeError}function oneOf(e,t){if(Array.isArray(e)){const r=e.length;e=e.map((e=>String(e)));if(r>2){return`one of ${t} ${e.slice(0,r-1).join(\", \")}, or `+e[r-1]}else if(r===2){return`one of ${t} ${e[0]} or ${e[1]}`}else{return`of ${t} ${e[0]}`}}else{return`of ${t} ${String(e)}`}}function startsWith(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t}function endsWith(e,t,r){if(r===undefined||r>e.length){r=e.length}return e.substring(r-t.length,r)===t}function includes(e,t,r){if(typeof r!==\"number\"){r=0}if(r+t.length>e.length){return false}else{return e.indexOf(t,r)!==-1}}createErrorType(\"ERR_INVALID_OPT_VALUE\",(function(e,t){return'The value \"'+t+'\" is invalid for option \"'+e+'\"'}),TypeError);createErrorType(\"ERR_INVALID_ARG_TYPE\",(function(e,t,r){let n;if(typeof t===\"string\"&&startsWith(t,\"not \")){n=\"must not be\";t=t.replace(/^not /,\"\")}else{n=\"must be\"}let i;if(endsWith(e,\" argument\")){i=`The ${e} ${n} ${oneOf(t,\"type\")}`}else{const r=includes(e,\".\")?\"property\":\"argument\";i=`The \"${e}\" ${r} ${n} ${oneOf(t,\"type\")}`}i+=`. Received type ${typeof r}`;return i}),TypeError);createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\",\"stream.push() after EOF\");createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\",(function(e){return\"The \"+e+\" method is not implemented\"}));createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\",\"Premature close\");createErrorType(\"ERR_STREAM_DESTROYED\",(function(e){return\"Cannot call \"+e+\" after a stream was destroyed\"}));createErrorType(\"ERR_MULTIPLE_CALLBACK\",\"Callback called multiple times\");createErrorType(\"ERR_STREAM_CANNOT_PIPE\",\"Cannot pipe, not readable\");createErrorType(\"ERR_STREAM_WRITE_AFTER_END\",\"write after end\");createErrorType(\"ERR_STREAM_NULL_VALUES\",\"May not write null values to stream\",TypeError);createErrorType(\"ERR_UNKNOWN_ENCODING\",(function(e){return\"Unknown encoding: \"+e}),TypeError);createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\",\"stream.unshift() after end event\");e.exports.q=t},403:function(e,t,r){\"use strict\";var n=Object.keys||function(e){var t=[];for(var r in e){t.push(r)}return t};e.exports=Duplex;var i=r(709);var a=r(337);r(782)(Duplex,i);{var o=n(a.prototype);for(var s=0;s<o.length;s++){var f=o[s];if(!Duplex.prototype[f])Duplex.prototype[f]=a.prototype[f]}}function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);i.call(this,e);a.call(this,e);this.allowHalfOpen=true;if(e){if(e.readable===false)this.readable=false;if(e.writable===false)this.writable=false;if(e.allowHalfOpen===false){this.allowHalfOpen=false;this.once(\"end\",onend)}}}Object.defineProperty(Duplex.prototype,\"writableHighWaterMark\",{enumerable:false,get:function get(){return this._writableState.highWaterMark}});Object.defineProperty(Duplex.prototype,\"writableBuffer\",{enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer()}});Object.defineProperty(Duplex.prototype,\"writableLength\",{enumerable:false,get:function get(){return this._writableState.length}});function onend(){if(this._writableState.ended)return;process.nextTick(onEndNT,this)}function onEndNT(e){e.end()}Object.defineProperty(Duplex.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._readableState===undefined||this._writableState===undefined){return false}return this._readableState.destroyed&&this._writableState.destroyed},set:function set(e){if(this._readableState===undefined||this._writableState===undefined){return}this._readableState.destroyed=e;this._writableState.destroyed=e}})},889:function(e,t,r){\"use strict\";e.exports=PassThrough;var n=r(170);r(782)(PassThrough,n);function PassThrough(e){if(!(this instanceof PassThrough))return new PassThrough(e);n.call(this,e)}PassThrough.prototype._transform=function(e,t,r){r(null,e)}},709:function(e,t,r){\"use strict\";e.exports=Readable;var n;Readable.ReadableState=ReadableState;var i=r(361).EventEmitter;var a=function EElistenerCount(e,t){return e.listeners(t).length};var o=r(678);var s=r(300).Buffer;var f=__webpack_require__.g.Uint8Array||function(){};function _uint8ArrayToBuffer(e){return s.from(e)}function _isUint8Array(e){return s.isBuffer(e)||e instanceof f}var l=r(837);var u;if(l&&l.debuglog){u=l.debuglog(\"stream\")}else{u=function debug(){}}var d=r(379);var c=r(25);var h=r(776),p=h.getHighWaterMark;var b=r(646).q,y=b.ERR_INVALID_ARG_TYPE,g=b.ERR_STREAM_PUSH_AFTER_EOF,_=b.ERR_METHOD_NOT_IMPLEMENTED,v=b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;var m;var w;var R;r(782)(Readable,o);var S=c.errorOrDestroy;var E=[\"error\",\"close\",\"destroy\",\"pause\",\"resume\"];function prependListener(e,t,r){if(typeof e.prependListener===\"function\")return e.prependListener(t,r);if(!e._events||!e._events[t])e.on(t,r);else if(Array.isArray(e._events[t]))e._events[t].unshift(r);else e._events[t]=[r,e._events[t]]}function ReadableState(e,t,i){n=n||r(403);e=e||{};if(typeof i!==\"boolean\")i=t instanceof n;this.objectMode=!!e.objectMode;if(i)this.objectMode=this.objectMode||!!e.readableObjectMode;this.highWaterMark=p(this,e,\"readableHighWaterMark\",i);this.buffer=new d;this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;this.sync=true;this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this.paused=true;this.emitClose=e.emitClose!==false;this.autoDestroy=!!e.autoDestroy;this.destroyed=false;this.defaultEncoding=e.defaultEncoding||\"utf8\";this.awaitDrain=0;this.readingMore=false;this.decoder=null;this.encoding=null;if(e.encoding){if(!m)m=r(704).s;this.decoder=new m(e.encoding);this.encoding=e.encoding}}function Readable(e){n=n||r(403);if(!(this instanceof Readable))return new Readable(e);var t=this instanceof n;this._readableState=new ReadableState(e,this,t);this.readable=true;if(e){if(typeof e.read===\"function\")this._read=e.read;if(typeof e.destroy===\"function\")this._destroy=e.destroy}o.call(this)}Object.defineProperty(Readable.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._readableState===undefined){return false}return this._readableState.destroyed},set:function set(e){if(!this._readableState){return}this._readableState.destroyed=e}});Readable.prototype.destroy=c.destroy;Readable.prototype._undestroy=c.undestroy;Readable.prototype._destroy=function(e,t){t(e)};Readable.prototype.push=function(e,t){var r=this._readableState;var n;if(!r.objectMode){if(typeof e===\"string\"){t=t||r.defaultEncoding;if(t!==r.encoding){e=s.from(e,t);t=\"\"}n=true}}else{n=true}return readableAddChunk(this,e,t,false,n)};Readable.prototype.unshift=function(e){return readableAddChunk(this,e,null,true,false)};function readableAddChunk(e,t,r,n,i){u(\"readableAddChunk\",t);var a=e._readableState;if(t===null){a.reading=false;onEofChunk(e,a)}else{var o;if(!i)o=chunkInvalid(a,t);if(o){S(e,o)}else if(a.objectMode||t&&t.length>0){if(typeof t!==\"string\"&&!a.objectMode&&Object.getPrototypeOf(t)!==s.prototype){t=_uint8ArrayToBuffer(t)}if(n){if(a.endEmitted)S(e,new v);else addChunk(e,a,t,true)}else if(a.ended){S(e,new g)}else if(a.destroyed){return false}else{a.reading=false;if(a.decoder&&!r){t=a.decoder.write(t);if(a.objectMode||t.length!==0)addChunk(e,a,t,false);else maybeReadMore(e,a)}else{addChunk(e,a,t,false)}}}else if(!n){a.reading=false;maybeReadMore(e,a)}}return!a.ended&&(a.length<a.highWaterMark||a.length===0)}function addChunk(e,t,r,n){if(t.flowing&&t.length===0&&!t.sync){t.awaitDrain=0;e.emit(\"data\",r)}else{t.length+=t.objectMode?1:r.length;if(n)t.buffer.unshift(r);else t.buffer.push(r);if(t.needReadable)emitReadable(e)}maybeReadMore(e,t)}function chunkInvalid(e,t){var r;if(!_isUint8Array(t)&&typeof t!==\"string\"&&t!==undefined&&!e.objectMode){r=new y(\"chunk\",[\"string\",\"Buffer\",\"Uint8Array\"],t)}return r}Readable.prototype.isPaused=function(){return this._readableState.flowing===false};Readable.prototype.setEncoding=function(e){if(!m)m=r(704).s;var t=new m(e);this._readableState.decoder=t;this._readableState.encoding=this._readableState.decoder.encoding;var n=this._readableState.buffer.head;var i=\"\";while(n!==null){i+=t.write(n.data);n=n.next}this._readableState.buffer.clear();if(i!==\"\")this._readableState.buffer.push(i);this._readableState.length=i.length;return this};var T=1073741824;function computeNewHighWaterMark(e){if(e>=T){e=T}else{e--;e|=e>>>1;e|=e>>>2;e|=e>>>4;e|=e>>>8;e|=e>>>16;e++}return e}function howMuchToRead(e,t){if(e<=0||t.length===0&&t.ended)return 0;if(t.objectMode)return 1;if(e!==e){if(t.flowing&&t.length)return t.buffer.head.data.length;else return t.length}if(e>t.highWaterMark)t.highWaterMark=computeNewHighWaterMark(e);if(e<=t.length)return e;if(!t.ended){t.needReadable=true;return 0}return t.length}Readable.prototype.read=function(e){u(\"read\",e);e=parseInt(e,10);var t=this._readableState;var r=e;if(e!==0)t.emittedReadable=false;if(e===0&&t.needReadable&&((t.highWaterMark!==0?t.length>=t.highWaterMark:t.length>0)||t.ended)){u(\"read: emitReadable\",t.length,t.ended);if(t.length===0&&t.ended)endReadable(this);else emitReadable(this);return null}e=howMuchToRead(e,t);if(e===0&&t.ended){if(t.length===0)endReadable(this);return null}var n=t.needReadable;u(\"need readable\",n);if(t.length===0||t.length-e<t.highWaterMark){n=true;u(\"length less than watermark\",n)}if(t.ended||t.reading){n=false;u(\"reading or ended\",n)}else if(n){u(\"do read\");t.reading=true;t.sync=true;if(t.length===0)t.needReadable=true;this._read(t.highWaterMark);t.sync=false;if(!t.reading)e=howMuchToRead(r,t)}var i;if(e>0)i=fromList(e,t);else i=null;if(i===null){t.needReadable=t.length<=t.highWaterMark;e=0}else{t.length-=e;t.awaitDrain=0}if(t.length===0){if(!t.ended)t.needReadable=true;if(r!==e&&t.ended)endReadable(this)}if(i!==null)this.emit(\"data\",i);return i};function onEofChunk(e,t){u(\"onEofChunk\");if(t.ended)return;if(t.decoder){var r=t.decoder.end();if(r&&r.length){t.buffer.push(r);t.length+=t.objectMode?1:r.length}}t.ended=true;if(t.sync){emitReadable(e)}else{t.needReadable=false;if(!t.emittedReadable){t.emittedReadable=true;emitReadable_(e)}}}function emitReadable(e){var t=e._readableState;u(\"emitReadable\",t.needReadable,t.emittedReadable);t.needReadable=false;if(!t.emittedReadable){u(\"emitReadable\",t.flowing);t.emittedReadable=true;process.nextTick(emitReadable_,e)}}function emitReadable_(e){var t=e._readableState;u(\"emitReadable_\",t.destroyed,t.length,t.ended);if(!t.destroyed&&(t.length||t.ended)){e.emit(\"readable\");t.emittedReadable=false}t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark;flow(e)}function maybeReadMore(e,t){if(!t.readingMore){t.readingMore=true;process.nextTick(maybeReadMore_,e,t)}}function maybeReadMore_(e,t){while(!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&t.length===0)){var r=t.length;u(\"maybeReadMore read 0\");e.read(0);if(r===t.length)break}t.readingMore=false}Readable.prototype._read=function(e){S(this,new _(\"_read()\"))};Readable.prototype.pipe=function(e,t){var r=this;var n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e);break}n.pipesCount+=1;u(\"pipe count=%d opts=%j\",n.pipesCount,t);var i=(!t||t.end!==false)&&e!==process.stdout&&e!==process.stderr;var o=i?onend:unpipe;if(n.endEmitted)process.nextTick(o);else r.once(\"end\",o);e.on(\"unpipe\",onunpipe);function onunpipe(e,t){u(\"onunpipe\");if(e===r){if(t&&t.hasUnpiped===false){t.hasUnpiped=true;cleanup()}}}function onend(){u(\"onend\");e.end()}var s=pipeOnDrain(r);e.on(\"drain\",s);var f=false;function cleanup(){u(\"cleanup\");e.removeListener(\"close\",onclose);e.removeListener(\"finish\",onfinish);e.removeListener(\"drain\",s);e.removeListener(\"error\",onerror);e.removeListener(\"unpipe\",onunpipe);r.removeListener(\"end\",onend);r.removeListener(\"end\",unpipe);r.removeListener(\"data\",ondata);f=true;if(n.awaitDrain&&(!e._writableState||e._writableState.needDrain))s()}r.on(\"data\",ondata);function ondata(t){u(\"ondata\");var i=e.write(t);u(\"dest.write\",i);if(i===false){if((n.pipesCount===1&&n.pipes===e||n.pipesCount>1&&indexOf(n.pipes,e)!==-1)&&!f){u(\"false write response, pause\",n.awaitDrain);n.awaitDrain++}r.pause()}}function onerror(t){u(\"onerror\",t);unpipe();e.removeListener(\"error\",onerror);if(a(e,\"error\")===0)S(e,t)}prependListener(e,\"error\",onerror);function onclose(){e.removeListener(\"finish\",onfinish);unpipe()}e.once(\"close\",onclose);function onfinish(){u(\"onfinish\");e.removeListener(\"close\",onclose);unpipe()}e.once(\"finish\",onfinish);function unpipe(){u(\"unpipe\");r.unpipe(e)}e.emit(\"pipe\",r);if(!n.flowing){u(\"pipe resume\");r.resume()}return e};function pipeOnDrain(e){return function pipeOnDrainFunctionResult(){var t=e._readableState;u(\"pipeOnDrain\",t.awaitDrain);if(t.awaitDrain)t.awaitDrain--;if(t.awaitDrain===0&&a(e,\"data\")){t.flowing=true;flow(e)}}}Readable.prototype.unpipe=function(e){var t=this._readableState;var r={hasUnpiped:false};if(t.pipesCount===0)return this;if(t.pipesCount===1){if(e&&e!==t.pipes)return this;if(!e)e=t.pipes;t.pipes=null;t.pipesCount=0;t.flowing=false;if(e)e.emit(\"unpipe\",this,r);return this}if(!e){var n=t.pipes;var i=t.pipesCount;t.pipes=null;t.pipesCount=0;t.flowing=false;for(var a=0;a<i;a++){n[a].emit(\"unpipe\",this,{hasUnpiped:false})}return this}var o=indexOf(t.pipes,e);if(o===-1)return this;t.pipes.splice(o,1);t.pipesCount-=1;if(t.pipesCount===1)t.pipes=t.pipes[0];e.emit(\"unpipe\",this,r);return this};Readable.prototype.on=function(e,t){var r=o.prototype.on.call(this,e,t);var n=this._readableState;if(e===\"data\"){n.readableListening=this.listenerCount(\"readable\")>0;if(n.flowing!==false)this.resume()}else if(e===\"readable\"){if(!n.endEmitted&&!n.readableListening){n.readableListening=n.needReadable=true;n.flowing=false;n.emittedReadable=false;u(\"on readable\",n.length,n.reading);if(n.length){emitReadable(this)}else if(!n.reading){process.nextTick(nReadingNextTick,this)}}}return r};Readable.prototype.addListener=Readable.prototype.on;Readable.prototype.removeListener=function(e,t){var r=o.prototype.removeListener.call(this,e,t);if(e===\"readable\"){process.nextTick(updateReadableListening,this)}return r};Readable.prototype.removeAllListeners=function(e){var t=o.prototype.removeAllListeners.apply(this,arguments);if(e===\"readable\"||e===undefined){process.nextTick(updateReadableListening,this)}return t};function updateReadableListening(e){var t=e._readableState;t.readableListening=e.listenerCount(\"readable\")>0;if(t.resumeScheduled&&!t.paused){t.flowing=true}else if(e.listenerCount(\"data\")>0){e.resume()}}function nReadingNextTick(e){u(\"readable nexttick read 0\");e.read(0)}Readable.prototype.resume=function(){var e=this._readableState;if(!e.flowing){u(\"resume\");e.flowing=!e.readableListening;resume(this,e)}e.paused=false;return this};function resume(e,t){if(!t.resumeScheduled){t.resumeScheduled=true;process.nextTick(resume_,e,t)}}function resume_(e,t){u(\"resume\",t.reading);if(!t.reading){e.read(0)}t.resumeScheduled=false;e.emit(\"resume\");flow(e);if(t.flowing&&!t.reading)e.read(0)}Readable.prototype.pause=function(){u(\"call pause flowing=%j\",this._readableState.flowing);if(this._readableState.flowing!==false){u(\"pause\");this._readableState.flowing=false;this.emit(\"pause\")}this._readableState.paused=true;return this};function flow(e){var t=e._readableState;u(\"flow\",t.flowing);while(t.flowing&&e.read()!==null){}}Readable.prototype.wrap=function(e){var t=this;var r=this._readableState;var n=false;e.on(\"end\",(function(){u(\"wrapped end\");if(r.decoder&&!r.ended){var e=r.decoder.end();if(e&&e.length)t.push(e)}t.push(null)}));e.on(\"data\",(function(i){u(\"wrapped data\");if(r.decoder)i=r.decoder.write(i);if(r.objectMode&&(i===null||i===undefined))return;else if(!r.objectMode&&(!i||!i.length))return;var a=t.push(i);if(!a){n=true;e.pause()}}));for(var i in e){if(this[i]===undefined&&typeof e[i]===\"function\"){this[i]=function methodWrap(t){return function methodWrapReturnFunction(){return e[t].apply(e,arguments)}}(i)}}for(var a=0;a<E.length;a++){e.on(E[a],this.emit.bind(this,E[a]))}this._read=function(t){u(\"wrapped _read\",t);if(n){n=false;e.resume()}};return this};if(typeof Symbol===\"function\"){Readable.prototype[Symbol.asyncIterator]=function(){if(w===undefined){w=r(871)}return w(this)}}Object.defineProperty(Readable.prototype,\"readableHighWaterMark\",{enumerable:false,get:function get(){return this._readableState.highWaterMark}});Object.defineProperty(Readable.prototype,\"readableBuffer\",{enumerable:false,get:function get(){return this._readableState&&this._readableState.buffer}});Object.defineProperty(Readable.prototype,\"readableFlowing\",{enumerable:false,get:function get(){return this._readableState.flowing},set:function set(e){if(this._readableState){this._readableState.flowing=e}}});Readable._fromList=fromList;Object.defineProperty(Readable.prototype,\"readableLength\",{enumerable:false,get:function get(){return this._readableState.length}});function fromList(e,t){if(t.length===0)return null;var r;if(t.objectMode)r=t.buffer.shift();else if(!e||e>=t.length){if(t.decoder)r=t.buffer.join(\"\");else if(t.buffer.length===1)r=t.buffer.first();else r=t.buffer.concat(t.length);t.buffer.clear()}else{r=t.buffer.consume(e,t.decoder)}return r}function endReadable(e){var t=e._readableState;u(\"endReadable\",t.endEmitted);if(!t.endEmitted){t.ended=true;process.nextTick(endReadableNT,t,e)}}function endReadableNT(e,t){u(\"endReadableNT\",e.endEmitted,e.length);if(!e.endEmitted&&e.length===0){e.endEmitted=true;t.readable=false;t.emit(\"end\");if(e.autoDestroy){var r=t._writableState;if(!r||r.autoDestroy&&r.finished){t.destroy()}}}}if(typeof Symbol===\"function\"){Readable.from=function(e,t){if(R===undefined){R=r(727)}return R(Readable,e,t)}}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++){if(e[r]===t)return r}return-1}},170:function(e,t,r){\"use strict\";e.exports=Transform;var n=r(646).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,a=n.ERR_MULTIPLE_CALLBACK,o=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0;var f=r(403);r(782)(Transform,f);function afterTransform(e,t){var r=this._transformState;r.transforming=false;var n=r.writecb;if(n===null){return this.emit(\"error\",new a)}r.writechunk=null;r.writecb=null;if(t!=null)this.push(t);n(e);var i=this._readableState;i.reading=false;if(i.needReadable||i.length<i.highWaterMark){this._read(i.highWaterMark)}}function Transform(e){if(!(this instanceof Transform))return new Transform(e);f.call(this,e);this._transformState={afterTransform:afterTransform.bind(this),needTransform:false,transforming:false,writecb:null,writechunk:null,writeencoding:null};this._readableState.needReadable=true;this._readableState.sync=false;if(e){if(typeof e.transform===\"function\")this._transform=e.transform;if(typeof e.flush===\"function\")this._flush=e.flush}this.on(\"prefinish\",prefinish)}function prefinish(){var e=this;if(typeof this._flush===\"function\"&&!this._readableState.destroyed){this._flush((function(t,r){done(e,t,r)}))}else{done(this,null,null)}}Transform.prototype.push=function(e,t){this._transformState.needTransform=false;return f.prototype.push.call(this,e,t)};Transform.prototype._transform=function(e,t,r){r(new i(\"_transform()\"))};Transform.prototype._write=function(e,t,r){var n=this._transformState;n.writecb=r;n.writechunk=e;n.writeencoding=t;if(!n.transforming){var i=this._readableState;if(n.needTransform||i.needReadable||i.length<i.highWaterMark)this._read(i.highWaterMark)}};Transform.prototype._read=function(e){var t=this._transformState;if(t.writechunk!==null&&!t.transforming){t.transforming=true;this._transform(t.writechunk,t.writeencoding,t.afterTransform)}else{t.needTransform=true}};Transform.prototype._destroy=function(e,t){f.prototype._destroy.call(this,e,(function(e){t(e)}))};function done(e,t,r){if(t)return e.emit(\"error\",t);if(r!=null)e.push(r);if(e._writableState.length)throw new s;if(e._transformState.transforming)throw new o;return e.push(null)}},337:function(e,t,r){\"use strict\";e.exports=Writable;function WriteReq(e,t,r){this.chunk=e;this.encoding=t;this.callback=r;this.next=null}function CorkedRequest(e){var t=this;this.next=null;this.entry=null;this.finish=function(){onCorkedFinish(t,e)}}var n;Writable.WritableState=WritableState;var i={deprecate:r(769)};var a=r(678);var o=r(300).Buffer;var s=__webpack_require__.g.Uint8Array||function(){};function _uint8ArrayToBuffer(e){return o.from(e)}function _isUint8Array(e){return o.isBuffer(e)||e instanceof s}var f=r(25);var l=r(776),u=l.getHighWaterMark;var d=r(646).q,c=d.ERR_INVALID_ARG_TYPE,h=d.ERR_METHOD_NOT_IMPLEMENTED,p=d.ERR_MULTIPLE_CALLBACK,b=d.ERR_STREAM_CANNOT_PIPE,y=d.ERR_STREAM_DESTROYED,g=d.ERR_STREAM_NULL_VALUES,_=d.ERR_STREAM_WRITE_AFTER_END,v=d.ERR_UNKNOWN_ENCODING;var m=f.errorOrDestroy;r(782)(Writable,a);function nop(){}function WritableState(e,t,i){n=n||r(403);e=e||{};if(typeof i!==\"boolean\")i=t instanceof n;this.objectMode=!!e.objectMode;if(i)this.objectMode=this.objectMode||!!e.writableObjectMode;this.highWaterMark=u(this,e,\"writableHighWaterMark\",i);this.finalCalled=false;this.needDrain=false;this.ending=false;this.ended=false;this.finished=false;this.destroyed=false;var a=e.decodeStrings===false;this.decodeStrings=!a;this.defaultEncoding=e.defaultEncoding||\"utf8\";this.length=0;this.writing=false;this.corked=0;this.sync=true;this.bufferProcessing=false;this.onwrite=function(e){onwrite(t,e)};this.writecb=null;this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;this.pendingcb=0;this.prefinished=false;this.errorEmitted=false;this.emitClose=e.emitClose!==false;this.autoDestroy=!!e.autoDestroy;this.bufferedRequestCount=0;this.corkedRequestsFree=new CorkedRequest(this)}WritableState.prototype.getBuffer=function getBuffer(){var e=this.bufferedRequest;var t=[];while(e){t.push(e);e=e.next}return t};(function(){try{Object.defineProperty(WritableState.prototype,\"buffer\",{get:i.deprecate((function writableStateBufferGetter(){return this.getBuffer()}),\"_writableState.buffer is deprecated. Use _writableState.getBuffer \"+\"instead.\",\"DEP0003\")})}catch(e){}})();var w;if(typeof Symbol===\"function\"&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]===\"function\"){w=Function.prototype[Symbol.hasInstance];Object.defineProperty(Writable,Symbol.hasInstance,{value:function value(e){if(w.call(this,e))return true;if(this!==Writable)return false;return e&&e._writableState instanceof WritableState}})}else{w=function realHasInstance(e){return e instanceof this}}function Writable(e){n=n||r(403);var t=this instanceof n;if(!t&&!w.call(Writable,this))return new Writable(e);this._writableState=new WritableState(e,this,t);this.writable=true;if(e){if(typeof e.write===\"function\")this._write=e.write;if(typeof e.writev===\"function\")this._writev=e.writev;if(typeof e.destroy===\"function\")this._destroy=e.destroy;if(typeof e.final===\"function\")this._final=e.final}a.call(this)}Writable.prototype.pipe=function(){m(this,new b)};function writeAfterEnd(e,t){var r=new _;m(e,r);process.nextTick(t,r)}function validChunk(e,t,r,n){var i;if(r===null){i=new g}else if(typeof r!==\"string\"&&!t.objectMode){i=new c(\"chunk\",[\"string\",\"Buffer\"],r)}if(i){m(e,i);process.nextTick(n,i);return false}return true}Writable.prototype.write=function(e,t,r){var n=this._writableState;var i=false;var a=!n.objectMode&&_isUint8Array(e);if(a&&!o.isBuffer(e)){e=_uint8ArrayToBuffer(e)}if(typeof t===\"function\"){r=t;t=null}if(a)t=\"buffer\";else if(!t)t=n.defaultEncoding;if(typeof r!==\"function\")r=nop;if(n.ending)writeAfterEnd(this,r);else if(a||validChunk(this,n,e,r)){n.pendingcb++;i=writeOrBuffer(this,n,a,e,t,r)}return i};Writable.prototype.cork=function(){this._writableState.corked++};Writable.prototype.uncork=function(){var e=this._writableState;if(e.corked){e.corked--;if(!e.writing&&!e.corked&&!e.bufferProcessing&&e.bufferedRequest)clearBuffer(this,e)}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(e){if(typeof e===\"string\")e=e.toLowerCase();if(!([\"hex\",\"utf8\",\"utf-8\",\"ascii\",\"binary\",\"base64\",\"ucs2\",\"ucs-2\",\"utf16le\",\"utf-16le\",\"raw\"].indexOf((e+\"\").toLowerCase())>-1))throw new v(e);this._writableState.defaultEncoding=e;return this};Object.defineProperty(Writable.prototype,\"writableBuffer\",{enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer()}});function decodeChunk(e,t,r){if(!e.objectMode&&e.decodeStrings!==false&&typeof t===\"string\"){t=o.from(t,r)}return t}Object.defineProperty(Writable.prototype,\"writableHighWaterMark\",{enumerable:false,get:function get(){return this._writableState.highWaterMark}});function writeOrBuffer(e,t,r,n,i,a){if(!r){var o=decodeChunk(t,n,i);if(n!==o){r=true;i=\"buffer\";n=o}}var s=t.objectMode?1:n.length;t.length+=s;var f=t.length<t.highWaterMark;if(!f)t.needDrain=true;if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:a,next:null};if(l){l.next=t.lastBufferedRequest}else{t.bufferedRequest=t.lastBufferedRequest}t.bufferedRequestCount+=1}else{doWrite(e,t,false,s,n,i,a)}return f}function doWrite(e,t,r,n,i,a,o){t.writelen=n;t.writecb=o;t.writing=true;t.sync=true;if(t.destroyed)t.onwrite(new y(\"write\"));else if(r)e._writev(i,t.onwrite);else e._write(i,a,t.onwrite);t.sync=false}function onwriteError(e,t,r,n,i){--t.pendingcb;if(r){process.nextTick(i,n);process.nextTick(finishMaybe,e,t);e._writableState.errorEmitted=true;m(e,n)}else{i(n);e._writableState.errorEmitted=true;m(e,n);finishMaybe(e,t)}}function onwriteStateUpdate(e){e.writing=false;e.writecb=null;e.length-=e.writelen;e.writelen=0}function onwrite(e,t){var r=e._writableState;var n=r.sync;var i=r.writecb;if(typeof i!==\"function\")throw new p;onwriteStateUpdate(r);if(t)onwriteError(e,r,n,t,i);else{var a=needFinish(r)||e.destroyed;if(!a&&!r.corked&&!r.bufferProcessing&&r.bufferedRequest){clearBuffer(e,r)}if(n){process.nextTick(afterWrite,e,r,a,i)}else{afterWrite(e,r,a,i)}}}function afterWrite(e,t,r,n){if(!r)onwriteDrain(e,t);t.pendingcb--;n();finishMaybe(e,t)}function onwriteDrain(e,t){if(t.length===0&&t.needDrain){t.needDrain=false;e.emit(\"drain\")}}function clearBuffer(e,t){t.bufferProcessing=true;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount;var i=new Array(n);var a=t.corkedRequestsFree;a.entry=r;var o=0;var s=true;while(r){i[o]=r;if(!r.isBuf)s=false;r=r.next;o+=1}i.allBuffers=s;doWrite(e,t,true,t.length,i,\"\",a.finish);t.pendingcb++;t.lastBufferedRequest=null;if(a.next){t.corkedRequestsFree=a.next;a.next=null}else{t.corkedRequestsFree=new CorkedRequest(t)}t.bufferedRequestCount=0}else{while(r){var f=r.chunk;var l=r.encoding;var u=r.callback;var d=t.objectMode?1:f.length;doWrite(e,t,false,d,f,l,u);r=r.next;t.bufferedRequestCount--;if(t.writing){break}}if(r===null)t.lastBufferedRequest=null}t.bufferedRequest=r;t.bufferProcessing=false}Writable.prototype._write=function(e,t,r){r(new h(\"_write()\"))};Writable.prototype._writev=null;Writable.prototype.end=function(e,t,r){var n=this._writableState;if(typeof e===\"function\"){r=e;e=null;t=null}else if(typeof t===\"function\"){r=t;t=null}if(e!==null&&e!==undefined)this.write(e,t);if(n.corked){n.corked=1;this.uncork()}if(!n.ending)endWritable(this,n,r);return this};Object.defineProperty(Writable.prototype,\"writableLength\",{enumerable:false,get:function get(){return this._writableState.length}});function needFinish(e){return e.ending&&e.length===0&&e.bufferedRequest===null&&!e.finished&&!e.writing}function callFinal(e,t){e._final((function(r){t.pendingcb--;if(r){m(e,r)}t.prefinished=true;e.emit(\"prefinish\");finishMaybe(e,t)}))}function prefinish(e,t){if(!t.prefinished&&!t.finalCalled){if(typeof e._final===\"function\"&&!t.destroyed){t.pendingcb++;t.finalCalled=true;process.nextTick(callFinal,e,t)}else{t.prefinished=true;e.emit(\"prefinish\")}}}function finishMaybe(e,t){var r=needFinish(t);if(r){prefinish(e,t);if(t.pendingcb===0){t.finished=true;e.emit(\"finish\");if(t.autoDestroy){var n=e._readableState;if(!n||n.autoDestroy&&n.endEmitted){e.destroy()}}}}return r}function endWritable(e,t,r){t.ending=true;finishMaybe(e,t);if(r){if(t.finished)process.nextTick(r);else e.once(\"finish\",r)}t.ended=true;e.writable=false}function onCorkedFinish(e,t,r){var n=e.entry;e.entry=null;while(n){var i=n.callback;t.pendingcb--;i(r);n=n.next}t.corkedRequestsFree.next=e}Object.defineProperty(Writable.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._writableState===undefined){return false}return this._writableState.destroyed},set:function set(e){if(!this._writableState){return}this._writableState.destroyed=e}});Writable.prototype.destroy=f.destroy;Writable.prototype._undestroy=f.undestroy;Writable.prototype._destroy=function(e,t){t(e)}},871:function(e,t,r){\"use strict\";var n;function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var i=r(698);var a=Symbol(\"lastResolve\");var o=Symbol(\"lastReject\");var s=Symbol(\"error\");var f=Symbol(\"ended\");var l=Symbol(\"lastPromise\");var u=Symbol(\"handlePromise\");var d=Symbol(\"stream\");function createIterResult(e,t){return{value:e,done:t}}function readAndResolve(e){var t=e[a];if(t!==null){var r=e[d].read();if(r!==null){e[l]=null;e[a]=null;e[o]=null;t(createIterResult(r,false))}}}function onReadable(e){process.nextTick(readAndResolve,e)}function wrapForNext(e,t){return function(r,n){e.then((function(){if(t[f]){r(createIterResult(undefined,true));return}t[u](r,n)}),n)}}var c=Object.getPrototypeOf((function(){}));var h=Object.setPrototypeOf((n={get stream(){return this[d]},next:function next(){var e=this;var t=this[s];if(t!==null){return Promise.reject(t)}if(this[f]){return Promise.resolve(createIterResult(undefined,true))}if(this[d].destroyed){return new Promise((function(t,r){process.nextTick((function(){if(e[s]){r(e[s])}else{t(createIterResult(undefined,true))}}))}))}var r=this[l];var n;if(r){n=new Promise(wrapForNext(r,this))}else{var i=this[d].read();if(i!==null){return Promise.resolve(createIterResult(i,false))}n=new Promise(this[u])}this[l]=n;return n}},_defineProperty(n,Symbol.asyncIterator,(function(){return this})),_defineProperty(n,\"return\",(function _return(){var e=this;return new Promise((function(t,r){e[d].destroy(null,(function(e){if(e){r(e);return}t(createIterResult(undefined,true))}))}))})),n),c);var p=function createReadableStreamAsyncIterator(e){var t;var r=Object.create(h,(t={},_defineProperty(t,d,{value:e,writable:true}),_defineProperty(t,a,{value:null,writable:true}),_defineProperty(t,o,{value:null,writable:true}),_defineProperty(t,s,{value:null,writable:true}),_defineProperty(t,f,{value:e._readableState.endEmitted,writable:true}),_defineProperty(t,u,{value:function value(e,t){var n=r[d].read();if(n){r[l]=null;r[a]=null;r[o]=null;e(createIterResult(n,false))}else{r[a]=e;r[o]=t}},writable:true}),t));r[l]=null;i(e,(function(e){if(e&&e.code!==\"ERR_STREAM_PREMATURE_CLOSE\"){var t=r[o];if(t!==null){r[l]=null;r[a]=null;r[o]=null;t(e)}r[s]=e;return}var n=r[a];if(n!==null){r[l]=null;r[a]=null;r[o]=null;n(createIterResult(undefined,true))}r[f]=true}));e.on(\"readable\",onReadable.bind(null,r));return r};e.exports=p},379:function(e,t,r){\"use strict\";function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);if(t)n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}));r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};if(t%2){ownKeys(Object(r),true).forEach((function(t){_defineProperty(e,t,r[t])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(e,Object.getOwnPropertyDescriptors(r))}else{ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError(\"Cannot call a class as a function\")}}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if(\"value\"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){if(t)_defineProperties(e.prototype,t);if(r)_defineProperties(e,r);return e}var n=r(300),i=n.Buffer;var a=r(837),o=a.inspect;var s=o&&o.custom||\"inspect\";function copyBuffer(e,t,r){i.prototype.copy.call(e,t,r)}e.exports=function(){function BufferList(){_classCallCheck(this,BufferList);this.head=null;this.tail=null;this.length=0}_createClass(BufferList,[{key:\"push\",value:function push(e){var t={data:e,next:null};if(this.length>0)this.tail.next=t;else this.head=t;this.tail=t;++this.length}},{key:\"unshift\",value:function unshift(e){var t={data:e,next:this.head};if(this.length===0)this.tail=t;this.head=t;++this.length}},{key:\"shift\",value:function shift(){if(this.length===0)return;var e=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return e}},{key:\"clear\",value:function clear(){this.head=this.tail=null;this.length=0}},{key:\"join\",value:function join(e){if(this.length===0)return\"\";var t=this.head;var r=\"\"+t.data;while(t=t.next){r+=e+t.data}return r}},{key:\"concat\",value:function concat(e){if(this.length===0)return i.alloc(0);var t=i.allocUnsafe(e>>>0);var r=this.head;var n=0;while(r){copyBuffer(r.data,t,n);n+=r.data.length;r=r.next}return t}},{key:\"consume\",value:function consume(e,t){var r;if(e<this.head.data.length){r=this.head.data.slice(0,e);this.head.data=this.head.data.slice(e)}else if(e===this.head.data.length){r=this.shift()}else{r=t?this._getString(e):this._getBuffer(e)}return r}},{key:\"first\",value:function first(){return this.head.data}},{key:\"_getString\",value:function _getString(e){var t=this.head;var r=1;var n=t.data;e-=n.length;while(t=t.next){var i=t.data;var a=e>i.length?i.length:e;if(a===i.length)n+=i;else n+=i.slice(0,e);e-=a;if(e===0){if(a===i.length){++r;if(t.next)this.head=t.next;else this.head=this.tail=null}else{this.head=t;t.data=i.slice(a)}break}++r}this.length-=r;return n}},{key:\"_getBuffer\",value:function _getBuffer(e){var t=i.allocUnsafe(e);var r=this.head;var n=1;r.data.copy(t);e-=r.data.length;while(r=r.next){var a=r.data;var o=e>a.length?a.length:e;a.copy(t,t.length-e,0,o);e-=o;if(e===0){if(o===a.length){++n;if(r.next)this.head=r.next;else this.head=this.tail=null}else{this.head=r;r.data=a.slice(o)}break}++n}this.length-=n;return t}},{key:s,value:function value(e,t){return o(this,_objectSpread({},t,{depth:0,customInspect:false}))}}]);return BufferList}()},25:function(e){\"use strict\";function destroy(e,t){var r=this;var n=this._readableState&&this._readableState.destroyed;var i=this._writableState&&this._writableState.destroyed;if(n||i){if(t){t(e)}else if(e){if(!this._writableState){process.nextTick(emitErrorNT,this,e)}else if(!this._writableState.errorEmitted){this._writableState.errorEmitted=true;process.nextTick(emitErrorNT,this,e)}}return this}if(this._readableState){this._readableState.destroyed=true}if(this._writableState){this._writableState.destroyed=true}this._destroy(e||null,(function(e){if(!t&&e){if(!r._writableState){process.nextTick(emitErrorAndCloseNT,r,e)}else if(!r._writableState.errorEmitted){r._writableState.errorEmitted=true;process.nextTick(emitErrorAndCloseNT,r,e)}else{process.nextTick(emitCloseNT,r)}}else if(t){process.nextTick(emitCloseNT,r);t(e)}else{process.nextTick(emitCloseNT,r)}}));return this}function emitErrorAndCloseNT(e,t){emitErrorNT(e,t);emitCloseNT(e)}function emitCloseNT(e){if(e._writableState&&!e._writableState.emitClose)return;if(e._readableState&&!e._readableState.emitClose)return;e.emit(\"close\")}function undestroy(){if(this._readableState){this._readableState.destroyed=false;this._readableState.reading=false;this._readableState.ended=false;this._readableState.endEmitted=false}if(this._writableState){this._writableState.destroyed=false;this._writableState.ended=false;this._writableState.ending=false;this._writableState.finalCalled=false;this._writableState.prefinished=false;this._writableState.finished=false;this._writableState.errorEmitted=false}}function emitErrorNT(e,t){e.emit(\"error\",t)}function errorOrDestroy(e,t){var r=e._readableState;var n=e._writableState;if(r&&r.autoDestroy||n&&n.autoDestroy)e.destroy(t);else e.emit(\"error\",t)}e.exports={destroy:destroy,undestroy:undestroy,errorOrDestroy:errorOrDestroy}},698:function(e,t,r){\"use strict\";var n=r(646).q.ERR_STREAM_PREMATURE_CLOSE;function once(e){var t=false;return function(){if(t)return;t=true;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++){n[i]=arguments[i]}e.apply(this,n)}}function noop(){}function isRequest(e){return e.setHeader&&typeof e.abort===\"function\"}function eos(e,t,r){if(typeof t===\"function\")return eos(e,null,t);if(!t)t={};r=once(r||noop);var i=t.readable||t.readable!==false&&e.readable;var a=t.writable||t.writable!==false&&e.writable;var o=function onlegacyfinish(){if(!e.writable)f()};var s=e._writableState&&e._writableState.finished;var f=function onfinish(){a=false;s=true;if(!i)r.call(e)};var l=e._readableState&&e._readableState.endEmitted;var u=function onend(){i=false;l=true;if(!a)r.call(e)};var d=function onerror(t){r.call(e,t)};var c=function onclose(){var t;if(i&&!l){if(!e._readableState||!e._readableState.ended)t=new n;return r.call(e,t)}if(a&&!s){if(!e._writableState||!e._writableState.ended)t=new n;return r.call(e,t)}};var h=function onrequest(){e.req.on(\"finish\",f)};if(isRequest(e)){e.on(\"complete\",f);e.on(\"abort\",c);if(e.req)h();else e.on(\"request\",h)}else if(a&&!e._writableState){e.on(\"end\",o);e.on(\"close\",o)}e.on(\"end\",u);e.on(\"finish\",f);if(t.error!==false)e.on(\"error\",d);e.on(\"close\",c);return function(){e.removeListener(\"complete\",f);e.removeListener(\"abort\",c);e.removeListener(\"request\",h);if(e.req)e.req.removeListener(\"finish\",f);e.removeListener(\"end\",o);e.removeListener(\"close\",o);e.removeListener(\"finish\",f);e.removeListener(\"end\",u);e.removeListener(\"error\",d);e.removeListener(\"close\",c)}}e.exports=eos},727:function(e,t,r){\"use strict\";function asyncGeneratorStep(e,t,r,n,i,a,o){try{var s=e[a](o);var f=s.value}catch(e){r(e);return}if(s.done){t(f)}else{Promise.resolve(f).then(n,i)}}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(n,i){var a=e.apply(t,r);function _next(e){asyncGeneratorStep(a,n,i,_next,_throw,\"next\",e)}function _throw(e){asyncGeneratorStep(a,n,i,_next,_throw,\"throw\",e)}_next(undefined)}))}}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);if(t)n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}));r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};if(t%2){ownKeys(Object(r),true).forEach((function(t){_defineProperty(e,t,r[t])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(e,Object.getOwnPropertyDescriptors(r))}else{ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var n=r(646).q.ERR_INVALID_ARG_TYPE;function from(e,t,r){var i;if(t&&typeof t.next===\"function\"){i=t}else if(t&&t[Symbol.asyncIterator])i=t[Symbol.asyncIterator]();else if(t&&t[Symbol.iterator])i=t[Symbol.iterator]();else throw new n(\"iterable\",[\"Iterable\"],t);var a=new e(_objectSpread({objectMode:true},r));var o=false;a._read=function(){if(!o){o=true;next()}};function next(){return _next2.apply(this,arguments)}function _next2(){_next2=_asyncToGenerator((function*(){try{var e=yield i.next(),t=e.value,r=e.done;if(r){a.push(null)}else if(a.push(yield t)){next()}else{o=false}}catch(e){a.destroy(e)}}));return _next2.apply(this,arguments)}return a}e.exports=from},442:function(e,t,r){\"use strict\";var n;function once(e){var t=false;return function(){if(t)return;t=true;e.apply(void 0,arguments)}}var i=r(646).q,a=i.ERR_MISSING_ARGS,o=i.ERR_STREAM_DESTROYED;function noop(e){if(e)throw e}function isRequest(e){return e.setHeader&&typeof e.abort===\"function\"}function destroyer(e,t,i,a){a=once(a);var s=false;e.on(\"close\",(function(){s=true}));if(n===undefined)n=r(698);n(e,{readable:t,writable:i},(function(e){if(e)return a(e);s=true;a()}));var f=false;return function(t){if(s)return;if(f)return;f=true;if(isRequest(e))return e.abort();if(typeof e.destroy===\"function\")return e.destroy();a(t||new o(\"pipe\"))}}function call(e){e()}function pipe(e,t){return e.pipe(t)}function popCallback(e){if(!e.length)return noop;if(typeof e[e.length-1]!==\"function\")return noop;return e.pop()}function pipeline(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++){t[r]=arguments[r]}var n=popCallback(t);if(Array.isArray(t[0]))t=t[0];if(t.length<2){throw new a(\"streams\")}var i;var o=t.map((function(e,r){var a=r<t.length-1;var s=r>0;return destroyer(e,a,s,(function(e){if(!i)i=e;if(e)o.forEach(call);if(a)return;o.forEach(call);n(i)}))}));return t.reduce(pipe)}e.exports=pipeline},776:function(e,t,r){\"use strict\";var n=r(646).q.ERR_INVALID_OPT_VALUE;function highWaterMarkFrom(e,t,r){return e.highWaterMark!=null?e.highWaterMark:t?e[r]:null}function getHighWaterMark(e,t,r,i){var a=highWaterMarkFrom(t,i,r);if(a!=null){if(!(isFinite(a)&&Math.floor(a)===a)||a<0){var o=i?r:\"highWaterMark\";throw new n(o,a)}return Math.floor(a)}return e.objectMode?16:16*1024}e.exports={getHighWaterMark:getHighWaterMark}},678:function(e,t,r){e.exports=r(781)},726:function(e,t,r){var n=r(781);if(process.env.READABLE_STREAM===\"disable\"&&n){e.exports=n.Readable;Object.assign(e.exports,n);e.exports.Stream=n}else{t=e.exports=r(709);t.Stream=n||t;t.Readable=t;t.Writable=r(337);t.Duplex=r(403);t.Transform=r(170);t.PassThrough=r(889);t.finished=r(698);t.pipeline=r(442)}},55:function(e,t,r){var n=r(300);var i=n.Buffer;function copyProps(e,t){for(var r in e){t[r]=e[r]}}if(i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow){e.exports=n}else{copyProps(n,t);t.Buffer=SafeBuffer}function SafeBuffer(e,t,r){return i(e,t,r)}SafeBuffer.prototype=Object.create(i.prototype);copyProps(i,SafeBuffer);SafeBuffer.from=function(e,t,r){if(typeof e===\"number\"){throw new TypeError(\"Argument must not be a number\")}return i(e,t,r)};SafeBuffer.alloc=function(e,t,r){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}var n=i(e);if(t!==undefined){if(typeof r===\"string\"){n.fill(t,r)}else{n.fill(t)}}else{n.fill(0)}return n};SafeBuffer.allocUnsafe=function(e){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}return i(e)};SafeBuffer.allocUnsafeSlow=function(e){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}return n.SlowBuffer(e)}},813:function(e,t,r){var n=r(450);var i=r(254);var a=r(911);var o=r(523);var s=r(310);var f=t;f.request=function(e,t){if(typeof e===\"string\")e=s.parse(e);else e=a(e);var r=__webpack_require__.g.location.protocol.search(/^https?:$/)===-1?\"http:\":\"\";var i=e.protocol||r;var o=e.hostname||e.host;var f=e.port;var l=e.path||\"/\";if(o&&o.indexOf(\":\")!==-1)o=\"[\"+o+\"]\";e.url=(o?i+\"//\"+o:\"\")+(f?\":\"+f:\"\")+l;e.method=(e.method||\"GET\").toUpperCase();e.headers=e.headers||{};var u=new n(e);if(t)u.on(\"response\",t);return u};f.get=function get(e,t){var r=f.request(e,t);r.end();return r};f.ClientRequest=n;f.IncomingMessage=i.IncomingMessage;f.Agent=function(){};f.Agent.defaultMaxSockets=4;f.globalAgent=new f.Agent;f.STATUS_CODES=o;f.METHODS=[\"CHECKOUT\",\"CONNECT\",\"COPY\",\"DELETE\",\"GET\",\"HEAD\",\"LOCK\",\"M-SEARCH\",\"MERGE\",\"MKACTIVITY\",\"MKCOL\",\"MOVE\",\"NOTIFY\",\"OPTIONS\",\"PATCH\",\"POST\",\"PROPFIND\",\"PROPPATCH\",\"PURGE\",\"PUT\",\"REPORT\",\"SEARCH\",\"SUBSCRIBE\",\"TRACE\",\"UNLOCK\",\"UNSUBSCRIBE\"]},301:function(e,t){t.fetch=isFunction(__webpack_require__.g.fetch)&&isFunction(__webpack_require__.g.ReadableStream);t.writableStream=isFunction(__webpack_require__.g.WritableStream);t.abortController=isFunction(__webpack_require__.g.AbortController);var r;function getXHR(){if(r!==undefined)return r;if(__webpack_require__.g.XMLHttpRequest){r=new __webpack_require__.g.XMLHttpRequest;try{r.open(\"GET\",__webpack_require__.g.XDomainRequest?\"/\":\"https://example.com\")}catch(e){r=null}}else{r=null}return r}function checkTypeSupport(e){var t=getXHR();if(!t)return false;try{t.responseType=e;return t.responseType===e}catch(e){}return false}t.arraybuffer=t.fetch||checkTypeSupport(\"arraybuffer\");t.msstream=!t.fetch&&checkTypeSupport(\"ms-stream\");t.mozchunkedarraybuffer=!t.fetch&&checkTypeSupport(\"moz-chunked-arraybuffer\");t.overrideMimeType=t.fetch||(getXHR()?isFunction(getXHR().overrideMimeType):false);function isFunction(e){return typeof e===\"function\"}r=null},450:function(e,t,r){var n=r(301);var i=r(782);var a=r(254);var o=r(726);var s=a.IncomingMessage;var f=a.readyStates;function decideMode(e,t){if(n.fetch&&t){return\"fetch\"}else if(n.mozchunkedarraybuffer){return\"moz-chunked-arraybuffer\"}else if(n.msstream){return\"ms-stream\"}else if(n.arraybuffer&&e){return\"arraybuffer\"}else{return\"text\"}}var l=e.exports=function(e){var t=this;o.Writable.call(t);t._opts=e;t._body=[];t._headers={};if(e.auth)t.setHeader(\"Authorization\",\"Basic \"+Buffer.from(e.auth).toString(\"base64\"));Object.keys(e.headers).forEach((function(r){t.setHeader(r,e.headers[r])}));var r;var i=true;if(e.mode===\"disable-fetch\"||\"requestTimeout\"in e&&!n.abortController){i=false;r=true}else if(e.mode===\"prefer-streaming\"){r=false}else if(e.mode===\"allow-wrong-content-type\"){r=!n.overrideMimeType}else if(!e.mode||e.mode===\"default\"||e.mode===\"prefer-fast\"){r=true}else{throw new Error(\"Invalid value for opts.mode\")}t._mode=decideMode(r,i);t._fetchTimer=null;t.on(\"finish\",(function(){t._onFinish()}))};i(l,o.Writable);l.prototype.setHeader=function(e,t){var r=this;var n=e.toLowerCase();if(u.indexOf(n)!==-1)return;r._headers[n]={name:e,value:t}};l.prototype.getHeader=function(e){var t=this._headers[e.toLowerCase()];if(t)return t.value;return null};l.prototype.removeHeader=function(e){var t=this;delete t._headers[e.toLowerCase()]};l.prototype._onFinish=function(){var e=this;if(e._destroyed)return;var t=e._opts;var r=e._headers;var i=null;if(t.method!==\"GET\"&&t.method!==\"HEAD\"){i=new Blob(e._body,{type:(r[\"content-type\"]||{}).value||\"\"})}var a=[];Object.keys(r).forEach((function(e){var t=r[e].name;var n=r[e].value;if(Array.isArray(n)){n.forEach((function(e){a.push([t,e])}))}else{a.push([t,n])}}));if(e._mode===\"fetch\"){var o=null;if(n.abortController){var s=new AbortController;o=s.signal;e._fetchAbortController=s;if(\"requestTimeout\"in t&&t.requestTimeout!==0){e._fetchTimer=__webpack_require__.g.setTimeout((function(){e.emit(\"requestTimeout\");if(e._fetchAbortController)e._fetchAbortController.abort()}),t.requestTimeout)}}__webpack_require__.g.fetch(e._opts.url,{method:e._opts.method,headers:a,body:i||undefined,mode:\"cors\",credentials:t.withCredentials?\"include\":\"same-origin\",signal:o}).then((function(t){e._fetchResponse=t;e._connect()}),(function(t){__webpack_require__.g.clearTimeout(e._fetchTimer);if(!e._destroyed)e.emit(\"error\",t)}))}else{var l=e._xhr=new __webpack_require__.g.XMLHttpRequest;try{l.open(e._opts.method,e._opts.url,true)}catch(t){process.nextTick((function(){e.emit(\"error\",t)}));return}if(\"responseType\"in l)l.responseType=e._mode;if(\"withCredentials\"in l)l.withCredentials=!!t.withCredentials;if(e._mode===\"text\"&&\"overrideMimeType\"in l)l.overrideMimeType(\"text/plain; charset=x-user-defined\");if(\"requestTimeout\"in t){l.timeout=t.requestTimeout;l.ontimeout=function(){e.emit(\"requestTimeout\")}}a.forEach((function(e){l.setRequestHeader(e[0],e[1])}));e._response=null;l.onreadystatechange=function(){switch(l.readyState){case f.LOADING:case f.DONE:e._onXHRProgress();break}};if(e._mode===\"moz-chunked-arraybuffer\"){l.onprogress=function(){e._onXHRProgress()}}l.onerror=function(){if(e._destroyed)return;e.emit(\"error\",new Error(\"XHR error\"))};try{l.send(i)}catch(t){process.nextTick((function(){e.emit(\"error\",t)}));return}}};function statusValid(e){try{var t=e.status;return t!==null&&t!==0}catch(e){return false}}l.prototype._onXHRProgress=function(){var e=this;if(!statusValid(e._xhr)||e._destroyed)return;if(!e._response)e._connect();e._response._onXHRProgress()};l.prototype._connect=function(){var e=this;if(e._destroyed)return;e._response=new s(e._xhr,e._fetchResponse,e._mode,e._fetchTimer);e._response.on(\"error\",(function(t){e.emit(\"error\",t)}));e.emit(\"response\",e._response)};l.prototype._write=function(e,t,r){var n=this;n._body.push(e);r()};l.prototype.abort=l.prototype.destroy=function(){var e=this;e._destroyed=true;__webpack_require__.g.clearTimeout(e._fetchTimer);if(e._response)e._response._destroyed=true;if(e._xhr)e._xhr.abort();else if(e._fetchAbortController)e._fetchAbortController.abort()};l.prototype.end=function(e,t,r){var n=this;if(typeof e===\"function\"){r=e;e=undefined}o.Writable.prototype.end.call(n,e,t,r)};l.prototype.flushHeaders=function(){};l.prototype.setTimeout=function(){};l.prototype.setNoDelay=function(){};l.prototype.setSocketKeepAlive=function(){};var u=[\"accept-charset\",\"accept-encoding\",\"access-control-request-headers\",\"access-control-request-method\",\"connection\",\"content-length\",\"cookie\",\"cookie2\",\"date\",\"dnt\",\"expect\",\"host\",\"keep-alive\",\"origin\",\"referer\",\"te\",\"trailer\",\"transfer-encoding\",\"upgrade\",\"via\"]},254:function(e,t,r){var n=r(301);var i=r(782);var a=r(726);var o=t.readyStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};var s=t.IncomingMessage=function(e,t,r,i){var o=this;a.Readable.call(o);o._mode=r;o.headers={};o.rawHeaders=[];o.trailers={};o.rawTrailers=[];o.on(\"end\",(function(){process.nextTick((function(){o.emit(\"close\")}))}));if(r===\"fetch\"){o._fetchResponse=t;o.url=t.url;o.statusCode=t.status;o.statusMessage=t.statusText;t.headers.forEach((function(e,t){o.headers[t.toLowerCase()]=e;o.rawHeaders.push(t,e)}));if(n.writableStream){var s=new WritableStream({write:function(e){return new Promise((function(t,r){if(o._destroyed){r()}else if(o.push(Buffer.from(e))){t()}else{o._resumeFetch=t}}))},close:function(){__webpack_require__.g.clearTimeout(i);if(!o._destroyed)o.push(null)},abort:function(e){if(!o._destroyed)o.emit(\"error\",e)}});try{t.body.pipeTo(s).catch((function(e){__webpack_require__.g.clearTimeout(i);if(!o._destroyed)o.emit(\"error\",e)}));return}catch(e){}}var f=t.body.getReader();function read(){f.read().then((function(e){if(o._destroyed)return;if(e.done){__webpack_require__.g.clearTimeout(i);o.push(null);return}o.push(Buffer.from(e.value));read()})).catch((function(e){__webpack_require__.g.clearTimeout(i);if(!o._destroyed)o.emit(\"error\",e)}))}read()}else{o._xhr=e;o._pos=0;o.url=e.responseURL;o.statusCode=e.status;o.statusMessage=e.statusText;var l=e.getAllResponseHeaders().split(/\\r?\\n/);l.forEach((function(e){var t=e.match(/^([^:]+):\\s*(.*)/);if(t){var r=t[1].toLowerCase();if(r===\"set-cookie\"){if(o.headers[r]===undefined){o.headers[r]=[]}o.headers[r].push(t[2])}else if(o.headers[r]!==undefined){o.headers[r]+=\", \"+t[2]}else{o.headers[r]=t[2]}o.rawHeaders.push(t[1],t[2])}}));o._charset=\"x-user-defined\";if(!n.overrideMimeType){var u=o.rawHeaders[\"mime-type\"];if(u){var d=u.match(/;\\s*charset=([^;])(;|$)/);if(d){o._charset=d[1].toLowerCase()}}if(!o._charset)o._charset=\"utf-8\"}}};i(s,a.Readable);s.prototype._read=function(){var e=this;var t=e._resumeFetch;if(t){e._resumeFetch=null;t()}};s.prototype._onXHRProgress=function(){var e=this;var t=e._xhr;var r=null;switch(e._mode){case\"text\":r=t.responseText;if(r.length>e._pos){var n=r.substr(e._pos);if(e._charset===\"x-user-defined\"){var i=Buffer.alloc(n.length);for(var a=0;a<n.length;a++)i[a]=n.charCodeAt(a)&255;e.push(i)}else{e.push(n,e._charset)}e._pos=r.length}break;case\"arraybuffer\":if(t.readyState!==o.DONE||!t.response)break;r=t.response;e.push(Buffer.from(new Uint8Array(r)));break;case\"moz-chunked-arraybuffer\":r=t.response;if(t.readyState!==o.LOADING||!r)break;e.push(Buffer.from(new Uint8Array(r)));break;case\"ms-stream\":r=t.response;if(t.readyState!==o.LOADING)break;var s=new __webpack_require__.g.MSStreamReader;s.onprogress=function(){if(s.result.byteLength>e._pos){e.push(Buffer.from(new Uint8Array(s.result.slice(e._pos))));e._pos=s.result.byteLength}};s.onload=function(){e.push(null)};s.readAsArrayBuffer(r);break}if(e._xhr.readyState===o.DONE&&e._mode!==\"ms-stream\"){e.push(null)}}},704:function(e,t,r){\"use strict\";var n=r(55).Buffer;var i=n.isEncoding||function(e){e=\"\"+e;switch(e&&e.toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":case\"raw\":return true;default:return false}};function _normalizeEncoding(e){if(!e)return\"utf8\";var t;while(true){switch(e){case\"utf8\":case\"utf-8\":return\"utf8\";case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return\"utf16le\";case\"latin1\":case\"binary\":return\"latin1\";case\"base64\":case\"ascii\":case\"hex\":return e;default:if(t)return;e=(\"\"+e).toLowerCase();t=true}}}function normalizeEncoding(e){var t=_normalizeEncoding(e);if(typeof t!==\"string\"&&(n.isEncoding===i||!i(e)))throw new Error(\"Unknown encoding: \"+e);return t||e}t.s=StringDecoder;function StringDecoder(e){this.encoding=normalizeEncoding(e);var t;switch(this.encoding){case\"utf16le\":this.text=utf16Text;this.end=utf16End;t=4;break;case\"utf8\":this.fillLast=utf8FillLast;t=4;break;case\"base64\":this.text=base64Text;this.end=base64End;t=3;break;default:this.write=simpleWrite;this.end=simpleEnd;return}this.lastNeed=0;this.lastTotal=0;this.lastChar=n.allocUnsafe(t)}StringDecoder.prototype.write=function(e){if(e.length===0)return\"\";var t;var r;if(this.lastNeed){t=this.fillLast(e);if(t===undefined)return\"\";r=this.lastNeed;this.lastNeed=0}else{r=0}if(r<e.length)return t?t+this.text(e,r):this.text(e,r);return t||\"\"};StringDecoder.prototype.end=utf8End;StringDecoder.prototype.text=utf8Text;StringDecoder.prototype.fillLast=function(e){if(this.lastNeed<=e.length){e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length);this.lastNeed-=e.length};function utf8CheckByte(e){if(e<=127)return 0;else if(e>>5===6)return 2;else if(e>>4===14)return 3;else if(e>>3===30)return 4;return e>>6===2?-1:-2}function utf8CheckIncomplete(e,t,r){var n=t.length-1;if(n<r)return 0;var i=utf8CheckByte(t[n]);if(i>=0){if(i>0)e.lastNeed=i-1;return i}if(--n<r||i===-2)return 0;i=utf8CheckByte(t[n]);if(i>=0){if(i>0)e.lastNeed=i-2;return i}if(--n<r||i===-2)return 0;i=utf8CheckByte(t[n]);if(i>=0){if(i>0){if(i===2)i=0;else e.lastNeed=i-3}return i}return 0}function utf8CheckExtraBytes(e,t,r){if((t[0]&192)!==128){e.lastNeed=0;return\"�\"}if(e.lastNeed>1&&t.length>1){if((t[1]&192)!==128){e.lastNeed=1;return\"�\"}if(e.lastNeed>2&&t.length>2){if((t[2]&192)!==128){e.lastNeed=2;return\"�\"}}}}function utf8FillLast(e){var t=this.lastTotal-this.lastNeed;var r=utf8CheckExtraBytes(this,e,t);if(r!==undefined)return r;if(this.lastNeed<=e.length){e.copy(this.lastChar,t,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}e.copy(this.lastChar,t,0,e.length);this.lastNeed-=e.length}function utf8Text(e,t){var r=utf8CheckIncomplete(this,e,t);if(!this.lastNeed)return e.toString(\"utf8\",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);e.copy(this.lastChar,0,n);return e.toString(\"utf8\",t,n)}function utf8End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed)return t+\"�\";return t}function utf16Text(e,t){if((e.length-t)%2===0){var r=e.toString(\"utf16le\",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319){this.lastNeed=2;this.lastTotal=4;this.lastChar[0]=e[e.length-2];this.lastChar[1]=e[e.length-1];return r.slice(0,-1)}}return r}this.lastNeed=1;this.lastTotal=2;this.lastChar[0]=e[e.length-1];return e.toString(\"utf16le\",t,e.length-1)}function utf16End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString(\"utf16le\",0,r)}return t}function base64Text(e,t){var r=(e.length-t)%3;if(r===0)return e.toString(\"base64\",t);this.lastNeed=3-r;this.lastTotal=3;if(r===1){this.lastChar[0]=e[e.length-1]}else{this.lastChar[0]=e[e.length-2];this.lastChar[1]=e[e.length-1]}return e.toString(\"base64\",t,e.length-r)}function base64End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed)return t+this.lastChar.toString(\"base64\",0,3-this.lastNeed);return t}function simpleWrite(e){return e.toString(this.encoding)}function simpleEnd(e){return e&&e.length?this.write(e):\"\"}},769:function(e){e.exports=deprecate;function deprecate(e,t){if(config(\"noDeprecation\")){return e}var r=false;function deprecated(){if(!r){if(config(\"throwDeprecation\")){throw new Error(t)}else if(config(\"traceDeprecation\")){console.trace(t)}else{console.warn(t)}r=true}return e.apply(this,arguments)}return deprecated}function config(e){try{if(!__webpack_require__.g.localStorage)return false}catch(e){return false}var t=__webpack_require__.g.localStorage[e];if(null==t)return false;return String(t).toLowerCase()===\"true\"}},911:function(e){e.exports=extend;var t=Object.prototype.hasOwnProperty;function extend(){var e={};for(var r=0;r<arguments.length;r++){var n=arguments[r];for(var i in n){if(t.call(n,i)){e[i]=n[i]}}}return e}},300:function(e){\"use strict\";e.exports=__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")},361:function(e){\"use strict\";e.exports=__webpack_require__(/*! events */ \"./node_modules/events/events.js\")},781:function(e){\"use strict\";e.exports=__webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\")},310:function(e){\"use strict\";e.exports=__webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\")},837:function(e){\"use strict\";e.exports=__webpack_require__(/*! util */ \"./node_modules/util/util.js\")}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var a=true;try{e[r](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(813);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3N0cmVhbS1odHRwL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLFlBQVksT0FBTyxnQkFBZ0IsV0FBVywwM0NBQTAzQyxpQkFBaUIsc0NBQXNDLGlDQUFpQyxNQUFNLFdBQVcsdUNBQXVDLGFBQWEsMERBQTBELElBQUksS0FBSyxpQ0FBaUMsTUFBTSxXQUFXLDBCQUEwQiwrQkFBK0IseUJBQXlCLDZCQUE2QixpQkFBaUIsYUFBYSxXQUFXLGdDQUFnQyxPQUFPLFFBQVEsMkJBQTJCLHdCQUF3QixTQUFTLEtBQUssaUJBQWlCLDBCQUEwQixtQkFBbUIsMEJBQTBCLGdDQUFnQywyQkFBMkIsZUFBZSxvQkFBb0IscUJBQXFCLGlCQUFpQix3QkFBd0IsUUFBUSxnQkFBZ0IsR0FBRyxFQUFFLDBCQUEwQixjQUFjLGVBQWUsZ0JBQWdCLEdBQUcsRUFBRSxNQUFNLEtBQUssS0FBSyxFQUFFLEtBQUssWUFBWSxHQUFHLEVBQUUsS0FBSyxHQUFHLEtBQUssWUFBWSxHQUFHLEVBQUUsVUFBVSxHQUFHLDJCQUEyQiwyQ0FBMkMseUJBQXlCLDhCQUE4QixXQUFXLHFDQUFxQyx5QkFBeUIsd0JBQXdCLElBQUksd0JBQXdCLGFBQWEsS0FBSyw0QkFBNEIsdURBQXVELHdEQUF3RCxhQUFhLHdEQUF3RCxNQUFNLDhDQUE4QyxnQkFBZ0Isd0JBQXdCLEtBQUssWUFBWSxNQUFNLDRCQUE0QixTQUFTLEdBQUcsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyw4Q0FBOEMsVUFBVSxFQUFFLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxzQkFBc0IsU0FBUyxFQUFFLFNBQVMsYUFBYSx1RUFBdUUsMERBQTBELDRDQUE0QyxHQUFHLGdFQUFnRSxvREFBb0QsdURBQXVELEdBQUcsMEVBQTBFLHNFQUFzRSxnRUFBZ0UsMEZBQTBGLG9EQUFvRCw2QkFBNkIsYUFBYSx5RkFBeUYsY0FBYyxxQkFBcUIsYUFBYSwrQkFBK0IsU0FBUyxnQkFBZ0IsVUFBVSxVQUFVLGlCQUFpQixhQUFhLGFBQWEsa0JBQWtCLHFCQUFxQixZQUFZLFdBQVcsS0FBSyxXQUFXLDREQUE0RCxtQkFBbUIsa0RBQWtELGVBQWUsZUFBZSx3QkFBd0IsTUFBTSwwQ0FBMEMsMENBQTBDLDRCQUE0Qix5QkFBeUIseUJBQXlCLGdFQUFnRSxvQ0FBb0MsMENBQTBDLEVBQUUseURBQXlELG9DQUFvQyw2REFBNkQsRUFBRSx5REFBeUQsb0NBQW9DLG1DQUFtQyxFQUFFLGlCQUFpQixvQ0FBb0MsT0FBTyx3QkFBd0Isb0JBQW9CLFFBQVEsb0RBQW9ELG9DQUFvQyxxRUFBcUUsYUFBYSxvRUFBb0UscUJBQXFCLHFFQUFxRSxPQUFPLGdDQUFnQyxpQ0FBaUMsRUFBRSxxQkFBcUIsYUFBYSxzQkFBc0IsYUFBYSxzQkFBc0Isd0JBQXdCLDREQUE0RCxlQUFlLGlEQUFpRCxXQUFXLHFCQUFxQixhQUFhLG1CQUFtQixNQUFNLHFDQUFxQywwQkFBMEIsb0NBQW9DLDhCQUE4QixhQUFhLG9CQUFvQixNQUFNLHFCQUFNLDBCQUEwQixnQ0FBZ0MsaUJBQWlCLDBCQUEwQixxQ0FBcUMsYUFBYSxNQUFNLGtCQUFrQix1QkFBdUIsS0FBSyxxQkFBcUIsYUFBYSxZQUFZLGtDQUFrQyw0SUFBNEksTUFBTSxNQUFNLE1BQU0sbUJBQW1CLHVCQUF1QixtREFBbUQsZ0NBQWdDLHVFQUF1RSx1Q0FBdUMsNERBQTRELG1DQUFtQyw4QkFBOEIsWUFBWSxRQUFRLHlDQUF5QywrQkFBK0IsNkRBQTZELHVEQUF1RCxrQkFBa0IsY0FBYyxnQkFBZ0Isa0JBQWtCLGtCQUFrQixpQkFBaUIsc0JBQXNCLG1CQUFtQixlQUFlLHdCQUF3QiwyQkFBMkIsNkJBQTZCLDJCQUEyQixpQkFBaUIsbUNBQW1DLGlDQUFpQyxxQkFBcUIsK0NBQStDLGtCQUFrQix1QkFBdUIsa0JBQWtCLG1CQUFtQixlQUFlLGlCQUFpQiwrQkFBK0IsMEJBQTBCLHFCQUFxQixZQUFZLHNEQUFzRCx3QkFBd0IsZ0RBQWdELG1CQUFtQixNQUFNLGdEQUFnRCx5REFBeUQsYUFBYSxzREFBc0Qsb0NBQW9DLG9DQUFvQyxhQUFhLHFDQUFxQyxxQkFBcUIseUJBQXlCLE9BQU8saUNBQWlDLEVBQUUscUNBQXFDLDBDQUEwQywwQ0FBMEMsTUFBTSxzQ0FBc0MsMEJBQTBCLE1BQU0sa0JBQWtCLHdCQUF3Qix1QkFBdUIsbUJBQW1CLGNBQWMsS0FBSyxRQUFRLEtBQUssT0FBTywyQ0FBMkMsdUNBQXVDLGlEQUFpRCxxQ0FBcUMsd0JBQXdCLHVCQUF1QixhQUFhLGdCQUFnQixnQkFBZ0IsS0FBSyxNQUFNLDBCQUEwQixNQUFNLE9BQU8scUNBQXFDLCtFQUErRSx5QkFBeUIsTUFBTSwyQkFBMkIsMEJBQTBCLGlCQUFpQixXQUFXLHFCQUFxQixhQUFhLEtBQUssZ0JBQWdCLGtCQUFrQixxQkFBcUIsb0RBQW9ELHdCQUF3QixLQUFLLHdCQUF3QixZQUFZLGdCQUFnQixvQkFBb0IseURBQXlELDJCQUEyQixxQ0FBcUMsZUFBZSxpQkFBaUIsS0FBSyxrQ0FBa0MseUJBQXlCLHNCQUFzQixrQ0FBa0MsbUJBQW1CLDJCQUEyQixNQUFNLHlFQUF5RSxvREFBb0QsU0FBUyx1Q0FBdUMsNENBQTRDLDJDQUEyQyxpQkFBaUIsZUFBZSw4QkFBOEIsa0VBQWtFLHNDQUFzQyxTQUFTLGdCQUFnQixtQkFBbUIsU0FBUyxtQ0FBbUMsNkNBQTZDLG9DQUFvQyxhQUFhLGlCQUFpQixvQ0FBb0MsU0FBUyxJQUFJLEtBQUssSUFBSSxTQUFTLFNBQVMsU0FBUyxTQUFTLFVBQVUsSUFBSSxTQUFTLDRCQUE0Qix3Q0FBd0MseUJBQXlCLFVBQVUsd0RBQXdELHFCQUFxQixnRUFBZ0Usd0JBQXdCLGFBQWEsb0JBQW9CLFNBQVMsZ0JBQWdCLG9DQUFvQyxZQUFZLGlCQUFpQiwwQkFBMEIsUUFBUSxpQ0FBaUMsaUdBQWlHLHlDQUF5QywyQ0FBMkMsd0JBQXdCLFlBQVkscUJBQXFCLG1CQUFtQixrQ0FBa0MsWUFBWSxxQkFBcUIscUJBQXFCLDZDQUE2QyxPQUFPLGtDQUFrQyx1QkFBdUIsUUFBUSx3QkFBd0IsV0FBVyxhQUFhLGVBQWUsWUFBWSxvQ0FBb0MsNEJBQTRCLGFBQWEsbUNBQW1DLE1BQU0sdUJBQXVCLFlBQVksYUFBYSx5Q0FBeUMsSUFBSSxLQUFLLFlBQVksZUFBZSxpQkFBaUIsZ0NBQWdDLG9DQUFvQyxnQ0FBZ0MsVUFBVSx5QkFBeUIsZ0JBQWdCLGtCQUFrQixjQUFjLHNCQUFzQixnQkFBZ0IsaUJBQWlCLG1DQUFtQyxhQUFhLFdBQVcsZ0JBQWdCLEtBQUsscUJBQXFCLHVCQUF1Qix1QkFBdUIsbUJBQW1CLHlCQUF5Qix1QkFBdUIsbURBQW1ELHFCQUFxQix1QkFBdUIsNEJBQTRCLHVCQUF1QixPQUFPLDRCQUE0QiwwQkFBMEIsdUJBQXVCLGdEQUFnRCxzQ0FBc0MsbUJBQW1CLHdCQUF3QiwrREFBK0QsUUFBUSw0QkFBNEIsbUJBQW1CLG1CQUFtQixPQUFPLCtCQUErQiw2QkFBNkIsaUZBQWlGLGVBQWUsMEJBQTBCLFVBQVUsc0JBQXNCLG9CQUFvQixxQ0FBcUMsMEJBQTBCLHNDQUFzQyxXQUFXLDBCQUEwQixxQkFBcUIsaUJBQWlCLE1BQU0sMkJBQTJCLE1BQU0sd0JBQXdCLE1BQU0sZ0JBQWdCLDBDQUEwQywrQkFBK0IsT0FBTyxhQUFhLE9BQU8sUUFBUSxxQkFBcUIsZ0JBQWdCLE9BQU8sYUFBYSxxQkFBcUIsd0JBQXdCLHVCQUF1QixjQUFjLFVBQVUsNEJBQTRCLGtCQUFrQixZQUFZLGlCQUFpQixXQUFXLFFBQVEscUJBQXFCLGdCQUFnQixZQUFZLG1CQUFtQixhQUFhLGtDQUFrQyxvQ0FBb0MsNEJBQTRCLGtDQUFrQyxvQ0FBb0MsOEJBQThCLCtCQUErQixnQ0FBZ0MsT0FBTyxxRUFBcUUsb0JBQW9CLG1CQUFtQixZQUFZLGlCQUFpQixrQkFBa0IsY0FBYyxpRkFBaUYsOENBQThDLGVBQWUsV0FBVyxvQkFBb0IsZUFBZSxTQUFTLGtDQUFrQywyQkFBMkIsbUNBQW1DLG1CQUFtQixvQ0FBb0MsU0FBUyx3QkFBd0Isb0JBQW9CLGNBQWMsa0NBQWtDLFNBQVMsMEJBQTBCLGtCQUFrQixZQUFZLFlBQVksaUJBQWlCLGVBQWUsaUJBQWlCLFdBQVcsVUFBVSx3QkFBd0IsNENBQTRDLHVCQUF1Qiw4QkFBOEIsK0JBQStCLGtDQUFrQyxlQUFlLFVBQVUsc0NBQXNDLDBCQUEwQixPQUFPLGtCQUFrQixnQ0FBZ0MscUJBQXFCLDhCQUE4QixnQkFBZ0IsYUFBYSxlQUFlLGdCQUFnQiw2QkFBNkIsWUFBWSxPQUFPLGNBQWMsbUJBQW1CLGFBQWEsZUFBZSxnQkFBZ0IsWUFBWSxJQUFJLEtBQUsseUJBQXlCLGlCQUFpQixFQUFFLFlBQVkseUJBQXlCLHNCQUFzQixvQkFBb0IsZ0JBQWdCLHVDQUF1Qyx3QkFBd0IsYUFBYSxvQ0FBb0Msb0NBQW9DLDBCQUEwQixlQUFlLHFEQUFxRCxtQ0FBbUMsd0JBQXdCLHdDQUF3Qyx3Q0FBd0MsZ0JBQWdCLHdCQUF3QixvQ0FBb0MsYUFBYSxtQkFBbUIsb0JBQW9CLE9BQU8sbUNBQW1DLFVBQVUscURBQXFELGdEQUFnRCxnREFBZ0QsbUJBQW1CLE9BQU8sd0NBQXdDLFVBQVUsa0RBQWtELDJEQUEyRCxrQ0FBa0MsT0FBTyx3Q0FBd0MsVUFBVSxvQ0FBb0MsdUJBQXVCLGtEQUFrRCxpQ0FBaUMsZUFBZSxtQ0FBbUMsWUFBWSw2QkFBNkIsOEJBQThCLFVBQVUscUNBQXFDLDBCQUEwQixlQUFlLFlBQVksK0JBQStCLGVBQWUsZUFBZSxhQUFhLHFCQUFxQix1QkFBdUIsdUJBQXVCLE9BQU8sd0JBQXdCLHNCQUFzQixzQkFBc0IsZUFBZSxVQUFVLHdCQUF3QixpQkFBaUIsUUFBUSxtQ0FBbUMsb0NBQW9DLHVEQUF1RCx3Q0FBd0MsV0FBVyxrQ0FBa0MsbUJBQW1CLGdDQUFnQyxhQUFhLGlCQUFpQix1QkFBdUIsb0JBQW9CLG9DQUFvQyxvQ0FBb0MsV0FBVywwQkFBMEIsWUFBWSx1QkFBdUIsaUJBQWlCLHdCQUF3QixzQkFBc0IseUJBQXlCLGFBQWEsR0FBRyx5QkFBeUIsa0JBQWtCLGtDQUFrQyxrREFBa0QsOENBQThDLGdCQUFnQixPQUFPLE9BQU8sV0FBVyxHQUFHLGdCQUFnQixrREFBa0QsK0JBQStCLDJDQUEyQyxnQ0FBZ0MsS0FBSyxZQUFZLFdBQVcsS0FBSyxxQ0FBcUMsdUJBQXVCLHFCQUFxQixNQUFNLFFBQVEsYUFBYSxhQUFhLCtCQUErQixvREFBb0Qsa0JBQWtCLFNBQVMsZ0JBQWdCLGtFQUFrRSxvQ0FBb0MsMENBQTBDLEVBQUUsMkRBQTJELG9DQUFvQyx3REFBd0QsRUFBRSw0REFBNEQsb0NBQW9DLG1DQUFtQyxxQkFBcUIsd0JBQXdCLGdDQUFnQyxFQUFFLDRCQUE0QiwyREFBMkQsb0NBQW9DLG1DQUFtQyxFQUFFLHVCQUF1Qiw0QkFBNEIsTUFBTSxtQ0FBbUMseUJBQXlCLGlDQUFpQywrQ0FBK0MsaUNBQWlDLGlCQUFpQixLQUFLLGdDQUFnQyxTQUFTLHdCQUF3Qix1QkFBdUIsOEJBQThCLGtCQUFrQixhQUFhLE9BQU8sOEJBQThCLDRCQUE0Qix5Q0FBeUMsZ0NBQWdDLGtCQUFrQixpQkFBaUIsY0FBYyxrQkFBa0IsdUJBQXVCLGtDQUFrQyxlQUFlLCtCQUErQiw0QkFBNEIsa0JBQWtCLFNBQVMsd0JBQXdCLHNCQUFzQix1QkFBdUIsSUFBSSxLQUFLLHFCQUFxQixVQUFVLHFCQUFxQixhQUFhLG9CQUFvQiwrSUFBK0ksYUFBYSxvQkFBb0IsNkJBQTZCLDJCQUEyQixxQkFBcUIsZ0JBQWdCLGFBQWEsZ0NBQWdDLGtCQUFrQixlQUFlLHdCQUF3QixLQUFLLDBCQUEwQixnQkFBZ0IsNkNBQTZDLDZCQUE2QixzQkFBc0Isd0RBQXdELGVBQWUsc0JBQXNCLGlJQUFpSSxzQ0FBc0MsK0JBQStCLE1BQU0sK0RBQStELG1EQUFtRCwrQkFBK0IscUJBQXFCLFdBQVcsb0VBQW9FLDJCQUEyQixZQUFZLEdBQUcsS0FBSyxzQkFBc0IsdUNBQXVDLHlDQUF5Qyx3Q0FBd0MsK0NBQStDLDBCQUEwQiwyQ0FBMkMsMkJBQTJCLFlBQVksZUFBZSxrQkFBa0Isb0JBQW9CLDBCQUEwQiwyRkFBMkYsc0NBQXNDLDJCQUEyQix5Q0FBeUMsb0JBQW9CLCtEQUErRCxLQUFLLHVCQUF1QiwyQ0FBMkMsOENBQThDLEtBQUssSUFBSSxxQkFBcUIsOEJBQThCLHFCQUFxQix1Q0FBdUMsOENBQThDLHFCQUFxQixxQkFBcUIsYUFBYSxtQkFBbUIseUJBQXlCLGFBQWEsZ0JBQWdCLGdCQUFnQixlQUFlLDBCQUEwQixXQUFXLGVBQWUsZ0JBQWdCLHVCQUF1QixxQkFBcUIsTUFBTSxxQ0FBcUMsT0FBTyxrQkFBa0IsYUFBYSxvQkFBb0IsTUFBTSxxQkFBTSwwQkFBMEIsZ0NBQWdDLGlCQUFpQiwwQkFBMEIscUNBQXFDLFlBQVksa0NBQWtDLHdPQUF3Tyx1QkFBdUIsbUJBQW1CLGdCQUFnQiw4QkFBOEIsWUFBWSxRQUFRLHlDQUF5QywrQkFBK0IsNkRBQTZELHVEQUF1RCx1QkFBdUIscUJBQXFCLGtCQUFrQixpQkFBaUIsb0JBQW9CLHFCQUFxQiw4QkFBOEIsc0JBQXNCLCtDQUErQyxjQUFjLG1CQUFtQixjQUFjLGVBQWUsNEJBQTRCLHlCQUF5QixjQUFjLGtCQUFrQixnQkFBZ0IsMEJBQTBCLDhCQUE4QixpQkFBaUIsdUJBQXVCLHdCQUF3QixtQ0FBbUMsaUNBQWlDLDRCQUE0QixnREFBZ0QsdURBQXVELDJCQUEyQixTQUFTLFNBQVMsVUFBVSxTQUFTLFVBQVUsWUFBWSxJQUFJLHdEQUF3RCxzREFBc0Qsd0JBQXdCLDZGQUE2RixFQUFFLFdBQVcsSUFBSSxNQUFNLCtHQUErRyx5Q0FBeUMsbURBQW1ELHdCQUF3Qiw4QkFBOEIsZ0NBQWdDLHFEQUFxRCxFQUFFLEtBQUssOEJBQThCLDBCQUEwQixxQkFBcUIsWUFBWSx3QkFBd0IscURBQXFELGdEQUFnRCxtQkFBbUIsTUFBTSxtREFBbUQsc0RBQXNELHlEQUF5RCxtREFBbUQsYUFBYSxtQ0FBbUMsZUFBZSw0QkFBNEIsWUFBWSxPQUFPLE9BQU8sZUFBZSw2QkFBNkIsTUFBTSxhQUFhLFFBQVEsNENBQTRDLHVDQUF1QyxNQUFNLE9BQU8sT0FBTyxlQUFlLGFBQWEsWUFBWSx5Q0FBeUMsMEJBQTBCLFlBQVksc0NBQXNDLHNCQUFzQix5QkFBeUIsMEJBQTBCLElBQUksT0FBTyxnQkFBZ0IsK0JBQStCLCtCQUErQixrQ0FBa0MsbUNBQW1DLGNBQWMsZ0NBQWdDLFVBQVUsbUNBQW1DLDhCQUE4QixxQ0FBcUMsMEJBQTBCLGFBQWEsV0FBVyx1RkFBdUYscUVBQXFFLHlDQUF5QyxpSkFBaUosc0NBQXNDLGFBQWEsMkRBQTJELG9DQUFvQyw2REFBNkQsRUFBRSw0QkFBNEIsZ0VBQWdFLGNBQWMsU0FBUyxrRUFBa0Usb0NBQW9DLDBDQUEwQyxFQUFFLG9DQUFvQyxPQUFPLHlCQUF5QixVQUFVLE9BQU8sV0FBVyxLQUFLLDhCQUE4QixZQUFZLCtCQUErQix1QkFBdUIsd0JBQXdCLDRCQUE0Qix1QkFBdUIsaURBQWlELE1BQU0sNkJBQTZCLEtBQUssd0NBQXdDLDBCQUEwQixLQUFLLDJCQUEyQixTQUFTLGdDQUFnQyxhQUFhLFlBQVksZUFBZSxZQUFZLHlDQUF5QyxpQ0FBaUMsNkJBQTZCLGFBQWEsaUNBQWlDLGNBQWMsTUFBTSxPQUFPLGVBQWUsT0FBTywyQkFBMkIsbUNBQW1DLE9BQU8sS0FBSyxLQUFLLG1DQUFtQyxPQUFPLGtCQUFrQiwrQkFBK0IsZ0JBQWdCLGVBQWUscUJBQXFCLGFBQWEsc0JBQXNCLHVCQUF1QixhQUFhLGdCQUFnQixxQ0FBcUMsc0JBQXNCLDZCQUE2QixLQUFLLGlDQUFpQywwREFBMEQsaUJBQWlCLE1BQU0sT0FBTyw4QkFBOEIsS0FBSyxzQkFBc0IsNkJBQTZCLHdCQUF3QixjQUFjLElBQUksaUJBQWlCLDJCQUEyQiw4QkFBOEIsa0JBQWtCLGlCQUFpQiwwQkFBMEIsd0JBQXdCLHdCQUF3Qix5QkFBeUIsNkJBQTZCLG1CQUFtQiwyQkFBMkIsVUFBVSxRQUFRLFdBQVcsU0FBUyxPQUFPLG9CQUFvQixTQUFTLEtBQUssZUFBZSx5Q0FBeUMsY0FBYywyQkFBMkIsV0FBVyw0QkFBNEIsWUFBWSxLQUFLLDBDQUEwQyx5QkFBeUIsS0FBSyxTQUFTLGNBQWMsaUJBQWlCLGlCQUFpQiw4QkFBOEIsMkJBQTJCLFNBQVMseUJBQXlCLGNBQWMsT0FBTyx1Q0FBdUMsb0JBQW9CLHlCQUF5QiwwQ0FBMEMsc0JBQXNCLGdDQUFnQyx1Q0FBdUMsMEJBQTBCLDBCQUEwQixJQUFJLE9BQU8sT0FBTywrQkFBK0IsSUFBSSxPQUFPLDJDQUEyQyxhQUFhLFdBQVcsY0FBYyxtQ0FBbUMsYUFBYSwyREFBMkQsb0NBQW9DLG1DQUFtQyxFQUFFLHVCQUF1QixpRkFBaUYsd0JBQXdCLHNCQUFzQixjQUFjLE1BQU0sT0FBTyxtQkFBbUIsb0JBQW9CLGlCQUFpQixHQUFHLHdCQUF3QixtQ0FBbUMsK0NBQStDLGNBQWMsbUJBQW1CLE9BQU8seUJBQXlCLEtBQUssbUJBQW1CLHNCQUFzQiwwQkFBMEIsb0JBQW9CLE1BQU0sZUFBZSxvQkFBb0IsZ0JBQWdCLGlCQUFpQixrQkFBa0IsdUJBQXVCLG9DQUFvQyxlQUFlLFNBQVMsNEJBQTRCLGNBQWMsaUJBQWlCLE1BQU0sY0FBYyxPQUFPLGFBQWEsd0JBQXdCLGFBQWEsaUJBQWlCLCtCQUErQixjQUFjLGFBQWEsU0FBUyxpQkFBaUIsY0FBYyxLQUFLLFNBQVMsNEJBQTRCLHNEQUFzRCxvQ0FBb0Msb0NBQW9DLGFBQWEscUNBQXFDLHFCQUFxQix5QkFBeUIsT0FBTyxpQ0FBaUMsRUFBRSxxQ0FBcUMsMENBQTBDLDBDQUEwQyxNQUFNLHFCQUFxQixhQUFhLE1BQU0sZ0NBQWdDLFdBQVcsMkJBQTJCLHdEQUF3RCxFQUFFLEtBQUssT0FBTyxTQUFTLGFBQWEsNEJBQTRCLDJCQUEyQixzQkFBc0Isc0JBQXNCLDRCQUE0Qiw4QkFBOEIsdUJBQXVCLCtCQUErQixPQUFPLGdCQUFnQiwyQkFBMkIsV0FBVyxhQUFhLGtCQUFrQixhQUFhLFVBQVUsVUFBVSxVQUFVLCtCQUErQix1QkFBdUIsT0FBTyw0QkFBNEIsMEJBQTBCLHFCQUFxQixtQkFBbUIsU0FBUyxvQ0FBb0MsT0FBTyxVQUFVLE1BQU0seUNBQXlDLEdBQUcsZ0NBQWdDLGFBQWEsZUFBZSxzQkFBc0IsV0FBVyxjQUFjLGFBQWEseUJBQXlCLFlBQVkseURBQXlELHNCQUFzQixrQ0FBa0MsT0FBTyxzQkFBc0IsU0FBUyxRQUFRLEtBQUsscUNBQXFDLEdBQUcsR0FBRyxjQUFjLE1BQU0sTUFBTSxtQ0FBbUMsS0FBSyxxQkFBcUIsYUFBYSxrREFBa0QsdUJBQXVCLFVBQVUsVUFBVSxvREFBb0QsWUFBWSxrREFBa0QsV0FBVyxrQ0FBa0MsK0JBQStCLE1BQU0sS0FBSyxPQUFPLG9DQUFvQyxHQUFHLEdBQUcsU0FBUyxvREFBb0QsTUFBTSwyQkFBMkIsc0JBQXNCLHNCQUFzQix1QkFBdUIseUJBQXlCLHVCQUF1Qix5QkFBeUIsdUJBQXVCLHlCQUF5Qix1QkFBdUIsZ0RBQWdELHVCQUF1QiwwQkFBMEIsa0JBQWtCLE1BQU0sVUFBVSxVQUFVLFVBQVUsNkJBQTZCLEtBQUssT0FBTyxRQUFRLGVBQWUsTUFBTSxVQUFVLGlCQUFpQiw2Q0FBNkMsV0FBVyxhQUFhLFVBQVUsVUFBVSxVQUFVLEtBQUssT0FBTyxPQUFPLFdBQVcsYUFBYSxVQUFVLFVBQVUsVUFBVSxvQ0FBb0MsVUFBVSxHQUFHLHlDQUF5QyxVQUFVLFlBQVkscUJBQXFCLGFBQWEsc0JBQXNCLHFCQUFxQixpQ0FBaUMsc0NBQXNDLDZCQUE2Qix1REFBdUQsR0FBRyxrQkFBa0IsU0FBUywwQkFBMEIsWUFBWSxtQkFBbUIsS0FBSyx5Q0FBeUMsUUFBUSw2Q0FBNkMsMEJBQTBCLEdBQUcsMENBQTBDLCtEQUErRCxLQUFLLHdDQUF3QyxnRUFBZ0UsSUFBSSxTQUFTLGdDQUFnQyxXQUFXLDJCQUEyQix3REFBd0QsRUFBRSxLQUFLLE9BQU8sU0FBUyw4QkFBOEIsc0JBQXNCLDBEQUEwRCxnQ0FBZ0MsWUFBWSxXQUFXLEtBQUssV0FBVyxpQ0FBaUMsb0JBQW9CLCtCQUErQixrQ0FBa0MsNkJBQTZCLHNDQUFzQyw0QkFBNEIsU0FBUyx3QkFBd0IseUJBQXlCLDZCQUE2QiwyQkFBMkIsNkJBQTZCLHFCQUFxQixzQkFBc0IsaUNBQWlDLGVBQWUsZUFBZSxjQUFjLDBCQUEwQixrQ0FBa0MsT0FBTyxrQkFBa0Isa0NBQWtDLGlCQUFpQixZQUFZLGVBQWUsRUFBRSx3Q0FBd0MsT0FBTyx1QkFBdUIsK0JBQStCLFlBQVksZUFBZSxFQUFFLG1DQUFtQywwQkFBMEIscUJBQXFCLDRDQUE0Qyw4QkFBOEIsY0FBYyxVQUFVLEVBQUUsbUNBQW1DLHlCQUF5QixlQUFlLEVBQUUsa0NBQWtDLDRCQUE0QixnQkFBZ0IsZ0JBQWdCLGdCQUFnQixZQUFZLFVBQVUsRUFBRSxzQ0FBc0MscUNBQXFDLDJCQUEyQixnQkFBZ0IsUUFBUSxTQUFTLHVCQUF1QixpQkFBaUIsU0FBUyxVQUFVLEVBQUUsMENBQTBDLE1BQU0sNEJBQTRCLDRCQUE0Qix1Q0FBdUMsbUNBQW1DLGVBQWUsS0FBSywwQ0FBMEMsVUFBVSxFQUFFLG1DQUFtQyx1QkFBdUIsRUFBRSw4Q0FBOEMsZ0JBQWdCLFFBQVEsYUFBYSxZQUFZLGdCQUFnQixhQUFhLDRCQUE0QixxQkFBcUIscUJBQXFCLEtBQUssVUFBVSxpQkFBaUIsSUFBSSwyQkFBMkIsOEJBQThCLEtBQUssWUFBWSxrQkFBa0IsTUFBTSxJQUFJLGVBQWUsVUFBVSxFQUFFLDhDQUE4Qyx1QkFBdUIsZ0JBQWdCLFFBQVEsZUFBZSxpQkFBaUIsZ0JBQWdCLGFBQWEsNEJBQTRCLHlCQUF5QixLQUFLLFVBQVUsaUJBQWlCLElBQUksMkJBQTJCLDhCQUE4QixLQUFLLFlBQVksa0JBQWtCLE1BQU0sSUFBSSxlQUFlLFVBQVUsRUFBRSxnQ0FBZ0MsOEJBQThCLElBQUksNEJBQTRCLElBQUksR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsYUFBYSxzQkFBc0IsV0FBVyx5REFBeUQseURBQXlELFNBQVMsTUFBTSxLQUFLLFdBQVcseUJBQXlCLE9BQU8sOEJBQThCLDJDQUEyQyxzQ0FBc0MsT0FBTywrQkFBK0IsWUFBWSx3QkFBd0IsbUNBQW1DLHdCQUF3QixtQ0FBbUMsbUNBQW1DLFVBQVUsc0JBQXNCLE9BQU8sbUNBQW1DLHdDQUF3QyxtQ0FBbUMsT0FBTyxtQ0FBbUMsS0FBSyxPQUFPLDBCQUEwQixXQUFXLE9BQU8seUJBQXlCLEtBQUssS0FBSyxPQUFPLDBCQUEwQixHQUFHLFlBQVksa0NBQWtDLGlCQUFpQixlQUFlLHdCQUF3Qix3REFBd0Qsd0RBQXdELGdCQUFnQixxQkFBcUIsd0JBQXdCLG9DQUFvQyxrQ0FBa0MsZ0NBQWdDLHFDQUFxQyx3QkFBd0Isb0NBQW9DLGdDQUFnQyxpQ0FBaUMsc0NBQXNDLHNDQUFzQyxtQ0FBbUMsd0NBQXdDLDBCQUEwQixrQkFBa0IsNkJBQTZCLHVCQUF1Qix1QkFBdUIsbURBQW1ELHVCQUF1QixXQUFXLG1FQUFtRSxxQkFBcUIsYUFBYSwwQ0FBMEMsaUJBQWlCLFlBQVksa0JBQWtCLFlBQVksT0FBTyw4Q0FBOEMsSUFBSSxLQUFLLGtCQUFrQixpQkFBaUIsaUJBQWlCLHNCQUFzQixnREFBZ0Qsb0JBQW9CLDhDQUE4QyxXQUFXLGdCQUFnQixpREFBaUQsaURBQWlELGdDQUFnQyxvQkFBb0Isa0RBQWtELDBCQUEwQixRQUFRLE9BQU8saUJBQWlCLG9EQUFvRCx1QkFBdUIsUUFBUSxPQUFPLGlCQUFpQiwwQkFBMEIsYUFBYSx5QkFBeUIsTUFBTSxVQUFVLHNEQUFzRCxtQkFBbUIsVUFBVSxzREFBc0QscUJBQXFCLDJCQUEyQixzQkFBc0IsaUJBQWlCLG1CQUFtQixnQkFBZ0IsYUFBYSx1QkFBdUIsOEJBQThCLGNBQWMsZ0JBQWdCLGNBQWMsaUJBQWlCLG1DQUFtQyxnQkFBZ0Isa0JBQWtCLCtCQUErQiw0QkFBNEIsOEJBQThCLDBDQUEwQywwQkFBMEIsNEJBQTRCLDZCQUE2QiwwQkFBMEIsNEJBQTRCLDZCQUE2QixjQUFjLHFCQUFxQixhQUFhLDJDQUEyQyxJQUFJLGNBQWMsY0FBYyxTQUFTLEtBQUssT0FBTyxXQUFXLEtBQUssS0FBSyw4QkFBOEIsOEJBQThCLGtCQUFrQix1QkFBdUIsa0NBQWtDLG1CQUFtQixrQkFBa0IsZ0RBQWdELG1CQUFtQixpREFBaUQsaUJBQWlCLElBQUksc0JBQXNCLHFCQUFxQixpQ0FBaUMsc0NBQXNDLDZCQUE2Qix1REFBdUQsR0FBRyxrQkFBa0IsU0FBUywwQkFBMEIsWUFBWSxtQkFBbUIsS0FBSyx5Q0FBeUMsUUFBUSw2Q0FBNkMsMEJBQTBCLEdBQUcsMENBQTBDLCtEQUErRCxLQUFLLHdDQUF3QyxnRUFBZ0UsSUFBSSxTQUFTLGdDQUFnQyxXQUFXLDJCQUEyQix3REFBd0QsRUFBRSxLQUFLLE9BQU8sU0FBUyxvQ0FBb0MscUJBQXFCLE1BQU0sa0NBQWtDLElBQUksK0RBQStELHFEQUFxRCw0Q0FBNEMsMkJBQTJCLGdCQUFnQixLQUFLLFlBQVksbUJBQW1CLE9BQU8sT0FBTyxTQUFTLGdCQUFnQixvQ0FBb0Msa0JBQWtCLHNDQUFzQyxJQUFJLHdDQUF3QyxNQUFNLGFBQWEseUJBQXlCLE9BQU8sS0FBSyxTQUFTLFNBQVMsY0FBYyxHQUFHLG9DQUFvQyxTQUFTLGVBQWUscUJBQXFCLGFBQWEsTUFBTSxpQkFBaUIsWUFBWSxrQkFBa0IsWUFBWSxPQUFPLDJCQUEyQiw2REFBNkQsaUJBQWlCLGFBQWEsc0JBQXNCLGdEQUFnRCw0QkFBNEIsVUFBVSxZQUFZLHlCQUF5QixPQUFPLEdBQUcsMEJBQTBCLEtBQUssc0JBQXNCLGNBQWMsaUJBQWlCLE9BQU8sSUFBSSxHQUFHLFlBQVksbUJBQW1CLFlBQVksWUFBWSxPQUFPLGlDQUFpQyxvREFBb0QscUJBQXFCLGlCQUFpQixJQUFJLG1CQUFtQixpQkFBaUIsd0JBQXdCLHlCQUF5QixpREFBaUQsZUFBZSxvQkFBb0IsOENBQThDLElBQUksS0FBSyxrQkFBa0IscUJBQXFCLDhCQUE4QixlQUFlLHVCQUF1QixNQUFNLDJCQUEyQixtQkFBbUIsVUFBVSxvQ0FBb0MsVUFBVSxxQkFBcUIsWUFBWSxnQkFBZ0IsS0FBSyxHQUFHLEdBQUcsc0JBQXNCLG1CQUFtQixxQkFBcUIsYUFBYSxxQ0FBcUMsa0NBQWtDLHlEQUF5RCxtQ0FBbUMsK0JBQStCLFlBQVksMkNBQTJDLDBCQUEwQixpQkFBaUIscUJBQXFCLCtCQUErQixXQUFXLG1DQUFtQyxxQkFBcUIsaUJBQWlCLHFCQUFxQixhQUFhLEdBQUcsT0FBTyxxQ0FBcUMscUJBQXFCLDJCQUEyQixtQkFBbUIsS0FBSyxtQkFBbUIsY0FBYyxhQUFhLGtCQUFrQixnQkFBZ0IsbUJBQW1CLHFCQUFxQixrQkFBa0IsbUJBQW1CLG9CQUFvQixhQUFhLGVBQWUsd0JBQXdCLGdCQUFnQixXQUFXLHNEQUFzRCxZQUFZLEtBQUssZUFBZSxvQkFBb0IsMkJBQTJCLGdCQUFnQixnREFBZ0Qsd0JBQXdCLGdDQUFnQyx3QkFBd0IscURBQXFELGlCQUFpQixpQ0FBaUMsd0JBQXdCLGlEQUFpRCxXQUFXLGtCQUFrQix3QkFBd0IsWUFBWSxLQUFLLFdBQVcsS0FBSyxVQUFVLFVBQVUsbUNBQW1DLHdCQUF3QixpREFBaUQsYUFBYSx1Q0FBdUMsd0JBQXdCLGlEQUFpRCx3QkFBd0IscUJBQXFCLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxRQUFRLHdCQUF3QixvQ0FBb0MsWUFBWSxNQUFNLHFCQUFNLHVEQUF1RCxvQkFBb0IseUJBQXlCLGFBQWEsa0JBQWtCLHNDQUFzQyxxQ0FBcUMseUNBQXlDLHdCQUF3QixlQUFlLHdCQUF3QixVQUFVLHdCQUF3QixxQkFBcUIsUUFBUSxVQUFVLGtCQUFrQixvQ0FBb0MscUJBQXFCLDRCQUE0QiwwQkFBMEIsaUJBQWlCLHdQQUF3UCxtQkFBbUIsbUJBQW1CLHFCQUFNLG9CQUFvQixxQkFBTSxpQkFBaUIsNEJBQTRCLHFCQUFNLGlCQUFpQiw2QkFBNkIscUJBQU0sa0JBQWtCLE1BQU0sa0JBQWtCLDBCQUEwQixHQUFHLHFCQUFNLGlCQUFpQixNQUFNLHFCQUFNLGdCQUFnQixJQUFJLGFBQWEscUJBQU0sMkNBQTJDLFNBQVMsUUFBUSxLQUFLLE9BQU8sU0FBUyw2QkFBNkIsZUFBZSxtQkFBbUIsSUFBSSxpQkFBaUIsMEJBQTBCLFVBQVUsYUFBYSx1REFBdUQsbURBQW1ELDhFQUE4RSxtRkFBbUYsdUJBQXVCLDZCQUE2QixPQUFPLHFCQUFxQixhQUFhLGFBQWEsYUFBYSxhQUFhLHdCQUF3QixvQkFBb0IseUJBQXlCLGVBQWUsY0FBYyxpQ0FBaUMsZ0NBQWdDLG9CQUFvQixrQkFBa0IsMEJBQTBCLG9CQUFvQixLQUFLLGNBQWMsNEJBQTRCLFdBQVcsbUJBQW1CLFVBQVUsV0FBVyxjQUFjLCtDQUErQyxNQUFNLGtDQUFrQyw0Q0FBNEMsNEJBQTRCLEdBQUcsTUFBTSxXQUFXLHVFQUF1RSxRQUFRLE9BQU8scUNBQXFDLFFBQVEsNkNBQTZDLHNCQUFzQiw2REFBNkQsT0FBTyxLQUFLLCtDQUErQyx3QkFBd0IsbUJBQW1CLDBCQUEwQixjQUFjLElBQUksZ0JBQWdCLG9DQUFvQyxXQUFXLHNCQUFzQiw0QkFBNEIsZUFBZSxpQkFBaUIsa0NBQWtDLHFDQUFxQyxvQkFBb0IsYUFBYSxxQ0FBcUMsV0FBVyxvQ0FBb0MsaUNBQWlDLFdBQVcsdUJBQXVCLGNBQWMsaUJBQWlCLFdBQVcsd0NBQXdDLG9CQUFvQiwyQkFBMkIsWUFBWSxFQUFFLFNBQVMsb0NBQW9DLGdCQUFnQixpQkFBaUIscUJBQXFCLHVCQUF1QixjQUFjLEdBQUcsS0FBSyxlQUFlLEdBQUcsc0JBQXNCLFdBQVcsc0JBQXNCLDBCQUEwQixXQUFXLDBCQUEwQiwrQ0FBK0MsY0FBYyxxQkFBTSx3QkFBd0IseUJBQXlCLDJEQUEyRCxxQkFBcUIscUJBQU0sb0JBQW9CLDZIQUE2SCxvQkFBb0IsbUJBQW1CLGFBQWEsZUFBZSxxQkFBTSw2QkFBNkIsbUNBQW1DLEdBQUcsS0FBSyxpQkFBaUIscUJBQU0sZ0JBQWdCLElBQUksd0NBQXdDLFNBQVMsT0FBTyxzQkFBc0Isa0JBQWtCLEdBQUcsT0FBTyw2Q0FBNkMsK0RBQStELDRFQUE0RSx5QkFBeUIseUJBQXlCLDJCQUEyQix1QkFBdUIsMEJBQTBCLHVCQUF1Qiw4QkFBOEIsR0FBRyxpQkFBaUIsZ0NBQWdDLHFCQUFxQiw4Q0FBOEMsUUFBUSx3Q0FBd0Msd0JBQXdCLG9CQUFvQixxQkFBcUIsdUJBQXVCLHdDQUF3QyxJQUFJLFVBQVUsU0FBUyxPQUFPLHNCQUFzQixrQkFBa0IsR0FBRyxVQUFVLHdCQUF3QixJQUFJLGVBQWUsdUJBQXVCLFNBQVMsY0FBYyxzQ0FBc0MsV0FBVyw2Q0FBNkMsNkJBQTZCLDhCQUE4QixnQ0FBZ0MsV0FBVyx1QkFBdUIsaUVBQWlFLG9DQUFvQyxrQkFBa0IsR0FBRyxnQ0FBZ0MsbUNBQW1DLFdBQVcsZ0JBQWdCLEtBQUssaURBQWlELFdBQVcsa0JBQWtCLHFCQUFNLDZCQUE2QiwyQ0FBMkMseUJBQXlCLGlFQUFpRSxnQ0FBZ0MsV0FBVywwQkFBMEIsSUFBSSxZQUFZLHdDQUF3QyxzQ0FBc0Msb0NBQW9DLG9DQUFvQyw0Q0FBNEMsNlFBQTZRLHFCQUFxQixhQUFhLGFBQWEsYUFBYSxxQkFBcUIsdURBQXVELDBDQUEwQyxXQUFXLG1CQUFtQixVQUFVLGFBQWEsZ0JBQWdCLGNBQWMsaUJBQWlCLHVCQUF1QixPQUFPLHNCQUFzQixnQkFBZ0IsR0FBRyxHQUFHLGdCQUFnQixtQkFBbUIsWUFBWSxzQkFBc0IsNkJBQTZCLGlDQUFpQyw2QkFBNkIsdUJBQXVCLEdBQUcscUJBQXFCLDBCQUEwQixrQkFBa0Isa0NBQWtDLGlCQUFpQixJQUFJLGVBQWUsTUFBTSxXQUFXLElBQUksS0FBSyxrQkFBa0IsR0FBRyxrQkFBa0IscUJBQU0saUJBQWlCLDhCQUE4QixtQkFBbUIsb0NBQW9DLEVBQUUsSUFBSSxvQ0FBb0MscUJBQU0saUJBQWlCLG1DQUFtQyxHQUFHLE9BQU8sV0FBVyx5QkFBeUIsZ0JBQWdCLDJCQUEyQix1QkFBdUIsV0FBVyxxQkFBTSxpQkFBaUIsYUFBYSxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsT0FBTyxzQkFBc0IscUJBQU0saUJBQWlCLG1DQUFtQyxHQUFHLE9BQU8sS0FBSyxTQUFTLFNBQVMsb0JBQW9CLHNCQUFzQiw2QkFBNkIsK0NBQStDLHVCQUF1QixrQ0FBa0MsTUFBTSx5QkFBeUIscUJBQXFCLDZCQUE2QixnQkFBZ0Isd0JBQXdCLGtDQUFrQyx3QkFBd0IsS0FBSyxrQkFBa0IsOEJBQThCLEdBQUcsNEJBQTRCLHdCQUF3QixnQ0FBZ0MsTUFBTSxnQkFBZ0IsZUFBZSxJQUFJLE1BQU0sTUFBTSwrQkFBK0IscUNBQXFDLGdCQUFnQiw2QkFBNkIsV0FBVyxxQkFBcUIsTUFBTSxvQkFBb0IsTUFBTSxzQ0FBc0MsV0FBVyxhQUFhLFdBQVcsZ0JBQWdCLDRCQUE0QixvQkFBb0IsdUJBQXVCLGtDQUFrQyxNQUFNLE1BQU0saUJBQWlCLFlBQVksV0FBVyw2QkFBNkIsVUFBVSxLQUFLLHFCQUFxQixnQkFBZ0IsTUFBTSw4REFBOEQsYUFBYSxPQUFPLE1BQU0sMEJBQTBCLE1BQU0sMkNBQTJDLHNDQUFzQyxPQUFPLE1BQU0sMEJBQTBCLE1BQU0sNkJBQTZCLGtDQUFrQyxVQUFVLHFCQUFNLGdCQUFnQix3QkFBd0IsK0JBQStCLE9BQU8sTUFBTSwrQ0FBK0MsNkJBQTZCLG9CQUFvQixjQUFjLHVCQUF1QixNQUFNLHNEQUFzRCxlQUFlLHFCQUFxQixhQUFhLG1CQUFtQixnQ0FBZ0MsT0FBTywyQkFBMkIsaUpBQWlKLHVCQUF1QiwrQkFBK0IsbUJBQW1CLE1BQU0sWUFBWSxVQUFVLG9DQUFvQyxvRUFBb0UseUNBQXlDLDRDQUE0QyxvQkFBb0IsdUJBQXVCLFNBQVMsOEJBQThCLDRCQUE0QiwwRkFBMEYsWUFBWSxrQkFBa0IsMEJBQTBCLG1DQUFtQyxNQUFNLHNCQUFzQixrQ0FBa0Msa0JBQWtCLElBQUksTUFBTSxzQ0FBc0MsSUFBSSxNQUFNLGtDQUFrQyxtQkFBbUIsSUFBSSxNQUFNLCtCQUErQixtQkFBbUIsT0FBTyxnQkFBZ0IsaUJBQWlCLCtCQUErQiwwQ0FBMEMseUJBQXlCLE1BQU0sTUFBTSxrQkFBa0IsbUJBQW1CLDBCQUEwQixnQkFBZ0IsZ0JBQWdCLEtBQUssSUFBSSx1REFBdUQsY0FBYyxvQ0FBb0Msc0NBQXNDLDZDQUE2Qyw0QkFBNEIsbUVBQW1FLDhEQUE4RCw4REFBOEQseUJBQXlCLDBCQUEwQixtQkFBbUIsMEJBQTBCLDJCQUEyQiwyQkFBMkIsc0JBQXNCLG9DQUFvQyxpQkFBaUIsZ0JBQWdCLDBCQUEwQixTQUFTLHNCQUFzQixTQUFTLDBCQUEwQixzQkFBc0IsU0FBUyxzQkFBc0IsU0FBUywwQkFBMEIsc0JBQXNCLFNBQVMsUUFBUSxhQUFhLG9CQUFvQixTQUFTLFNBQVMsb0NBQW9DLHFCQUFxQixhQUFhLFVBQVUsNkJBQTZCLHFCQUFxQixhQUFhLFVBQVUsNkJBQTZCLHFCQUFxQixhQUFhLGFBQWEseUJBQXlCLG1DQUFtQyxvQ0FBb0MsMEJBQTBCLDRCQUE0Qix3Q0FBd0MsOERBQThELG1DQUFtQyx3QkFBd0IsdUJBQXVCLG9DQUFvQyw4Q0FBOEMsaUJBQWlCLGlDQUFpQywwQkFBMEIsOEJBQThCLG9CQUFvQixtQ0FBbUMsOEJBQThCLFNBQVMsd0JBQXdCLHVCQUF1Qiw4QkFBOEIsTUFBTSwrQkFBK0IsdUJBQXVCLGdCQUFnQixpQkFBaUIsK0JBQStCLCtCQUErQixzQkFBc0IsU0FBUyxnQkFBZ0IsaUJBQWlCLCtCQUErQiwwQ0FBMEMscUJBQXFCLG1DQUFtQyxrQkFBa0IsbUNBQW1DLCtDQUErQyxTQUFTLHlCQUF5QixxQkFBcUIsdUNBQXVDLGtCQUFrQixpQkFBaUIsVUFBVSwrQkFBK0IsS0FBSywrQkFBK0IsK0JBQStCLHlDQUF5QyxzQkFBc0IsbUNBQW1DLDZFQUE2RSxTQUFTLHdCQUF3QixpQ0FBaUMsc0JBQXNCLHFDQUFxQyxpQkFBaUIsb0JBQW9CLHdCQUF3Qiw0QkFBNEIsU0FBUyxZQUFZLHNCQUFzQixPQUFPLCtCQUErQixtQkFBbUIsb0NBQW9DLGlCQUFpQixLQUFLLGdCQUFnQixPQUFPLCtCQUErQixrQkFBa0IsbUJBQW1CLElBQUksSUFBSSxxQkFBTSwyQkFBMkIsU0FBUyxhQUFhLE1BQU0scUJBQU0saUJBQWlCLHdCQUF3Qix5Q0FBeUMsaUJBQWlCLGlCQUFpQixzQ0FBc0Msa0JBQWtCLFNBQVMsWUFBWSxtQkFBbUIsS0FBSyxtQkFBbUIsZ0JBQWdCLGdCQUFnQixZQUFZLFVBQVUsaUJBQWlCLGFBQWEsVUFBVSxtQkFBTyxDQUFDLDhDQUFRLEVBQUUsaUJBQWlCLGFBQWEsVUFBVSxtQkFBTyxDQUFDLCtDQUFRLEVBQUUsaUJBQWlCLGFBQWEsVUFBVSxtQkFBTyxDQUFDLDRFQUFRLEVBQUUsaUJBQWlCLGFBQWEsVUFBVSxtQkFBTyxDQUFDLGtFQUFLLEVBQUUsaUJBQWlCLGFBQWEsVUFBVSxtQkFBTyxDQUFDLHlDQUFNLElBQUksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3N0cmVhbS1odHRwL2luZGV4LmpzP2RiYTIiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezUyMzpmdW5jdGlvbihlKXtlLmV4cG9ydHM9ezEwMDpcIkNvbnRpbnVlXCIsMTAxOlwiU3dpdGNoaW5nIFByb3RvY29sc1wiLDEwMjpcIlByb2Nlc3NpbmdcIiwyMDA6XCJPS1wiLDIwMTpcIkNyZWF0ZWRcIiwyMDI6XCJBY2NlcHRlZFwiLDIwMzpcIk5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uXCIsMjA0OlwiTm8gQ29udGVudFwiLDIwNTpcIlJlc2V0IENvbnRlbnRcIiwyMDY6XCJQYXJ0aWFsIENvbnRlbnRcIiwyMDc6XCJNdWx0aS1TdGF0dXNcIiwyMDg6XCJBbHJlYWR5IFJlcG9ydGVkXCIsMjI2OlwiSU0gVXNlZFwiLDMwMDpcIk11bHRpcGxlIENob2ljZXNcIiwzMDE6XCJNb3ZlZCBQZXJtYW5lbnRseVwiLDMwMjpcIkZvdW5kXCIsMzAzOlwiU2VlIE90aGVyXCIsMzA0OlwiTm90IE1vZGlmaWVkXCIsMzA1OlwiVXNlIFByb3h5XCIsMzA3OlwiVGVtcG9yYXJ5IFJlZGlyZWN0XCIsMzA4OlwiUGVybWFuZW50IFJlZGlyZWN0XCIsNDAwOlwiQmFkIFJlcXVlc3RcIiw0MDE6XCJVbmF1dGhvcml6ZWRcIiw0MDI6XCJQYXltZW50IFJlcXVpcmVkXCIsNDAzOlwiRm9yYmlkZGVuXCIsNDA0OlwiTm90IEZvdW5kXCIsNDA1OlwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsNDA2OlwiTm90IEFjY2VwdGFibGVcIiw0MDc6XCJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiLDQwODpcIlJlcXVlc3QgVGltZW91dFwiLDQwOTpcIkNvbmZsaWN0XCIsNDEwOlwiR29uZVwiLDQxMTpcIkxlbmd0aCBSZXF1aXJlZFwiLDQxMjpcIlByZWNvbmRpdGlvbiBGYWlsZWRcIiw0MTM6XCJQYXlsb2FkIFRvbyBMYXJnZVwiLDQxNDpcIlVSSSBUb28gTG9uZ1wiLDQxNTpcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIiw0MTY6XCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIiw0MTc6XCJFeHBlY3RhdGlvbiBGYWlsZWRcIiw0MTg6XCJJJ20gYSB0ZWFwb3RcIiw0MjE6XCJNaXNkaXJlY3RlZCBSZXF1ZXN0XCIsNDIyOlwiVW5wcm9jZXNzYWJsZSBFbnRpdHlcIiw0MjM6XCJMb2NrZWRcIiw0MjQ6XCJGYWlsZWQgRGVwZW5kZW5jeVwiLDQyNTpcIlVub3JkZXJlZCBDb2xsZWN0aW9uXCIsNDI2OlwiVXBncmFkZSBSZXF1aXJlZFwiLDQyODpcIlByZWNvbmRpdGlvbiBSZXF1aXJlZFwiLDQyOTpcIlRvbyBNYW55IFJlcXVlc3RzXCIsNDMxOlwiUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZVwiLDQ1MTpcIlVuYXZhaWxhYmxlIEZvciBMZWdhbCBSZWFzb25zXCIsNTAwOlwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsNTAxOlwiTm90IEltcGxlbWVudGVkXCIsNTAyOlwiQmFkIEdhdGV3YXlcIiw1MDM6XCJTZXJ2aWNlIFVuYXZhaWxhYmxlXCIsNTA0OlwiR2F0ZXdheSBUaW1lb3V0XCIsNTA1OlwiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWRcIiw1MDY6XCJWYXJpYW50IEFsc28gTmVnb3RpYXRlc1wiLDUwNzpcIkluc3VmZmljaWVudCBTdG9yYWdlXCIsNTA4OlwiTG9vcCBEZXRlY3RlZFwiLDUwOTpcIkJhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZFwiLDUxMDpcIk5vdCBFeHRlbmRlZFwiLDUxMTpcIk5ldHdvcmsgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIn19LDc4MjpmdW5jdGlvbihlKXtpZih0eXBlb2YgT2JqZWN0LmNyZWF0ZT09PVwiZnVuY3Rpb25cIil7ZS5leHBvcnRzPWZ1bmN0aW9uIGluaGVyaXRzKGUsdCl7aWYodCl7ZS5zdXBlcl89dDtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSl9fX1lbHNle2UuZXhwb3J0cz1mdW5jdGlvbiBpbmhlcml0cyhlLHQpe2lmKHQpe2Uuc3VwZXJfPXQ7dmFyIFRlbXBDdG9yPWZ1bmN0aW9uKCl7fTtUZW1wQ3Rvci5wcm90b3R5cGU9dC5wcm90b3R5cGU7ZS5wcm90b3R5cGU9bmV3IFRlbXBDdG9yO2UucHJvdG90eXBlLmNvbnN0cnVjdG9yPWV9fX19LDY0NjpmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtjb25zdCB0PXt9O2Z1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShlLHIsbil7aWYoIW4pe249RXJyb3J9ZnVuY3Rpb24gZ2V0TWVzc2FnZShlLHQsbil7aWYodHlwZW9mIHI9PT1cInN0cmluZ1wiKXtyZXR1cm4gcn1lbHNle3JldHVybiByKGUsdCxuKX19Y2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihlLHQscil7c3VwZXIoZ2V0TWVzc2FnZShlLHQscikpfX1Ob2RlRXJyb3IucHJvdG90eXBlLm5hbWU9bi5uYW1lO05vZGVFcnJvci5wcm90b3R5cGUuY29kZT1lO3RbZV09Tm9kZUVycm9yfWZ1bmN0aW9uIG9uZU9mKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSl7Y29uc3Qgcj1lLmxlbmd0aDtlPWUubWFwKChlPT5TdHJpbmcoZSkpKTtpZihyPjIpe3JldHVybmBvbmUgb2YgJHt0fSAke2Uuc2xpY2UoMCxyLTEpLmpvaW4oXCIsIFwiKX0sIG9yIGArZVtyLTFdfWVsc2UgaWYocj09PTIpe3JldHVybmBvbmUgb2YgJHt0fSAke2VbMF19IG9yICR7ZVsxXX1gfWVsc2V7cmV0dXJuYG9mICR7dH0gJHtlWzBdfWB9fWVsc2V7cmV0dXJuYG9mICR7dH0gJHtTdHJpbmcoZSl9YH19ZnVuY3Rpb24gc3RhcnRzV2l0aChlLHQscil7cmV0dXJuIGUuc3Vic3RyKCFyfHxyPDA/MDorcix0Lmxlbmd0aCk9PT10fWZ1bmN0aW9uIGVuZHNXaXRoKGUsdCxyKXtpZihyPT09dW5kZWZpbmVkfHxyPmUubGVuZ3RoKXtyPWUubGVuZ3RofXJldHVybiBlLnN1YnN0cmluZyhyLXQubGVuZ3RoLHIpPT09dH1mdW5jdGlvbiBpbmNsdWRlcyhlLHQscil7aWYodHlwZW9mIHIhPT1cIm51bWJlclwiKXtyPTB9aWYocit0Lmxlbmd0aD5lLmxlbmd0aCl7cmV0dXJuIGZhbHNlfWVsc2V7cmV0dXJuIGUuaW5kZXhPZih0LHIpIT09LTF9fWNyZWF0ZUVycm9yVHlwZShcIkVSUl9JTlZBTElEX09QVF9WQUxVRVwiLChmdW5jdGlvbihlLHQpe3JldHVybidUaGUgdmFsdWUgXCInK3QrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcIicrZSsnXCInfSksVHlwZUVycm9yKTtjcmVhdGVFcnJvclR5cGUoXCJFUlJfSU5WQUxJRF9BUkdfVFlQRVwiLChmdW5jdGlvbihlLHQscil7bGV0IG47aWYodHlwZW9mIHQ9PT1cInN0cmluZ1wiJiZzdGFydHNXaXRoKHQsXCJub3QgXCIpKXtuPVwibXVzdCBub3QgYmVcIjt0PXQucmVwbGFjZSgvXm5vdCAvLFwiXCIpfWVsc2V7bj1cIm11c3QgYmVcIn1sZXQgaTtpZihlbmRzV2l0aChlLFwiIGFyZ3VtZW50XCIpKXtpPWBUaGUgJHtlfSAke259ICR7b25lT2YodCxcInR5cGVcIil9YH1lbHNle2NvbnN0IHI9aW5jbHVkZXMoZSxcIi5cIik/XCJwcm9wZXJ0eVwiOlwiYXJndW1lbnRcIjtpPWBUaGUgXCIke2V9XCIgJHtyfSAke259ICR7b25lT2YodCxcInR5cGVcIil9YH1pKz1gLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIHJ9YDtyZXR1cm4gaX0pLFR5cGVFcnJvcik7Y3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRlwiLFwic3RyZWFtLnB1c2goKSBhZnRlciBFT0ZcIik7Y3JlYXRlRXJyb3JUeXBlKFwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URURcIiwoZnVuY3Rpb24oZSl7cmV0dXJuXCJUaGUgXCIrZStcIiBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkXCJ9KSk7Y3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIixcIlByZW1hdHVyZSBjbG9zZVwiKTtjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX0RFU1RST1lFRFwiLChmdW5jdGlvbihlKXtyZXR1cm5cIkNhbm5vdCBjYWxsIFwiK2UrXCIgYWZ0ZXIgYSBzdHJlYW0gd2FzIGRlc3Ryb3llZFwifSkpO2NyZWF0ZUVycm9yVHlwZShcIkVSUl9NVUxUSVBMRV9DQUxMQkFDS1wiLFwiQ2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzXCIpO2NyZWF0ZUVycm9yVHlwZShcIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEVcIixcIkNhbm5vdCBwaXBlLCBub3QgcmVhZGFibGVcIik7Y3JlYXRlRXJyb3JUeXBlKFwiRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkRcIixcIndyaXRlIGFmdGVyIGVuZFwiKTtjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX05VTExfVkFMVUVTXCIsXCJNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbVwiLFR5cGVFcnJvcik7Y3JlYXRlRXJyb3JUeXBlKFwiRVJSX1VOS05PV05fRU5DT0RJTkdcIiwoZnVuY3Rpb24oZSl7cmV0dXJuXCJVbmtub3duIGVuY29kaW5nOiBcIitlfSksVHlwZUVycm9yKTtjcmVhdGVFcnJvclR5cGUoXCJFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UXCIsXCJzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudFwiKTtlLmV4cG9ydHMucT10fSw0MDM6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl7dC5wdXNoKHIpfXJldHVybiB0fTtlLmV4cG9ydHM9RHVwbGV4O3ZhciBpPXIoNzA5KTt2YXIgYT1yKDMzNyk7cig3ODIpKER1cGxleCxpKTt7dmFyIG89bihhLnByb3RvdHlwZSk7Zm9yKHZhciBzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBmPW9bc107aWYoIUR1cGxleC5wcm90b3R5cGVbZl0pRHVwbGV4LnByb3RvdHlwZVtmXT1hLnByb3RvdHlwZVtmXX19ZnVuY3Rpb24gRHVwbGV4KGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpcmV0dXJuIG5ldyBEdXBsZXgoZSk7aS5jYWxsKHRoaXMsZSk7YS5jYWxsKHRoaXMsZSk7dGhpcy5hbGxvd0hhbGZPcGVuPXRydWU7aWYoZSl7aWYoZS5yZWFkYWJsZT09PWZhbHNlKXRoaXMucmVhZGFibGU9ZmFsc2U7aWYoZS53cml0YWJsZT09PWZhbHNlKXRoaXMud3JpdGFibGU9ZmFsc2U7aWYoZS5hbGxvd0hhbGZPcGVuPT09ZmFsc2Upe3RoaXMuYWxsb3dIYWxmT3Blbj1mYWxzZTt0aGlzLm9uY2UoXCJlbmRcIixvbmVuZCl9fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOmZhbHNlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLFwid3JpdGFibGVCdWZmZXJcIix7ZW51bWVyYWJsZTpmYWxzZSxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyKCl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsXCJ3cml0YWJsZUxlbmd0aFwiLHtlbnVtZXJhYmxlOmZhbHNlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGh9fSk7ZnVuY3Rpb24gb25lbmQoKXtpZih0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKXJldHVybjtwcm9jZXNzLm5leHRUaWNrKG9uRW5kTlQsdGhpcyl9ZnVuY3Rpb24gb25FbmROVChlKXtlLmVuZCgpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLFwiZGVzdHJveWVkXCIse2VudW1lcmFibGU6ZmFsc2UsZ2V0OmZ1bmN0aW9uIGdldCgpe2lmKHRoaXMuX3JlYWRhYmxlU3RhdGU9PT11bmRlZmluZWR8fHRoaXMuX3dyaXRhYmxlU3RhdGU9PT11bmRlZmluZWQpe3JldHVybiBmYWxzZX1yZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24gc2V0KGUpe2lmKHRoaXMuX3JlYWRhYmxlU3RhdGU9PT11bmRlZmluZWR8fHRoaXMuX3dyaXRhYmxlU3RhdGU9PT11bmRlZmluZWQpe3JldHVybn10aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD1lO3RoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPWV9fSl9LDg4OTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPVBhc3NUaHJvdWdoO3ZhciBuPXIoMTcwKTtyKDc4MikoUGFzc1Rocm91Z2gsbik7ZnVuY3Rpb24gUGFzc1Rocm91Z2goZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKXJldHVybiBuZXcgUGFzc1Rocm91Z2goZSk7bi5jYWxsKHRoaXMsZSl9UGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LHIpe3IobnVsbCxlKX19LDcwOTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPVJlYWRhYmxlO3ZhciBuO1JlYWRhYmxlLlJlYWRhYmxlU3RhdGU9UmVhZGFibGVTdGF0ZTt2YXIgaT1yKDM2MSkuRXZlbnRFbWl0dGVyO3ZhciBhPWZ1bmN0aW9uIEVFbGlzdGVuZXJDb3VudChlLHQpe3JldHVybiBlLmxpc3RlbmVycyh0KS5sZW5ndGh9O3ZhciBvPXIoNjc4KTt2YXIgcz1yKDMwMCkuQnVmZmVyO3ZhciBmPWdsb2JhbC5VaW50OEFycmF5fHxmdW5jdGlvbigpe307ZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihlKXtyZXR1cm4gcy5mcm9tKGUpfWZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkoZSl7cmV0dXJuIHMuaXNCdWZmZXIoZSl8fGUgaW5zdGFuY2VvZiBmfXZhciBsPXIoODM3KTt2YXIgdTtpZihsJiZsLmRlYnVnbG9nKXt1PWwuZGVidWdsb2coXCJzdHJlYW1cIil9ZWxzZXt1PWZ1bmN0aW9uIGRlYnVnKCl7fX12YXIgZD1yKDM3OSk7dmFyIGM9cigyNSk7dmFyIGg9cig3NzYpLHA9aC5nZXRIaWdoV2F0ZXJNYXJrO3ZhciBiPXIoNjQ2KS5xLHk9Yi5FUlJfSU5WQUxJRF9BUkdfVFlQRSxnPWIuRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRixfPWIuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsdj1iLkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQ7dmFyIG07dmFyIHc7dmFyIFI7cig3ODIpKFJlYWRhYmxlLG8pO3ZhciBTPWMuZXJyb3JPckRlc3Ryb3k7dmFyIEU9W1wiZXJyb3JcIixcImNsb3NlXCIsXCJkZXN0cm95XCIsXCJwYXVzZVwiLFwicmVzdW1lXCJdO2Z1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlLHQscil7aWYodHlwZW9mIGUucHJlcGVuZExpc3RlbmVyPT09XCJmdW5jdGlvblwiKXJldHVybiBlLnByZXBlbmRMaXN0ZW5lcih0LHIpO2lmKCFlLl9ldmVudHN8fCFlLl9ldmVudHNbdF0pZS5vbih0LHIpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShlLl9ldmVudHNbdF0pKWUuX2V2ZW50c1t0XS51bnNoaWZ0KHIpO2Vsc2UgZS5fZXZlbnRzW3RdPVtyLGUuX2V2ZW50c1t0XV19ZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShlLHQsaSl7bj1ufHxyKDQwMyk7ZT1lfHx7fTtpZih0eXBlb2YgaSE9PVwiYm9vbGVhblwiKWk9dCBpbnN0YW5jZW9mIG47dGhpcy5vYmplY3RNb2RlPSEhZS5vYmplY3RNb2RlO2lmKGkpdGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISFlLnJlYWRhYmxlT2JqZWN0TW9kZTt0aGlzLmhpZ2hXYXRlck1hcms9cCh0aGlzLGUsXCJyZWFkYWJsZUhpZ2hXYXRlck1hcmtcIixpKTt0aGlzLmJ1ZmZlcj1uZXcgZDt0aGlzLmxlbmd0aD0wO3RoaXMucGlwZXM9bnVsbDt0aGlzLnBpcGVzQ291bnQ9MDt0aGlzLmZsb3dpbmc9bnVsbDt0aGlzLmVuZGVkPWZhbHNlO3RoaXMuZW5kRW1pdHRlZD1mYWxzZTt0aGlzLnJlYWRpbmc9ZmFsc2U7dGhpcy5zeW5jPXRydWU7dGhpcy5uZWVkUmVhZGFibGU9ZmFsc2U7dGhpcy5lbWl0dGVkUmVhZGFibGU9ZmFsc2U7dGhpcy5yZWFkYWJsZUxpc3RlbmluZz1mYWxzZTt0aGlzLnJlc3VtZVNjaGVkdWxlZD1mYWxzZTt0aGlzLnBhdXNlZD10cnVlO3RoaXMuZW1pdENsb3NlPWUuZW1pdENsb3NlIT09ZmFsc2U7dGhpcy5hdXRvRGVzdHJveT0hIWUuYXV0b0Rlc3Ryb3k7dGhpcy5kZXN0cm95ZWQ9ZmFsc2U7dGhpcy5kZWZhdWx0RW5jb2Rpbmc9ZS5kZWZhdWx0RW5jb2Rpbmd8fFwidXRmOFwiO3RoaXMuYXdhaXREcmFpbj0wO3RoaXMucmVhZGluZ01vcmU9ZmFsc2U7dGhpcy5kZWNvZGVyPW51bGw7dGhpcy5lbmNvZGluZz1udWxsO2lmKGUuZW5jb2Rpbmcpe2lmKCFtKW09cig3MDQpLnM7dGhpcy5kZWNvZGVyPW5ldyBtKGUuZW5jb2RpbmcpO3RoaXMuZW5jb2Rpbmc9ZS5lbmNvZGluZ319ZnVuY3Rpb24gUmVhZGFibGUoZSl7bj1ufHxyKDQwMyk7aWYoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKXJldHVybiBuZXcgUmVhZGFibGUoZSk7dmFyIHQ9dGhpcyBpbnN0YW5jZW9mIG47dGhpcy5fcmVhZGFibGVTdGF0ZT1uZXcgUmVhZGFibGVTdGF0ZShlLHRoaXMsdCk7dGhpcy5yZWFkYWJsZT10cnVlO2lmKGUpe2lmKHR5cGVvZiBlLnJlYWQ9PT1cImZ1bmN0aW9uXCIpdGhpcy5fcmVhZD1lLnJlYWQ7aWYodHlwZW9mIGUuZGVzdHJveT09PVwiZnVuY3Rpb25cIil0aGlzLl9kZXN0cm95PWUuZGVzdHJveX1vLmNhbGwodGhpcyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtlbnVtZXJhYmxlOmZhbHNlLGdldDpmdW5jdGlvbiBnZXQoKXtpZih0aGlzLl9yZWFkYWJsZVN0YXRlPT09dW5kZWZpbmVkKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24gc2V0KGUpe2lmKCF0aGlzLl9yZWFkYWJsZVN0YXRlKXtyZXR1cm59dGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZX19KTtSZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveT1jLmRlc3Ryb3k7UmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3k9Yy51bmRlc3Ryb3k7UmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7dChlKX07UmVhZGFibGUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLl9yZWFkYWJsZVN0YXRlO3ZhciBuO2lmKCFyLm9iamVjdE1vZGUpe2lmKHR5cGVvZiBlPT09XCJzdHJpbmdcIil7dD10fHxyLmRlZmF1bHRFbmNvZGluZztpZih0IT09ci5lbmNvZGluZyl7ZT1zLmZyb20oZSx0KTt0PVwiXCJ9bj10cnVlfX1lbHNle249dHJ1ZX1yZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLGUsdCxmYWxzZSxuKX07UmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcyxlLG51bGwsdHJ1ZSxmYWxzZSl9O2Z1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoZSx0LHIsbixpKXt1KFwicmVhZGFibGVBZGRDaHVua1wiLHQpO3ZhciBhPWUuX3JlYWRhYmxlU3RhdGU7aWYodD09PW51bGwpe2EucmVhZGluZz1mYWxzZTtvbkVvZkNodW5rKGUsYSl9ZWxzZXt2YXIgbztpZighaSlvPWNodW5rSW52YWxpZChhLHQpO2lmKG8pe1MoZSxvKX1lbHNlIGlmKGEub2JqZWN0TW9kZXx8dCYmdC5sZW5ndGg+MCl7aWYodHlwZW9mIHQhPT1cInN0cmluZ1wiJiYhYS5vYmplY3RNb2RlJiZPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkhPT1zLnByb3RvdHlwZSl7dD1fdWludDhBcnJheVRvQnVmZmVyKHQpfWlmKG4pe2lmKGEuZW5kRW1pdHRlZClTKGUsbmV3IHYpO2Vsc2UgYWRkQ2h1bmsoZSxhLHQsdHJ1ZSl9ZWxzZSBpZihhLmVuZGVkKXtTKGUsbmV3IGcpfWVsc2UgaWYoYS5kZXN0cm95ZWQpe3JldHVybiBmYWxzZX1lbHNle2EucmVhZGluZz1mYWxzZTtpZihhLmRlY29kZXImJiFyKXt0PWEuZGVjb2Rlci53cml0ZSh0KTtpZihhLm9iamVjdE1vZGV8fHQubGVuZ3RoIT09MClhZGRDaHVuayhlLGEsdCxmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKGUsYSl9ZWxzZXthZGRDaHVuayhlLGEsdCxmYWxzZSl9fX1lbHNlIGlmKCFuKXthLnJlYWRpbmc9ZmFsc2U7bWF5YmVSZWFkTW9yZShlLGEpfX1yZXR1cm4hYS5lbmRlZCYmKGEubGVuZ3RoPGEuaGlnaFdhdGVyTWFya3x8YS5sZW5ndGg9PT0wKX1mdW5jdGlvbiBhZGRDaHVuayhlLHQscixuKXtpZih0LmZsb3dpbmcmJnQubGVuZ3RoPT09MCYmIXQuc3luYyl7dC5hd2FpdERyYWluPTA7ZS5lbWl0KFwiZGF0YVwiLHIpfWVsc2V7dC5sZW5ndGgrPXQub2JqZWN0TW9kZT8xOnIubGVuZ3RoO2lmKG4pdC5idWZmZXIudW5zaGlmdChyKTtlbHNlIHQuYnVmZmVyLnB1c2gocik7aWYodC5uZWVkUmVhZGFibGUpZW1pdFJlYWRhYmxlKGUpfW1heWJlUmVhZE1vcmUoZSx0KX1mdW5jdGlvbiBjaHVua0ludmFsaWQoZSx0KXt2YXIgcjtpZighX2lzVWludDhBcnJheSh0KSYmdHlwZW9mIHQhPT1cInN0cmluZ1wiJiZ0IT09dW5kZWZpbmVkJiYhZS5vYmplY3RNb2RlKXtyPW5ldyB5KFwiY2h1bmtcIixbXCJzdHJpbmdcIixcIkJ1ZmZlclwiLFwiVWludDhBcnJheVwiXSx0KX1yZXR1cm4gcn1SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPT09ZmFsc2V9O1JlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZz1mdW5jdGlvbihlKXtpZighbSltPXIoNzA0KS5zO3ZhciB0PW5ldyBtKGUpO3RoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlcj10O3RoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2Rpbmc9dGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyLmVuY29kaW5nO3ZhciBuPXRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7dmFyIGk9XCJcIjt3aGlsZShuIT09bnVsbCl7aSs9dC53cml0ZShuLmRhdGEpO249bi5uZXh0fXRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmNsZWFyKCk7aWYoaSE9PVwiXCIpdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIucHVzaChpKTt0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aD1pLmxlbmd0aDtyZXR1cm4gdGhpc307dmFyIFQ9MTA3Mzc0MTgyNDtmdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhlKXtpZihlPj1UKXtlPVR9ZWxzZXtlLS07ZXw9ZT4+PjE7ZXw9ZT4+PjI7ZXw9ZT4+PjQ7ZXw9ZT4+Pjg7ZXw9ZT4+PjE2O2UrK31yZXR1cm4gZX1mdW5jdGlvbiBob3dNdWNoVG9SZWFkKGUsdCl7aWYoZTw9MHx8dC5sZW5ndGg9PT0wJiZ0LmVuZGVkKXJldHVybiAwO2lmKHQub2JqZWN0TW9kZSlyZXR1cm4gMTtpZihlIT09ZSl7aWYodC5mbG93aW5nJiZ0Lmxlbmd0aClyZXR1cm4gdC5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiB0Lmxlbmd0aH1pZihlPnQuaGlnaFdhdGVyTWFyayl0LmhpZ2hXYXRlck1hcms9Y29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsoZSk7aWYoZTw9dC5sZW5ndGgpcmV0dXJuIGU7aWYoIXQuZW5kZWQpe3QubmVlZFJlYWRhYmxlPXRydWU7cmV0dXJuIDB9cmV0dXJuIHQubGVuZ3RofVJlYWRhYmxlLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKGUpe3UoXCJyZWFkXCIsZSk7ZT1wYXJzZUludChlLDEwKTt2YXIgdD10aGlzLl9yZWFkYWJsZVN0YXRlO3ZhciByPWU7aWYoZSE9PTApdC5lbWl0dGVkUmVhZGFibGU9ZmFsc2U7aWYoZT09PTAmJnQubmVlZFJlYWRhYmxlJiYoKHQuaGlnaFdhdGVyTWFyayE9PTA/dC5sZW5ndGg+PXQuaGlnaFdhdGVyTWFyazp0Lmxlbmd0aD4wKXx8dC5lbmRlZCkpe3UoXCJyZWFkOiBlbWl0UmVhZGFibGVcIix0Lmxlbmd0aCx0LmVuZGVkKTtpZih0Lmxlbmd0aD09PTAmJnQuZW5kZWQpZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7cmV0dXJuIG51bGx9ZT1ob3dNdWNoVG9SZWFkKGUsdCk7aWYoZT09PTAmJnQuZW5kZWQpe2lmKHQubGVuZ3RoPT09MCllbmRSZWFkYWJsZSh0aGlzKTtyZXR1cm4gbnVsbH12YXIgbj10Lm5lZWRSZWFkYWJsZTt1KFwibmVlZCByZWFkYWJsZVwiLG4pO2lmKHQubGVuZ3RoPT09MHx8dC5sZW5ndGgtZTx0LmhpZ2hXYXRlck1hcmspe249dHJ1ZTt1KFwibGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmtcIixuKX1pZih0LmVuZGVkfHx0LnJlYWRpbmcpe249ZmFsc2U7dShcInJlYWRpbmcgb3IgZW5kZWRcIixuKX1lbHNlIGlmKG4pe3UoXCJkbyByZWFkXCIpO3QucmVhZGluZz10cnVlO3Quc3luYz10cnVlO2lmKHQubGVuZ3RoPT09MCl0Lm5lZWRSZWFkYWJsZT10cnVlO3RoaXMuX3JlYWQodC5oaWdoV2F0ZXJNYXJrKTt0LnN5bmM9ZmFsc2U7aWYoIXQucmVhZGluZyllPWhvd011Y2hUb1JlYWQocix0KX12YXIgaTtpZihlPjApaT1mcm9tTGlzdChlLHQpO2Vsc2UgaT1udWxsO2lmKGk9PT1udWxsKXt0Lm5lZWRSZWFkYWJsZT10Lmxlbmd0aDw9dC5oaWdoV2F0ZXJNYXJrO2U9MH1lbHNle3QubGVuZ3RoLT1lO3QuYXdhaXREcmFpbj0wfWlmKHQubGVuZ3RoPT09MCl7aWYoIXQuZW5kZWQpdC5uZWVkUmVhZGFibGU9dHJ1ZTtpZihyIT09ZSYmdC5lbmRlZCllbmRSZWFkYWJsZSh0aGlzKX1pZihpIT09bnVsbCl0aGlzLmVtaXQoXCJkYXRhXCIsaSk7cmV0dXJuIGl9O2Z1bmN0aW9uIG9uRW9mQ2h1bmsoZSx0KXt1KFwib25Fb2ZDaHVua1wiKTtpZih0LmVuZGVkKXJldHVybjtpZih0LmRlY29kZXIpe3ZhciByPXQuZGVjb2Rlci5lbmQoKTtpZihyJiZyLmxlbmd0aCl7dC5idWZmZXIucHVzaChyKTt0Lmxlbmd0aCs9dC5vYmplY3RNb2RlPzE6ci5sZW5ndGh9fXQuZW5kZWQ9dHJ1ZTtpZih0LnN5bmMpe2VtaXRSZWFkYWJsZShlKX1lbHNle3QubmVlZFJlYWRhYmxlPWZhbHNlO2lmKCF0LmVtaXR0ZWRSZWFkYWJsZSl7dC5lbWl0dGVkUmVhZGFibGU9dHJ1ZTtlbWl0UmVhZGFibGVfKGUpfX19ZnVuY3Rpb24gZW1pdFJlYWRhYmxlKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dShcImVtaXRSZWFkYWJsZVwiLHQubmVlZFJlYWRhYmxlLHQuZW1pdHRlZFJlYWRhYmxlKTt0Lm5lZWRSZWFkYWJsZT1mYWxzZTtpZighdC5lbWl0dGVkUmVhZGFibGUpe3UoXCJlbWl0UmVhZGFibGVcIix0LmZsb3dpbmcpO3QuZW1pdHRlZFJlYWRhYmxlPXRydWU7cHJvY2Vzcy5uZXh0VGljayhlbWl0UmVhZGFibGVfLGUpfX1mdW5jdGlvbiBlbWl0UmVhZGFibGVfKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dShcImVtaXRSZWFkYWJsZV9cIix0LmRlc3Ryb3llZCx0Lmxlbmd0aCx0LmVuZGVkKTtpZighdC5kZXN0cm95ZWQmJih0Lmxlbmd0aHx8dC5lbmRlZCkpe2UuZW1pdChcInJlYWRhYmxlXCIpO3QuZW1pdHRlZFJlYWRhYmxlPWZhbHNlfXQubmVlZFJlYWRhYmxlPSF0LmZsb3dpbmcmJiF0LmVuZGVkJiZ0Lmxlbmd0aDw9dC5oaWdoV2F0ZXJNYXJrO2Zsb3coZSl9ZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShlLHQpe2lmKCF0LnJlYWRpbmdNb3JlKXt0LnJlYWRpbmdNb3JlPXRydWU7cHJvY2Vzcy5uZXh0VGljayhtYXliZVJlYWRNb3JlXyxlLHQpfX1mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhlLHQpe3doaWxlKCF0LnJlYWRpbmcmJiF0LmVuZGVkJiYodC5sZW5ndGg8dC5oaWdoV2F0ZXJNYXJrfHx0LmZsb3dpbmcmJnQubGVuZ3RoPT09MCkpe3ZhciByPXQubGVuZ3RoO3UoXCJtYXliZVJlYWRNb3JlIHJlYWQgMFwiKTtlLnJlYWQoMCk7aWYocj09PXQubGVuZ3RoKWJyZWFrfXQucmVhZGluZ01vcmU9ZmFsc2V9UmVhZGFibGUucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKGUpe1ModGhpcyxuZXcgXyhcIl9yZWFkKClcIikpfTtSZWFkYWJsZS5wcm90b3R5cGUucGlwZT1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7dmFyIG49dGhpcy5fcmVhZGFibGVTdGF0ZTtzd2l0Y2gobi5waXBlc0NvdW50KXtjYXNlIDA6bi5waXBlcz1lO2JyZWFrO2Nhc2UgMTpuLnBpcGVzPVtuLnBpcGVzLGVdO2JyZWFrO2RlZmF1bHQ6bi5waXBlcy5wdXNoKGUpO2JyZWFrfW4ucGlwZXNDb3VudCs9MTt1KFwicGlwZSBjb3VudD0lZCBvcHRzPSVqXCIsbi5waXBlc0NvdW50LHQpO3ZhciBpPSghdHx8dC5lbmQhPT1mYWxzZSkmJmUhPT1wcm9jZXNzLnN0ZG91dCYmZSE9PXByb2Nlc3Muc3RkZXJyO3ZhciBvPWk/b25lbmQ6dW5waXBlO2lmKG4uZW5kRW1pdHRlZClwcm9jZXNzLm5leHRUaWNrKG8pO2Vsc2Ugci5vbmNlKFwiZW5kXCIsbyk7ZS5vbihcInVucGlwZVwiLG9udW5waXBlKTtmdW5jdGlvbiBvbnVucGlwZShlLHQpe3UoXCJvbnVucGlwZVwiKTtpZihlPT09cil7aWYodCYmdC5oYXNVbnBpcGVkPT09ZmFsc2Upe3QuaGFzVW5waXBlZD10cnVlO2NsZWFudXAoKX19fWZ1bmN0aW9uIG9uZW5kKCl7dShcIm9uZW5kXCIpO2UuZW5kKCl9dmFyIHM9cGlwZU9uRHJhaW4ocik7ZS5vbihcImRyYWluXCIscyk7dmFyIGY9ZmFsc2U7ZnVuY3Rpb24gY2xlYW51cCgpe3UoXCJjbGVhbnVwXCIpO2UucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLG9uY2xvc2UpO2UucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixvbmZpbmlzaCk7ZS5yZW1vdmVMaXN0ZW5lcihcImRyYWluXCIscyk7ZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsb25lcnJvcik7ZS5yZW1vdmVMaXN0ZW5lcihcInVucGlwZVwiLG9udW5waXBlKTtyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsb25lbmQpO3IucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix1bnBpcGUpO3IucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsb25kYXRhKTtmPXRydWU7aWYobi5hd2FpdERyYWluJiYoIWUuX3dyaXRhYmxlU3RhdGV8fGUuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSlzKCl9ci5vbihcImRhdGFcIixvbmRhdGEpO2Z1bmN0aW9uIG9uZGF0YSh0KXt1KFwib25kYXRhXCIpO3ZhciBpPWUud3JpdGUodCk7dShcImRlc3Qud3JpdGVcIixpKTtpZihpPT09ZmFsc2Upe2lmKChuLnBpcGVzQ291bnQ9PT0xJiZuLnBpcGVzPT09ZXx8bi5waXBlc0NvdW50PjEmJmluZGV4T2Yobi5waXBlcyxlKSE9PS0xKSYmIWYpe3UoXCJmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2VcIixuLmF3YWl0RHJhaW4pO24uYXdhaXREcmFpbisrfXIucGF1c2UoKX19ZnVuY3Rpb24gb25lcnJvcih0KXt1KFwib25lcnJvclwiLHQpO3VucGlwZSgpO2UucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLG9uZXJyb3IpO2lmKGEoZSxcImVycm9yXCIpPT09MClTKGUsdCl9cHJlcGVuZExpc3RlbmVyKGUsXCJlcnJvclwiLG9uZXJyb3IpO2Z1bmN0aW9uIG9uY2xvc2UoKXtlLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsb25maW5pc2gpO3VucGlwZSgpfWUub25jZShcImNsb3NlXCIsb25jbG9zZSk7ZnVuY3Rpb24gb25maW5pc2goKXt1KFwib25maW5pc2hcIik7ZS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsb25jbG9zZSk7dW5waXBlKCl9ZS5vbmNlKFwiZmluaXNoXCIsb25maW5pc2gpO2Z1bmN0aW9uIHVucGlwZSgpe3UoXCJ1bnBpcGVcIik7ci51bnBpcGUoZSl9ZS5lbWl0KFwicGlwZVwiLHIpO2lmKCFuLmZsb3dpbmcpe3UoXCJwaXBlIHJlc3VtZVwiKTtyLnJlc3VtZSgpfXJldHVybiBlfTtmdW5jdGlvbiBwaXBlT25EcmFpbihlKXtyZXR1cm4gZnVuY3Rpb24gcGlwZU9uRHJhaW5GdW5jdGlvblJlc3VsdCgpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dShcInBpcGVPbkRyYWluXCIsdC5hd2FpdERyYWluKTtpZih0LmF3YWl0RHJhaW4pdC5hd2FpdERyYWluLS07aWYodC5hd2FpdERyYWluPT09MCYmYShlLFwiZGF0YVwiKSl7dC5mbG93aW5nPXRydWU7ZmxvdyhlKX19fVJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fcmVhZGFibGVTdGF0ZTt2YXIgcj17aGFzVW5waXBlZDpmYWxzZX07aWYodC5waXBlc0NvdW50PT09MClyZXR1cm4gdGhpcztpZih0LnBpcGVzQ291bnQ9PT0xKXtpZihlJiZlIT09dC5waXBlcylyZXR1cm4gdGhpcztpZighZSllPXQucGlwZXM7dC5waXBlcz1udWxsO3QucGlwZXNDb3VudD0wO3QuZmxvd2luZz1mYWxzZTtpZihlKWUuZW1pdChcInVucGlwZVwiLHRoaXMscik7cmV0dXJuIHRoaXN9aWYoIWUpe3ZhciBuPXQucGlwZXM7dmFyIGk9dC5waXBlc0NvdW50O3QucGlwZXM9bnVsbDt0LnBpcGVzQ291bnQ9MDt0LmZsb3dpbmc9ZmFsc2U7Zm9yKHZhciBhPTA7YTxpO2ErKyl7blthXS5lbWl0KFwidW5waXBlXCIsdGhpcyx7aGFzVW5waXBlZDpmYWxzZX0pfXJldHVybiB0aGlzfXZhciBvPWluZGV4T2YodC5waXBlcyxlKTtpZihvPT09LTEpcmV0dXJuIHRoaXM7dC5waXBlcy5zcGxpY2UobywxKTt0LnBpcGVzQ291bnQtPTE7aWYodC5waXBlc0NvdW50PT09MSl0LnBpcGVzPXQucGlwZXNbMF07ZS5lbWl0KFwidW5waXBlXCIsdGhpcyxyKTtyZXR1cm4gdGhpc307UmVhZGFibGUucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGUsdCl7dmFyIHI9by5wcm90b3R5cGUub24uY2FsbCh0aGlzLGUsdCk7dmFyIG49dGhpcy5fcmVhZGFibGVTdGF0ZTtpZihlPT09XCJkYXRhXCIpe24ucmVhZGFibGVMaXN0ZW5pbmc9dGhpcy5saXN0ZW5lckNvdW50KFwicmVhZGFibGVcIik+MDtpZihuLmZsb3dpbmchPT1mYWxzZSl0aGlzLnJlc3VtZSgpfWVsc2UgaWYoZT09PVwicmVhZGFibGVcIil7aWYoIW4uZW5kRW1pdHRlZCYmIW4ucmVhZGFibGVMaXN0ZW5pbmcpe24ucmVhZGFibGVMaXN0ZW5pbmc9bi5uZWVkUmVhZGFibGU9dHJ1ZTtuLmZsb3dpbmc9ZmFsc2U7bi5lbWl0dGVkUmVhZGFibGU9ZmFsc2U7dShcIm9uIHJlYWRhYmxlXCIsbi5sZW5ndGgsbi5yZWFkaW5nKTtpZihuLmxlbmd0aCl7ZW1pdFJlYWRhYmxlKHRoaXMpfWVsc2UgaWYoIW4ucmVhZGluZyl7cHJvY2Vzcy5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLHRoaXMpfX19cmV0dXJuIHJ9O1JlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1SZWFkYWJsZS5wcm90b3R5cGUub247UmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9by5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIuY2FsbCh0aGlzLGUsdCk7aWYoZT09PVwicmVhZGFibGVcIil7cHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZyx0aGlzKX1yZXR1cm4gcn07UmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdD1vLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGU9PT1cInJlYWRhYmxlXCJ8fGU9PT11bmRlZmluZWQpe3Byb2Nlc3MubmV4dFRpY2sodXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcsdGhpcyl9cmV0dXJuIHR9O2Z1bmN0aW9uIHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dC5yZWFkYWJsZUxpc3RlbmluZz1lLmxpc3RlbmVyQ291bnQoXCJyZWFkYWJsZVwiKT4wO2lmKHQucmVzdW1lU2NoZWR1bGVkJiYhdC5wYXVzZWQpe3QuZmxvd2luZz10cnVlfWVsc2UgaWYoZS5saXN0ZW5lckNvdW50KFwiZGF0YVwiKT4wKXtlLnJlc3VtZSgpfX1mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKGUpe3UoXCJyZWFkYWJsZSBuZXh0dGljayByZWFkIDBcIik7ZS5yZWFkKDApfVJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9yZWFkYWJsZVN0YXRlO2lmKCFlLmZsb3dpbmcpe3UoXCJyZXN1bWVcIik7ZS5mbG93aW5nPSFlLnJlYWRhYmxlTGlzdGVuaW5nO3Jlc3VtZSh0aGlzLGUpfWUucGF1c2VkPWZhbHNlO3JldHVybiB0aGlzfTtmdW5jdGlvbiByZXN1bWUoZSx0KXtpZighdC5yZXN1bWVTY2hlZHVsZWQpe3QucmVzdW1lU2NoZWR1bGVkPXRydWU7cHJvY2Vzcy5uZXh0VGljayhyZXN1bWVfLGUsdCl9fWZ1bmN0aW9uIHJlc3VtZV8oZSx0KXt1KFwicmVzdW1lXCIsdC5yZWFkaW5nKTtpZighdC5yZWFkaW5nKXtlLnJlYWQoMCl9dC5yZXN1bWVTY2hlZHVsZWQ9ZmFsc2U7ZS5lbWl0KFwicmVzdW1lXCIpO2Zsb3coZSk7aWYodC5mbG93aW5nJiYhdC5yZWFkaW5nKWUucmVhZCgwKX1SZWFkYWJsZS5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXt1KFwiY2FsbCBwYXVzZSBmbG93aW5nPSVqXCIsdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtpZih0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmchPT1mYWxzZSl7dShcInBhdXNlXCIpO3RoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZz1mYWxzZTt0aGlzLmVtaXQoXCJwYXVzZVwiKX10aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZD10cnVlO3JldHVybiB0aGlzfTtmdW5jdGlvbiBmbG93KGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dShcImZsb3dcIix0LmZsb3dpbmcpO3doaWxlKHQuZmxvd2luZyYmZS5yZWFkKCkhPT1udWxsKXt9fVJlYWRhYmxlLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dmFyIHI9dGhpcy5fcmVhZGFibGVTdGF0ZTt2YXIgbj1mYWxzZTtlLm9uKFwiZW5kXCIsKGZ1bmN0aW9uKCl7dShcIndyYXBwZWQgZW5kXCIpO2lmKHIuZGVjb2RlciYmIXIuZW5kZWQpe3ZhciBlPXIuZGVjb2Rlci5lbmQoKTtpZihlJiZlLmxlbmd0aCl0LnB1c2goZSl9dC5wdXNoKG51bGwpfSkpO2Uub24oXCJkYXRhXCIsKGZ1bmN0aW9uKGkpe3UoXCJ3cmFwcGVkIGRhdGFcIik7aWYoci5kZWNvZGVyKWk9ci5kZWNvZGVyLndyaXRlKGkpO2lmKHIub2JqZWN0TW9kZSYmKGk9PT1udWxsfHxpPT09dW5kZWZpbmVkKSlyZXR1cm47ZWxzZSBpZighci5vYmplY3RNb2RlJiYoIWl8fCFpLmxlbmd0aCkpcmV0dXJuO3ZhciBhPXQucHVzaChpKTtpZighYSl7bj10cnVlO2UucGF1c2UoKX19KSk7Zm9yKHZhciBpIGluIGUpe2lmKHRoaXNbaV09PT11bmRlZmluZWQmJnR5cGVvZiBlW2ldPT09XCJmdW5jdGlvblwiKXt0aGlzW2ldPWZ1bmN0aW9uIG1ldGhvZFdyYXAodCl7cmV0dXJuIGZ1bmN0aW9uIG1ldGhvZFdyYXBSZXR1cm5GdW5jdGlvbigpe3JldHVybiBlW3RdLmFwcGx5KGUsYXJndW1lbnRzKX19KGkpfX1mb3IodmFyIGE9MDthPEUubGVuZ3RoO2ErKyl7ZS5vbihFW2FdLHRoaXMuZW1pdC5iaW5kKHRoaXMsRVthXSkpfXRoaXMuX3JlYWQ9ZnVuY3Rpb24odCl7dShcIndyYXBwZWQgX3JlYWRcIix0KTtpZihuKXtuPWZhbHNlO2UucmVzdW1lKCl9fTtyZXR1cm4gdGhpc307aWYodHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIil7UmVhZGFibGUucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXT1mdW5jdGlvbigpe2lmKHc9PT11bmRlZmluZWQpe3c9cig4NzEpfXJldHVybiB3KHRoaXMpfX1PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIse2VudW1lcmFibGU6ZmFsc2UsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSxcInJlYWRhYmxlQnVmZmVyXCIse2VudW1lcmFibGU6ZmFsc2UsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlJiZ0aGlzLl9yZWFkYWJsZVN0YXRlLmJ1ZmZlcn19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLFwicmVhZGFibGVGbG93aW5nXCIse2VudW1lcmFibGU6ZmFsc2UsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LHNldDpmdW5jdGlvbiBzZXQoZSl7aWYodGhpcy5fcmVhZGFibGVTdGF0ZSl7dGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPWV9fX0pO1JlYWRhYmxlLl9mcm9tTGlzdD1mcm9tTGlzdDtPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLFwicmVhZGFibGVMZW5ndGhcIix7ZW51bWVyYWJsZTpmYWxzZSxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RofX0pO2Z1bmN0aW9uIGZyb21MaXN0KGUsdCl7aWYodC5sZW5ndGg9PT0wKXJldHVybiBudWxsO3ZhciByO2lmKHQub2JqZWN0TW9kZSlyPXQuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZighZXx8ZT49dC5sZW5ndGgpe2lmKHQuZGVjb2RlcilyPXQuYnVmZmVyLmpvaW4oXCJcIik7ZWxzZSBpZih0LmJ1ZmZlci5sZW5ndGg9PT0xKXI9dC5idWZmZXIuZmlyc3QoKTtlbHNlIHI9dC5idWZmZXIuY29uY2F0KHQubGVuZ3RoKTt0LmJ1ZmZlci5jbGVhcigpfWVsc2V7cj10LmJ1ZmZlci5jb25zdW1lKGUsdC5kZWNvZGVyKX1yZXR1cm4gcn1mdW5jdGlvbiBlbmRSZWFkYWJsZShlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO3UoXCJlbmRSZWFkYWJsZVwiLHQuZW5kRW1pdHRlZCk7aWYoIXQuZW5kRW1pdHRlZCl7dC5lbmRlZD10cnVlO3Byb2Nlc3MubmV4dFRpY2soZW5kUmVhZGFibGVOVCx0LGUpfX1mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKGUsdCl7dShcImVuZFJlYWRhYmxlTlRcIixlLmVuZEVtaXR0ZWQsZS5sZW5ndGgpO2lmKCFlLmVuZEVtaXR0ZWQmJmUubGVuZ3RoPT09MCl7ZS5lbmRFbWl0dGVkPXRydWU7dC5yZWFkYWJsZT1mYWxzZTt0LmVtaXQoXCJlbmRcIik7aWYoZS5hdXRvRGVzdHJveSl7dmFyIHI9dC5fd3JpdGFibGVTdGF0ZTtpZighcnx8ci5hdXRvRGVzdHJveSYmci5maW5pc2hlZCl7dC5kZXN0cm95KCl9fX19aWYodHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIil7UmVhZGFibGUuZnJvbT1mdW5jdGlvbihlLHQpe2lmKFI9PT11bmRlZmluZWQpe1I9cig3MjcpfXJldHVybiBSKFJlYWRhYmxlLGUsdCl9fWZ1bmN0aW9uIGluZGV4T2YoZSx0KXtmb3IodmFyIHI9MCxuPWUubGVuZ3RoO3I8bjtyKyspe2lmKGVbcl09PT10KXJldHVybiByfXJldHVybi0xfX0sMTcwOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9VHJhbnNmb3JtO3ZhciBuPXIoNjQ2KS5xLGk9bi5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxhPW4uRVJSX01VTFRJUExFX0NBTExCQUNLLG89bi5FUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HLHM9bi5FUlJfVFJBTlNGT1JNX1dJVEhfTEVOR1RIXzA7dmFyIGY9cig0MDMpO3IoNzgyKShUcmFuc2Zvcm0sZik7ZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZSx0KXt2YXIgcj10aGlzLl90cmFuc2Zvcm1TdGF0ZTtyLnRyYW5zZm9ybWluZz1mYWxzZTt2YXIgbj1yLndyaXRlY2I7aWYobj09PW51bGwpe3JldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBhKX1yLndyaXRlY2h1bms9bnVsbDtyLndyaXRlY2I9bnVsbDtpZih0IT1udWxsKXRoaXMucHVzaCh0KTtuKGUpO3ZhciBpPXRoaXMuX3JlYWRhYmxlU3RhdGU7aS5yZWFkaW5nPWZhbHNlO2lmKGkubmVlZFJlYWRhYmxlfHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcmspe3RoaXMuX3JlYWQoaS5oaWdoV2F0ZXJNYXJrKX19ZnVuY3Rpb24gVHJhbnNmb3JtKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpcmV0dXJuIG5ldyBUcmFuc2Zvcm0oZSk7Zi5jYWxsKHRoaXMsZSk7dGhpcy5fdHJhbnNmb3JtU3RhdGU9e2FmdGVyVHJhbnNmb3JtOmFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksbmVlZFRyYW5zZm9ybTpmYWxzZSx0cmFuc2Zvcm1pbmc6ZmFsc2Usd3JpdGVjYjpudWxsLHdyaXRlY2h1bms6bnVsbCx3cml0ZWVuY29kaW5nOm51bGx9O3RoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlPXRydWU7dGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jPWZhbHNlO2lmKGUpe2lmKHR5cGVvZiBlLnRyYW5zZm9ybT09PVwiZnVuY3Rpb25cIil0aGlzLl90cmFuc2Zvcm09ZS50cmFuc2Zvcm07aWYodHlwZW9mIGUuZmx1c2g9PT1cImZ1bmN0aW9uXCIpdGhpcy5fZmx1c2g9ZS5mbHVzaH10aGlzLm9uKFwicHJlZmluaXNoXCIscHJlZmluaXNoKX1mdW5jdGlvbiBwcmVmaW5pc2goKXt2YXIgZT10aGlzO2lmKHR5cGVvZiB0aGlzLl9mbHVzaD09PVwiZnVuY3Rpb25cIiYmIXRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkKXt0aGlzLl9mbHVzaCgoZnVuY3Rpb24odCxyKXtkb25lKGUsdCxyKX0pKX1lbHNle2RvbmUodGhpcyxudWxsLG51bGwpfX1UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXt0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtPWZhbHNlO3JldHVybiBmLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcyxlLHQpfTtUcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LHIpe3IobmV3IGkoXCJfdHJhbnNmb3JtKClcIikpfTtUcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5fdHJhbnNmb3JtU3RhdGU7bi53cml0ZWNiPXI7bi53cml0ZWNodW5rPWU7bi53cml0ZWVuY29kaW5nPXQ7aWYoIW4udHJhbnNmb3JtaW5nKXt2YXIgaT10aGlzLl9yZWFkYWJsZVN0YXRlO2lmKG4ubmVlZFRyYW5zZm9ybXx8aS5uZWVkUmVhZGFibGV8fGkubGVuZ3RoPGkuaGlnaFdhdGVyTWFyayl0aGlzLl9yZWFkKGkuaGlnaFdhdGVyTWFyayl9fTtUcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX3RyYW5zZm9ybVN0YXRlO2lmKHQud3JpdGVjaHVuayE9PW51bGwmJiF0LnRyYW5zZm9ybWluZyl7dC50cmFuc2Zvcm1pbmc9dHJ1ZTt0aGlzLl90cmFuc2Zvcm0odC53cml0ZWNodW5rLHQud3JpdGVlbmNvZGluZyx0LmFmdGVyVHJhbnNmb3JtKX1lbHNle3QubmVlZFRyYW5zZm9ybT10cnVlfX07VHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbihlLHQpe2YucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcyxlLChmdW5jdGlvbihlKXt0KGUpfSkpfTtmdW5jdGlvbiBkb25lKGUsdCxyKXtpZih0KXJldHVybiBlLmVtaXQoXCJlcnJvclwiLHQpO2lmKHIhPW51bGwpZS5wdXNoKHIpO2lmKGUuX3dyaXRhYmxlU3RhdGUubGVuZ3RoKXRocm93IG5ldyBzO2lmKGUuX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZyl0aHJvdyBuZXcgbztyZXR1cm4gZS5wdXNoKG51bGwpfX0sMzM3OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9V3JpdGFibGU7ZnVuY3Rpb24gV3JpdGVSZXEoZSx0LHIpe3RoaXMuY2h1bms9ZTt0aGlzLmVuY29kaW5nPXQ7dGhpcy5jYWxsYmFjaz1yO3RoaXMubmV4dD1udWxsfWZ1bmN0aW9uIENvcmtlZFJlcXVlc3QoZSl7dmFyIHQ9dGhpczt0aGlzLm5leHQ9bnVsbDt0aGlzLmVudHJ5PW51bGw7dGhpcy5maW5pc2g9ZnVuY3Rpb24oKXtvbkNvcmtlZEZpbmlzaCh0LGUpfX12YXIgbjtXcml0YWJsZS5Xcml0YWJsZVN0YXRlPVdyaXRhYmxlU3RhdGU7dmFyIGk9e2RlcHJlY2F0ZTpyKDc2OSl9O3ZhciBhPXIoNjc4KTt2YXIgbz1yKDMwMCkuQnVmZmVyO3ZhciBzPWdsb2JhbC5VaW50OEFycmF5fHxmdW5jdGlvbigpe307ZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihlKXtyZXR1cm4gby5mcm9tKGUpfWZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkoZSl7cmV0dXJuIG8uaXNCdWZmZXIoZSl8fGUgaW5zdGFuY2VvZiBzfXZhciBmPXIoMjUpO3ZhciBsPXIoNzc2KSx1PWwuZ2V0SGlnaFdhdGVyTWFyazt2YXIgZD1yKDY0NikucSxjPWQuRVJSX0lOVkFMSURfQVJHX1RZUEUsaD1kLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELHA9ZC5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssYj1kLkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUseT1kLkVSUl9TVFJFQU1fREVTVFJPWUVELGc9ZC5FUlJfU1RSRUFNX05VTExfVkFMVUVTLF89ZC5FUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCx2PWQuRVJSX1VOS05PV05fRU5DT0RJTkc7dmFyIG09Zi5lcnJvck9yRGVzdHJveTtyKDc4MikoV3JpdGFibGUsYSk7ZnVuY3Rpb24gbm9wKCl7fWZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUoZSx0LGkpe249bnx8cig0MDMpO2U9ZXx8e307aWYodHlwZW9mIGkhPT1cImJvb2xlYW5cIilpPXQgaW5zdGFuY2VvZiBuO3RoaXMub2JqZWN0TW9kZT0hIWUub2JqZWN0TW9kZTtpZihpKXRoaXMub2JqZWN0TW9kZT10aGlzLm9iamVjdE1vZGV8fCEhZS53cml0YWJsZU9iamVjdE1vZGU7dGhpcy5oaWdoV2F0ZXJNYXJrPXUodGhpcyxlLFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIsaSk7dGhpcy5maW5hbENhbGxlZD1mYWxzZTt0aGlzLm5lZWREcmFpbj1mYWxzZTt0aGlzLmVuZGluZz1mYWxzZTt0aGlzLmVuZGVkPWZhbHNlO3RoaXMuZmluaXNoZWQ9ZmFsc2U7dGhpcy5kZXN0cm95ZWQ9ZmFsc2U7dmFyIGE9ZS5kZWNvZGVTdHJpbmdzPT09ZmFsc2U7dGhpcy5kZWNvZGVTdHJpbmdzPSFhO3RoaXMuZGVmYXVsdEVuY29kaW5nPWUuZGVmYXVsdEVuY29kaW5nfHxcInV0ZjhcIjt0aGlzLmxlbmd0aD0wO3RoaXMud3JpdGluZz1mYWxzZTt0aGlzLmNvcmtlZD0wO3RoaXMuc3luYz10cnVlO3RoaXMuYnVmZmVyUHJvY2Vzc2luZz1mYWxzZTt0aGlzLm9ud3JpdGU9ZnVuY3Rpb24oZSl7b253cml0ZSh0LGUpfTt0aGlzLndyaXRlY2I9bnVsbDt0aGlzLndyaXRlbGVuPTA7dGhpcy5idWZmZXJlZFJlcXVlc3Q9bnVsbDt0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbDt0aGlzLnBlbmRpbmdjYj0wO3RoaXMucHJlZmluaXNoZWQ9ZmFsc2U7dGhpcy5lcnJvckVtaXR0ZWQ9ZmFsc2U7dGhpcy5lbWl0Q2xvc2U9ZS5lbWl0Q2xvc2UhPT1mYWxzZTt0aGlzLmF1dG9EZXN0cm95PSEhZS5hdXRvRGVzdHJveTt0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50PTA7dGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWU9bmV3IENvcmtlZFJlcXVlc3QodGhpcyl9V3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uIGdldEJ1ZmZlcigpe3ZhciBlPXRoaXMuYnVmZmVyZWRSZXF1ZXN0O3ZhciB0PVtdO3doaWxlKGUpe3QucHVzaChlKTtlPWUubmV4dH1yZXR1cm4gdH07KGZ1bmN0aW9uKCl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSxcImJ1ZmZlclwiLHtnZXQ6aS5kZXByZWNhdGUoKGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVCdWZmZXJHZXR0ZXIoKXtyZXR1cm4gdGhpcy5nZXRCdWZmZXIoKX0pLFwiX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgXCIrXCJpbnN0ZWFkLlwiLFwiREVQMDAwM1wiKX0pfWNhdGNoKGUpe319KSgpO3ZhciB3O2lmKHR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJlN5bWJvbC5oYXNJbnN0YW5jZSYmdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdPT09XCJmdW5jdGlvblwiKXt3PUZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO09iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSxTeW1ib2wuaGFzSW5zdGFuY2Use3ZhbHVlOmZ1bmN0aW9uIHZhbHVlKGUpe2lmKHcuY2FsbCh0aGlzLGUpKXJldHVybiB0cnVlO2lmKHRoaXMhPT1Xcml0YWJsZSlyZXR1cm4gZmFsc2U7cmV0dXJuIGUmJmUuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlfX0pfWVsc2V7dz1mdW5jdGlvbiByZWFsSGFzSW5zdGFuY2UoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzfX1mdW5jdGlvbiBXcml0YWJsZShlKXtuPW58fHIoNDAzKTt2YXIgdD10aGlzIGluc3RhbmNlb2YgbjtpZighdCYmIXcuY2FsbChXcml0YWJsZSx0aGlzKSlyZXR1cm4gbmV3IFdyaXRhYmxlKGUpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3IFdyaXRhYmxlU3RhdGUoZSx0aGlzLHQpO3RoaXMud3JpdGFibGU9dHJ1ZTtpZihlKXtpZih0eXBlb2YgZS53cml0ZT09PVwiZnVuY3Rpb25cIil0aGlzLl93cml0ZT1lLndyaXRlO2lmKHR5cGVvZiBlLndyaXRldj09PVwiZnVuY3Rpb25cIil0aGlzLl93cml0ZXY9ZS53cml0ZXY7aWYodHlwZW9mIGUuZGVzdHJveT09PVwiZnVuY3Rpb25cIil0aGlzLl9kZXN0cm95PWUuZGVzdHJveTtpZih0eXBlb2YgZS5maW5hbD09PVwiZnVuY3Rpb25cIil0aGlzLl9maW5hbD1lLmZpbmFsfWEuY2FsbCh0aGlzKX1Xcml0YWJsZS5wcm90b3R5cGUucGlwZT1mdW5jdGlvbigpe20odGhpcyxuZXcgYil9O2Z1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoZSx0KXt2YXIgcj1uZXcgXzttKGUscik7cHJvY2Vzcy5uZXh0VGljayh0LHIpfWZ1bmN0aW9uIHZhbGlkQ2h1bmsoZSx0LHIsbil7dmFyIGk7aWYocj09PW51bGwpe2k9bmV3IGd9ZWxzZSBpZih0eXBlb2YgciE9PVwic3RyaW5nXCImJiF0Lm9iamVjdE1vZGUpe2k9bmV3IGMoXCJjaHVua1wiLFtcInN0cmluZ1wiLFwiQnVmZmVyXCJdLHIpfWlmKGkpe20oZSxpKTtwcm9jZXNzLm5leHRUaWNrKG4saSk7cmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfVdyaXRhYmxlLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5fd3JpdGFibGVTdGF0ZTt2YXIgaT1mYWxzZTt2YXIgYT0hbi5vYmplY3RNb2RlJiZfaXNVaW50OEFycmF5KGUpO2lmKGEmJiFvLmlzQnVmZmVyKGUpKXtlPV91aW50OEFycmF5VG9CdWZmZXIoZSl9aWYodHlwZW9mIHQ9PT1cImZ1bmN0aW9uXCIpe3I9dDt0PW51bGx9aWYoYSl0PVwiYnVmZmVyXCI7ZWxzZSBpZighdCl0PW4uZGVmYXVsdEVuY29kaW5nO2lmKHR5cGVvZiByIT09XCJmdW5jdGlvblwiKXI9bm9wO2lmKG4uZW5kaW5nKXdyaXRlQWZ0ZXJFbmQodGhpcyxyKTtlbHNlIGlmKGF8fHZhbGlkQ2h1bmsodGhpcyxuLGUscikpe24ucGVuZGluZ2NiKys7aT13cml0ZU9yQnVmZmVyKHRoaXMsbixhLGUsdCxyKX1yZXR1cm4gaX07V3JpdGFibGUucHJvdG90eXBlLmNvcms9ZnVuY3Rpb24oKXt0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrfTtXcml0YWJsZS5wcm90b3R5cGUudW5jb3JrPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fd3JpdGFibGVTdGF0ZTtpZihlLmNvcmtlZCl7ZS5jb3JrZWQtLTtpZighZS53cml0aW5nJiYhZS5jb3JrZWQmJiFlLmJ1ZmZlclByb2Nlc3NpbmcmJmUuYnVmZmVyZWRSZXF1ZXN0KWNsZWFyQnVmZmVyKHRoaXMsZSl9fTtXcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlKXtpZih0eXBlb2YgZT09PVwic3RyaW5nXCIpZT1lLnRvTG93ZXJDYXNlKCk7aWYoIShbXCJoZXhcIixcInV0ZjhcIixcInV0Zi04XCIsXCJhc2NpaVwiLFwiYmluYXJ5XCIsXCJiYXNlNjRcIixcInVjczJcIixcInVjcy0yXCIsXCJ1dGYxNmxlXCIsXCJ1dGYtMTZsZVwiLFwicmF3XCJdLmluZGV4T2YoKGUrXCJcIikudG9Mb3dlckNhc2UoKSk+LTEpKXRocm93IG5ldyB2KGUpO3RoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nPWU7cmV0dXJuIHRoaXN9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsXCJ3cml0YWJsZUJ1ZmZlclwiLHtlbnVtZXJhYmxlOmZhbHNlLGdldDpmdW5jdGlvbiBnZXQoKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKX19KTtmdW5jdGlvbiBkZWNvZGVDaHVuayhlLHQscil7aWYoIWUub2JqZWN0TW9kZSYmZS5kZWNvZGVTdHJpbmdzIT09ZmFsc2UmJnR5cGVvZiB0PT09XCJzdHJpbmdcIil7dD1vLmZyb20odCxyKX1yZXR1cm4gdH1PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIse2VudW1lcmFibGU6ZmFsc2UsZ2V0OmZ1bmN0aW9uIGdldCgpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSk7ZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihlLHQscixuLGksYSl7aWYoIXIpe3ZhciBvPWRlY29kZUNodW5rKHQsbixpKTtpZihuIT09byl7cj10cnVlO2k9XCJidWZmZXJcIjtuPW99fXZhciBzPXQub2JqZWN0TW9kZT8xOm4ubGVuZ3RoO3QubGVuZ3RoKz1zO3ZhciBmPXQubGVuZ3RoPHQuaGlnaFdhdGVyTWFyaztpZighZil0Lm5lZWREcmFpbj10cnVlO2lmKHQud3JpdGluZ3x8dC5jb3JrZWQpe3ZhciBsPXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDt0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9e2NodW5rOm4sZW5jb2Rpbmc6aSxpc0J1ZjpyLGNhbGxiYWNrOmEsbmV4dDpudWxsfTtpZihsKXtsLm5leHQ9dC5sYXN0QnVmZmVyZWRSZXF1ZXN0fWVsc2V7dC5idWZmZXJlZFJlcXVlc3Q9dC5sYXN0QnVmZmVyZWRSZXF1ZXN0fXQuYnVmZmVyZWRSZXF1ZXN0Q291bnQrPTF9ZWxzZXtkb1dyaXRlKGUsdCxmYWxzZSxzLG4saSxhKX1yZXR1cm4gZn1mdW5jdGlvbiBkb1dyaXRlKGUsdCxyLG4saSxhLG8pe3Qud3JpdGVsZW49bjt0LndyaXRlY2I9bzt0LndyaXRpbmc9dHJ1ZTt0LnN5bmM9dHJ1ZTtpZih0LmRlc3Ryb3llZCl0Lm9ud3JpdGUobmV3IHkoXCJ3cml0ZVwiKSk7ZWxzZSBpZihyKWUuX3dyaXRldihpLHQub253cml0ZSk7ZWxzZSBlLl93cml0ZShpLGEsdC5vbndyaXRlKTt0LnN5bmM9ZmFsc2V9ZnVuY3Rpb24gb253cml0ZUVycm9yKGUsdCxyLG4saSl7LS10LnBlbmRpbmdjYjtpZihyKXtwcm9jZXNzLm5leHRUaWNrKGksbik7cHJvY2Vzcy5uZXh0VGljayhmaW5pc2hNYXliZSxlLHQpO2UuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPXRydWU7bShlLG4pfWVsc2V7aShuKTtlLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD10cnVlO20oZSxuKTtmaW5pc2hNYXliZShlLHQpfX1mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoZSl7ZS53cml0aW5nPWZhbHNlO2Uud3JpdGVjYj1udWxsO2UubGVuZ3RoLT1lLndyaXRlbGVuO2Uud3JpdGVsZW49MH1mdW5jdGlvbiBvbndyaXRlKGUsdCl7dmFyIHI9ZS5fd3JpdGFibGVTdGF0ZTt2YXIgbj1yLnN5bmM7dmFyIGk9ci53cml0ZWNiO2lmKHR5cGVvZiBpIT09XCJmdW5jdGlvblwiKXRocm93IG5ldyBwO29ud3JpdGVTdGF0ZVVwZGF0ZShyKTtpZih0KW9ud3JpdGVFcnJvcihlLHIsbix0LGkpO2Vsc2V7dmFyIGE9bmVlZEZpbmlzaChyKXx8ZS5kZXN0cm95ZWQ7aWYoIWEmJiFyLmNvcmtlZCYmIXIuYnVmZmVyUHJvY2Vzc2luZyYmci5idWZmZXJlZFJlcXVlc3Qpe2NsZWFyQnVmZmVyKGUscil9aWYobil7cHJvY2Vzcy5uZXh0VGljayhhZnRlcldyaXRlLGUscixhLGkpfWVsc2V7YWZ0ZXJXcml0ZShlLHIsYSxpKX19fWZ1bmN0aW9uIGFmdGVyV3JpdGUoZSx0LHIsbil7aWYoIXIpb253cml0ZURyYWluKGUsdCk7dC5wZW5kaW5nY2ItLTtuKCk7ZmluaXNoTWF5YmUoZSx0KX1mdW5jdGlvbiBvbndyaXRlRHJhaW4oZSx0KXtpZih0Lmxlbmd0aD09PTAmJnQubmVlZERyYWluKXt0Lm5lZWREcmFpbj1mYWxzZTtlLmVtaXQoXCJkcmFpblwiKX19ZnVuY3Rpb24gY2xlYXJCdWZmZXIoZSx0KXt0LmJ1ZmZlclByb2Nlc3Npbmc9dHJ1ZTt2YXIgcj10LmJ1ZmZlcmVkUmVxdWVzdDtpZihlLl93cml0ZXYmJnImJnIubmV4dCl7dmFyIG49dC5idWZmZXJlZFJlcXVlc3RDb3VudDt2YXIgaT1uZXcgQXJyYXkobik7dmFyIGE9dC5jb3JrZWRSZXF1ZXN0c0ZyZWU7YS5lbnRyeT1yO3ZhciBvPTA7dmFyIHM9dHJ1ZTt3aGlsZShyKXtpW29dPXI7aWYoIXIuaXNCdWYpcz1mYWxzZTtyPXIubmV4dDtvKz0xfWkuYWxsQnVmZmVycz1zO2RvV3JpdGUoZSx0LHRydWUsdC5sZW5ndGgsaSxcIlwiLGEuZmluaXNoKTt0LnBlbmRpbmdjYisrO3QubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsO2lmKGEubmV4dCl7dC5jb3JrZWRSZXF1ZXN0c0ZyZWU9YS5uZXh0O2EubmV4dD1udWxsfWVsc2V7dC5jb3JrZWRSZXF1ZXN0c0ZyZWU9bmV3IENvcmtlZFJlcXVlc3QodCl9dC5idWZmZXJlZFJlcXVlc3RDb3VudD0wfWVsc2V7d2hpbGUocil7dmFyIGY9ci5jaHVuazt2YXIgbD1yLmVuY29kaW5nO3ZhciB1PXIuY2FsbGJhY2s7dmFyIGQ9dC5vYmplY3RNb2RlPzE6Zi5sZW5ndGg7ZG9Xcml0ZShlLHQsZmFsc2UsZCxmLGwsdSk7cj1yLm5leHQ7dC5idWZmZXJlZFJlcXVlc3RDb3VudC0tO2lmKHQud3JpdGluZyl7YnJlYWt9fWlmKHI9PT1udWxsKXQubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsfXQuYnVmZmVyZWRSZXF1ZXN0PXI7dC5idWZmZXJQcm9jZXNzaW5nPWZhbHNlfVdyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3IobmV3IGgoXCJfd3JpdGUoKVwiKSl9O1dyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2PW51bGw7V3JpdGFibGUucHJvdG90eXBlLmVuZD1mdW5jdGlvbihlLHQscil7dmFyIG49dGhpcy5fd3JpdGFibGVTdGF0ZTtpZih0eXBlb2YgZT09PVwiZnVuY3Rpb25cIil7cj1lO2U9bnVsbDt0PW51bGx9ZWxzZSBpZih0eXBlb2YgdD09PVwiZnVuY3Rpb25cIil7cj10O3Q9bnVsbH1pZihlIT09bnVsbCYmZSE9PXVuZGVmaW5lZCl0aGlzLndyaXRlKGUsdCk7aWYobi5jb3JrZWQpe24uY29ya2VkPTE7dGhpcy51bmNvcmsoKX1pZighbi5lbmRpbmcpZW5kV3JpdGFibGUodGhpcyxuLHIpO3JldHVybiB0aGlzfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLFwid3JpdGFibGVMZW5ndGhcIix7ZW51bWVyYWJsZTpmYWxzZSxnZXQ6ZnVuY3Rpb24gZ2V0KCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RofX0pO2Z1bmN0aW9uIG5lZWRGaW5pc2goZSl7cmV0dXJuIGUuZW5kaW5nJiZlLmxlbmd0aD09PTAmJmUuYnVmZmVyZWRSZXF1ZXN0PT09bnVsbCYmIWUuZmluaXNoZWQmJiFlLndyaXRpbmd9ZnVuY3Rpb24gY2FsbEZpbmFsKGUsdCl7ZS5fZmluYWwoKGZ1bmN0aW9uKHIpe3QucGVuZGluZ2NiLS07aWYocil7bShlLHIpfXQucHJlZmluaXNoZWQ9dHJ1ZTtlLmVtaXQoXCJwcmVmaW5pc2hcIik7ZmluaXNoTWF5YmUoZSx0KX0pKX1mdW5jdGlvbiBwcmVmaW5pc2goZSx0KXtpZighdC5wcmVmaW5pc2hlZCYmIXQuZmluYWxDYWxsZWQpe2lmKHR5cGVvZiBlLl9maW5hbD09PVwiZnVuY3Rpb25cIiYmIXQuZGVzdHJveWVkKXt0LnBlbmRpbmdjYisrO3QuZmluYWxDYWxsZWQ9dHJ1ZTtwcm9jZXNzLm5leHRUaWNrKGNhbGxGaW5hbCxlLHQpfWVsc2V7dC5wcmVmaW5pc2hlZD10cnVlO2UuZW1pdChcInByZWZpbmlzaFwiKX19fWZ1bmN0aW9uIGZpbmlzaE1heWJlKGUsdCl7dmFyIHI9bmVlZEZpbmlzaCh0KTtpZihyKXtwcmVmaW5pc2goZSx0KTtpZih0LnBlbmRpbmdjYj09PTApe3QuZmluaXNoZWQ9dHJ1ZTtlLmVtaXQoXCJmaW5pc2hcIik7aWYodC5hdXRvRGVzdHJveSl7dmFyIG49ZS5fcmVhZGFibGVTdGF0ZTtpZighbnx8bi5hdXRvRGVzdHJveSYmbi5lbmRFbWl0dGVkKXtlLmRlc3Ryb3koKX19fX1yZXR1cm4gcn1mdW5jdGlvbiBlbmRXcml0YWJsZShlLHQscil7dC5lbmRpbmc9dHJ1ZTtmaW5pc2hNYXliZShlLHQpO2lmKHIpe2lmKHQuZmluaXNoZWQpcHJvY2Vzcy5uZXh0VGljayhyKTtlbHNlIGUub25jZShcImZpbmlzaFwiLHIpfXQuZW5kZWQ9dHJ1ZTtlLndyaXRhYmxlPWZhbHNlfWZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGUsdCxyKXt2YXIgbj1lLmVudHJ5O2UuZW50cnk9bnVsbDt3aGlsZShuKXt2YXIgaT1uLmNhbGxiYWNrO3QucGVuZGluZ2NiLS07aShyKTtuPW4ubmV4dH10LmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0PWV9T2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtlbnVtZXJhYmxlOmZhbHNlLGdldDpmdW5jdGlvbiBnZXQoKXtpZih0aGlzLl93cml0YWJsZVN0YXRlPT09dW5kZWZpbmVkKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24gc2V0KGUpe2lmKCF0aGlzLl93cml0YWJsZVN0YXRlKXtyZXR1cm59dGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ9ZX19KTtXcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveT1mLmRlc3Ryb3k7V3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3k9Zi51bmRlc3Ryb3k7V3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7dChlKX19LDg3MTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG47ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsdCxyKXtpZih0IGluIGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOnIsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOnRydWV9KX1lbHNle2VbdF09cn1yZXR1cm4gZX12YXIgaT1yKDY5OCk7dmFyIGE9U3ltYm9sKFwibGFzdFJlc29sdmVcIik7dmFyIG89U3ltYm9sKFwibGFzdFJlamVjdFwiKTt2YXIgcz1TeW1ib2woXCJlcnJvclwiKTt2YXIgZj1TeW1ib2woXCJlbmRlZFwiKTt2YXIgbD1TeW1ib2woXCJsYXN0UHJvbWlzZVwiKTt2YXIgdT1TeW1ib2woXCJoYW5kbGVQcm9taXNlXCIpO3ZhciBkPVN5bWJvbChcInN0cmVhbVwiKTtmdW5jdGlvbiBjcmVhdGVJdGVyUmVzdWx0KGUsdCl7cmV0dXJue3ZhbHVlOmUsZG9uZTp0fX1mdW5jdGlvbiByZWFkQW5kUmVzb2x2ZShlKXt2YXIgdD1lW2FdO2lmKHQhPT1udWxsKXt2YXIgcj1lW2RdLnJlYWQoKTtpZihyIT09bnVsbCl7ZVtsXT1udWxsO2VbYV09bnVsbDtlW29dPW51bGw7dChjcmVhdGVJdGVyUmVzdWx0KHIsZmFsc2UpKX19fWZ1bmN0aW9uIG9uUmVhZGFibGUoZSl7cHJvY2Vzcy5uZXh0VGljayhyZWFkQW5kUmVzb2x2ZSxlKX1mdW5jdGlvbiB3cmFwRm9yTmV4dChlLHQpe3JldHVybiBmdW5jdGlvbihyLG4pe2UudGhlbigoZnVuY3Rpb24oKXtpZih0W2ZdKXtyKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLHRydWUpKTtyZXR1cm59dFt1XShyLG4pfSksbil9fXZhciBjPU9iamVjdC5nZXRQcm90b3R5cGVPZigoZnVuY3Rpb24oKXt9KSk7dmFyIGg9T2JqZWN0LnNldFByb3RvdHlwZU9mKChuPXtnZXQgc3RyZWFtKCl7cmV0dXJuIHRoaXNbZF19LG5leHQ6ZnVuY3Rpb24gbmV4dCgpe3ZhciBlPXRoaXM7dmFyIHQ9dGhpc1tzXTtpZih0IT09bnVsbCl7cmV0dXJuIFByb21pc2UucmVqZWN0KHQpfWlmKHRoaXNbZl0pe3JldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdCh1bmRlZmluZWQsdHJ1ZSkpfWlmKHRoaXNbZF0uZGVzdHJveWVkKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscil7cHJvY2Vzcy5uZXh0VGljaygoZnVuY3Rpb24oKXtpZihlW3NdKXtyKGVbc10pfWVsc2V7dChjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCx0cnVlKSl9fSkpfSkpfXZhciByPXRoaXNbbF07dmFyIG47aWYocil7bj1uZXcgUHJvbWlzZSh3cmFwRm9yTmV4dChyLHRoaXMpKX1lbHNle3ZhciBpPXRoaXNbZF0ucmVhZCgpO2lmKGkhPT1udWxsKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQoaSxmYWxzZSkpfW49bmV3IFByb21pc2UodGhpc1t1XSl9dGhpc1tsXT1uO3JldHVybiBufX0sX2RlZmluZVByb3BlcnR5KG4sU3ltYm9sLmFzeW5jSXRlcmF0b3IsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSksX2RlZmluZVByb3BlcnR5KG4sXCJyZXR1cm5cIiwoZnVuY3Rpb24gX3JldHVybigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe2VbZF0uZGVzdHJveShudWxsLChmdW5jdGlvbihlKXtpZihlKXtyKGUpO3JldHVybn10KGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLHRydWUpKX0pKX0pKX0pKSxuKSxjKTt2YXIgcD1mdW5jdGlvbiBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IoZSl7dmFyIHQ7dmFyIHI9T2JqZWN0LmNyZWF0ZShoLCh0PXt9LF9kZWZpbmVQcm9wZXJ0eSh0LGQse3ZhbHVlOmUsd3JpdGFibGU6dHJ1ZX0pLF9kZWZpbmVQcm9wZXJ0eSh0LGEse3ZhbHVlOm51bGwsd3JpdGFibGU6dHJ1ZX0pLF9kZWZpbmVQcm9wZXJ0eSh0LG8se3ZhbHVlOm51bGwsd3JpdGFibGU6dHJ1ZX0pLF9kZWZpbmVQcm9wZXJ0eSh0LHMse3ZhbHVlOm51bGwsd3JpdGFibGU6dHJ1ZX0pLF9kZWZpbmVQcm9wZXJ0eSh0LGYse3ZhbHVlOmUuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCx3cml0YWJsZTp0cnVlfSksX2RlZmluZVByb3BlcnR5KHQsdSx7dmFsdWU6ZnVuY3Rpb24gdmFsdWUoZSx0KXt2YXIgbj1yW2RdLnJlYWQoKTtpZihuKXtyW2xdPW51bGw7clthXT1udWxsO3Jbb109bnVsbDtlKGNyZWF0ZUl0ZXJSZXN1bHQobixmYWxzZSkpfWVsc2V7clthXT1lO3Jbb109dH19LHdyaXRhYmxlOnRydWV9KSx0KSk7cltsXT1udWxsO2koZSwoZnVuY3Rpb24oZSl7aWYoZSYmZS5jb2RlIT09XCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRVwiKXt2YXIgdD1yW29dO2lmKHQhPT1udWxsKXtyW2xdPW51bGw7clthXT1udWxsO3Jbb109bnVsbDt0KGUpfXJbc109ZTtyZXR1cm59dmFyIG49clthXTtpZihuIT09bnVsbCl7cltsXT1udWxsO3JbYV09bnVsbDtyW29dPW51bGw7bihjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCx0cnVlKSl9cltmXT10cnVlfSkpO2Uub24oXCJyZWFkYWJsZVwiLG9uUmVhZGFibGUuYmluZChudWxsLHIpKTtyZXR1cm4gcn07ZS5leHBvcnRzPXB9LDM3OTpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gb3duS2V5cyhlLHQpe3ZhciByPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7aWYodCluPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSk7ci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1hcmd1bWVudHNbdF0hPW51bGw/YXJndW1lbnRzW3RdOnt9O2lmKHQlMil7b3duS2V5cyhPYmplY3QociksdHJ1ZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7X2RlZmluZVByb3BlcnR5KGUsdCxyW3RdKX0pKX1lbHNlIGlmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKXtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKX1lbHNle293bktleXMoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9fXJldHVybiBlfWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLHQscil7aWYodCBpbiBlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSl9ZWxzZXtlW3RdPXJ9cmV0dXJuIGV9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ZmFsc2U7bi5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBuKW4ud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsdCxyKXtpZih0KV9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLHQpO2lmKHIpX2RlZmluZVByb3BlcnRpZXMoZSxyKTtyZXR1cm4gZX12YXIgbj1yKDMwMCksaT1uLkJ1ZmZlcjt2YXIgYT1yKDgzNyksbz1hLmluc3BlY3Q7dmFyIHM9byYmby5jdXN0b218fFwiaW5zcGVjdFwiO2Z1bmN0aW9uIGNvcHlCdWZmZXIoZSx0LHIpe2kucHJvdG90eXBlLmNvcHkuY2FsbChlLHQscil9ZS5leHBvcnRzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gQnVmZmVyTGlzdCgpe19jbGFzc0NhbGxDaGVjayh0aGlzLEJ1ZmZlckxpc3QpO3RoaXMuaGVhZD1udWxsO3RoaXMudGFpbD1udWxsO3RoaXMubGVuZ3RoPTB9X2NyZWF0ZUNsYXNzKEJ1ZmZlckxpc3QsW3trZXk6XCJwdXNoXCIsdmFsdWU6ZnVuY3Rpb24gcHVzaChlKXt2YXIgdD17ZGF0YTplLG5leHQ6bnVsbH07aWYodGhpcy5sZW5ndGg+MCl0aGlzLnRhaWwubmV4dD10O2Vsc2UgdGhpcy5oZWFkPXQ7dGhpcy50YWlsPXQ7Kyt0aGlzLmxlbmd0aH19LHtrZXk6XCJ1bnNoaWZ0XCIsdmFsdWU6ZnVuY3Rpb24gdW5zaGlmdChlKXt2YXIgdD17ZGF0YTplLG5leHQ6dGhpcy5oZWFkfTtpZih0aGlzLmxlbmd0aD09PTApdGhpcy50YWlsPXQ7dGhpcy5oZWFkPXQ7Kyt0aGlzLmxlbmd0aH19LHtrZXk6XCJzaGlmdFwiLHZhbHVlOmZ1bmN0aW9uIHNoaWZ0KCl7aWYodGhpcy5sZW5ndGg9PT0wKXJldHVybjt2YXIgZT10aGlzLmhlYWQuZGF0YTtpZih0aGlzLmxlbmd0aD09PTEpdGhpcy5oZWFkPXRoaXMudGFpbD1udWxsO2Vsc2UgdGhpcy5oZWFkPXRoaXMuaGVhZC5uZXh0Oy0tdGhpcy5sZW5ndGg7cmV0dXJuIGV9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbiBjbGVhcigpe3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbDt0aGlzLmxlbmd0aD0wfX0se2tleTpcImpvaW5cIix2YWx1ZTpmdW5jdGlvbiBqb2luKGUpe2lmKHRoaXMubGVuZ3RoPT09MClyZXR1cm5cIlwiO3ZhciB0PXRoaXMuaGVhZDt2YXIgcj1cIlwiK3QuZGF0YTt3aGlsZSh0PXQubmV4dCl7cis9ZSt0LmRhdGF9cmV0dXJuIHJ9fSx7a2V5OlwiY29uY2F0XCIsdmFsdWU6ZnVuY3Rpb24gY29uY2F0KGUpe2lmKHRoaXMubGVuZ3RoPT09MClyZXR1cm4gaS5hbGxvYygwKTt2YXIgdD1pLmFsbG9jVW5zYWZlKGU+Pj4wKTt2YXIgcj10aGlzLmhlYWQ7dmFyIG49MDt3aGlsZShyKXtjb3B5QnVmZmVyKHIuZGF0YSx0LG4pO24rPXIuZGF0YS5sZW5ndGg7cj1yLm5leHR9cmV0dXJuIHR9fSx7a2V5OlwiY29uc3VtZVwiLHZhbHVlOmZ1bmN0aW9uIGNvbnN1bWUoZSx0KXt2YXIgcjtpZihlPHRoaXMuaGVhZC5kYXRhLmxlbmd0aCl7cj10aGlzLmhlYWQuZGF0YS5zbGljZSgwLGUpO3RoaXMuaGVhZC5kYXRhPXRoaXMuaGVhZC5kYXRhLnNsaWNlKGUpfWVsc2UgaWYoZT09PXRoaXMuaGVhZC5kYXRhLmxlbmd0aCl7cj10aGlzLnNoaWZ0KCl9ZWxzZXtyPXQ/dGhpcy5fZ2V0U3RyaW5nKGUpOnRoaXMuX2dldEJ1ZmZlcihlKX1yZXR1cm4gcn19LHtrZXk6XCJmaXJzdFwiLHZhbHVlOmZ1bmN0aW9uIGZpcnN0KCl7cmV0dXJuIHRoaXMuaGVhZC5kYXRhfX0se2tleTpcIl9nZXRTdHJpbmdcIix2YWx1ZTpmdW5jdGlvbiBfZ2V0U3RyaW5nKGUpe3ZhciB0PXRoaXMuaGVhZDt2YXIgcj0xO3ZhciBuPXQuZGF0YTtlLT1uLmxlbmd0aDt3aGlsZSh0PXQubmV4dCl7dmFyIGk9dC5kYXRhO3ZhciBhPWU+aS5sZW5ndGg/aS5sZW5ndGg6ZTtpZihhPT09aS5sZW5ndGgpbis9aTtlbHNlIG4rPWkuc2xpY2UoMCxlKTtlLT1hO2lmKGU9PT0wKXtpZihhPT09aS5sZW5ndGgpeysrcjtpZih0Lm5leHQpdGhpcy5oZWFkPXQubmV4dDtlbHNlIHRoaXMuaGVhZD10aGlzLnRhaWw9bnVsbH1lbHNle3RoaXMuaGVhZD10O3QuZGF0YT1pLnNsaWNlKGEpfWJyZWFrfSsrcn10aGlzLmxlbmd0aC09cjtyZXR1cm4gbn19LHtrZXk6XCJfZ2V0QnVmZmVyXCIsdmFsdWU6ZnVuY3Rpb24gX2dldEJ1ZmZlcihlKXt2YXIgdD1pLmFsbG9jVW5zYWZlKGUpO3ZhciByPXRoaXMuaGVhZDt2YXIgbj0xO3IuZGF0YS5jb3B5KHQpO2UtPXIuZGF0YS5sZW5ndGg7d2hpbGUocj1yLm5leHQpe3ZhciBhPXIuZGF0YTt2YXIgbz1lPmEubGVuZ3RoP2EubGVuZ3RoOmU7YS5jb3B5KHQsdC5sZW5ndGgtZSwwLG8pO2UtPW87aWYoZT09PTApe2lmKG89PT1hLmxlbmd0aCl7KytuO2lmKHIubmV4dCl0aGlzLmhlYWQ9ci5uZXh0O2Vsc2UgdGhpcy5oZWFkPXRoaXMudGFpbD1udWxsfWVsc2V7dGhpcy5oZWFkPXI7ci5kYXRhPWEuc2xpY2Uobyl9YnJlYWt9KytufXRoaXMubGVuZ3RoLT1uO3JldHVybiB0fX0se2tleTpzLHZhbHVlOmZ1bmN0aW9uIHZhbHVlKGUsdCl7cmV0dXJuIG8odGhpcyxfb2JqZWN0U3ByZWFkKHt9LHQse2RlcHRoOjAsY3VzdG9tSW5zcGVjdDpmYWxzZX0pKX19XSk7cmV0dXJuIEJ1ZmZlckxpc3R9KCl9LDI1OmZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGRlc3Ryb3koZSx0KXt2YXIgcj10aGlzO3ZhciBuPXRoaXMuX3JlYWRhYmxlU3RhdGUmJnRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO3ZhciBpPXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO2lmKG58fGkpe2lmKHQpe3QoZSl9ZWxzZSBpZihlKXtpZighdGhpcy5fd3JpdGFibGVTdGF0ZSl7cHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCx0aGlzLGUpfWVsc2UgaWYoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKXt0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD10cnVlO3Byb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yTlQsdGhpcyxlKX19cmV0dXJuIHRoaXN9aWYodGhpcy5fcmVhZGFibGVTdGF0ZSl7dGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ9dHJ1ZX1pZih0aGlzLl93cml0YWJsZVN0YXRlKXt0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD10cnVlfXRoaXMuX2Rlc3Ryb3koZXx8bnVsbCwoZnVuY3Rpb24oZSl7aWYoIXQmJmUpe2lmKCFyLl93cml0YWJsZVN0YXRlKXtwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQscixlKX1lbHNlIGlmKCFyLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCl7ci5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9dHJ1ZTtwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQscixlKX1lbHNle3Byb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQscil9fWVsc2UgaWYodCl7cHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCxyKTt0KGUpfWVsc2V7cHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCxyKX19KSk7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gZW1pdEVycm9yQW5kQ2xvc2VOVChlLHQpe2VtaXRFcnJvck5UKGUsdCk7ZW1pdENsb3NlTlQoZSl9ZnVuY3Rpb24gZW1pdENsb3NlTlQoZSl7aWYoZS5fd3JpdGFibGVTdGF0ZSYmIWUuX3dyaXRhYmxlU3RhdGUuZW1pdENsb3NlKXJldHVybjtpZihlLl9yZWFkYWJsZVN0YXRlJiYhZS5fcmVhZGFibGVTdGF0ZS5lbWl0Q2xvc2UpcmV0dXJuO2UuZW1pdChcImNsb3NlXCIpfWZ1bmN0aW9uIHVuZGVzdHJveSgpe2lmKHRoaXMuX3JlYWRhYmxlU3RhdGUpe3RoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkPWZhbHNlO3RoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZz1mYWxzZTt0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkPWZhbHNlO3RoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZD1mYWxzZX1pZih0aGlzLl93cml0YWJsZVN0YXRlKXt0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD1mYWxzZTt0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkPWZhbHNlO3RoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nPWZhbHNlO3RoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQ9ZmFsc2U7dGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZD1mYWxzZTt0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPWZhbHNlO3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPWZhbHNlfX1mdW5jdGlvbiBlbWl0RXJyb3JOVChlLHQpe2UuZW1pdChcImVycm9yXCIsdCl9ZnVuY3Rpb24gZXJyb3JPckRlc3Ryb3koZSx0KXt2YXIgcj1lLl9yZWFkYWJsZVN0YXRlO3ZhciBuPWUuX3dyaXRhYmxlU3RhdGU7aWYociYmci5hdXRvRGVzdHJveXx8biYmbi5hdXRvRGVzdHJveSllLmRlc3Ryb3kodCk7ZWxzZSBlLmVtaXQoXCJlcnJvclwiLHQpfWUuZXhwb3J0cz17ZGVzdHJveTpkZXN0cm95LHVuZGVzdHJveTp1bmRlc3Ryb3ksZXJyb3JPckRlc3Ryb3k6ZXJyb3JPckRlc3Ryb3l9fSw2OTg6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXIoNjQ2KS5xLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO2Z1bmN0aW9uIG9uY2UoZSl7dmFyIHQ9ZmFsc2U7cmV0dXJuIGZ1bmN0aW9uKCl7aWYodClyZXR1cm47dD10cnVlO2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHIpLGk9MDtpPHI7aSsrKXtuW2ldPWFyZ3VtZW50c1tpXX1lLmFwcGx5KHRoaXMsbil9fWZ1bmN0aW9uIG5vb3AoKXt9ZnVuY3Rpb24gaXNSZXF1ZXN0KGUpe3JldHVybiBlLnNldEhlYWRlciYmdHlwZW9mIGUuYWJvcnQ9PT1cImZ1bmN0aW9uXCJ9ZnVuY3Rpb24gZW9zKGUsdCxyKXtpZih0eXBlb2YgdD09PVwiZnVuY3Rpb25cIilyZXR1cm4gZW9zKGUsbnVsbCx0KTtpZighdCl0PXt9O3I9b25jZShyfHxub29wKTt2YXIgaT10LnJlYWRhYmxlfHx0LnJlYWRhYmxlIT09ZmFsc2UmJmUucmVhZGFibGU7dmFyIGE9dC53cml0YWJsZXx8dC53cml0YWJsZSE9PWZhbHNlJiZlLndyaXRhYmxlO3ZhciBvPWZ1bmN0aW9uIG9ubGVnYWN5ZmluaXNoKCl7aWYoIWUud3JpdGFibGUpZigpfTt2YXIgcz1lLl93cml0YWJsZVN0YXRlJiZlLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkO3ZhciBmPWZ1bmN0aW9uIG9uZmluaXNoKCl7YT1mYWxzZTtzPXRydWU7aWYoIWkpci5jYWxsKGUpfTt2YXIgbD1lLl9yZWFkYWJsZVN0YXRlJiZlLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ7dmFyIHU9ZnVuY3Rpb24gb25lbmQoKXtpPWZhbHNlO2w9dHJ1ZTtpZighYSlyLmNhbGwoZSl9O3ZhciBkPWZ1bmN0aW9uIG9uZXJyb3IodCl7ci5jYWxsKGUsdCl9O3ZhciBjPWZ1bmN0aW9uIG9uY2xvc2UoKXt2YXIgdDtpZihpJiYhbCl7aWYoIWUuX3JlYWRhYmxlU3RhdGV8fCFlLl9yZWFkYWJsZVN0YXRlLmVuZGVkKXQ9bmV3IG47cmV0dXJuIHIuY2FsbChlLHQpfWlmKGEmJiFzKXtpZighZS5fd3JpdGFibGVTdGF0ZXx8IWUuX3dyaXRhYmxlU3RhdGUuZW5kZWQpdD1uZXcgbjtyZXR1cm4gci5jYWxsKGUsdCl9fTt2YXIgaD1mdW5jdGlvbiBvbnJlcXVlc3QoKXtlLnJlcS5vbihcImZpbmlzaFwiLGYpfTtpZihpc1JlcXVlc3QoZSkpe2Uub24oXCJjb21wbGV0ZVwiLGYpO2Uub24oXCJhYm9ydFwiLGMpO2lmKGUucmVxKWgoKTtlbHNlIGUub24oXCJyZXF1ZXN0XCIsaCl9ZWxzZSBpZihhJiYhZS5fd3JpdGFibGVTdGF0ZSl7ZS5vbihcImVuZFwiLG8pO2Uub24oXCJjbG9zZVwiLG8pfWUub24oXCJlbmRcIix1KTtlLm9uKFwiZmluaXNoXCIsZik7aWYodC5lcnJvciE9PWZhbHNlKWUub24oXCJlcnJvclwiLGQpO2Uub24oXCJjbG9zZVwiLGMpO3JldHVybiBmdW5jdGlvbigpe2UucmVtb3ZlTGlzdGVuZXIoXCJjb21wbGV0ZVwiLGYpO2UucmVtb3ZlTGlzdGVuZXIoXCJhYm9ydFwiLGMpO2UucmVtb3ZlTGlzdGVuZXIoXCJyZXF1ZXN0XCIsaCk7aWYoZS5yZXEpZS5yZXEucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixmKTtlLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsbyk7ZS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsbyk7ZS5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLGYpO2UucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix1KTtlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixkKTtlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixjKX19ZS5leHBvcnRzPWVvc30sNzI3OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZSx0LHIsbixpLGEsbyl7dHJ5e3ZhciBzPWVbYV0obyk7dmFyIGY9cy52YWx1ZX1jYXRjaChlKXtyKGUpO3JldHVybn1pZihzLmRvbmUpe3QoZil9ZWxzZXtQcm9taXNlLnJlc29sdmUoZikudGhlbihuLGkpfX1mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD10aGlzLHI9YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixpKXt2YXIgYT1lLmFwcGx5KHQscik7ZnVuY3Rpb24gX25leHQoZSl7YXN5bmNHZW5lcmF0b3JTdGVwKGEsbixpLF9uZXh0LF90aHJvdyxcIm5leHRcIixlKX1mdW5jdGlvbiBfdGhyb3coZSl7YXN5bmNHZW5lcmF0b3JTdGVwKGEsbixpLF9uZXh0LF90aHJvdyxcInRocm93XCIsZSl9X25leHQodW5kZWZpbmVkKX0pKX19ZnVuY3Rpb24gb3duS2V5cyhlLHQpe3ZhciByPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7aWYodCluPW4uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSk7ci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1hcmd1bWVudHNbdF0hPW51bGw/YXJndW1lbnRzW3RdOnt9O2lmKHQlMil7b3duS2V5cyhPYmplY3QociksdHJ1ZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7X2RlZmluZVByb3BlcnR5KGUsdCxyW3RdKX0pKX1lbHNlIGlmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKXtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHIpKX1lbHNle293bktleXMoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KSl9KSl9fXJldHVybiBlfWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLHQscil7aWYodCBpbiBlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSl9ZWxzZXtlW3RdPXJ9cmV0dXJuIGV9dmFyIG49cig2NDYpLnEuRVJSX0lOVkFMSURfQVJHX1RZUEU7ZnVuY3Rpb24gZnJvbShlLHQscil7dmFyIGk7aWYodCYmdHlwZW9mIHQubmV4dD09PVwiZnVuY3Rpb25cIil7aT10fWVsc2UgaWYodCYmdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0paT10W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO2Vsc2UgaWYodCYmdFtTeW1ib2wuaXRlcmF0b3JdKWk9dFtTeW1ib2wuaXRlcmF0b3JdKCk7ZWxzZSB0aHJvdyBuZXcgbihcIml0ZXJhYmxlXCIsW1wiSXRlcmFibGVcIl0sdCk7dmFyIGE9bmV3IGUoX29iamVjdFNwcmVhZCh7b2JqZWN0TW9kZTp0cnVlfSxyKSk7dmFyIG89ZmFsc2U7YS5fcmVhZD1mdW5jdGlvbigpe2lmKCFvKXtvPXRydWU7bmV4dCgpfX07ZnVuY3Rpb24gbmV4dCgpe3JldHVybiBfbmV4dDIuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIF9uZXh0Migpe19uZXh0Mj1fYXN5bmNUb0dlbmVyYXRvcigoZnVuY3Rpb24qKCl7dHJ5e3ZhciBlPXlpZWxkIGkubmV4dCgpLHQ9ZS52YWx1ZSxyPWUuZG9uZTtpZihyKXthLnB1c2gobnVsbCl9ZWxzZSBpZihhLnB1c2goeWllbGQgdCkpe25leHQoKX1lbHNle289ZmFsc2V9fWNhdGNoKGUpe2EuZGVzdHJveShlKX19KSk7cmV0dXJuIF9uZXh0Mi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGF9ZS5leHBvcnRzPWZyb219LDQ0MjpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG47ZnVuY3Rpb24gb25jZShlKXt2YXIgdD1mYWxzZTtyZXR1cm4gZnVuY3Rpb24oKXtpZih0KXJldHVybjt0PXRydWU7ZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX19dmFyIGk9cig2NDYpLnEsYT1pLkVSUl9NSVNTSU5HX0FSR1Msbz1pLkVSUl9TVFJFQU1fREVTVFJPWUVEO2Z1bmN0aW9uIG5vb3AoZSl7aWYoZSl0aHJvdyBlfWZ1bmN0aW9uIGlzUmVxdWVzdChlKXtyZXR1cm4gZS5zZXRIZWFkZXImJnR5cGVvZiBlLmFib3J0PT09XCJmdW5jdGlvblwifWZ1bmN0aW9uIGRlc3Ryb3llcihlLHQsaSxhKXthPW9uY2UoYSk7dmFyIHM9ZmFsc2U7ZS5vbihcImNsb3NlXCIsKGZ1bmN0aW9uKCl7cz10cnVlfSkpO2lmKG49PT11bmRlZmluZWQpbj1yKDY5OCk7bihlLHtyZWFkYWJsZTp0LHdyaXRhYmxlOml9LChmdW5jdGlvbihlKXtpZihlKXJldHVybiBhKGUpO3M9dHJ1ZTthKCl9KSk7dmFyIGY9ZmFsc2U7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHMpcmV0dXJuO2lmKGYpcmV0dXJuO2Y9dHJ1ZTtpZihpc1JlcXVlc3QoZSkpcmV0dXJuIGUuYWJvcnQoKTtpZih0eXBlb2YgZS5kZXN0cm95PT09XCJmdW5jdGlvblwiKXJldHVybiBlLmRlc3Ryb3koKTthKHR8fG5ldyBvKFwicGlwZVwiKSl9fWZ1bmN0aW9uIGNhbGwoZSl7ZSgpfWZ1bmN0aW9uIHBpcGUoZSx0KXtyZXR1cm4gZS5waXBlKHQpfWZ1bmN0aW9uIHBvcENhbGxiYWNrKGUpe2lmKCFlLmxlbmd0aClyZXR1cm4gbm9vcDtpZih0eXBlb2YgZVtlLmxlbmd0aC0xXSE9PVwiZnVuY3Rpb25cIilyZXR1cm4gbm9vcDtyZXR1cm4gZS5wb3AoKX1mdW5jdGlvbiBwaXBlbGluZSgpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLHI9MDtyPGU7cisrKXt0W3JdPWFyZ3VtZW50c1tyXX12YXIgbj1wb3BDYWxsYmFjayh0KTtpZihBcnJheS5pc0FycmF5KHRbMF0pKXQ9dFswXTtpZih0Lmxlbmd0aDwyKXt0aHJvdyBuZXcgYShcInN0cmVhbXNcIil9dmFyIGk7dmFyIG89dC5tYXAoKGZ1bmN0aW9uKGUscil7dmFyIGE9cjx0Lmxlbmd0aC0xO3ZhciBzPXI+MDtyZXR1cm4gZGVzdHJveWVyKGUsYSxzLChmdW5jdGlvbihlKXtpZighaSlpPWU7aWYoZSlvLmZvckVhY2goY2FsbCk7aWYoYSlyZXR1cm47by5mb3JFYWNoKGNhbGwpO24oaSl9KSl9KSk7cmV0dXJuIHQucmVkdWNlKHBpcGUpfWUuZXhwb3J0cz1waXBlbGluZX0sNzc2OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDY0NikucS5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7ZnVuY3Rpb24gaGlnaFdhdGVyTWFya0Zyb20oZSx0LHIpe3JldHVybiBlLmhpZ2hXYXRlck1hcmshPW51bGw/ZS5oaWdoV2F0ZXJNYXJrOnQ/ZVtyXTpudWxsfWZ1bmN0aW9uIGdldEhpZ2hXYXRlck1hcmsoZSx0LHIsaSl7dmFyIGE9aGlnaFdhdGVyTWFya0Zyb20odCxpLHIpO2lmKGEhPW51bGwpe2lmKCEoaXNGaW5pdGUoYSkmJk1hdGguZmxvb3IoYSk9PT1hKXx8YTwwKXt2YXIgbz1pP3I6XCJoaWdoV2F0ZXJNYXJrXCI7dGhyb3cgbmV3IG4obyxhKX1yZXR1cm4gTWF0aC5mbG9vcihhKX1yZXR1cm4gZS5vYmplY3RNb2RlPzE2OjE2KjEwMjR9ZS5leHBvcnRzPXtnZXRIaWdoV2F0ZXJNYXJrOmdldEhpZ2hXYXRlck1hcmt9fSw2Nzg6ZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz1yKDc4MSl9LDcyNjpmdW5jdGlvbihlLHQscil7dmFyIG49cig3ODEpO2lmKHByb2Nlc3MuZW52LlJFQURBQkxFX1NUUkVBTT09PVwiZGlzYWJsZVwiJiZuKXtlLmV4cG9ydHM9bi5SZWFkYWJsZTtPYmplY3QuYXNzaWduKGUuZXhwb3J0cyxuKTtlLmV4cG9ydHMuU3RyZWFtPW59ZWxzZXt0PWUuZXhwb3J0cz1yKDcwOSk7dC5TdHJlYW09bnx8dDt0LlJlYWRhYmxlPXQ7dC5Xcml0YWJsZT1yKDMzNyk7dC5EdXBsZXg9cig0MDMpO3QuVHJhbnNmb3JtPXIoMTcwKTt0LlBhc3NUaHJvdWdoPXIoODg5KTt0LmZpbmlzaGVkPXIoNjk4KTt0LnBpcGVsaW5lPXIoNDQyKX19LDU1OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDMwMCk7dmFyIGk9bi5CdWZmZXI7ZnVuY3Rpb24gY29weVByb3BzKGUsdCl7Zm9yKHZhciByIGluIGUpe3Rbcl09ZVtyXX19aWYoaS5mcm9tJiZpLmFsbG9jJiZpLmFsbG9jVW5zYWZlJiZpLmFsbG9jVW5zYWZlU2xvdyl7ZS5leHBvcnRzPW59ZWxzZXtjb3B5UHJvcHMobix0KTt0LkJ1ZmZlcj1TYWZlQnVmZmVyfWZ1bmN0aW9uIFNhZmVCdWZmZXIoZSx0LHIpe3JldHVybiBpKGUsdCxyKX1TYWZlQnVmZmVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGkucHJvdG90eXBlKTtjb3B5UHJvcHMoaSxTYWZlQnVmZmVyKTtTYWZlQnVmZmVyLmZyb209ZnVuY3Rpb24oZSx0LHIpe2lmKHR5cGVvZiBlPT09XCJudW1iZXJcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyXCIpfXJldHVybiBpKGUsdCxyKX07U2FmZUJ1ZmZlci5hbGxvYz1mdW5jdGlvbihlLHQscil7aWYodHlwZW9mIGUhPT1cIm51bWJlclwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKX12YXIgbj1pKGUpO2lmKHQhPT11bmRlZmluZWQpe2lmKHR5cGVvZiByPT09XCJzdHJpbmdcIil7bi5maWxsKHQscil9ZWxzZXtuLmZpbGwodCl9fWVsc2V7bi5maWxsKDApfXJldHVybiBufTtTYWZlQnVmZmVyLmFsbG9jVW5zYWZlPWZ1bmN0aW9uKGUpe2lmKHR5cGVvZiBlIT09XCJudW1iZXJcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIil9cmV0dXJuIGkoZSl9O1NhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe2lmKHR5cGVvZiBlIT09XCJudW1iZXJcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIil9cmV0dXJuIG4uU2xvd0J1ZmZlcihlKX19LDgxMzpmdW5jdGlvbihlLHQscil7dmFyIG49cig0NTApO3ZhciBpPXIoMjU0KTt2YXIgYT1yKDkxMSk7dmFyIG89cig1MjMpO3ZhciBzPXIoMzEwKTt2YXIgZj10O2YucmVxdWVzdD1mdW5jdGlvbihlLHQpe2lmKHR5cGVvZiBlPT09XCJzdHJpbmdcIillPXMucGFyc2UoZSk7ZWxzZSBlPWEoZSk7dmFyIHI9Z2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNlYXJjaCgvXmh0dHBzPzokLyk9PT0tMT9cImh0dHA6XCI6XCJcIjt2YXIgaT1lLnByb3RvY29sfHxyO3ZhciBvPWUuaG9zdG5hbWV8fGUuaG9zdDt2YXIgZj1lLnBvcnQ7dmFyIGw9ZS5wYXRofHxcIi9cIjtpZihvJiZvLmluZGV4T2YoXCI6XCIpIT09LTEpbz1cIltcIitvK1wiXVwiO2UudXJsPShvP2krXCIvL1wiK286XCJcIikrKGY/XCI6XCIrZjpcIlwiKStsO2UubWV0aG9kPShlLm1ldGhvZHx8XCJHRVRcIikudG9VcHBlckNhc2UoKTtlLmhlYWRlcnM9ZS5oZWFkZXJzfHx7fTt2YXIgdT1uZXcgbihlKTtpZih0KXUub24oXCJyZXNwb25zZVwiLHQpO3JldHVybiB1fTtmLmdldD1mdW5jdGlvbiBnZXQoZSx0KXt2YXIgcj1mLnJlcXVlc3QoZSx0KTtyLmVuZCgpO3JldHVybiByfTtmLkNsaWVudFJlcXVlc3Q9bjtmLkluY29taW5nTWVzc2FnZT1pLkluY29taW5nTWVzc2FnZTtmLkFnZW50PWZ1bmN0aW9uKCl7fTtmLkFnZW50LmRlZmF1bHRNYXhTb2NrZXRzPTQ7Zi5nbG9iYWxBZ2VudD1uZXcgZi5BZ2VudDtmLlNUQVRVU19DT0RFUz1vO2YuTUVUSE9EUz1bXCJDSEVDS09VVFwiLFwiQ09OTkVDVFwiLFwiQ09QWVwiLFwiREVMRVRFXCIsXCJHRVRcIixcIkhFQURcIixcIkxPQ0tcIixcIk0tU0VBUkNIXCIsXCJNRVJHRVwiLFwiTUtBQ1RJVklUWVwiLFwiTUtDT0xcIixcIk1PVkVcIixcIk5PVElGWVwiLFwiT1BUSU9OU1wiLFwiUEFUQ0hcIixcIlBPU1RcIixcIlBST1BGSU5EXCIsXCJQUk9QUEFUQ0hcIixcIlBVUkdFXCIsXCJQVVRcIixcIlJFUE9SVFwiLFwiU0VBUkNIXCIsXCJTVUJTQ1JJQkVcIixcIlRSQUNFXCIsXCJVTkxPQ0tcIixcIlVOU1VCU0NSSUJFXCJdfSwzMDE6ZnVuY3Rpb24oZSx0KXt0LmZldGNoPWlzRnVuY3Rpb24oZ2xvYmFsLmZldGNoKSYmaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pO3Qud3JpdGFibGVTdHJlYW09aXNGdW5jdGlvbihnbG9iYWwuV3JpdGFibGVTdHJlYW0pO3QuYWJvcnRDb250cm9sbGVyPWlzRnVuY3Rpb24oZ2xvYmFsLkFib3J0Q29udHJvbGxlcik7dmFyIHI7ZnVuY3Rpb24gZ2V0WEhSKCl7aWYociE9PXVuZGVmaW5lZClyZXR1cm4gcjtpZihnbG9iYWwuWE1MSHR0cFJlcXVlc3Qpe3I9bmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdDt0cnl7ci5vcGVuKFwiR0VUXCIsZ2xvYmFsLlhEb21haW5SZXF1ZXN0P1wiL1wiOlwiaHR0cHM6Ly9leGFtcGxlLmNvbVwiKX1jYXRjaChlKXtyPW51bGx9fWVsc2V7cj1udWxsfXJldHVybiByfWZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQoZSl7dmFyIHQ9Z2V0WEhSKCk7aWYoIXQpcmV0dXJuIGZhbHNlO3RyeXt0LnJlc3BvbnNlVHlwZT1lO3JldHVybiB0LnJlc3BvbnNlVHlwZT09PWV9Y2F0Y2goZSl7fXJldHVybiBmYWxzZX10LmFycmF5YnVmZmVyPXQuZmV0Y2h8fGNoZWNrVHlwZVN1cHBvcnQoXCJhcnJheWJ1ZmZlclwiKTt0Lm1zc3RyZWFtPSF0LmZldGNoJiZjaGVja1R5cGVTdXBwb3J0KFwibXMtc3RyZWFtXCIpO3QubW96Y2h1bmtlZGFycmF5YnVmZmVyPSF0LmZldGNoJiZjaGVja1R5cGVTdXBwb3J0KFwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIik7dC5vdmVycmlkZU1pbWVUeXBlPXQuZmV0Y2h8fChnZXRYSFIoKT9pc0Z1bmN0aW9uKGdldFhIUigpLm92ZXJyaWRlTWltZVR5cGUpOmZhbHNlKTtmdW5jdGlvbiBpc0Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZT09PVwiZnVuY3Rpb25cIn1yPW51bGx9LDQ1MDpmdW5jdGlvbihlLHQscil7dmFyIG49cigzMDEpO3ZhciBpPXIoNzgyKTt2YXIgYT1yKDI1NCk7dmFyIG89cig3MjYpO3ZhciBzPWEuSW5jb21pbmdNZXNzYWdlO3ZhciBmPWEucmVhZHlTdGF0ZXM7ZnVuY3Rpb24gZGVjaWRlTW9kZShlLHQpe2lmKG4uZmV0Y2gmJnQpe3JldHVyblwiZmV0Y2hcIn1lbHNlIGlmKG4ubW96Y2h1bmtlZGFycmF5YnVmZmVyKXtyZXR1cm5cIm1vei1jaHVua2VkLWFycmF5YnVmZmVyXCJ9ZWxzZSBpZihuLm1zc3RyZWFtKXtyZXR1cm5cIm1zLXN0cmVhbVwifWVsc2UgaWYobi5hcnJheWJ1ZmZlciYmZSl7cmV0dXJuXCJhcnJheWJ1ZmZlclwifWVsc2V7cmV0dXJuXCJ0ZXh0XCJ9fXZhciBsPWUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO28uV3JpdGFibGUuY2FsbCh0KTt0Ll9vcHRzPWU7dC5fYm9keT1bXTt0Ll9oZWFkZXJzPXt9O2lmKGUuYXV0aCl0LnNldEhlYWRlcihcIkF1dGhvcml6YXRpb25cIixcIkJhc2ljIFwiK0J1ZmZlci5mcm9tKGUuYXV0aCkudG9TdHJpbmcoXCJiYXNlNjRcIikpO09iamVjdC5rZXlzKGUuaGVhZGVycykuZm9yRWFjaCgoZnVuY3Rpb24ocil7dC5zZXRIZWFkZXIocixlLmhlYWRlcnNbcl0pfSkpO3ZhciByO3ZhciBpPXRydWU7aWYoZS5tb2RlPT09XCJkaXNhYmxlLWZldGNoXCJ8fFwicmVxdWVzdFRpbWVvdXRcImluIGUmJiFuLmFib3J0Q29udHJvbGxlcil7aT1mYWxzZTtyPXRydWV9ZWxzZSBpZihlLm1vZGU9PT1cInByZWZlci1zdHJlYW1pbmdcIil7cj1mYWxzZX1lbHNlIGlmKGUubW9kZT09PVwiYWxsb3ctd3JvbmctY29udGVudC10eXBlXCIpe3I9IW4ub3ZlcnJpZGVNaW1lVHlwZX1lbHNlIGlmKCFlLm1vZGV8fGUubW9kZT09PVwiZGVmYXVsdFwifHxlLm1vZGU9PT1cInByZWZlci1mYXN0XCIpe3I9dHJ1ZX1lbHNle3Rocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZVwiKX10Ll9tb2RlPWRlY2lkZU1vZGUocixpKTt0Ll9mZXRjaFRpbWVyPW51bGw7dC5vbihcImZpbmlzaFwiLChmdW5jdGlvbigpe3QuX29uRmluaXNoKCl9KSl9O2kobCxvLldyaXRhYmxlKTtsLnByb3RvdHlwZS5zZXRIZWFkZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3ZhciBuPWUudG9Mb3dlckNhc2UoKTtpZih1LmluZGV4T2YobikhPT0tMSlyZXR1cm47ci5faGVhZGVyc1tuXT17bmFtZTplLHZhbHVlOnR9fTtsLnByb3RvdHlwZS5nZXRIZWFkZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5faGVhZGVyc1tlLnRvTG93ZXJDYXNlKCldO2lmKHQpcmV0dXJuIHQudmFsdWU7cmV0dXJuIG51bGx9O2wucHJvdG90eXBlLnJlbW92ZUhlYWRlcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2RlbGV0ZSB0Ll9oZWFkZXJzW2UudG9Mb3dlckNhc2UoKV19O2wucHJvdG90eXBlLl9vbkZpbmlzaD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoZS5fZGVzdHJveWVkKXJldHVybjt2YXIgdD1lLl9vcHRzO3ZhciByPWUuX2hlYWRlcnM7dmFyIGk9bnVsbDtpZih0Lm1ldGhvZCE9PVwiR0VUXCImJnQubWV0aG9kIT09XCJIRUFEXCIpe2k9bmV3IEJsb2IoZS5fYm9keSx7dHlwZToocltcImNvbnRlbnQtdHlwZVwiXXx8e30pLnZhbHVlfHxcIlwifSl9dmFyIGE9W107T2JqZWN0LmtleXMocikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQ9cltlXS5uYW1lO3ZhciBuPXJbZV0udmFsdWU7aWYoQXJyYXkuaXNBcnJheShuKSl7bi5mb3JFYWNoKChmdW5jdGlvbihlKXthLnB1c2goW3QsZV0pfSkpfWVsc2V7YS5wdXNoKFt0LG5dKX19KSk7aWYoZS5fbW9kZT09PVwiZmV0Y2hcIil7dmFyIG89bnVsbDtpZihuLmFib3J0Q29udHJvbGxlcil7dmFyIHM9bmV3IEFib3J0Q29udHJvbGxlcjtvPXMuc2lnbmFsO2UuX2ZldGNoQWJvcnRDb250cm9sbGVyPXM7aWYoXCJyZXF1ZXN0VGltZW91dFwiaW4gdCYmdC5yZXF1ZXN0VGltZW91dCE9PTApe2UuX2ZldGNoVGltZXI9Z2xvYmFsLnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5lbWl0KFwicmVxdWVzdFRpbWVvdXRcIik7aWYoZS5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpZS5fZmV0Y2hBYm9ydENvbnRyb2xsZXIuYWJvcnQoKX0pLHQucmVxdWVzdFRpbWVvdXQpfX1nbG9iYWwuZmV0Y2goZS5fb3B0cy51cmwse21ldGhvZDplLl9vcHRzLm1ldGhvZCxoZWFkZXJzOmEsYm9keTppfHx1bmRlZmluZWQsbW9kZTpcImNvcnNcIixjcmVkZW50aWFsczp0LndpdGhDcmVkZW50aWFscz9cImluY2x1ZGVcIjpcInNhbWUtb3JpZ2luXCIsc2lnbmFsOm99KS50aGVuKChmdW5jdGlvbih0KXtlLl9mZXRjaFJlc3BvbnNlPXQ7ZS5fY29ubmVjdCgpfSksKGZ1bmN0aW9uKHQpe2dsb2JhbC5jbGVhclRpbWVvdXQoZS5fZmV0Y2hUaW1lcik7aWYoIWUuX2Rlc3Ryb3llZCllLmVtaXQoXCJlcnJvclwiLHQpfSkpfWVsc2V7dmFyIGw9ZS5feGhyPW5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3Q7dHJ5e2wub3BlbihlLl9vcHRzLm1ldGhvZCxlLl9vcHRzLnVybCx0cnVlKX1jYXRjaCh0KXtwcm9jZXNzLm5leHRUaWNrKChmdW5jdGlvbigpe2UuZW1pdChcImVycm9yXCIsdCl9KSk7cmV0dXJufWlmKFwicmVzcG9uc2VUeXBlXCJpbiBsKWwucmVzcG9uc2VUeXBlPWUuX21vZGU7aWYoXCJ3aXRoQ3JlZGVudGlhbHNcImluIGwpbC53aXRoQ3JlZGVudGlhbHM9ISF0LndpdGhDcmVkZW50aWFscztpZihlLl9tb2RlPT09XCJ0ZXh0XCImJlwib3ZlcnJpZGVNaW1lVHlwZVwiaW4gbClsLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO2lmKFwicmVxdWVzdFRpbWVvdXRcImluIHQpe2wudGltZW91dD10LnJlcXVlc3RUaW1lb3V0O2wub250aW1lb3V0PWZ1bmN0aW9uKCl7ZS5lbWl0KFwicmVxdWVzdFRpbWVvdXRcIil9fWEuZm9yRWFjaCgoZnVuY3Rpb24oZSl7bC5zZXRSZXF1ZXN0SGVhZGVyKGVbMF0sZVsxXSl9KSk7ZS5fcmVzcG9uc2U9bnVsbDtsLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3N3aXRjaChsLnJlYWR5U3RhdGUpe2Nhc2UgZi5MT0FESU5HOmNhc2UgZi5ET05FOmUuX29uWEhSUHJvZ3Jlc3MoKTticmVha319O2lmKGUuX21vZGU9PT1cIm1vei1jaHVua2VkLWFycmF5YnVmZmVyXCIpe2wub25wcm9ncmVzcz1mdW5jdGlvbigpe2UuX29uWEhSUHJvZ3Jlc3MoKX19bC5vbmVycm9yPWZ1bmN0aW9uKCl7aWYoZS5fZGVzdHJveWVkKXJldHVybjtlLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlhIUiBlcnJvclwiKSl9O3RyeXtsLnNlbmQoaSl9Y2F0Y2godCl7cHJvY2Vzcy5uZXh0VGljaygoZnVuY3Rpb24oKXtlLmVtaXQoXCJlcnJvclwiLHQpfSkpO3JldHVybn19fTtmdW5jdGlvbiBzdGF0dXNWYWxpZChlKXt0cnl7dmFyIHQ9ZS5zdGF0dXM7cmV0dXJuIHQhPT1udWxsJiZ0IT09MH1jYXRjaChlKXtyZXR1cm4gZmFsc2V9fWwucHJvdG90eXBlLl9vblhIUlByb2dyZXNzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighc3RhdHVzVmFsaWQoZS5feGhyKXx8ZS5fZGVzdHJveWVkKXJldHVybjtpZighZS5fcmVzcG9uc2UpZS5fY29ubmVjdCgpO2UuX3Jlc3BvbnNlLl9vblhIUlByb2dyZXNzKCl9O2wucHJvdG90eXBlLl9jb25uZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihlLl9kZXN0cm95ZWQpcmV0dXJuO2UuX3Jlc3BvbnNlPW5ldyBzKGUuX3hocixlLl9mZXRjaFJlc3BvbnNlLGUuX21vZGUsZS5fZmV0Y2hUaW1lcik7ZS5fcmVzcG9uc2Uub24oXCJlcnJvclwiLChmdW5jdGlvbih0KXtlLmVtaXQoXCJlcnJvclwiLHQpfSkpO2UuZW1pdChcInJlc3BvbnNlXCIsZS5fcmVzcG9uc2UpfTtsLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXM7bi5fYm9keS5wdXNoKGUpO3IoKX07bC5wcm90b3R5cGUuYWJvcnQ9bC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fZGVzdHJveWVkPXRydWU7Z2xvYmFsLmNsZWFyVGltZW91dChlLl9mZXRjaFRpbWVyKTtpZihlLl9yZXNwb25zZSllLl9yZXNwb25zZS5fZGVzdHJveWVkPXRydWU7aWYoZS5feGhyKWUuX3hoci5hYm9ydCgpO2Vsc2UgaWYoZS5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpZS5fZmV0Y2hBYm9ydENvbnRyb2xsZXIuYWJvcnQoKX07bC5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzO2lmKHR5cGVvZiBlPT09XCJmdW5jdGlvblwiKXtyPWU7ZT11bmRlZmluZWR9by5Xcml0YWJsZS5wcm90b3R5cGUuZW5kLmNhbGwobixlLHQscil9O2wucHJvdG90eXBlLmZsdXNoSGVhZGVycz1mdW5jdGlvbigpe307bC5wcm90b3R5cGUuc2V0VGltZW91dD1mdW5jdGlvbigpe307bC5wcm90b3R5cGUuc2V0Tm9EZWxheT1mdW5jdGlvbigpe307bC5wcm90b3R5cGUuc2V0U29ja2V0S2VlcEFsaXZlPWZ1bmN0aW9uKCl7fTt2YXIgdT1bXCJhY2NlcHQtY2hhcnNldFwiLFwiYWNjZXB0LWVuY29kaW5nXCIsXCJhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnNcIixcImFjY2Vzcy1jb250cm9sLXJlcXVlc3QtbWV0aG9kXCIsXCJjb25uZWN0aW9uXCIsXCJjb250ZW50LWxlbmd0aFwiLFwiY29va2llXCIsXCJjb29raWUyXCIsXCJkYXRlXCIsXCJkbnRcIixcImV4cGVjdFwiLFwiaG9zdFwiLFwia2VlcC1hbGl2ZVwiLFwib3JpZ2luXCIsXCJyZWZlcmVyXCIsXCJ0ZVwiLFwidHJhaWxlclwiLFwidHJhbnNmZXItZW5jb2RpbmdcIixcInVwZ3JhZGVcIixcInZpYVwiXX0sMjU0OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDMwMSk7dmFyIGk9cig3ODIpO3ZhciBhPXIoNzI2KTt2YXIgbz10LnJlYWR5U3RhdGVzPXtVTlNFTlQ6MCxPUEVORUQ6MSxIRUFERVJTX1JFQ0VJVkVEOjIsTE9BRElORzozLERPTkU6NH07dmFyIHM9dC5JbmNvbWluZ01lc3NhZ2U9ZnVuY3Rpb24oZSx0LHIsaSl7dmFyIG89dGhpczthLlJlYWRhYmxlLmNhbGwobyk7by5fbW9kZT1yO28uaGVhZGVycz17fTtvLnJhd0hlYWRlcnM9W107by50cmFpbGVycz17fTtvLnJhd1RyYWlsZXJzPVtdO28ub24oXCJlbmRcIiwoZnVuY3Rpb24oKXtwcm9jZXNzLm5leHRUaWNrKChmdW5jdGlvbigpe28uZW1pdChcImNsb3NlXCIpfSkpfSkpO2lmKHI9PT1cImZldGNoXCIpe28uX2ZldGNoUmVzcG9uc2U9dDtvLnVybD10LnVybDtvLnN0YXR1c0NvZGU9dC5zdGF0dXM7by5zdGF0dXNNZXNzYWdlPXQuc3RhdHVzVGV4dDt0LmhlYWRlcnMuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtvLmhlYWRlcnNbdC50b0xvd2VyQ2FzZSgpXT1lO28ucmF3SGVhZGVycy5wdXNoKHQsZSl9KSk7aWYobi53cml0YWJsZVN0cmVhbSl7dmFyIHM9bmV3IFdyaXRhYmxlU3RyZWFtKHt3cml0ZTpmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscil7aWYoby5fZGVzdHJveWVkKXtyKCl9ZWxzZSBpZihvLnB1c2goQnVmZmVyLmZyb20oZSkpKXt0KCl9ZWxzZXtvLl9yZXN1bWVGZXRjaD10fX0pKX0sY2xvc2U6ZnVuY3Rpb24oKXtnbG9iYWwuY2xlYXJUaW1lb3V0KGkpO2lmKCFvLl9kZXN0cm95ZWQpby5wdXNoKG51bGwpfSxhYm9ydDpmdW5jdGlvbihlKXtpZighby5fZGVzdHJveWVkKW8uZW1pdChcImVycm9yXCIsZSl9fSk7dHJ5e3QuYm9keS5waXBlVG8ocykuY2F0Y2goKGZ1bmN0aW9uKGUpe2dsb2JhbC5jbGVhclRpbWVvdXQoaSk7aWYoIW8uX2Rlc3Ryb3llZClvLmVtaXQoXCJlcnJvclwiLGUpfSkpO3JldHVybn1jYXRjaChlKXt9fXZhciBmPXQuYm9keS5nZXRSZWFkZXIoKTtmdW5jdGlvbiByZWFkKCl7Zi5yZWFkKCkudGhlbigoZnVuY3Rpb24oZSl7aWYoby5fZGVzdHJveWVkKXJldHVybjtpZihlLmRvbmUpe2dsb2JhbC5jbGVhclRpbWVvdXQoaSk7by5wdXNoKG51bGwpO3JldHVybn1vLnB1c2goQnVmZmVyLmZyb20oZS52YWx1ZSkpO3JlYWQoKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7Z2xvYmFsLmNsZWFyVGltZW91dChpKTtpZighby5fZGVzdHJveWVkKW8uZW1pdChcImVycm9yXCIsZSl9KSl9cmVhZCgpfWVsc2V7by5feGhyPWU7by5fcG9zPTA7by51cmw9ZS5yZXNwb25zZVVSTDtvLnN0YXR1c0NvZGU9ZS5zdGF0dXM7by5zdGF0dXNNZXNzYWdlPWUuc3RhdHVzVGV4dDt2YXIgbD1lLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KC9cXHI/XFxuLyk7bC5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdD1lLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pO2lmKHQpe3ZhciByPXRbMV0udG9Mb3dlckNhc2UoKTtpZihyPT09XCJzZXQtY29va2llXCIpe2lmKG8uaGVhZGVyc1tyXT09PXVuZGVmaW5lZCl7by5oZWFkZXJzW3JdPVtdfW8uaGVhZGVyc1tyXS5wdXNoKHRbMl0pfWVsc2UgaWYoby5oZWFkZXJzW3JdIT09dW5kZWZpbmVkKXtvLmhlYWRlcnNbcl0rPVwiLCBcIit0WzJdfWVsc2V7by5oZWFkZXJzW3JdPXRbMl19by5yYXdIZWFkZXJzLnB1c2godFsxXSx0WzJdKX19KSk7by5fY2hhcnNldD1cIngtdXNlci1kZWZpbmVkXCI7aWYoIW4ub3ZlcnJpZGVNaW1lVHlwZSl7dmFyIHU9by5yYXdIZWFkZXJzW1wibWltZS10eXBlXCJdO2lmKHUpe3ZhciBkPXUubWF0Y2goLztcXHMqY2hhcnNldD0oW147XSkoO3wkKS8pO2lmKGQpe28uX2NoYXJzZXQ9ZFsxXS50b0xvd2VyQ2FzZSgpfX1pZighby5fY2hhcnNldClvLl9jaGFyc2V0PVwidXRmLThcIn19fTtpKHMsYS5SZWFkYWJsZSk7cy5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3ZhciB0PWUuX3Jlc3VtZUZldGNoO2lmKHQpe2UuX3Jlc3VtZUZldGNoPW51bGw7dCgpfX07cy5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3M9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3ZhciB0PWUuX3hocjt2YXIgcj1udWxsO3N3aXRjaChlLl9tb2RlKXtjYXNlXCJ0ZXh0XCI6cj10LnJlc3BvbnNlVGV4dDtpZihyLmxlbmd0aD5lLl9wb3Mpe3ZhciBuPXIuc3Vic3RyKGUuX3Bvcyk7aWYoZS5fY2hhcnNldD09PVwieC11c2VyLWRlZmluZWRcIil7dmFyIGk9QnVmZmVyLmFsbG9jKG4ubGVuZ3RoKTtmb3IodmFyIGE9MDthPG4ubGVuZ3RoO2ErKylpW2FdPW4uY2hhckNvZGVBdChhKSYyNTU7ZS5wdXNoKGkpfWVsc2V7ZS5wdXNoKG4sZS5fY2hhcnNldCl9ZS5fcG9zPXIubGVuZ3RofWJyZWFrO2Nhc2VcImFycmF5YnVmZmVyXCI6aWYodC5yZWFkeVN0YXRlIT09by5ET05FfHwhdC5yZXNwb25zZSlicmVhaztyPXQucmVzcG9uc2U7ZS5wdXNoKEJ1ZmZlci5mcm9tKG5ldyBVaW50OEFycmF5KHIpKSk7YnJlYWs7Y2FzZVwibW96LWNodW5rZWQtYXJyYXlidWZmZXJcIjpyPXQucmVzcG9uc2U7aWYodC5yZWFkeVN0YXRlIT09by5MT0FESU5HfHwhcilicmVhaztlLnB1c2goQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkocikpKTticmVhaztjYXNlXCJtcy1zdHJlYW1cIjpyPXQucmVzcG9uc2U7aWYodC5yZWFkeVN0YXRlIT09by5MT0FESU5HKWJyZWFrO3ZhciBzPW5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXI7cy5vbnByb2dyZXNzPWZ1bmN0aW9uKCl7aWYocy5yZXN1bHQuYnl0ZUxlbmd0aD5lLl9wb3Mpe2UucHVzaChCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShzLnJlc3VsdC5zbGljZShlLl9wb3MpKSkpO2UuX3Bvcz1zLnJlc3VsdC5ieXRlTGVuZ3RofX07cy5vbmxvYWQ9ZnVuY3Rpb24oKXtlLnB1c2gobnVsbCl9O3MucmVhZEFzQXJyYXlCdWZmZXIocik7YnJlYWt9aWYoZS5feGhyLnJlYWR5U3RhdGU9PT1vLkRPTkUmJmUuX21vZGUhPT1cIm1zLXN0cmVhbVwiKXtlLnB1c2gobnVsbCl9fX0sNzA0OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1yKDU1KS5CdWZmZXI7dmFyIGk9bi5pc0VuY29kaW5nfHxmdW5jdGlvbihlKXtlPVwiXCIrZTtzd2l0Y2goZSYmZS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJoZXhcIjpjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImJpbmFyeVwiOmNhc2VcImJhc2U2NFwiOmNhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOmNhc2VcInJhd1wiOnJldHVybiB0cnVlO2RlZmF1bHQ6cmV0dXJuIGZhbHNlfX07ZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGUpe2lmKCFlKXJldHVyblwidXRmOFwiO3ZhciB0O3doaWxlKHRydWUpe3N3aXRjaChlKXtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm5cInV0ZjhcIjtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm5cInV0ZjE2bGVcIjtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm5cImxhdGluMVwiO2Nhc2VcImJhc2U2NFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwiaGV4XCI6cmV0dXJuIGU7ZGVmYXVsdDppZih0KXJldHVybjtlPShcIlwiK2UpLnRvTG93ZXJDYXNlKCk7dD10cnVlfX19ZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZSl7dmFyIHQ9X25vcm1hbGl6ZUVuY29kaW5nKGUpO2lmKHR5cGVvZiB0IT09XCJzdHJpbmdcIiYmKG4uaXNFbmNvZGluZz09PWl8fCFpKGUpKSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitlKTtyZXR1cm4gdHx8ZX10LnM9U3RyaW5nRGVjb2RlcjtmdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGUpe3RoaXMuZW5jb2Rpbmc9bm9ybWFsaXplRW5jb2RpbmcoZSk7dmFyIHQ7c3dpdGNoKHRoaXMuZW5jb2Rpbmcpe2Nhc2VcInV0ZjE2bGVcIjp0aGlzLnRleHQ9dXRmMTZUZXh0O3RoaXMuZW5kPXV0ZjE2RW5kO3Q9NDticmVhaztjYXNlXCJ1dGY4XCI6dGhpcy5maWxsTGFzdD11dGY4RmlsbExhc3Q7dD00O2JyZWFrO2Nhc2VcImJhc2U2NFwiOnRoaXMudGV4dD1iYXNlNjRUZXh0O3RoaXMuZW5kPWJhc2U2NEVuZDt0PTM7YnJlYWs7ZGVmYXVsdDp0aGlzLndyaXRlPXNpbXBsZVdyaXRlO3RoaXMuZW5kPXNpbXBsZUVuZDtyZXR1cm59dGhpcy5sYXN0TmVlZD0wO3RoaXMubGFzdFRvdGFsPTA7dGhpcy5sYXN0Q2hhcj1uLmFsbG9jVW5zYWZlKHQpfVN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKGUpe2lmKGUubGVuZ3RoPT09MClyZXR1cm5cIlwiO3ZhciB0O3ZhciByO2lmKHRoaXMubGFzdE5lZWQpe3Q9dGhpcy5maWxsTGFzdChlKTtpZih0PT09dW5kZWZpbmVkKXJldHVyblwiXCI7cj10aGlzLmxhc3ROZWVkO3RoaXMubGFzdE5lZWQ9MH1lbHNle3I9MH1pZihyPGUubGVuZ3RoKXJldHVybiB0P3QrdGhpcy50ZXh0KGUscik6dGhpcy50ZXh0KGUscik7cmV0dXJuIHR8fFwiXCJ9O1N0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZD11dGY4RW5kO1N0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQ9dXRmOFRleHQ7U3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3Q9ZnVuY3Rpb24oZSl7aWYodGhpcy5sYXN0TmVlZDw9ZS5sZW5ndGgpe2UuY29weSh0aGlzLmxhc3RDaGFyLHRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQsMCx0aGlzLmxhc3ROZWVkKTtyZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsdGhpcy5sYXN0VG90YWwpfWUuY29weSh0aGlzLmxhc3RDaGFyLHRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQsMCxlLmxlbmd0aCk7dGhpcy5sYXN0TmVlZC09ZS5sZW5ndGh9O2Z1bmN0aW9uIHV0ZjhDaGVja0J5dGUoZSl7aWYoZTw9MTI3KXJldHVybiAwO2Vsc2UgaWYoZT4+NT09PTYpcmV0dXJuIDI7ZWxzZSBpZihlPj40PT09MTQpcmV0dXJuIDM7ZWxzZSBpZihlPj4zPT09MzApcmV0dXJuIDQ7cmV0dXJuIGU+PjY9PT0yPy0xOi0yfWZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoZSx0LHIpe3ZhciBuPXQubGVuZ3RoLTE7aWYobjxyKXJldHVybiAwO3ZhciBpPXV0ZjhDaGVja0J5dGUodFtuXSk7aWYoaT49MCl7aWYoaT4wKWUubGFzdE5lZWQ9aS0xO3JldHVybiBpfWlmKC0tbjxyfHxpPT09LTIpcmV0dXJuIDA7aT11dGY4Q2hlY2tCeXRlKHRbbl0pO2lmKGk+PTApe2lmKGk+MCllLmxhc3ROZWVkPWktMjtyZXR1cm4gaX1pZigtLW48cnx8aT09PS0yKXJldHVybiAwO2k9dXRmOENoZWNrQnl0ZSh0W25dKTtpZihpPj0wKXtpZihpPjApe2lmKGk9PT0yKWk9MDtlbHNlIGUubGFzdE5lZWQ9aS0zfXJldHVybiBpfXJldHVybiAwfWZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoZSx0LHIpe2lmKCh0WzBdJjE5MikhPT0xMjgpe2UubGFzdE5lZWQ9MDtyZXR1cm5cIu+/vVwifWlmKGUubGFzdE5lZWQ+MSYmdC5sZW5ndGg+MSl7aWYoKHRbMV0mMTkyKSE9PTEyOCl7ZS5sYXN0TmVlZD0xO3JldHVyblwi77+9XCJ9aWYoZS5sYXN0TmVlZD4yJiZ0Lmxlbmd0aD4yKXtpZigodFsyXSYxOTIpIT09MTI4KXtlLmxhc3ROZWVkPTI7cmV0dXJuXCLvv71cIn19fX1mdW5jdGlvbiB1dGY4RmlsbExhc3QoZSl7dmFyIHQ9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZDt2YXIgcj11dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsZSx0KTtpZihyIT09dW5kZWZpbmVkKXJldHVybiByO2lmKHRoaXMubGFzdE5lZWQ8PWUubGVuZ3RoKXtlLmNvcHkodGhpcy5sYXN0Q2hhcix0LDAsdGhpcy5sYXN0TmVlZCk7cmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywwLHRoaXMubGFzdFRvdGFsKX1lLmNvcHkodGhpcy5sYXN0Q2hhcix0LDAsZS5sZW5ndGgpO3RoaXMubGFzdE5lZWQtPWUubGVuZ3RofWZ1bmN0aW9uIHV0ZjhUZXh0KGUsdCl7dmFyIHI9dXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLGUsdCk7aWYoIXRoaXMubGFzdE5lZWQpcmV0dXJuIGUudG9TdHJpbmcoXCJ1dGY4XCIsdCk7dGhpcy5sYXN0VG90YWw9cjt2YXIgbj1lLmxlbmd0aC0oci10aGlzLmxhc3ROZWVkKTtlLmNvcHkodGhpcy5sYXN0Q2hhciwwLG4pO3JldHVybiBlLnRvU3RyaW5nKFwidXRmOFwiLHQsbil9ZnVuY3Rpb24gdXRmOEVuZChlKXt2YXIgdD1lJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCI7aWYodGhpcy5sYXN0TmVlZClyZXR1cm4gdCtcIu+/vVwiO3JldHVybiB0fWZ1bmN0aW9uIHV0ZjE2VGV4dChlLHQpe2lmKChlLmxlbmd0aC10KSUyPT09MCl7dmFyIHI9ZS50b1N0cmluZyhcInV0ZjE2bGVcIix0KTtpZihyKXt2YXIgbj1yLmNoYXJDb2RlQXQoci5sZW5ndGgtMSk7aWYobj49NTUyOTYmJm48PTU2MzE5KXt0aGlzLmxhc3ROZWVkPTI7dGhpcy5sYXN0VG90YWw9NDt0aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMl07dGhpcy5sYXN0Q2hhclsxXT1lW2UubGVuZ3RoLTFdO3JldHVybiByLnNsaWNlKDAsLTEpfX1yZXR1cm4gcn10aGlzLmxhc3ROZWVkPTE7dGhpcy5sYXN0VG90YWw9Mjt0aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMV07cmV0dXJuIGUudG9TdHJpbmcoXCJ1dGYxNmxlXCIsdCxlLmxlbmd0aC0xKX1mdW5jdGlvbiB1dGYxNkVuZChlKXt2YXIgdD1lJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCI7aWYodGhpcy5sYXN0TmVlZCl7dmFyIHI9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZDtyZXR1cm4gdCt0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKFwidXRmMTZsZVwiLDAscil9cmV0dXJuIHR9ZnVuY3Rpb24gYmFzZTY0VGV4dChlLHQpe3ZhciByPShlLmxlbmd0aC10KSUzO2lmKHI9PT0wKXJldHVybiBlLnRvU3RyaW5nKFwiYmFzZTY0XCIsdCk7dGhpcy5sYXN0TmVlZD0zLXI7dGhpcy5sYXN0VG90YWw9MztpZihyPT09MSl7dGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTFdfWVsc2V7dGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTJdO3RoaXMubGFzdENoYXJbMV09ZVtlLmxlbmd0aC0xXX1yZXR1cm4gZS50b1N0cmluZyhcImJhc2U2NFwiLHQsZS5sZW5ndGgtcil9ZnVuY3Rpb24gYmFzZTY0RW5kKGUpe3ZhciB0PWUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIjtpZih0aGlzLmxhc3ROZWVkKXJldHVybiB0K3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJiYXNlNjRcIiwwLDMtdGhpcy5sYXN0TmVlZCk7cmV0dXJuIHR9ZnVuY3Rpb24gc2ltcGxlV3JpdGUoZSl7cmV0dXJuIGUudG9TdHJpbmcodGhpcy5lbmNvZGluZyl9ZnVuY3Rpb24gc2ltcGxlRW5kKGUpe3JldHVybiBlJiZlLmxlbmd0aD90aGlzLndyaXRlKGUpOlwiXCJ9fSw3Njk6ZnVuY3Rpb24oZSl7ZS5leHBvcnRzPWRlcHJlY2F0ZTtmdW5jdGlvbiBkZXByZWNhdGUoZSx0KXtpZihjb25maWcoXCJub0RlcHJlY2F0aW9uXCIpKXtyZXR1cm4gZX12YXIgcj1mYWxzZTtmdW5jdGlvbiBkZXByZWNhdGVkKCl7aWYoIXIpe2lmKGNvbmZpZyhcInRocm93RGVwcmVjYXRpb25cIikpe3Rocm93IG5ldyBFcnJvcih0KX1lbHNlIGlmKGNvbmZpZyhcInRyYWNlRGVwcmVjYXRpb25cIikpe2NvbnNvbGUudHJhY2UodCl9ZWxzZXtjb25zb2xlLndhcm4odCl9cj10cnVlfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gZGVwcmVjYXRlZH1mdW5jdGlvbiBjb25maWcoZSl7dHJ5e2lmKCFnbG9iYWwubG9jYWxTdG9yYWdlKXJldHVybiBmYWxzZX1jYXRjaChlKXtyZXR1cm4gZmFsc2V9dmFyIHQ9Z2xvYmFsLmxvY2FsU3RvcmFnZVtlXTtpZihudWxsPT10KXJldHVybiBmYWxzZTtyZXR1cm4gU3RyaW5nKHQpLnRvTG93ZXJDYXNlKCk9PT1cInRydWVcIn19LDkxMTpmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZXh0ZW5kO3ZhciB0PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gZXh0ZW5kKCl7dmFyIGU9e307Zm9yKHZhciByPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dmFyIG49YXJndW1lbnRzW3JdO2Zvcih2YXIgaSBpbiBuKXtpZih0LmNhbGwobixpKSl7ZVtpXT1uW2ldfX19cmV0dXJuIGV9fSwzMDA6ZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXJlcXVpcmUoXCJidWZmZXJcIil9LDM2MTpmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9cmVxdWlyZShcImV2ZW50c1wiKX0sNzgxOmZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1yZXF1aXJlKFwic3RyZWFtXCIpfSwzMTA6ZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXJlcXVpcmUoXCJ1cmxcIil9LDgzNzpmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9cmVxdWlyZShcInV0aWxcIil9fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgYT10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO2E9ZmFsc2V9ZmluYWxseXtpZihhKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oODEzKTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/stream-http/index.js\n"));

/***/ }),

/***/ "./node_modules/object-is/implementation.js":
/*!**************************************************!*\
  !*** ./node_modules/object-is/implementation.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar numberIsNaN = function (value) {\n\treturn value !== value;\n};\n\nmodule.exports = function is(a, b) {\n\tif (a === 0 && b === 0) {\n\t\treturn 1 / a === 1 / b;\n\t}\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (numberIsNaN(a) && numberIsNaN(b)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2ltcGxlbWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbXBsZW1lbnRhdGlvbi5qcz8wYTg1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIG51bWJlcklzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzKGEsIGIpIHtcblx0aWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuXHRcdHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG5cdH1cblx0aWYgKGEgPT09IGIpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAobnVtYmVySXNOYU4oYSkgJiYgbnVtYmVySXNOYU4oYikpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/object-is/implementation.js\n"));

/***/ }),

/***/ "./node_modules/object-is/index.js":
/*!*****************************************!*\
  !*** ./node_modules/object-is/index.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\nvar callBind = __webpack_require__(/*! call-bind */ \"./node_modules/call-bind/index.js\");\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/object-is/implementation.js\");\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/object-is/polyfill.js\");\nvar shim = __webpack_require__(/*! ./shim */ \"./node_modules/object-is/shim.js\");\n\nvar polyfill = callBind(getPolyfill(), Object);\n\ndefine(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxvRUFBbUI7QUFDeEMsZUFBZSxtQkFBTyxDQUFDLG9EQUFXOztBQUVsQyxxQkFBcUIsbUJBQU8sQ0FBQyxvRUFBa0I7QUFDL0Msa0JBQWtCLG1CQUFPLENBQUMsd0RBQVk7QUFDdEMsV0FBVyxtQkFBTyxDQUFDLGdEQUFROztBQUUzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbmRleC5qcz82MWMzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgT2JqZWN0KTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/object-is/index.js\n"));

/***/ }),

/***/ "./node_modules/object-is/polyfill.js":
/*!********************************************!*\
  !*** ./node_modules/object-is/polyfill.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/object-is/implementation.js\");\n\nmodule.exports = function getPolyfill() {\n\treturn typeof Object.is === 'function' ? Object.is : implementation;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3BvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLG9FQUFrQjs7QUFFL0M7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvcG9seWZpbGwuanM/NmRlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuaXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuaXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/object-is/polyfill.js\n"));

/***/ }),

/***/ "./node_modules/object-is/shim.js":
/*!****************************************!*\
  !*** ./node_modules/object-is/shim.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/object-is/polyfill.js\");\nvar define = __webpack_require__(/*! define-properties */ \"./node_modules/define-properties/index.js\");\n\nmodule.exports = function shimObjectIs() {\n\tvar polyfill = getPolyfill();\n\tdefine(Object, { is: polyfill }, {\n\t\tis: function testObjectIs() {\n\t\t\treturn Object.is !== polyfill;\n\t\t}\n\t});\n\treturn polyfill;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3NoaW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMsd0RBQVk7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLG9FQUFtQjs7QUFFeEM7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvc2hpbS5qcz8yZjRhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU9iamVjdElzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IGlzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXM6IGZ1bmN0aW9uIHRlc3RPYmplY3RJcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QuaXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/object-is/shim.js\n"));

/***/ }),

/***/ "./node_modules/query-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/query-string/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst strictUriEncode = __webpack_require__(/*! strict-uri-encode */ \"./node_modules/strict-uri-encode/index.js\");\nconst decodeComponent = __webpack_require__(/*! decode-uri-component */ \"./node_modules/decode-uri-component/index.js\");\nconst splitOnFirst = __webpack_require__(/*! split-on-first */ \"./node_modules/split-on-first/index.js\");\nconst filterObject = __webpack_require__(/*! filter-obj */ \"./node_modules/filter-obj/index.js\");\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/query-string/index.js\n"));

/***/ }),

/***/ "./node_modules/split-on-first/index.js":
/*!**********************************************!*\
  !*** ./node_modules/split-on-first/index.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3BsaXQtb24tZmlyc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zcGxpdC1vbi1maXJzdC9pbmRleC5qcz85NDUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAoc3RyaW5nLCBzZXBhcmF0b3IpID0+IHtcblx0aWYgKCEodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlcGFyYXRvciA9PT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIGFyZ3VtZW50cyB0byBiZSBvZiB0eXBlIGBzdHJpbmdgJyk7XG5cdH1cblxuXHRpZiAoc2VwYXJhdG9yID09PSAnJykge1xuXHRcdHJldHVybiBbc3RyaW5nXTtcblx0fVxuXG5cdGNvbnN0IHNlcGFyYXRvckluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc2VwYXJhdG9yKTtcblxuXHRpZiAoc2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XG5cdFx0cmV0dXJuIFtzdHJpbmddO1xuXHR9XG5cblx0cmV0dXJuIFtcblx0XHRzdHJpbmcuc2xpY2UoMCwgc2VwYXJhdG9ySW5kZXgpLFxuXHRcdHN0cmluZy5zbGljZShzZXBhcmF0b3JJbmRleCArIHNlcGFyYXRvci5sZW5ndGgpXG5cdF07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/split-on-first/index.js\n"));

/***/ }),

/***/ "./node_modules/strict-uri-encode/index.js":
/*!*************************************************!*\
  !*** ./node_modules/strict-uri-encode/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RyaWN0LXVyaS1lbmNvZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw2RUFBNkUsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zdHJpY3QtdXJpLWVuY29kZS9pbmRleC5qcz8yNWM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gc3RyID0+IGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgeCA9PiBgJSR7eC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/strict-uri-encode/index.js\n"));

/***/ }),

/***/ "./node_modules/strip-hex-prefix/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/strip-hex-prefix/src/index.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var isHexPrefixed = __webpack_require__(/*! is-hex-prefixed */ \"./node_modules/is-hex-prefixed/src/index.js\");\n\n/**\n * Removes '0x' from a given `String` is present\n * @param {String} str the string value\n * @return {String|Optional} a string by pass if necessary\n */\nmodule.exports = function stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RyaXAtaGV4LXByZWZpeC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CLG1CQUFPLENBQUMsb0VBQWlCOztBQUU3QztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc3RyaXAtaGV4LXByZWZpeC9zcmMvaW5kZXguanM/NDRmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNIZXhQcmVmaXhlZCA9IHJlcXVpcmUoJ2lzLWhleC1wcmVmaXhlZCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgJzB4JyBmcm9tIGEgZ2l2ZW4gYFN0cmluZ2AgaXMgcHJlc2VudFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8T3B0aW9uYWx9IGEgc3RyaW5nIGJ5IHBhc3MgaWYgbmVjZXNzYXJ5XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaXBIZXhQcmVmaXgoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gaXNIZXhQcmVmaXhlZChzdHIpID8gc3RyLnNsaWNlKDIpIDogc3RyO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/strip-hex-prefix/src/index.js\n"));

/***/ }),

/***/ "./node_modules/tweetnacl-util/nacl-util.js":
/*!**************************************************!*\
  !*** ./node_modules/tweetnacl-util/nacl-util.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"?da34\")[\"Buffer\"];\n// Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n(function(root, f) {\n  'use strict';\n  if ( true && module.exports) module.exports = f();\n  else if (root.nacl) root.nacl.util = f();\n  else {\n    root.nacl = {};\n    root.nacl.util = f();\n  }\n}(this, function() {\n  'use strict';\n\n  var util = {};\n\n  function validateBase64(s) {\n    if (!(/^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/.test(s))) {\n      throw new TypeError('invalid encoding');\n    }\n  }\n\n  util.decodeUTF8 = function(s) {\n    if (typeof s !== 'string') throw new TypeError('expected string');\n    var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);\n    for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);\n    return b;\n  };\n\n  util.encodeUTF8 = function(arr) {\n    var i, s = [];\n    for (i = 0; i < arr.length; i++) s.push(String.fromCharCode(arr[i]));\n    return decodeURIComponent(escape(s.join('')));\n  };\n\n  if (typeof atob === 'undefined') {\n    // Node.js\n\n    if (typeof Buffer.from !== 'undefined') {\n       // Node v6 and later\n      util.encodeBase64 = function (arr) { // v6 and later\n          return Buffer.from(arr).toString('base64');\n      };\n\n      util.decodeBase64 = function (s) {\n        validateBase64(s);\n        return new Uint8Array(Array.prototype.slice.call(Buffer.from(s, 'base64'), 0));\n      };\n\n    } else {\n      // Node earlier than v6\n      util.encodeBase64 = function (arr) { // v6 and later\n        return (new Buffer(arr)).toString('base64');\n      };\n\n      util.decodeBase64 = function(s) {\n        validateBase64(s);\n        return new Uint8Array(Array.prototype.slice.call(new Buffer(s, 'base64'), 0));\n      };\n    }\n\n  } else {\n    // Browsers\n\n    util.encodeBase64 = function(arr) {\n      var i, s = [], len = arr.length;\n      for (i = 0; i < len; i++) s.push(String.fromCharCode(arr[i]));\n      return btoa(s.join(''));\n    };\n\n    util.decodeBase64 = function(s) {\n      validateBase64(s);\n      var i, d = atob(s), b = new Uint8Array(d.length);\n      for (i = 0; i < d.length; i++) b[i] = d.charCodeAt(i);\n      return b;\n    };\n\n  }\n\n  return util;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdlZXRuYWNsLXV0aWwvbmFjbC11dGlsLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBNkI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTtBQUNBLDhCQUE4QixFQUFFLGVBQWUsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRTtBQUMzRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZUFBZSxNQUFNO0FBQ3JCO0FBQ0EsMkNBQTJDO0FBQzNDLGlCQUFpQixNQUFNO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQsTUFBTTtBQUMvRDs7QUFFQSxNQUFNO0FBQ047QUFDQSwyQ0FBMkM7QUFDM0Msb0JBQW9CLE1BQU07QUFDMUI7O0FBRUE7QUFDQTtBQUNBLDZEQUE2RCxNQUFNO0FBQ25FO0FBQ0E7O0FBRUEsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdHdlZXRuYWNsLXV0aWwvbmFjbC11dGlsLmpzPzk0MTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV3JpdHRlbiBpbiAyMDE0LTIwMTYgYnkgRG1pdHJ5IENoZXN0bnlraCBhbmQgRGV2aSBNYW5kaXJpLlxuLy8gUHVibGljIGRvbWFpbi5cbihmdW5jdGlvbihyb290LCBmKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGYoKTtcbiAgZWxzZSBpZiAocm9vdC5uYWNsKSByb290Lm5hY2wudXRpbCA9IGYoKTtcbiAgZWxzZSB7XG4gICAgcm9vdC5uYWNsID0ge307XG4gICAgcm9vdC5uYWNsLnV0aWwgPSBmKCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgdXRpbCA9IHt9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlQmFzZTY0KHMpIHtcbiAgICBpZiAoISgvXig/OltBLVphLXowLTkrXFwvXXsyfVtBLVphLXowLTkrXFwvXXsyfSkqKD86W0EtWmEtejAtOStcXC9dezJ9PT18W0EtWmEtejAtOStcXC9dezN9PSk/JC8udGVzdChzKSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgZW5jb2RpbmcnKTtcbiAgICB9XG4gIH1cblxuICB1dGlsLmRlY29kZVVURjggPSBmdW5jdGlvbihzKSB7XG4gICAgaWYgKHR5cGVvZiBzICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgc3RyaW5nJyk7XG4gICAgdmFyIGksIGQgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQocykpLCBiID0gbmV3IFVpbnQ4QXJyYXkoZC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBkLmxlbmd0aDsgaSsrKSBiW2ldID0gZC5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBiO1xuICB9O1xuXG4gIHV0aWwuZW5jb2RlVVRGOCA9IGZ1bmN0aW9uKGFycikge1xuICAgIHZhciBpLCBzID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgcy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyW2ldKSk7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUocy5qb2luKCcnKSkpO1xuICB9O1xuXG4gIGlmICh0eXBlb2YgYXRvYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBOb2RlLmpzXG5cbiAgICBpZiAodHlwZW9mIEJ1ZmZlci5mcm9tICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgIC8vIE5vZGUgdjYgYW5kIGxhdGVyXG4gICAgICB1dGlsLmVuY29kZUJhc2U2NCA9IGZ1bmN0aW9uIChhcnIpIHsgLy8gdjYgYW5kIGxhdGVyXG4gICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGFycikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgfTtcblxuICAgICAgdXRpbC5kZWNvZGVCYXNlNjQgPSBmdW5jdGlvbiAocykge1xuICAgICAgICB2YWxpZGF0ZUJhc2U2NChzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKEJ1ZmZlci5mcm9tKHMsICdiYXNlNjQnKSwgMCkpO1xuICAgICAgfTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb2RlIGVhcmxpZXIgdGhhbiB2NlxuICAgICAgdXRpbC5lbmNvZGVCYXNlNjQgPSBmdW5jdGlvbiAoYXJyKSB7IC8vIHY2IGFuZCBsYXRlclxuICAgICAgICByZXR1cm4gKG5ldyBCdWZmZXIoYXJyKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgfTtcblxuICAgICAgdXRpbC5kZWNvZGVCYXNlNjQgPSBmdW5jdGlvbihzKSB7XG4gICAgICAgIHZhbGlkYXRlQmFzZTY0KHMpO1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobmV3IEJ1ZmZlcihzLCAnYmFzZTY0JyksIDApKTtcbiAgICAgIH07XG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlcnNcblxuICAgIHV0aWwuZW5jb2RlQmFzZTY0ID0gZnVuY3Rpb24oYXJyKSB7XG4gICAgICB2YXIgaSwgcyA9IFtdLCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSBzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShhcnJbaV0pKTtcbiAgICAgIHJldHVybiBidG9hKHMuam9pbignJykpO1xuICAgIH07XG5cbiAgICB1dGlsLmRlY29kZUJhc2U2NCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgIHZhbGlkYXRlQmFzZTY0KHMpO1xuICAgICAgdmFyIGksIGQgPSBhdG9iKHMpLCBiID0gbmV3IFVpbnQ4QXJyYXkoZC5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGQubGVuZ3RoOyBpKyspIGJbaV0gPSBkLmNoYXJDb2RlQXQoaSk7XG4gICAgICByZXR1cm4gYjtcbiAgICB9O1xuXG4gIH1cblxuICByZXR1cm4gdXRpbDtcblxufSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/tweetnacl-util/nacl-util.js\n"));

/***/ }),

/***/ "./node_modules/tweetnacl/nacl-fast.js":
/*!*********************************************!*\
  !*** ./node_modules/tweetnacl/nacl-fast.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = Math.floor((x[j] + 128) / 256);\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  return n;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES,\n\n  gf: gf,\n  D: D,\n  L: L,\n  pack25519: pack25519,\n  unpack25519: unpack25519,\n  M: M,\n  A: A,\n  S: S,\n  Z: Z,\n  pow2523: pow2523,\n  add: add,\n  set25519: set25519,\n  modL: modL,\n  scalarmult: scalarmult,\n  scalarbase: scalarbase,\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (true) {\n    // Node.js.\n    crypto = __webpack_require__(/*! crypto */ \"?5ddf\");\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})( true && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tweetnacl/nacl-fast.js\n"));

/***/ }),

/***/ "?4908":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?da34":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "?5ddf":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "./node_modules/@metamask/abi-utils/node_modules/superstruct/dist/index.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@metamask/abi-utils/node_modules/superstruct/dist/index.mjs ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Struct: function() { return /* binding */ Struct; },\n/* harmony export */   StructError: function() { return /* binding */ StructError; },\n/* harmony export */   any: function() { return /* binding */ any; },\n/* harmony export */   array: function() { return /* binding */ array; },\n/* harmony export */   assert: function() { return /* binding */ assert; },\n/* harmony export */   assign: function() { return /* binding */ assign; },\n/* harmony export */   bigint: function() { return /* binding */ bigint; },\n/* harmony export */   boolean: function() { return /* binding */ boolean; },\n/* harmony export */   coerce: function() { return /* binding */ coerce; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   date: function() { return /* binding */ date; },\n/* harmony export */   defaulted: function() { return /* binding */ defaulted; },\n/* harmony export */   define: function() { return /* binding */ define; },\n/* harmony export */   deprecated: function() { return /* binding */ deprecated; },\n/* harmony export */   dynamic: function() { return /* binding */ dynamic; },\n/* harmony export */   empty: function() { return /* binding */ empty; },\n/* harmony export */   enums: function() { return /* binding */ enums; },\n/* harmony export */   func: function() { return /* binding */ func; },\n/* harmony export */   instance: function() { return /* binding */ instance; },\n/* harmony export */   integer: function() { return /* binding */ integer; },\n/* harmony export */   intersection: function() { return /* binding */ intersection; },\n/* harmony export */   is: function() { return /* binding */ is; },\n/* harmony export */   lazy: function() { return /* binding */ lazy; },\n/* harmony export */   literal: function() { return /* binding */ literal; },\n/* harmony export */   map: function() { return /* binding */ map; },\n/* harmony export */   mask: function() { return /* binding */ mask; },\n/* harmony export */   max: function() { return /* binding */ max; },\n/* harmony export */   min: function() { return /* binding */ min; },\n/* harmony export */   never: function() { return /* binding */ never; },\n/* harmony export */   nonempty: function() { return /* binding */ nonempty; },\n/* harmony export */   nullable: function() { return /* binding */ nullable; },\n/* harmony export */   number: function() { return /* binding */ number; },\n/* harmony export */   object: function() { return /* binding */ object; },\n/* harmony export */   omit: function() { return /* binding */ omit; },\n/* harmony export */   optional: function() { return /* binding */ optional; },\n/* harmony export */   partial: function() { return /* binding */ partial; },\n/* harmony export */   pattern: function() { return /* binding */ pattern; },\n/* harmony export */   pick: function() { return /* binding */ pick; },\n/* harmony export */   record: function() { return /* binding */ record; },\n/* harmony export */   refine: function() { return /* binding */ refine; },\n/* harmony export */   regexp: function() { return /* binding */ regexp; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   size: function() { return /* binding */ size; },\n/* harmony export */   string: function() { return /* binding */ string; },\n/* harmony export */   struct: function() { return /* binding */ struct; },\n/* harmony export */   trimmed: function() { return /* binding */ trimmed; },\n/* harmony export */   tuple: function() { return /* binding */ tuple; },\n/* harmony export */   type: function() { return /* binding */ type; },\n/* harmony export */   union: function() { return /* binding */ union; },\n/* harmony export */   unknown: function() { return /* binding */ unknown; },\n/* harmony export */   validate: function() { return /* binding */ validate; }\n/* harmony export */ });\n/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n        if (mask &&\n            struct.type !== 'type' &&\n            isObject(struct.schema) &&\n            isObject(value) &&\n            !Array.isArray(value)) {\n            for (const key in value) {\n                if (struct.schema[key] === undefined) {\n                    delete value[key];\n                }\n            }\n        }\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `withCoercion` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const schema = struct instanceof Struct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isObject(value) || `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, { coerce: true });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@metamask/abi-utils/node_modules/superstruct/dist/index.mjs\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chains: function() { return /* binding */ chains; }\n/* harmony export */ });\nconst chains = {\n    mainnet: {\n        name: 'mainnet',\n        chainId: 1,\n        networkId: 1,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n        },\n        comment: 'The Ethereum main chain',\n        url: 'https://ethstats.net/',\n        genesis: {\n            gasLimit: 5000,\n            difficulty: 17179869184,\n            nonce: '0x0000000000000042',\n            extraData: '0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xfc64ec04',\n            },\n            {\n                name: 'homestead',\n                block: 1150000,\n                forkHash: '0x97c2c34c',\n            },\n            {\n                name: 'dao',\n                block: 1920000,\n                forkHash: '0x91d1f948',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 2463000,\n                forkHash: '0x7a64da13',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 2675000,\n                forkHash: '0x3edd5b10',\n            },\n            {\n                name: 'byzantium',\n                block: 4370000,\n                forkHash: '0xa00bc324',\n            },\n            {\n                name: 'constantinople',\n                block: 7280000,\n                forkHash: '0x668db0af',\n            },\n            {\n                name: 'petersburg',\n                block: 7280000,\n                forkHash: '0x668db0af',\n            },\n            {\n                name: 'istanbul',\n                block: 9069000,\n                forkHash: '0x879d6e30',\n            },\n            {\n                name: 'muirGlacier',\n                block: 9200000,\n                forkHash: '0xe029e991',\n            },\n            {\n                name: 'berlin',\n                block: 12244000,\n                forkHash: '0x0eb440f6',\n            },\n            {\n                name: 'london',\n                block: 12965000,\n                forkHash: '0xb715077d',\n            },\n            {\n                name: 'arrowGlacier',\n                block: 13773000,\n                forkHash: '0x20c327fc',\n            },\n            {\n                name: 'grayGlacier',\n                block: 15050000,\n                forkHash: '0xf0afd0e3',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge\n                // terminal block: https://etherscan.io/block/15537393\n                name: 'paris',\n                ttd: '58750000000000000000000',\n                block: 15537394,\n                forkHash: '0xf0afd0e3',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: null,\n                forkHash: null,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1681338455',\n                forkHash: '0xdce96c2d',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                forkHash: null,\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '18.138.108.67',\n                port: 30303,\n                id: 'd860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666',\n                location: 'ap-southeast-1-001',\n                comment: 'bootnode-aws-ap-southeast-1-001',\n            },\n            {\n                ip: '3.209.45.79',\n                port: 30303,\n                id: '22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de',\n                location: 'us-east-1-001',\n                comment: 'bootnode-aws-us-east-1-001',\n            },\n            {\n                ip: '65.108.70.101',\n                port: 30303,\n                id: '2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc',\n                location: 'eu-west-1-001',\n                comment: 'bootnode-hetzner-hel',\n            },\n            {\n                ip: '157.90.35.166',\n                port: 30303,\n                id: '4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052',\n                location: 'eu-central-1-001',\n                comment: 'bootnode-hetzner-fsn',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net',\n        ],\n    },\n    goerli: {\n        name: 'goerli',\n        chainId: 5,\n        networkId: 5,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'poa',\n            algorithm: 'clique',\n            clique: {\n                period: 15,\n                epoch: 30000,\n            },\n        },\n        comment: 'Cross-client PoA test network',\n        url: 'https://github.com/goerli/testnet',\n        genesis: {\n            timestamp: '0x5c51a607',\n            gasLimit: 10485760,\n            difficulty: 1,\n            nonce: '0x0000000000000000',\n            extraData: '0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'istanbul',\n                block: 1561651,\n                forkHash: '0xc25efa5c',\n            },\n            {\n                name: 'berlin',\n                block: 4460644,\n                forkHash: '0x757a1c47',\n            },\n            {\n                name: 'london',\n                block: 5062605,\n                forkHash: '0xb8c6299d',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://goerli.etherscan.io/block/7382818\n                name: 'paris',\n                ttd: '10790000',\n                block: 7382819,\n                forkHash: '0xb8c6299d',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: null,\n                forkHash: null,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1678832736',\n                forkHash: '0xf9843abf',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                forkHash: null,\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '51.141.78.53',\n                port: 30303,\n                id: '011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a',\n                location: '',\n                comment: 'Upstream bootnode 1',\n            },\n            {\n                ip: '13.93.54.137',\n                port: 30303,\n                id: '176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b',\n                location: '',\n                comment: 'Upstream bootnode 2',\n            },\n            {\n                ip: '94.237.54.114',\n                port: 30313,\n                id: '46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291',\n                location: '',\n                comment: 'Upstream bootnode 3',\n            },\n            {\n                ip: '18.218.250.66',\n                port: 30313,\n                id: 'b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949',\n                location: '',\n                comment: 'Upstream bootnode 4',\n            },\n            {\n                ip: '3.11.147.67',\n                port: 30303,\n                id: 'a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91',\n                location: '',\n                comment: 'Ethereum Foundation bootnode',\n            },\n            {\n                ip: '51.15.116.226',\n                port: 30303,\n                id: 'a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n            {\n                ip: '51.15.119.157',\n                port: 30303,\n                id: '807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n            {\n                ip: '51.15.119.157',\n                port: 40303,\n                id: 'a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net',\n        ],\n    },\n    sepolia: {\n        name: 'sepolia',\n        chainId: 11155111,\n        networkId: 11155111,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n        },\n        comment: 'PoW test network to replace Ropsten',\n        url: 'https://github.com/ethereum/go-ethereum/pull/23730',\n        genesis: {\n            timestamp: '0x6159af19',\n            gasLimit: 30000000,\n            difficulty: 131072,\n            nonce: '0x0000000000000000',\n            extraData: '0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'muirGlacier',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'berlin',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'london',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://sepolia.etherscan.io/block/1450408\n                name: 'paris',\n                ttd: '17000000000000000',\n                block: 1450409,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 1735371,\n                forkHash: '0xb96cbd13',\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1677557088',\n                forkHash: '0xf7f9bc08',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                forkHash: null,\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '18.168.182.86',\n                port: 30303,\n                id: '9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066',\n                location: '',\n                comment: 'geth',\n            },\n            {\n                ip: '52.14.151.177',\n                port: 30303,\n                id: 'ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7',\n                location: '',\n                comment: 'besu',\n            },\n            {\n                ip: '165.22.196.173',\n                port: 30303,\n                id: 'ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6',\n                location: '',\n                comment: 'EF',\n            },\n            {\n                ip: '65.108.95.67',\n                port: 30303,\n                id: '075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6',\n                location: '',\n                comment: 'lodestar',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net',\n        ],\n    },\n    holesky: {\n        name: 'holesky',\n        chainId: 17000,\n        networkId: 17000,\n        defaultHardfork: 'paris',\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n        },\n        comment: 'PoS test network to replace Goerli',\n        url: 'https://github.com/eth-clients/holesky/',\n        genesis: {\n            baseFeePerGas: '0x3B9ACA00',\n            difficulty: '0x01',\n            extraData: '0x',\n            gasLimit: '0x17D7840',\n            nonce: '0x0000000000001234',\n            timestamp: '0x65156994',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'muirGlacier',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'berlin',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'london',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'paris',\n                ttd: '0',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1696000704',\n                forkHash: '0xfd4f016b',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                forkHash: null,\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '146.190.13.128',\n                port: 30303,\n                id: 'ac906289e4b7f12df423d654c5a962b6ebe5b3a74cc9e06292a85221f9a64a6f1cfdd6b714ed6dacef51578f92b34c60ee91e9ede9c7f8fadc4d347326d95e2b',\n                location: '',\n                comment: 'bootnode 1',\n            },\n            {\n                ip: '178.128.136.233',\n                port: 30303,\n                id: 'a3435a0155a3e837c02f5e7f5662a2f1fbc25b48e4dc232016e1c51b544cb5b4510ef633ea3278c0e970fa8ad8141e2d4d0f9f95456c537ff05fdf9b31c15072',\n                location: '',\n                comment: 'bootnode 2',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.holesky.ethdisco.net',\n        ],\n    },\n};\n//# sourceMappingURL=chains.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Common: function() { return /* binding */ Common; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var crc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crc */ \"./node_modules/crc/mjs/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var _chains_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chains.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/chains.js\");\n/* harmony import */ var _eips_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./eips.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n/* harmony import */ var _hardforks_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hardforks.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js\");\n\n\n\n\n\n\n\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nclass Common {\n    constructor(opts) {\n        this._eips = [];\n        this._paramsCache = {};\n        this._activatedEIPsCache = [];\n        this.events = new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();\n        this._customChains = opts.customChains ?? [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Shanghai;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n            hf.name,\n            _hardforks_js__WEBPACK_IMPORTED_MODULE_6__.hardforks[hf.name],\n        ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n        if (Object.keys(this._paramsCache).length === 0) {\n            this._buildParamsCache();\n            this._buildActivatedEIPsCache();\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    static custom(chainParamsOrName, opts = {}) {\n        const baseChain = opts.baseChain ?? 'mainnet';\n        const standardChainParams = { ...Common._getChainParams(baseChain) };\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common({\n                chain: {\n                    ...standardChainParams,\n                    ...chainParamsOrName,\n                },\n                ...opts,\n            });\n        }\n        else {\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.ArbitrumOne) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.ArbitrumOne,\n                    chainId: 42161,\n                    networkId: 42161,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Berlin, ...opts });\n            }\n            if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: _enums_js__WEBPACK_IMPORTED_MODULE_5__.CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Berlin, ...opts });\n            }\n            throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n        }\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */\n    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {\n        const genesisParams = (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: genesisParams.name ?? 'custom',\n            customChains: [genesisParams],\n            eips,\n            hardfork: hardfork ?? genesisParams.hardfork,\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */\n    static isSupportedChainId(chainId) {\n        const initializedChains = this.getInitializedChains();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    }\n    static _getChainParams(chain, customChains) {\n        const initializedChains = this.getInitializedChains(customChains);\n        if (typeof chain === 'number' || typeof chain === 'bigint') {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                const name = initializedChains['names'][chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    setChain(chain) {\n        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n            }\n            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (const param of required) {\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        for (const hf of this.hardforks()) {\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this._buildParamsCache();\n                    this._buildActivatedEIPsCache();\n                    this.events.emit('hardforkChanged', hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF\n     */\n    getHardforkBy(opts) {\n        let { blockNumber, timestamp, td } = opts;\n        blockNumber = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(blockNumber, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        td = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(td, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        timestamp = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(timestamp, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);\n        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs\n            .slice(mergeIndex + 1)\n            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf) => (blockNumber !== undefined &&\n            hf.block !== null &&\n            BigInt(hf.block) > blockNumber) ||\n            (timestamp !== undefined && hf.timestamp !== undefined && hf.timestamp > timestamp));\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        }\n        else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error('Must have at least one hardfork at block 0');\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs\n                .slice(0, hfIndex)\n                .reverse()\n                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);\n            hfIndex = hfIndex - stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex = hfIndex - 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        }\n        else {\n            if (mergeIndex >= 0 && td !== undefined && td !== null) {\n                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n                }\n                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) < td) {\n                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n                }\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for (; hfIndex < hfs.length - 1; hfIndex++) {\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp !== undefined) {\n            const minTimeStamp = hfs\n                .slice(0, hfStartIndex)\n                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs\n                .slice(hfIndex + 1)\n                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), Number(timestamp));\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF set\n     */\n    setHardforkBy(opts) {\n        const hardfork = this.getHardforkBy(opts);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */\n    _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs) {\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    setEIPs(eips = []) {\n        for (const eip of eips) {\n            if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            const minHF = this.gteHardfork(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n        }\n        this._eips = eips;\n        this._buildParamsCache();\n        this._buildActivatedEIPsCache();\n        for (const eip of eips) {\n            if (_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip].requiredEIPs !== undefined) {\n                for (const elem of _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip].requiredEIPs) {\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Internal helper for _buildParamsCache()\n     */\n    _mergeWithParamsCache(params) {\n        this._paramsCache['gasConfig'] = {\n            ...this._paramsCache['gasConfig'],\n            ...params['gasConfig'],\n        };\n        this._paramsCache['gasPrices'] = {\n            ...this._paramsCache['gasPrices'],\n            ...params['gasPrices'],\n        };\n        this._paramsCache['pow'] = {\n            ...this._paramsCache['pow'],\n            ...params['pow'],\n        };\n        this._paramsCache['sharding'] = {\n            ...this._paramsCache['sharding'],\n            ...params['sharding'],\n        };\n        this._paramsCache['vm'] = {\n            ...this._paramsCache['vm'],\n            ...params['vm'],\n        };\n    }\n    /**\n     * Build up a cache for all parameter values for the current HF and all activated EIPs\n     */\n    _buildParamsCache() {\n        this._paramsCache = {};\n        // Iterate through all hardforks up to hardfork set\n        const hardfork = this.hardfork();\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF config (e.g. for berlin)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                        throw new Error(`${eip} not supported`);\n                    }\n                    this._mergeWithParamsCache(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]);\n                }\n                // Parameter-inlining HF config (e.g. for istanbul)\n            }\n            else {\n                this._mergeWithParamsCache(hfChanges[1]);\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        // Iterate through all additionally activated EIPs\n        for (const eip of this._eips) {\n            if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            this._mergeWithParamsCache(_eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip]);\n        }\n    }\n    _buildActivatedEIPsCache() {\n        this._activatedEIPsCache = [];\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                this._activatedEIPsCache = this._activatedEIPsCache.concat(hf['eips']);\n            }\n        }\n        this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter is taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value = null;\n        if (this._paramsCache[topic] !== undefined &&\n            this._paramsCache[topic][name] !== undefined) {\n            value = this._paramsCache[topic][name].v;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByHardfork(topic, name, hardfork) {\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF config (e.g. for berlin)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    value = typeof valueEIP === 'bigint' ? valueEIP : value;\n                }\n                // Parameter-inlining HF config (e.g. for istanbul)\n            }\n            else {\n                if (hfChanges[1][topic] !== undefined &&\n                    hfChanges[1][topic][name] !== undefined) {\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */\n    paramByEIP(topic, name, eip) {\n        if (!(eip in _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        const eipParams = _eips_js__WEBPACK_IMPORTED_MODULE_4__.EIPs[eip];\n        if (!(topic in eipParams)) {\n            return undefined;\n        }\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        const value = eipParams[topic][name].v;\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkBy({ blockNumber, td, timestamp });\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    isActivatedEIP(eip) {\n        if (this._activatedEIPsCache.includes(eip)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    hardforkIsActiveOnBlock(hardfork, blockNumber) {\n        blockNumber = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(blockNumber, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === 'bigint' && hfBlock !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0 && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    activeOnBlock(blockNumber) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    hardforkGteHardfork(hardfork1, hardfork2) {\n        hardfork1 = hardfork1 ?? this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1, posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks) {\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    gteHardfork(hardfork) {\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    hardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const block = this._getHardfork(hardfork)?.['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return BigInt(block);\n    }\n    hardforkTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const timestamp = this._getHardfork(hardfork)?.['timestamp'];\n        if (timestamp === undefined || timestamp === null) {\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */\n    eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkBlock(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    hardforkTTD(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const ttd = this._getHardfork(hardfork)?.['ttd'];\n        if (ttd === undefined || ttd === null) {\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */\n    nextHardforkBlockOrTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            return null;\n        }\n        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n        currHfTimeOrBlock =\n            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n                ? Number(currHfTimeOrBlock)\n                : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n            let hfTimeOrBlock = hf.timestamp ?? hf.block;\n            hfTimeOrBlock =\n                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return (hf.name !== _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris &&\n                hfTimeOrBlock !== null &&\n                hfTimeOrBlock !== undefined &&\n                hfTimeOrBlock !== currHfTimeOrBlock);\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            return null;\n        }\n        const nextHfBlock = nextHf.timestamp ?? nextHf.block;\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */\n    _calcForkHash(hardfork, genesisHash) {\n        let hfBytes = new Uint8Array(0);\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()) {\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp ?? block;\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === 'number' &&\n                blockOrTime !== 0 &&\n                blockOrTime !== prevBlockOrTime &&\n                name !== _enums_js__WEBPACK_IMPORTED_MODULE_5__.Hardfork.Paris) {\n                const hfBlockBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x' + blockOrTime.toString(16).padStart(16, '0'));\n                hfBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(hfBytes, hfBlockBytes);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork)\n                break;\n        }\n        const inputBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(genesisHash, hfBytes);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        const forkhash = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.intToBytes)((0,crc__WEBPACK_IMPORTED_MODULE_1__.crc32)(inputBytes) >>> 0));\n        return forkhash;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */\n    forkHash(hardfork, genesisHash) {\n        hardfork = hardfork ?? this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (data === null ||\n            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {\n            const msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data?.forkHash !== null && data?.forkHash !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash)\n            throw new Error('genesisHash required for forkHash calculation');\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf) => {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */\n    setForkHashes(genesisHash) {\n        for (const hf of this.hardforks()) {\n            const blockOrTime = hf.timestamp ?? hf.block;\n            if ((hf.forkHash === null || hf.forkHash === undefined) &&\n                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    hardforks() {\n        return this._chainParams.hardforks;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the additionally activated EIPs\n     * (by using the `eips` constructor option)\n     * @returns List of EIPs\n     */\n    eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['type'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['type'];\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['algorithm'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['algorithm'];\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusConfig() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                const config = hfChanges[1];\n                const algorithm = config['consensus']['algorithm'];\n                value = config['consensus'][algorithm];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    copy() {\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.events = new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();\n        return copy;\n    }\n    static getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(_enums_js__WEBPACK_IMPORTED_MODULE_5__.Chain)) {\n            names[id] = name.toLowerCase();\n        }\n        const chains = { ..._chains_js__WEBPACK_IMPORTED_MODULE_3__.chains };\n        if (customChains) {\n            for (const chain of customChains) {\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EIPs: function() { return /* binding */ EIPs; }\n/* harmony export */ });\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n\nvar Status;\n(function (Status) {\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nconst EIPs = {\n    1153: {\n        comment: 'Transient storage opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-1153',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            tstore: {\n                v: 100,\n                d: 'Base fee of the TSTORE opcode',\n            },\n            tload: {\n                v: 100,\n                d: 'Base fee of the TLOAD opcode',\n            },\n        },\n    },\n    1559: {\n        comment: 'Fee market change for ETH 1.0 chain',\n        url: 'https://eips.ethereum.org/EIPS/eip-1559',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [2930],\n        gasConfig: {\n            baseFeeMaxChangeDenominator: {\n                v: 8,\n                d: 'Maximum base fee change denominator',\n            },\n            elasticityMultiplier: {\n                v: 2,\n                d: 'Maximum block gas target elasticity',\n            },\n            initialBaseFee: {\n                v: 1000000000,\n                d: 'Initial base fee on first EIP1559 block',\n            },\n        },\n    },\n    2315: {\n        comment: 'Simple subroutines for the EVM',\n        url: 'https://eips.ethereum.org/EIPS/eip-2315',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Istanbul,\n        requiredEIPs: [],\n        gasPrices: {\n            beginsub: {\n                v: 2,\n                d: 'Base fee of the BEGINSUB opcode',\n            },\n            returnsub: {\n                v: 5,\n                d: 'Base fee of the RETURNSUB opcode',\n            },\n            jumpsub: {\n                v: 10,\n                d: 'Base fee of the JUMPSUB opcode',\n            },\n        },\n    },\n    2565: {\n        comment: 'ModExp gas cost',\n        url: 'https://eips.ethereum.org/EIPS/eip-2565',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Byzantium,\n        requiredEIPs: [],\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 3,\n                d: 'Gquaddivisor from modexp precompile for gas calculation',\n            },\n        },\n    },\n    2718: {\n        comment: 'Typed Transaction Envelope',\n        url: 'https://eips.ethereum.org/EIPS/eip-2718',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n    },\n    2929: {\n        comment: 'Gas cost increases for state access opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-2929',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            coldsload: {\n                v: 2100,\n                d: 'Gas cost of the first read of storage from a given location (per transaction)',\n            },\n            coldaccountaccess: {\n                v: 2600,\n                d: 'Gas cost of the first read of a given address (per transaction)',\n            },\n            warmstorageread: {\n                v: 100,\n                d: \"Gas cost of reading storage locations which have already loaded 'cold'\",\n            },\n            sstoreCleanGasEIP2200: {\n                v: 2900,\n                d: 'Once per SSTORE operation from clean non-zero to something else',\n            },\n            sstoreNoopGasEIP2200: {\n                v: 100,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 100,\n                d: 'Once per SSTORE operation if a dirty value is changed',\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19900,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4900,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            call: {\n                v: 0,\n                d: 'Base fee of the CALL opcode',\n            },\n            callcode: {\n                v: 0,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            delegatecall: {\n                v: 0,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n            staticcall: {\n                v: 0,\n                d: 'Base fee of the STATICCALL opcode',\n            },\n            balance: {\n                v: 0,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            extcodesize: {\n                v: 0,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 0,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            extcodehash: {\n                v: 0,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            sload: {\n                v: 0,\n                d: 'Base fee of the SLOAD opcode',\n            },\n            sstore: {\n                v: 0,\n                d: 'Base fee of the SSTORE opcode',\n            },\n        },\n    },\n    2930: {\n        comment: 'Optional access lists',\n        url: 'https://eips.ethereum.org/EIPS/eip-2930',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Istanbul,\n        requiredEIPs: [2718, 2929],\n        gasPrices: {\n            accessListStorageKeyCost: {\n                v: 1900,\n                d: 'Gas cost per storage key in an Access List transaction',\n            },\n            accessListAddressCost: {\n                v: 2400,\n                d: 'Gas cost per storage key in an Access List transaction',\n            },\n        },\n    },\n    3074: {\n        comment: 'AUTH and AUTHCALL opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-3074',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            auth: {\n                v: 3100,\n                d: 'Gas cost of the AUTH opcode',\n            },\n            authcall: {\n                v: 0,\n                d: 'Gas cost of the AUTHCALL opcode',\n            },\n            authcallValueTransfer: {\n                v: 6700,\n                d: 'Paid for CALL when the value transfer is non-zero',\n            },\n        },\n    },\n    3198: {\n        comment: 'BASEFEE opcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-3198',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            basefee: {\n                v: 2,\n                d: 'Gas cost of the BASEFEE opcode',\n            },\n        },\n    },\n    3529: {\n        comment: 'Reduction in refunds',\n        url: 'https://eips.ethereum.org/EIPS/eip-3529',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [2929],\n        gasConfig: {\n            maxRefundQuotient: {\n                v: 5,\n                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',\n            },\n        },\n        gasPrices: {\n            selfdestructRefund: {\n                v: 0,\n                d: 'Refunded following a selfdestruct operation',\n            },\n            sstoreClearRefundEIP2200: {\n                v: 4800,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n        },\n    },\n    3540: {\n        comment: 'EVM Object Format (EOF) v1',\n        url: 'https://eips.ethereum.org/EIPS/eip-3540',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [3541],\n    },\n    3541: {\n        comment: 'Reject new contracts starting with the 0xEF byte',\n        url: 'https://eips.ethereum.org/EIPS/eip-3541',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Berlin,\n        requiredEIPs: [],\n    },\n    3554: {\n        comment: 'Difficulty Bomb Delay to December 1st 2021',\n        url: 'https://eips.ethereum.org/EIPS/eip-3554',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.MuirGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 9500000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    3607: {\n        comment: 'Reject transactions from senders with deployed code',\n        url: 'https://eips.ethereum.org/EIPS/eip-3607',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n    },\n    3651: {\n        comment: 'Warm COINBASE',\n        url: 'https://eips.ethereum.org/EIPS/eip-3651',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [2929],\n    },\n    3670: {\n        comment: 'EOF - Code Validation',\n        url: 'https://eips.ethereum.org/EIPS/eip-3670',\n        status: 'Review',\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [3540],\n        gasConfig: {},\n        gasPrices: {},\n        vm: {},\n        pow: {},\n    },\n    3675: {\n        comment: 'Upgrade consensus to Proof-of-Stake',\n        url: 'https://eips.ethereum.org/EIPS/eip-3675',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n    },\n    3855: {\n        comment: 'PUSH0 instruction',\n        url: 'https://eips.ethereum.org/EIPS/eip-3855',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            push0: {\n                v: 2,\n                d: 'Base fee of the PUSH0 opcode',\n            },\n        },\n    },\n    3860: {\n        comment: 'Limit and meter initcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-3860',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.SpuriousDragon,\n        requiredEIPs: [],\n        gasPrices: {\n            initCodeWordCost: {\n                v: 2,\n                d: 'Gas to pay for each word (32 bytes) of initcode when creating a contract',\n            },\n        },\n        vm: {\n            maxInitCodeSize: {\n                v: 49152,\n                d: 'Maximum length of initialization code when creating a contract',\n            },\n        },\n    },\n    4345: {\n        comment: 'Difficulty Bomb Delay to June 2022',\n        url: 'https://eips.ethereum.org/EIPS/eip-4345',\n        status: Status.Final,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 10700000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    4399: {\n        comment: 'Supplant DIFFICULTY opcode with PREVRANDAO',\n        url: 'https://eips.ethereum.org/EIPS/eip-4399',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            prevrandao: {\n                v: 2,\n                d: 'Base fee of the PREVRANDAO opcode (previously DIFFICULTY)',\n            },\n        },\n    },\n    4788: {\n        comment: 'Beacon block root in the EVM',\n        url: 'https://eips.ethereum.org/EIPS/eip-4788',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Cancun,\n        requiredEIPs: [],\n        gasPrices: {},\n        vm: {\n            historicalRootsLength: {\n                v: 8191,\n                d: 'The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile',\n            },\n        },\n    },\n    4844: {\n        comment: 'Shard Blob Transactions',\n        url: 'https://eips.ethereum.org/EIPS/eip-4844',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [1559, 2718, 2930, 4895],\n        gasConfig: {\n            blobGasPerBlob: {\n                v: 131072,\n                d: 'The base fee for blob gas per blob',\n            },\n            targetBlobGasPerBlock: {\n                v: 393216,\n                d: 'The target blob gas consumed per block',\n            },\n            maxblobGasPerBlock: {\n                v: 786432,\n                d: 'The max blob gas allowable per block',\n            },\n            blobGasPriceUpdateFraction: {\n                v: 3338477,\n                d: 'The denominator used in the exponential when calculating a blob gas price',\n            },\n        },\n        gasPrices: {\n            simpleGasPerBlob: {\n                v: 12000,\n                d: 'The basic gas fee for each blob',\n            },\n            minBlobGasPrice: {\n                v: 1,\n                d: 'The minimum fee per blob gas',\n            },\n            kzgPointEvaluationGasPrecompilePrice: {\n                v: 50000,\n                d: 'The fee associated with the point evaluation precompile',\n            },\n            blobhash: {\n                v: 3,\n                d: 'Base fee of the BLOBHASH opcode',\n            },\n        },\n        sharding: {\n            blobCommitmentVersionKzg: {\n                v: 1,\n                d: 'The number indicated a versioned hash is a KZG commitment',\n            },\n            fieldElementsPerBlob: {\n                v: 4096,\n                d: 'The number of field elements allowed per blob',\n            },\n        },\n    },\n    4895: {\n        comment: 'Beacon chain push withdrawals as operations',\n        url: 'https://eips.ethereum.org/EIPS/eip-4895',\n        status: Status.Review,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [],\n    },\n    5133: {\n        comment: 'Delaying Difficulty Bomb to mid-September 2022',\n        url: 'https://eips.ethereum.org/EIPS/eip-5133',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.GrayGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 11400000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    5656: {\n        comment: 'MCOPY - Memory copying instruction',\n        url: 'https://eips.ethereum.org/EIPS/eip-5656',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Shanghai,\n        requiredEIPs: [],\n        gasPrices: {\n            mcopy: {\n                v: 3,\n                d: 'Base fee of the MCOPY opcode',\n            },\n        },\n    },\n    6780: {\n        comment: 'SELFDESTRUCT only in same transaction',\n        url: 'https://eips.ethereum.org/EIPS/eip-6780',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.London,\n        requiredEIPs: [],\n    },\n    7516: {\n        comment: 'BLOBBASEFEE opcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-7516',\n        status: Status.Draft,\n        minimumHardfork: _enums_js__WEBPACK_IMPORTED_MODULE_0__.Hardfork.Paris,\n        requiredEIPs: [4844],\n        gasPrices: {\n            blobbasefee: {\n                v: 2,\n                d: 'Gas cost of the BLOBBASEFEE opcode',\n            },\n        },\n    },\n};\n//# sourceMappingURL=eips.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/eips.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: function() { return /* binding */ Chain; },\n/* harmony export */   ChainGenesis: function() { return /* binding */ ChainGenesis; },\n/* harmony export */   ConsensusAlgorithm: function() { return /* binding */ ConsensusAlgorithm; },\n/* harmony export */   ConsensusType: function() { return /* binding */ ConsensusType; },\n/* harmony export */   CustomChain: function() { return /* binding */ CustomChain; },\n/* harmony export */   Hardfork: function() { return /* binding */ Hardfork; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n    Chain[Chain[\"Holesky\"] = 17000] = \"Holesky\";\n})(Chain || (Chain = {}));\n// Having this info as record will force typescript to make sure no chain is missed\n/**\n * GenesisState info about well known ethereum chains\n */\nconst ChainGenesis = {\n    [Chain.Mainnet]: {\n        name: 'mainnet',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'),\n    },\n    [Chain.Goerli]: {\n        name: 'goerli',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008'),\n    },\n    [Chain.Sepolia]: {\n        name: 'sepolia',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494'),\n    },\n    [Chain.Holesky]: {\n        name: 'holesky',\n        blockNumber: _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0,\n        stateRoot: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783'),\n    },\n};\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Paris\"] = \"paris\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"Cancun\"] = \"cancun\";\n})(Hardfork || (Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType || (ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */\n    CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain || (CustomChain = {}));\n//# sourceMappingURL=enums.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vZW51bXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF3RDtBQUNqRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNCQUFzQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHFCQUFxQixzREFBUTtBQUM3QixtQkFBbUIsNERBQVU7QUFDN0IsS0FBSztBQUNMO0FBQ0E7QUFDQSxxQkFBcUIsc0RBQVE7QUFDN0IsbUJBQW1CLDREQUFVO0FBQzdCLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCLHNEQUFRO0FBQzdCLG1CQUFtQiw0REFBVTtBQUM3QixLQUFLO0FBQ0w7QUFDQTtBQUNBLHFCQUFxQixzREFBUTtBQUM3QixtQkFBbUIsNERBQVU7QUFDN0IsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQ3RCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUNoQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnREFBZ0Q7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0NBQWtDO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL2NvbW1vbi9kaXN0L2VzbS9lbnVtcy5qcz8zY2Q1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJJR0lOVF8wLCBoZXhUb0J5dGVzIH0gZnJvbSAnQGV0aGVyZXVtanMvdXRpbCc7XG5leHBvcnQgdmFyIENoYWluO1xuKGZ1bmN0aW9uIChDaGFpbikge1xuICAgIENoYWluW0NoYWluW1wiTWFpbm5ldFwiXSA9IDFdID0gXCJNYWlubmV0XCI7XG4gICAgQ2hhaW5bQ2hhaW5bXCJHb2VybGlcIl0gPSA1XSA9IFwiR29lcmxpXCI7XG4gICAgQ2hhaW5bQ2hhaW5bXCJTZXBvbGlhXCJdID0gMTExNTUxMTFdID0gXCJTZXBvbGlhXCI7XG4gICAgQ2hhaW5bQ2hhaW5bXCJIb2xlc2t5XCJdID0gMTcwMDBdID0gXCJIb2xlc2t5XCI7XG59KShDaGFpbiB8fCAoQ2hhaW4gPSB7fSkpO1xuLy8gSGF2aW5nIHRoaXMgaW5mbyBhcyByZWNvcmQgd2lsbCBmb3JjZSB0eXBlc2NyaXB0IHRvIG1ha2Ugc3VyZSBubyBjaGFpbiBpcyBtaXNzZWRcbi8qKlxuICogR2VuZXNpc1N0YXRlIGluZm8gYWJvdXQgd2VsbCBrbm93biBldGhlcmV1bSBjaGFpbnNcbiAqL1xuZXhwb3J0IGNvbnN0IENoYWluR2VuZXNpcyA9IHtcbiAgICBbQ2hhaW4uTWFpbm5ldF06IHtcbiAgICAgICAgbmFtZTogJ21haW5uZXQnLFxuICAgICAgICBibG9ja051bWJlcjogQklHSU5UXzAsXG4gICAgICAgIHN0YXRlUm9vdDogaGV4VG9CeXRlcygnMHhkN2Y4OTc0ZmI1YWM3OGQ5YWMwOTliOWFkNTAxOGJlZGMyY2UwYTcyZGFkMTgyN2ExNzA5ZGEzMDU4MGYwNTQ0JyksXG4gICAgfSxcbiAgICBbQ2hhaW4uR29lcmxpXToge1xuICAgICAgICBuYW1lOiAnZ29lcmxpJyxcbiAgICAgICAgYmxvY2tOdW1iZXI6IEJJR0lOVF8wLFxuICAgICAgICBzdGF0ZVJvb3Q6IGhleFRvQnl0ZXMoJzB4NWQ2Y2RlZDU4NWU3M2M0ZTMyMmMzMGMyZjc4MmEzMzYzMTZmMTdkZDg1YTQ4NjNiOWQ4MzhkMmQ0YjhiMzAwOCcpLFxuICAgIH0sXG4gICAgW0NoYWluLlNlcG9saWFdOiB7XG4gICAgICAgIG5hbWU6ICdzZXBvbGlhJyxcbiAgICAgICAgYmxvY2tOdW1iZXI6IEJJR0lOVF8wLFxuICAgICAgICBzdGF0ZVJvb3Q6IGhleFRvQnl0ZXMoJzB4NWViNmUzNzFhNjk4YjhkNjhmNjY1MTkyMzUwZmZjZWNiYmJmMzIyOTE2ZjRiNTFiZDc5YmI2ODg3ZGEzZjQ5NCcpLFxuICAgIH0sXG4gICAgW0NoYWluLkhvbGVza3ldOiB7XG4gICAgICAgIG5hbWU6ICdob2xlc2t5JyxcbiAgICAgICAgYmxvY2tOdW1iZXI6IEJJR0lOVF8wLFxuICAgICAgICBzdGF0ZVJvb3Q6IGhleFRvQnl0ZXMoJzB4NjlkOGM5ZDcyZjZmYTRhZDQyZDQ3MDJiNDMzNzA3MjEyZjkwZGIzOTVlYjU0ZGMyMGJjODVkZTI1Mzc4ODc4MycpLFxuICAgIH0sXG59O1xuZXhwb3J0IHZhciBIYXJkZm9yaztcbihmdW5jdGlvbiAoSGFyZGZvcmspIHtcbiAgICBIYXJkZm9ya1tcIkNoYWluc3RhcnRcIl0gPSBcImNoYWluc3RhcnRcIjtcbiAgICBIYXJkZm9ya1tcIkhvbWVzdGVhZFwiXSA9IFwiaG9tZXN0ZWFkXCI7XG4gICAgSGFyZGZvcmtbXCJEYW9cIl0gPSBcImRhb1wiO1xuICAgIEhhcmRmb3JrW1wiVGFuZ2VyaW5lV2hpc3RsZVwiXSA9IFwidGFuZ2VyaW5lV2hpc3RsZVwiO1xuICAgIEhhcmRmb3JrW1wiU3B1cmlvdXNEcmFnb25cIl0gPSBcInNwdXJpb3VzRHJhZ29uXCI7XG4gICAgSGFyZGZvcmtbXCJCeXphbnRpdW1cIl0gPSBcImJ5emFudGl1bVwiO1xuICAgIEhhcmRmb3JrW1wiQ29uc3RhbnRpbm9wbGVcIl0gPSBcImNvbnN0YW50aW5vcGxlXCI7XG4gICAgSGFyZGZvcmtbXCJQZXRlcnNidXJnXCJdID0gXCJwZXRlcnNidXJnXCI7XG4gICAgSGFyZGZvcmtbXCJJc3RhbmJ1bFwiXSA9IFwiaXN0YW5idWxcIjtcbiAgICBIYXJkZm9ya1tcIk11aXJHbGFjaWVyXCJdID0gXCJtdWlyR2xhY2llclwiO1xuICAgIEhhcmRmb3JrW1wiQmVybGluXCJdID0gXCJiZXJsaW5cIjtcbiAgICBIYXJkZm9ya1tcIkxvbmRvblwiXSA9IFwibG9uZG9uXCI7XG4gICAgSGFyZGZvcmtbXCJBcnJvd0dsYWNpZXJcIl0gPSBcImFycm93R2xhY2llclwiO1xuICAgIEhhcmRmb3JrW1wiR3JheUdsYWNpZXJcIl0gPSBcImdyYXlHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtbXCJNZXJnZUZvcmtJZFRyYW5zaXRpb25cIl0gPSBcIm1lcmdlRm9ya0lkVHJhbnNpdGlvblwiO1xuICAgIEhhcmRmb3JrW1wiUGFyaXNcIl0gPSBcInBhcmlzXCI7XG4gICAgSGFyZGZvcmtbXCJTaGFuZ2hhaVwiXSA9IFwic2hhbmdoYWlcIjtcbiAgICBIYXJkZm9ya1tcIkNhbmN1blwiXSA9IFwiY2FuY3VuXCI7XG59KShIYXJkZm9yayB8fCAoSGFyZGZvcmsgPSB7fSkpO1xuZXhwb3J0IHZhciBDb25zZW5zdXNUeXBlO1xuKGZ1bmN0aW9uIChDb25zZW5zdXNUeXBlKSB7XG4gICAgQ29uc2Vuc3VzVHlwZVtcIlByb29mT2ZTdGFrZVwiXSA9IFwicG9zXCI7XG4gICAgQ29uc2Vuc3VzVHlwZVtcIlByb29mT2ZXb3JrXCJdID0gXCJwb3dcIjtcbiAgICBDb25zZW5zdXNUeXBlW1wiUHJvb2ZPZkF1dGhvcml0eVwiXSA9IFwicG9hXCI7XG59KShDb25zZW5zdXNUeXBlIHx8IChDb25zZW5zdXNUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgQ29uc2Vuc3VzQWxnb3JpdGhtO1xuKGZ1bmN0aW9uIChDb25zZW5zdXNBbGdvcml0aG0pIHtcbiAgICBDb25zZW5zdXNBbGdvcml0aG1bXCJFdGhhc2hcIl0gPSBcImV0aGFzaFwiO1xuICAgIENvbnNlbnN1c0FsZ29yaXRobVtcIkNsaXF1ZVwiXSA9IFwiY2xpcXVlXCI7XG4gICAgQ29uc2Vuc3VzQWxnb3JpdGhtW1wiQ2FzcGVyXCJdID0gXCJjYXNwZXJcIjtcbn0pKENvbnNlbnN1c0FsZ29yaXRobSB8fCAoQ29uc2Vuc3VzQWxnb3JpdGhtID0ge30pKTtcbmV4cG9ydCB2YXIgQ3VzdG9tQ2hhaW47XG4oZnVuY3Rpb24gKEN1c3RvbUNoYWluKSB7XG4gICAgLyoqXG4gICAgICogUG9seWdvbiAoTWF0aWMpIE1haW5uZXRcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5tYXRpYy5uZXR3b3JrL2RvY3MvZGV2ZWxvcC9uZXR3b3JrLWRldGFpbHMvbmV0d29yaylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIlBvbHlnb25NYWlubmV0XCJdID0gXCJwb2x5Z29uLW1haW5uZXRcIjtcbiAgICAvKipcbiAgICAgKiBQb2x5Z29uIChNYXRpYykgTXVtYmFpIFRlc3RuZXRcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5tYXRpYy5uZXR3b3JrL2RvY3MvZGV2ZWxvcC9uZXR3b3JrLWRldGFpbHMvbmV0d29yaylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIlBvbHlnb25NdW1iYWlcIl0gPSBcInBvbHlnb24tbXVtYmFpXCI7XG4gICAgLyoqXG4gICAgICogQXJiaXRydW0gT25lIC0gbWFpbm5ldCBmb3IgQXJiaXRydW0gcm9sbC11cFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIub2ZmY2hhaW5sYWJzLmNvbS9wdWJsaWMtY2hhaW5zKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiQXJiaXRydW1PbmVcIl0gPSBcImFyYml0cnVtLW9uZVwiO1xuICAgIC8qKlxuICAgICAqIHhEYWkgRVZNIHNpZGVjaGFpbiB3aXRoIGEgbmF0aXZlIHN0YWJsZSB0b2tlblxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly93d3cueGRhaWNoYWluLmNvbS8pXG4gICAgICovXG4gICAgQ3VzdG9tQ2hhaW5bXCJ4RGFpQ2hhaW5cIl0gPSBcIngtZGFpLWNoYWluXCI7XG4gICAgLyoqXG4gICAgICogT3B0aW1pc3RpYyBLb3ZhbiAtIHRlc3RuZXQgZm9yIE9wdGltaXNtIHJvbGwtdXBcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vY29tbXVuaXR5Lm9wdGltaXNtLmlvL2RvY3MvZGV2ZWxvcGVycy90dXRvcmlhbHMuaHRtbClcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIk9wdGltaXN0aWNLb3ZhblwiXSA9IFwib3B0aW1pc3RpYy1rb3ZhblwiO1xuICAgIC8qKlxuICAgICAqIE9wdGltaXN0aWMgRXRoZXJldW0gLSBtYWlubmV0IGZvciBPcHRpbWlzbSByb2xsLXVwXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL2NvbW11bml0eS5vcHRpbWlzbS5pby9kb2NzL2RldmVsb3BlcnMvdHV0b3JpYWxzLmh0bWwpXG4gICAgICovXG4gICAgQ3VzdG9tQ2hhaW5bXCJPcHRpbWlzdGljRXRoZXJldW1cIl0gPSBcIm9wdGltaXN0aWMtZXRoZXJldW1cIjtcbn0pKEN1c3RvbUNoYWluIHx8IChDdXN0b21DaGFpbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hardforks: function() { return /* binding */ hardforks; }\n/* harmony export */ });\nvar Status;\n(function (Status) {\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nconst hardforks = {\n    chainstart: {\n        name: 'chainstart',\n        comment: 'Start of the Ethereum main chain',\n        url: '',\n        status: Status.Final,\n        gasConfig: {\n            minGasLimit: {\n                v: 5000,\n                d: 'Minimum the gas limit may ever be',\n            },\n            gasLimitBoundDivisor: {\n                v: 1024,\n                d: 'The bound divisor of the gas limit, used in update calculations',\n            },\n            maxRefundQuotient: {\n                v: 2,\n                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',\n            },\n        },\n        gasPrices: {\n            base: {\n                v: 2,\n                d: 'Gas base cost, used e.g. for ChainID opcode (Istanbul)',\n            },\n            exp: {\n                v: 10,\n                d: 'Base fee of the EXP opcode',\n            },\n            expByte: {\n                v: 10,\n                d: 'Times ceil(log256(exponent)) for the EXP instruction',\n            },\n            keccak256: {\n                v: 30,\n                d: 'Base fee of the SHA3 opcode',\n            },\n            keccak256Word: {\n                v: 6,\n                d: \"Once per word of the SHA3 operation's data\",\n            },\n            sload: {\n                v: 50,\n                d: 'Base fee of the SLOAD opcode',\n            },\n            sstoreSet: {\n                v: 20000,\n                d: 'Once per SSTORE operation if the zeroness changes from zero',\n            },\n            sstoreReset: {\n                v: 5000,\n                d: 'Once per SSTORE operation if the zeroness does not change from zero',\n            },\n            sstoreRefund: {\n                v: 15000,\n                d: 'Once per SSTORE operation if the zeroness changes to zero',\n            },\n            jumpdest: {\n                v: 1,\n                d: 'Base fee of the JUMPDEST opcode',\n            },\n            log: {\n                v: 375,\n                d: 'Base fee of the LOG opcode',\n            },\n            logData: {\n                v: 8,\n                d: \"Per byte in a LOG* operation's data\",\n            },\n            logTopic: {\n                v: 375,\n                d: 'Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas',\n            },\n            create: {\n                v: 32000,\n                d: 'Base fee of the CREATE opcode',\n            },\n            call: {\n                v: 40,\n                d: 'Base fee of the CALL opcode',\n            },\n            callStipend: {\n                v: 2300,\n                d: 'Free gas given at beginning of call',\n            },\n            callValueTransfer: {\n                v: 9000,\n                d: 'Paid for CALL when the value transfor is non-zero',\n            },\n            callNewAccount: {\n                v: 25000,\n                d: \"Paid for CALL when the destination address didn't exist prior\",\n            },\n            selfdestructRefund: {\n                v: 24000,\n                d: 'Refunded following a selfdestruct operation',\n            },\n            memory: {\n                v: 3,\n                d: 'Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL',\n            },\n            quadCoeffDiv: {\n                v: 512,\n                d: 'Divisor for the quadratic particle of the memory cost equation',\n            },\n            createData: {\n                v: 200,\n                d: '',\n            },\n            tx: {\n                v: 21000,\n                d: 'Per transaction. NOTE: Not payable on data of calls between transactions',\n            },\n            txCreation: {\n                v: 32000,\n                d: 'The cost of creating a contract via tx',\n            },\n            txDataZero: {\n                v: 4,\n                d: 'Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions',\n            },\n            txDataNonZero: {\n                v: 68,\n                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',\n            },\n            copy: {\n                v: 3,\n                d: 'Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added',\n            },\n            ecRecover: {\n                v: 3000,\n                d: '',\n            },\n            sha256: {\n                v: 60,\n                d: '',\n            },\n            sha256Word: {\n                v: 12,\n                d: '',\n            },\n            ripemd160: {\n                v: 600,\n                d: '',\n            },\n            ripemd160Word: {\n                v: 120,\n                d: '',\n            },\n            identity: {\n                v: 15,\n                d: '',\n            },\n            identityWord: {\n                v: 3,\n                d: '',\n            },\n            stop: {\n                v: 0,\n                d: 'Base fee of the STOP opcode',\n            },\n            add: {\n                v: 3,\n                d: 'Base fee of the ADD opcode',\n            },\n            mul: {\n                v: 5,\n                d: 'Base fee of the MUL opcode',\n            },\n            sub: {\n                v: 3,\n                d: 'Base fee of the SUB opcode',\n            },\n            div: {\n                v: 5,\n                d: 'Base fee of the DIV opcode',\n            },\n            sdiv: {\n                v: 5,\n                d: 'Base fee of the SDIV opcode',\n            },\n            mod: {\n                v: 5,\n                d: 'Base fee of the MOD opcode',\n            },\n            smod: {\n                v: 5,\n                d: 'Base fee of the SMOD opcode',\n            },\n            addmod: {\n                v: 8,\n                d: 'Base fee of the ADDMOD opcode',\n            },\n            mulmod: {\n                v: 8,\n                d: 'Base fee of the MULMOD opcode',\n            },\n            signextend: {\n                v: 5,\n                d: 'Base fee of the SIGNEXTEND opcode',\n            },\n            lt: {\n                v: 3,\n                d: 'Base fee of the LT opcode',\n            },\n            gt: {\n                v: 3,\n                d: 'Base fee of the GT opcode',\n            },\n            slt: {\n                v: 3,\n                d: 'Base fee of the SLT opcode',\n            },\n            sgt: {\n                v: 3,\n                d: 'Base fee of the SGT opcode',\n            },\n            eq: {\n                v: 3,\n                d: 'Base fee of the EQ opcode',\n            },\n            iszero: {\n                v: 3,\n                d: 'Base fee of the ISZERO opcode',\n            },\n            and: {\n                v: 3,\n                d: 'Base fee of the AND opcode',\n            },\n            or: {\n                v: 3,\n                d: 'Base fee of the OR opcode',\n            },\n            xor: {\n                v: 3,\n                d: 'Base fee of the XOR opcode',\n            },\n            not: {\n                v: 3,\n                d: 'Base fee of the NOT opcode',\n            },\n            byte: {\n                v: 3,\n                d: 'Base fee of the BYTE opcode',\n            },\n            address: {\n                v: 2,\n                d: 'Base fee of the ADDRESS opcode',\n            },\n            balance: {\n                v: 20,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            origin: {\n                v: 2,\n                d: 'Base fee of the ORIGIN opcode',\n            },\n            caller: {\n                v: 2,\n                d: 'Base fee of the CALLER opcode',\n            },\n            callvalue: {\n                v: 2,\n                d: 'Base fee of the CALLVALUE opcode',\n            },\n            calldataload: {\n                v: 3,\n                d: 'Base fee of the CALLDATALOAD opcode',\n            },\n            calldatasize: {\n                v: 2,\n                d: 'Base fee of the CALLDATASIZE opcode',\n            },\n            calldatacopy: {\n                v: 3,\n                d: 'Base fee of the CALLDATACOPY opcode',\n            },\n            codesize: {\n                v: 2,\n                d: 'Base fee of the CODESIZE opcode',\n            },\n            codecopy: {\n                v: 3,\n                d: 'Base fee of the CODECOPY opcode',\n            },\n            gasprice: {\n                v: 2,\n                d: 'Base fee of the GASPRICE opcode',\n            },\n            extcodesize: {\n                v: 20,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 20,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            blockhash: {\n                v: 20,\n                d: 'Base fee of the BLOCKHASH opcode',\n            },\n            coinbase: {\n                v: 2,\n                d: 'Base fee of the COINBASE opcode',\n            },\n            timestamp: {\n                v: 2,\n                d: 'Base fee of the TIMESTAMP opcode',\n            },\n            number: {\n                v: 2,\n                d: 'Base fee of the NUMBER opcode',\n            },\n            difficulty: {\n                v: 2,\n                d: 'Base fee of the DIFFICULTY opcode',\n            },\n            gaslimit: {\n                v: 2,\n                d: 'Base fee of the GASLIMIT opcode',\n            },\n            pop: {\n                v: 2,\n                d: 'Base fee of the POP opcode',\n            },\n            mload: {\n                v: 3,\n                d: 'Base fee of the MLOAD opcode',\n            },\n            mstore: {\n                v: 3,\n                d: 'Base fee of the MSTORE opcode',\n            },\n            mstore8: {\n                v: 3,\n                d: 'Base fee of the MSTORE8 opcode',\n            },\n            sstore: {\n                v: 0,\n                d: 'Base fee of the SSTORE opcode',\n            },\n            jump: {\n                v: 8,\n                d: 'Base fee of the JUMP opcode',\n            },\n            jumpi: {\n                v: 10,\n                d: 'Base fee of the JUMPI opcode',\n            },\n            pc: {\n                v: 2,\n                d: 'Base fee of the PC opcode',\n            },\n            msize: {\n                v: 2,\n                d: 'Base fee of the MSIZE opcode',\n            },\n            gas: {\n                v: 2,\n                d: 'Base fee of the GAS opcode',\n            },\n            push: {\n                v: 3,\n                d: 'Base fee of the PUSH opcode',\n            },\n            dup: {\n                v: 3,\n                d: 'Base fee of the DUP opcode',\n            },\n            swap: {\n                v: 3,\n                d: 'Base fee of the SWAP opcode',\n            },\n            callcode: {\n                v: 40,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            return: {\n                v: 0,\n                d: 'Base fee of the RETURN opcode',\n            },\n            invalid: {\n                v: 0,\n                d: 'Base fee of the INVALID opcode',\n            },\n            selfdestruct: {\n                v: 0,\n                d: 'Base fee of the SELFDESTRUCT opcode',\n            },\n        },\n        vm: {\n            stackLimit: {\n                v: 1024,\n                d: 'Maximum size of VM stack allowed',\n            },\n            callCreateDepth: {\n                v: 1024,\n                d: 'Maximum depth of call/create stack',\n            },\n            maxExtraDataSize: {\n                v: 32,\n                d: 'Maximum size extra data may be after Genesis',\n            },\n        },\n        pow: {\n            minimumDifficulty: {\n                v: 131072,\n                d: 'The minimum that the difficulty may ever be',\n            },\n            difficultyBoundDivisor: {\n                v: 2048,\n                d: 'The bound divisor of the difficulty, used in the update calculations',\n            },\n            durationLimit: {\n                v: 13,\n                d: 'The decision boundary on the blocktime duration used to determine whether difficulty should go up or not',\n            },\n            epochDuration: {\n                v: 30000,\n                d: 'Duration between proof-of-work epochs',\n            },\n            timebombPeriod: {\n                v: 100000,\n                d: 'Exponential difficulty timebomb period',\n            },\n            minerReward: {\n                v: BigInt('5000000000000000000'),\n                d: 'the amount a miner get rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 0,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    homestead: {\n        name: 'homestead',\n        comment: 'Homestead hardfork with protocol and network changes',\n        url: 'https://eips.ethereum.org/EIPS/eip-606',\n        status: Status.Final,\n        gasPrices: {\n            delegatecall: {\n                v: 40,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n        },\n    },\n    dao: {\n        name: 'dao',\n        comment: 'DAO rescue hardfork',\n        url: 'https://eips.ethereum.org/EIPS/eip-779',\n        status: Status.Final,\n    },\n    tangerineWhistle: {\n        name: 'tangerineWhistle',\n        comment: 'Hardfork with gas cost changes for IO-heavy operations',\n        url: 'https://eips.ethereum.org/EIPS/eip-608',\n        status: Status.Final,\n        gasPrices: {\n            sload: {\n                v: 200,\n                d: 'Once per SLOAD operation',\n            },\n            call: {\n                v: 700,\n                d: 'Once per CALL operation & message call transaction',\n            },\n            extcodesize: {\n                v: 700,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 700,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            balance: {\n                v: 400,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            delegatecall: {\n                v: 700,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n            callcode: {\n                v: 700,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            selfdestruct: {\n                v: 5000,\n                d: 'Base fee of the SELFDESTRUCT opcode',\n            },\n        },\n    },\n    spuriousDragon: {\n        name: 'spuriousDragon',\n        comment: 'HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit',\n        url: 'https://eips.ethereum.org/EIPS/eip-607',\n        status: Status.Final,\n        gasPrices: {\n            expByte: {\n                v: 50,\n                d: 'Times ceil(log256(exponent)) for the EXP instruction',\n            },\n        },\n        vm: {\n            maxCodeSize: {\n                v: 24576,\n                d: 'Maximum length of contract code',\n            },\n        },\n    },\n    byzantium: {\n        name: 'byzantium',\n        comment: 'Hardfork with new precompiles, instructions and other protocol changes',\n        url: 'https://eips.ethereum.org/EIPS/eip-609',\n        status: Status.Final,\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 20,\n                d: 'Gquaddivisor from modexp precompile for gas calculation',\n            },\n            ecAdd: {\n                v: 500,\n                d: 'Gas costs for curve addition precompile',\n            },\n            ecMul: {\n                v: 40000,\n                d: 'Gas costs for curve multiplication precompile',\n            },\n            ecPairing: {\n                v: 100000,\n                d: 'Base gas costs for curve pairing precompile',\n            },\n            ecPairingWord: {\n                v: 80000,\n                d: 'Gas costs regarding curve pairing precompile input length',\n            },\n            revert: {\n                v: 0,\n                d: 'Base fee of the REVERT opcode',\n            },\n            staticcall: {\n                v: 700,\n                d: 'Base fee of the STATICCALL opcode',\n            },\n            returndatasize: {\n                v: 2,\n                d: 'Base fee of the RETURNDATASIZE opcode',\n            },\n            returndatacopy: {\n                v: 3,\n                d: 'Base fee of the RETURNDATACOPY opcode',\n            },\n        },\n        pow: {\n            minerReward: {\n                v: BigInt('3000000000000000000'),\n                d: 'the amount a miner get rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 3000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    constantinople: {\n        name: 'constantinople',\n        comment: 'Postponed hardfork including EIP-1283 (SSTORE gas metering changes)',\n        url: 'https://eips.ethereum.org/EIPS/eip-1013',\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: 200,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            netSstoreInitGas: {\n                v: 20000,\n                d: 'Once per SSTORE operation from clean zero',\n            },\n            netSstoreCleanGas: {\n                v: 5000,\n                d: 'Once per SSTORE operation from clean non-zero',\n            },\n            netSstoreDirtyGas: {\n                v: 200,\n                d: 'Once per SSTORE operation from dirty',\n            },\n            netSstoreClearRefund: {\n                v: 15000,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n            netSstoreResetRefund: {\n                v: 4800,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            netSstoreResetClearRefund: {\n                v: 19800,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            shl: {\n                v: 3,\n                d: 'Base fee of the SHL opcode',\n            },\n            shr: {\n                v: 3,\n                d: 'Base fee of the SHR opcode',\n            },\n            sar: {\n                v: 3,\n                d: 'Base fee of the SAR opcode',\n            },\n            extcodehash: {\n                v: 400,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            create2: {\n                v: 32000,\n                d: 'Base fee of the CREATE2 opcode',\n            },\n        },\n        pow: {\n            minerReward: {\n                v: BigInt('2000000000000000000'),\n                d: 'The amount a miner gets rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 5000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    petersburg: {\n        name: 'petersburg',\n        comment: 'Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople',\n        url: 'https://eips.ethereum.org/EIPS/eip-1716',\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreInitGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreCleanGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreDirtyGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreClearRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreResetRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreResetClearRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n        },\n    },\n    istanbul: {\n        name: 'istanbul',\n        comment: 'HF targeted for December 2019 following the Constantinople/Petersburg HF',\n        url: 'https://eips.ethereum.org/EIPS/eip-1679',\n        status: Status.Final,\n        gasConfig: {},\n        gasPrices: {\n            blake2Round: {\n                v: 1,\n                d: 'Gas cost per round for the Blake2 F precompile',\n            },\n            ecAdd: {\n                v: 150,\n                d: 'Gas costs for curve addition precompile',\n            },\n            ecMul: {\n                v: 6000,\n                d: 'Gas costs for curve multiplication precompile',\n            },\n            ecPairing: {\n                v: 45000,\n                d: 'Base gas costs for curve pairing precompile',\n            },\n            ecPairingWord: {\n                v: 34000,\n                d: 'Gas costs regarding curve pairing precompile input length',\n            },\n            txDataNonZero: {\n                v: 16,\n                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',\n            },\n            sstoreSentryGasEIP2200: {\n                v: 2300,\n                d: 'Minimum gas required to be present for an SSTORE call, not consumed',\n            },\n            sstoreNoopGasEIP2200: {\n                v: 800,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 800,\n                d: 'Once per SSTORE operation if a dirty value is changed',\n            },\n            sstoreInitGasEIP2200: {\n                v: 20000,\n                d: 'Once per SSTORE operation from clean zero to non-zero',\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19200,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            sstoreCleanGasEIP2200: {\n                v: 5000,\n                d: 'Once per SSTORE operation from clean non-zero to something else',\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4200,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            sstoreClearRefundEIP2200: {\n                v: 15000,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n            balance: {\n                v: 700,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            extcodehash: {\n                v: 700,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            chainid: {\n                v: 2,\n                d: 'Base fee of the CHAINID opcode',\n            },\n            selfbalance: {\n                v: 5,\n                d: 'Base fee of the SELFBALANCE opcode',\n            },\n            sload: {\n                v: 800,\n                d: 'Base fee of the SLOAD opcode',\n            },\n        },\n    },\n    muirGlacier: {\n        name: 'muirGlacier',\n        comment: 'HF to delay the difficulty bomb',\n        url: 'https://eips.ethereum.org/EIPS/eip-2384',\n        status: Status.Final,\n        pow: {\n            difficultyBombDelay: {\n                v: 9000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    berlin: {\n        name: 'berlin',\n        comment: 'HF targeted for July 2020 following the Muir Glacier HF',\n        url: 'https://eips.ethereum.org/EIPS/eip-2070',\n        status: Status.Final,\n        eips: [2565, 2929, 2718, 2930],\n    },\n    london: {\n        name: 'london',\n        comment: 'HF targeted for July 2021 following the Berlin fork',\n        url: 'https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md',\n        status: Status.Final,\n        eips: [1559, 3198, 3529, 3541],\n    },\n    arrowGlacier: {\n        name: 'arrowGlacier',\n        comment: 'HF to delay the difficulty bomb',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md',\n        status: Status.Final,\n        eips: [4345],\n    },\n    grayGlacier: {\n        name: 'grayGlacier',\n        comment: 'Delaying the difficulty bomb to Mid September 2022',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md',\n        status: Status.Final,\n        eips: [5133],\n    },\n    paris: {\n        name: 'paris',\n        comment: 'Hardfork to upgrade the consensus mechanism to Proof-of-Stake',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md',\n        status: Status.Final,\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n            casper: {},\n        },\n        eips: [3675, 4399],\n    },\n    mergeForkIdTransition: {\n        name: 'mergeForkIdTransition',\n        comment: 'Pre-merge hardfork to fork off non-upgraded clients',\n        url: 'https://eips.ethereum.org/EIPS/eip-3675',\n        status: Status.Final,\n        eips: [],\n    },\n    shanghai: {\n        name: 'shanghai',\n        comment: 'Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md',\n        status: Status.Final,\n        eips: [3651, 3855, 3860, 4895],\n    },\n    cancun: {\n        name: 'cancun',\n        comment: 'Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md',\n        status: Status.Final,\n        eips: [1153, 4844, 4788, 5656, 6780, 7516],\n    },\n};\n//# sourceMappingURL=hardforks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/hardforks.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/common.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _common_js__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _common_js__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _enums_js__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _enums_js__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interfaces.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _interfaces_js__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _interfaces_js__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types_js__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types_js__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _utils_js__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _utils_js__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0Q7QUFDSztBQUNMO0FBQ0E7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL2luZGV4LmpzP2M4MmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9jb21tb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/**\n * External Interfaces for other EthereumJS libraries\n */\n\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW50ZXJmYWNlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ1U7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vaW50ZXJmYWNlcy5qcz83ZmQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgSW50ZXJmYWNlcyBmb3Igb3RoZXIgRXRoZXJldW1KUyBsaWJyYXJpZXNcbiAqL1xuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/interfaces.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL3R5cGVzLmpzPzFjMTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/types.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesis: function() { return /* binding */ parseGethGenesis; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/enums.js\");\n\n\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n    if (!nonce || nonce === '0x0') {\n        return '0x0000000000000000';\n    }\n    if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(nonce)) {\n        return '0x' + (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.stripHexPrefix)(nonce).padStart(16, '0');\n    }\n    return '0x' + nonce.padStart(16, '0');\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, excessBlobGas, } = json;\n    let { extraData, timestamp, nonce } = json;\n    const genesisTimestamp = Number(timestamp);\n    const { chainId } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    if (extraData === '') {\n        extraData = '0x';\n    }\n    // geth may use number for timestamp\n    if (!(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(timestamp)) {\n        timestamp = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.intToHex)(parseInt(timestamp));\n    }\n    // geth may not give us a nonce strictly formatted to an 8 byte hex string\n    if (nonce.length !== 18) {\n        nonce = formatNonce(nonce);\n    }\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        genesis: {\n            timestamp,\n            gasLimit,\n            difficulty,\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas,\n            excessBlobGas,\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: config.clique !== undefined\n            ? {\n                type: 'poa',\n                algorithm: 'clique',\n                clique: {\n                    // The recent geth genesis seems to be using blockperiodseconds\n                    // and epochlength for clique specification\n                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                    period: config.clique.period ?? config.clique.blockperiodseconds,\n                    epoch: config.clique.epoch ?? config.clique.epochlength,\n                },\n            }\n            : {\n                type: 'pow',\n                algorithm: 'ethash',\n                ethash: {},\n            },\n    };\n    const forkMap = {\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Homestead]: { name: 'homesteadBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Dao]: { name: 'daoForkBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Petersburg]: { name: 'petersburgBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Istanbul]: { name: 'istanbulBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Berlin]: { name: 'berlinBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.London]: { name: 'londonBlock' },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Cancun]: { name: 'cancunTime', postMerge: true, isTimestamp: true },\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames\n        .map((nameBlock) => ({\n        name: forkMapRev[nameBlock],\n        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n            ? null\n            : config[nameBlock],\n        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n            ? config[nameBlock]\n            : undefined,\n    }))\n        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);\n    for (const hf of params.hardforks) {\n        if (hf.timestamp === genesisTimestamp) {\n            hf.timestamp = 0;\n        }\n    }\n    params.hardforks.sort(function (a, b) {\n        return (a.block ?? Infinity) - (b.block ?? Infinity);\n    });\n    params.hardforks.sort(function (a, b) {\n        return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp);\n    });\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Paris,\n            ttd: config.terminalTotalDifficulty,\n            block: null,\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        }\n        else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork?.name;\n    params.hardforks.unshift({ name: _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork.Chainstart, block: 0 });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        const required = ['config', 'difficulty', 'gasLimit', 'nonce', 'alloc'];\n        if (required.some((field) => !(field in json))) {\n            const missingField = required.filter((field) => !(field in json));\n            throw new Error(`Invalid format, expected geth genesis field \"${missingField}\" missing`);\n        }\n        if (name !== undefined) {\n            json.name = name;\n        }\n        return parseGethParams(json, mergeForkIdPostMerge);\n    }\n    catch (e) {\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9jb21tb24vZGlzdC9lc20vdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJFO0FBQ3JDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0RBQWE7QUFDckIsc0JBQXNCLGdFQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUZBQXVGO0FBQ25HLFVBQVUsOEJBQThCO0FBQ3hDO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFhO0FBQ3RCLG9CQUFvQiwwREFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTLCtDQUFRLGVBQWUsd0JBQXdCO0FBQ3hELFNBQVMsK0NBQVEsU0FBUyxzQkFBc0I7QUFDaEQsU0FBUywrQ0FBUSxzQkFBc0IscUJBQXFCO0FBQzVELFNBQVMsK0NBQVEsb0JBQW9CLHFCQUFxQjtBQUMxRCxTQUFTLCtDQUFRLGVBQWUsd0JBQXdCO0FBQ3hELFNBQVMsK0NBQVEsb0JBQW9CLDZCQUE2QjtBQUNsRSxTQUFTLCtDQUFRLGdCQUFnQix5QkFBeUI7QUFDMUQsU0FBUywrQ0FBUSxjQUFjLHVCQUF1QjtBQUN0RCxTQUFTLCtDQUFRLGlCQUFpQiwwQkFBMEI7QUFDNUQsU0FBUywrQ0FBUSxZQUFZLHFCQUFxQjtBQUNsRCxTQUFTLCtDQUFRLFlBQVkscUJBQXFCO0FBQ2xELFNBQVMsK0NBQVEsMkJBQTJCLHlEQUF5RDtBQUNyRyxTQUFTLCtDQUFRLGNBQWMsMERBQTBEO0FBQ3pGLFNBQVMsK0NBQVEsWUFBWSx3REFBd0Q7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwrQ0FBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE1BQU0sK0NBQVEsdUJBQXVCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLGFBQWE7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsVUFBVTtBQUNwRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvY29tbW9uL2Rpc3QvZXNtL3V0aWxzLmpzPzM3OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW50VG9IZXgsIGlzSGV4UHJlZml4ZWQsIHN0cmlwSGV4UHJlZml4IH0gZnJvbSAnQGV0aGVyZXVtanMvdXRpbCc7XG5pbXBvcnQgeyBIYXJkZm9yayB9IGZyb20gJy4vZW51bXMuanMnO1xuLyoqXG4gKiBUcmFuc2Zvcm1zIEdldGggZm9ybWF0dGVkIG5vbmNlIChpLmUuIGhleCBzdHJpbmcpIHRvIDggYnl0ZSAweC1wcmVmaXhlZCBzdHJpbmcgdXNlZCBpbnRlcm5hbGx5XG4gKiBAcGFyYW0gbm9uY2Ugc3RyaW5nIHBhcnNlZCBmcm9tIHRoZSBHZXRoIGdlbmVzaXMgZmlsZVxuICogQHJldHVybnMgbm9uY2UgYXMgYSAweC1wcmVmaXhlZCA4IGJ5dGUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdE5vbmNlKG5vbmNlKSB7XG4gICAgaWYgKCFub25jZSB8fCBub25jZSA9PT0gJzB4MCcpIHtcbiAgICAgICAgcmV0dXJuICcweDAwMDAwMDAwMDAwMDAwMDAnO1xuICAgIH1cbiAgICBpZiAoaXNIZXhQcmVmaXhlZChub25jZSkpIHtcbiAgICAgICAgcmV0dXJuICcweCcgKyBzdHJpcEhleFByZWZpeChub25jZSkucGFkU3RhcnQoMTYsICcwJyk7XG4gICAgfVxuICAgIHJldHVybiAnMHgnICsgbm9uY2UucGFkU3RhcnQoMTYsICcwJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIEdldGggZ2VuZXNpcyBwYXJhbWV0ZXJzIHRvIGFuIEV0aGVyZXVtSlMgY29tcGF0aWJsZSBgQ29tbW9uT3B0c2Agb2JqZWN0XG4gKiBAcGFyYW0ganNvbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBHZXRoIGdlbmVzaXMgZmlsZVxuICogQHBhcmFtIG9wdGlvbmFsIG1lcmdlRm9ya0lkUG9zdE1lcmdlIHdoaWNoIGNsYXJpZmllcyB0aGUgcGxhY2VtZW50IG9mIE1lcmdlRm9ya0lkVHJhbnNpdGlvblxuICogaGFyZGZvcmssIHdoaWNoIGJ5IGRlZmF1bHQgaXMgcG9zdCBtZXJnZSBhcyB3aXRoIHRoZSBtZXJnZWQgZXRoIG5ldHdvcmtzIGJ1dCBjb3VsZCBhbHNvIGNvbWVcbiAqIGJlZm9yZSBtZXJnZSBsaWtlIGluIGtpbG4gZ2VuZXNpc1xuICogQHJldHVybnMgZ2VuZXNpcyBwYXJhbWV0ZXJzIGluIGEgYENvbW1vbk9wdHNgIGNvbXBsaWFudCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VHZXRoUGFyYW1zKGpzb24sIG1lcmdlRm9ya0lkUG9zdE1lcmdlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHsgbmFtZSwgY29uZmlnLCBkaWZmaWN1bHR5LCBtaXhIYXNoLCBnYXNMaW1pdCwgY29pbmJhc2UsIGJhc2VGZWVQZXJHYXMsIGV4Y2Vzc0Jsb2JHYXMsIH0gPSBqc29uO1xuICAgIGxldCB7IGV4dHJhRGF0YSwgdGltZXN0YW1wLCBub25jZSB9ID0ganNvbjtcbiAgICBjb25zdCBnZW5lc2lzVGltZXN0YW1wID0gTnVtYmVyKHRpbWVzdGFtcCk7XG4gICAgY29uc3QgeyBjaGFpbklkIH0gPSBjb25maWc7XG4gICAgLy8gZ2V0aCBpcyBub3Qgc3RyaWN0bHkgcHV0dGluZyBlbXB0eSBmaWVsZHMgd2l0aCBhIDB4IHByZWZpeFxuICAgIGlmIChleHRyYURhdGEgPT09ICcnKSB7XG4gICAgICAgIGV4dHJhRGF0YSA9ICcweCc7XG4gICAgfVxuICAgIC8vIGdldGggbWF5IHVzZSBudW1iZXIgZm9yIHRpbWVzdGFtcFxuICAgIGlmICghaXNIZXhQcmVmaXhlZCh0aW1lc3RhbXApKSB7XG4gICAgICAgIHRpbWVzdGFtcCA9IGludFRvSGV4KHBhcnNlSW50KHRpbWVzdGFtcCkpO1xuICAgIH1cbiAgICAvLyBnZXRoIG1heSBub3QgZ2l2ZSB1cyBhIG5vbmNlIHN0cmljdGx5IGZvcm1hdHRlZCB0byBhbiA4IGJ5dGUgaGV4IHN0cmluZ1xuICAgIGlmIChub25jZS5sZW5ndGggIT09IDE4KSB7XG4gICAgICAgIG5vbmNlID0gZm9ybWF0Tm9uY2Uobm9uY2UpO1xuICAgIH1cbiAgICAvLyBFSVAxNTUgYW5kIEVJUDE1OCBhcmUgYm90aCBwYXJ0IG9mIFNwdXJpb3VzIERyYWdvbiBoYXJkZm9yayBhbmQgbXVzdCBvY2N1ciBhdCB0aGUgc2FtZSB0aW1lXG4gICAgLy8gYnV0IGhhdmUgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBpbiBnZXRoIGdlbmVzaXMgcGFyYW1ldGVyc1xuICAgIGlmIChjb25maWcuZWlwMTU1QmxvY2sgIT09IGNvbmZpZy5laXAxNThCbG9jaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VJUDE1NSBibG9jayBudW1iZXIgbXVzdCBlcXVhbCBFSVAgMTU4IGJsb2NrIG51bWJlciBzaW5jZSBib3RoIGFyZSBwYXJ0IG9mIFNwdXJpb3VzRHJhZ29uIGhhcmRmb3JrIGFuZCB0aGUgY2xpZW50IG9ubHkgc3VwcG9ydHMgYWN0aXZhdGluZyB0aGUgZnVsbCBoYXJkZm9yaycpO1xuICAgIH1cbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNoYWluSWQsXG4gICAgICAgIG5ldHdvcmtJZDogY2hhaW5JZCxcbiAgICAgICAgZ2VuZXNpczoge1xuICAgICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgICAgZ2FzTGltaXQsXG4gICAgICAgICAgICBkaWZmaWN1bHR5LFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBleHRyYURhdGEsXG4gICAgICAgICAgICBtaXhIYXNoLFxuICAgICAgICAgICAgY29pbmJhc2UsXG4gICAgICAgICAgICBiYXNlRmVlUGVyR2FzLFxuICAgICAgICAgICAgZXhjZXNzQmxvYkdhcyxcbiAgICAgICAgfSxcbiAgICAgICAgaGFyZGZvcms6IHVuZGVmaW5lZCxcbiAgICAgICAgaGFyZGZvcmtzOiBbXSxcbiAgICAgICAgYm9vdHN0cmFwTm9kZXM6IFtdLFxuICAgICAgICBjb25zZW5zdXM6IGNvbmZpZy5jbGlxdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BvYScsXG4gICAgICAgICAgICAgICAgYWxnb3JpdGhtOiAnY2xpcXVlJyxcbiAgICAgICAgICAgICAgICBjbGlxdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlY2VudCBnZXRoIGdlbmVzaXMgc2VlbXMgdG8gYmUgdXNpbmcgYmxvY2twZXJpb2RzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBlcG9jaGxlbmd0aCBmb3IgY2xpcXVlIHNwZWNpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gc2VlOiBodHRwczovL2hhY2ttZC5pby9QcVpnTXBua1NXQ1d2NWpvSm9GeW1RXG4gICAgICAgICAgICAgICAgICAgIHBlcmlvZDogY29uZmlnLmNsaXF1ZS5wZXJpb2QgPz8gY29uZmlnLmNsaXF1ZS5ibG9ja3BlcmlvZHNlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgIGVwb2NoOiBjb25maWcuY2xpcXVlLmVwb2NoID8/IGNvbmZpZy5jbGlxdWUuZXBvY2hsZW5ndGgsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdwb3cnLFxuICAgICAgICAgICAgICAgIGFsZ29yaXRobTogJ2V0aGFzaCcsXG4gICAgICAgICAgICAgICAgZXRoYXNoOiB7fSxcbiAgICAgICAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCBmb3JrTWFwID0ge1xuICAgICAgICBbSGFyZGZvcmsuSG9tZXN0ZWFkXTogeyBuYW1lOiAnaG9tZXN0ZWFkQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5EYW9dOiB7IG5hbWU6ICdkYW9Gb3JrQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5UYW5nZXJpbmVXaGlzdGxlXTogeyBuYW1lOiAnZWlwMTUwQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5TcHVyaW91c0RyYWdvbl06IHsgbmFtZTogJ2VpcDE1NUJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuQnl6YW50aXVtXTogeyBuYW1lOiAnYnl6YW50aXVtQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5Db25zdGFudGlub3BsZV06IHsgbmFtZTogJ2NvbnN0YW50aW5vcGxlQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5QZXRlcnNidXJnXTogeyBuYW1lOiAncGV0ZXJzYnVyZ0Jsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuSXN0YW5idWxdOiB7IG5hbWU6ICdpc3RhbmJ1bEJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuTXVpckdsYWNpZXJdOiB7IG5hbWU6ICdtdWlyR2xhY2llckJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuQmVybGluXTogeyBuYW1lOiAnYmVybGluQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5Mb25kb25dOiB7IG5hbWU6ICdsb25kb25CbG9jaycgfSxcbiAgICAgICAgW0hhcmRmb3JrLk1lcmdlRm9ya0lkVHJhbnNpdGlvbl06IHsgbmFtZTogJ21lcmdlRm9ya0Jsb2NrJywgcG9zdE1lcmdlOiBtZXJnZUZvcmtJZFBvc3RNZXJnZSB9LFxuICAgICAgICBbSGFyZGZvcmsuU2hhbmdoYWldOiB7IG5hbWU6ICdzaGFuZ2hhaVRpbWUnLCBwb3N0TWVyZ2U6IHRydWUsIGlzVGltZXN0YW1wOiB0cnVlIH0sXG4gICAgICAgIFtIYXJkZm9yay5DYW5jdW5dOiB7IG5hbWU6ICdjYW5jdW5UaW1lJywgcG9zdE1lcmdlOiB0cnVlLCBpc1RpbWVzdGFtcDogdHJ1ZSB9LFxuICAgIH07XG4gICAgLy8gZm9ya01hcFJldiBpcyB0aGUgbWFwIGZyb20gY29uZmlnIGZpZWxkIG5hbWUgdG8gSGFyZGZvcmtcbiAgICBjb25zdCBmb3JrTWFwUmV2ID0gT2JqZWN0LmtleXMoZm9ya01hcCkucmVkdWNlKChhY2MsIGVsZW0pID0+IHtcbiAgICAgICAgYWNjW2ZvcmtNYXBbZWxlbV0ubmFtZV0gPSBlbGVtO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBjb25maWdIYXJkZm9ya05hbWVzID0gT2JqZWN0LmtleXMoY29uZmlnKS5maWx0ZXIoKGtleSkgPT4gZm9ya01hcFJldltrZXldICE9PSB1bmRlZmluZWQgJiYgY29uZmlnW2tleV0gIT09IHVuZGVmaW5lZCAmJiBjb25maWdba2V5XSAhPT0gbnVsbCk7XG4gICAgcGFyYW1zLmhhcmRmb3JrcyA9IGNvbmZpZ0hhcmRmb3JrTmFtZXNcbiAgICAgICAgLm1hcCgobmFtZUJsb2NrKSA9PiAoe1xuICAgICAgICBuYW1lOiBmb3JrTWFwUmV2W25hbWVCbG9ja10sXG4gICAgICAgIGJsb2NrOiBmb3JrTWFwW2ZvcmtNYXBSZXZbbmFtZUJsb2NrXV0uaXNUaW1lc3RhbXAgPT09IHRydWUgfHwgdHlwZW9mIGNvbmZpZ1tuYW1lQmxvY2tdICE9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IGNvbmZpZ1tuYW1lQmxvY2tdLFxuICAgICAgICB0aW1lc3RhbXA6IGZvcmtNYXBbZm9ya01hcFJldltuYW1lQmxvY2tdXS5pc1RpbWVzdGFtcCA9PT0gdHJ1ZSAmJiB0eXBlb2YgY29uZmlnW25hbWVCbG9ja10gPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IGNvbmZpZ1tuYW1lQmxvY2tdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB9KSlcbiAgICAgICAgLmZpbHRlcigoZm9yaykgPT4gZm9yay5ibG9jayAhPT0gbnVsbCB8fCBmb3JrLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKTtcbiAgICBmb3IgKGNvbnN0IGhmIG9mIHBhcmFtcy5oYXJkZm9ya3MpIHtcbiAgICAgICAgaWYgKGhmLnRpbWVzdGFtcCA9PT0gZ2VuZXNpc1RpbWVzdGFtcCkge1xuICAgICAgICAgICAgaGYudGltZXN0YW1wID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXJhbXMuaGFyZGZvcmtzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChhLmJsb2NrID8/IEluZmluaXR5KSAtIChiLmJsb2NrID8/IEluZmluaXR5KTtcbiAgICB9KTtcbiAgICBwYXJhbXMuaGFyZGZvcmtzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIChhLnRpbWVzdGFtcCA/PyBnZW5lc2lzVGltZXN0YW1wKSAtIChiLnRpbWVzdGFtcCA/PyBnZW5lc2lzVGltZXN0YW1wKTtcbiAgICB9KTtcbiAgICBpZiAoY29uZmlnLnRlcm1pbmFsVG90YWxEaWZmaWN1bHR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gRm9sbG93aW5nIHBvaW50cyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQgZm9yIHBsYWNlbWVudCBvZiBtZXJnZSBoZlxuICAgICAgICAvLyAtIE1lcmdlIGhhcmRmb3JrIGNhbid0IGJlIHBsYWNlZCBhdCBnZW5lc2lzXG4gICAgICAgIC8vIC0gUGxhY2UgbWVyZ2UgaGYgYmVmb3JlIGFueSBoYXJkZm9ya3MgdGhhdCByZXF1aXJlIENMIHBhcnRpY2lwYXRpb24gZm9yIGUuZy4gd2l0aGRyYXdhbHNcbiAgICAgICAgLy8gLSBNZXJnZSBoYXJkZm9yayBoYXMgdG8gYmUgcGxhY2VkIGp1c3QgYWZ0ZXIgZ2VuZXNpcyBpZiBhbnkgb2YgdGhlIGdlbmVzaXMgaGFyZGZvcmtzIG1ha2UgQ0xcbiAgICAgICAgLy8gICBuZWNlc3NhcnkgZm9yIGUuZy4gd2l0aGRyYXdhbHNcbiAgICAgICAgY29uc3QgbWVyZ2VDb25maWcgPSB7XG4gICAgICAgICAgICBuYW1lOiBIYXJkZm9yay5QYXJpcyxcbiAgICAgICAgICAgIHR0ZDogY29uZmlnLnRlcm1pbmFsVG90YWxEaWZmaWN1bHR5LFxuICAgICAgICAgICAgYmxvY2s6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIC8vIE1lcmdlIGhhcmRmb3JrIGhhcyB0byBiZSBwbGFjZWQgYmVmb3JlIGZpcnN0IGhhcmRmb3JrIHRoYXQgaXMgZGVwZW5kZW50IG9uIG1lcmdlXG4gICAgICAgIGNvbnN0IHBvc3RNZXJnZUluZGV4ID0gcGFyYW1zLmhhcmRmb3Jrcy5maW5kSW5kZXgoKGhmKSA9PiBmb3JrTWFwW2hmLm5hbWVdPy5wb3N0TWVyZ2UgPT09IHRydWUpO1xuICAgICAgICBpZiAocG9zdE1lcmdlSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBwYXJhbXMuaGFyZGZvcmtzLnNwbGljZShwb3N0TWVyZ2VJbmRleCwgMCwgbWVyZ2VDb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1zLmhhcmRmb3Jrcy5wdXNoKG1lcmdlQ29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYXRlc3RIYXJkZm9yayA9IHBhcmFtcy5oYXJkZm9ya3MubGVuZ3RoID4gMCA/IHBhcmFtcy5oYXJkZm9ya3Muc2xpY2UoLTEpWzBdIDogdW5kZWZpbmVkO1xuICAgIHBhcmFtcy5oYXJkZm9yayA9IGxhdGVzdEhhcmRmb3JrPy5uYW1lO1xuICAgIHBhcmFtcy5oYXJkZm9ya3MudW5zaGlmdCh7IG5hbWU6IEhhcmRmb3JrLkNoYWluc3RhcnQsIGJsb2NrOiAwIH0pO1xuICAgIHJldHVybiBwYXJhbXM7XG59XG4vKipcbiAqIFBhcnNlcyBhIGdlbmVzaXMuanNvbiBleHBvcnRlZCBmcm9tIEdldGggaW50byBwYXJhbWV0ZXJzIGZvciBDb21tb24gaW5zdGFuY2VcbiAqIEBwYXJhbSBqc29uIHJlcHJlc2VudGluZyB0aGUgR2V0aCBnZW5lc2lzIGZpbGVcbiAqIEBwYXJhbSBuYW1lIG9wdGlvbmFsIGNoYWluIG5hbWVcbiAqIEByZXR1cm5zIHBhcnNlZCBwYXJhbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2V0aEdlbmVzaXMoanNvbiwgbmFtZSwgbWVyZ2VGb3JrSWRQb3N0TWVyZ2UpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXF1aXJlZCA9IFsnY29uZmlnJywgJ2RpZmZpY3VsdHknLCAnZ2FzTGltaXQnLCAnbm9uY2UnLCAnYWxsb2MnXTtcbiAgICAgICAgaWYgKHJlcXVpcmVkLnNvbWUoKGZpZWxkKSA9PiAhKGZpZWxkIGluIGpzb24pKSkge1xuICAgICAgICAgICAgY29uc3QgbWlzc2luZ0ZpZWxkID0gcmVxdWlyZWQuZmlsdGVyKChmaWVsZCkgPT4gIShmaWVsZCBpbiBqc29uKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZm9ybWF0LCBleHBlY3RlZCBnZXRoIGdlbmVzaXMgZmllbGQgXCIke21pc3NpbmdGaWVsZH1cIiBtaXNzaW5nYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAganNvbi5uYW1lID0gbmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VHZXRoUGFyYW1zKGpzb24sIG1lcmdlRm9ya0lkUG9zdE1lcmdlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBwYXJzaW5nIHBhcmFtZXRlcnMgZmlsZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/utils.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: function() { return /* binding */ RLP; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   utils: function() { return /* binding */ utils; }\n/* harmony export */ });\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nconst utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nconst RLP = { encode, decode };\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy9ybHAvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsYUFBYTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixtQkFBbUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxjQUFjO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3JscC9kaXN0L2VzbS9pbmRleC5qcz8wZTJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUkxQIEVuY29kaW5nIGJhc2VkIG9uIGh0dHBzOi8vZXRoZXJldW0ub3JnL2VuL2RldmVsb3BlcnMvZG9jcy9kYXRhLXN0cnVjdHVyZXMtYW5kLWVuY29kaW5nL3JscC9cbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW4gZGF0YSwgY29udmVydHMgaXQgdG8gVWludDhBcnJheSBpZiBub3QsXG4gKiBhbmQgYWRkcyBhIGxlbmd0aCBmb3IgcmVjdXJzaW9uLlxuICogQHBhcmFtIGlucHV0IFdpbGwgYmUgY29udmVydGVkIHRvIFVpbnQ4QXJyYXlcbiAqIEByZXR1cm5zIFVpbnQ4QXJyYXkgb2YgZW5jb2RlZCBkYXRhXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgICAgICBsZXQgb3V0cHV0TGVuZ3RoID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZShpbnB1dFtpXSk7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChlbmNvZGVkKTtcbiAgICAgICAgICAgIG91dHB1dExlbmd0aCArPSBlbmNvZGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoZW5jb2RlTGVuZ3RoKG91dHB1dExlbmd0aCwgMTkyKSwgLi4ub3V0cHV0KTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRCdWYgPSB0b0J5dGVzKGlucHV0KTtcbiAgICBpZiAoaW5wdXRCdWYubGVuZ3RoID09PSAxICYmIGlucHV0QnVmWzBdIDwgMTI4KSB7XG4gICAgICAgIHJldHVybiBpbnB1dEJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEJ5dGVzKGVuY29kZUxlbmd0aChpbnB1dEJ1Zi5sZW5ndGgsIDEyOCksIGlucHV0QnVmKTtcbn1cbi8qKlxuICogU2xpY2VzIGEgVWludDhBcnJheSwgdGhyb3dzIGlmIHRoZSBzbGljZSBnb2VzIG91dC1vZi1ib3VuZHMgb2YgdGhlIFVpbnQ4QXJyYXkuXG4gKiBFLmcuIGBzYWZlU2xpY2UoaGV4VG9CeXRlcygnYWEnKSwgMSwgMilgIHdpbGwgdGhyb3cuXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEBwYXJhbSBzdGFydFxuICogQHBhcmFtIGVuZFxuICovXG5mdW5jdGlvbiBzYWZlU2xpY2UoaW5wdXQsIHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoZW5kID4gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFAgKHNhZmVTbGljZSk6IGVuZCBzbGljZSBvZiBVaW50OEFycmF5IG91dC1vZi1ib3VuZHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuLyoqXG4gKiBQYXJzZSBpbnRlZ2Vycy4gQ2hlY2sgaWYgdGhlcmUgaXMgbm8gbGVhZGluZyB6ZXJvc1xuICogQHBhcmFtIHYgVGhlIHZhbHVlIHRvIHBhcnNlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUxlbmd0aCh2KSB7XG4gICAgaWYgKHZbMF0gPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogZXh0cmEgemVyb3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSGV4Qnl0ZShieXRlc1RvSGV4KHYpKTtcbn1cbmZ1bmN0aW9uIGVuY29kZUxlbmd0aChsZW4sIG9mZnNldCkge1xuICAgIGlmIChsZW4gPCA1Nikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtsZW4gKyBvZmZzZXRdKTtcbiAgICB9XG4gICAgY29uc3QgaGV4TGVuZ3RoID0gbnVtYmVyVG9IZXgobGVuKTtcbiAgICBjb25zdCBsTGVuZ3RoID0gaGV4TGVuZ3RoLmxlbmd0aCAvIDI7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gbnVtYmVyVG9IZXgob2Zmc2V0ICsgNTUgKyBsTGVuZ3RoKTtcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGhleFRvQnl0ZXMoZmlyc3RCeXRlICsgaGV4TGVuZ3RoKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBzdHJlYW0gPSBmYWxzZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnIHx8IGlucHV0ID09PSBudWxsIHx8IGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtdKTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRCeXRlcyA9IHRvQnl0ZXMoaW5wdXQpO1xuICAgIGNvbnN0IGRlY29kZWQgPSBfZGVjb2RlKGlucHV0Qnl0ZXMpO1xuICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZWQ7XG4gICAgfVxuICAgIGlmIChkZWNvZGVkLnJlbWFpbmRlci5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogcmVtYWluZGVyIG11c3QgYmUgemVybycpO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlZC5kYXRhO1xufVxuLyoqIERlY29kZSBhbiBpbnB1dCB3aXRoIFJMUCAqL1xuZnVuY3Rpb24gX2RlY29kZShpbnB1dCkge1xuICAgIGxldCBsZW5ndGgsIGxsZW5ndGgsIGRhdGEsIGlubmVyUmVtYWluZGVyLCBkO1xuICAgIGNvbnN0IGRlY29kZWQgPSBbXTtcbiAgICBjb25zdCBmaXJzdEJ5dGUgPSBpbnB1dFswXTtcbiAgICBpZiAoZmlyc3RCeXRlIDw9IDB4N2YpIHtcbiAgICAgICAgLy8gYSBzaW5nbGUgYnl0ZSB3aG9zZSB2YWx1ZSBpcyBpbiB0aGUgWzB4MDAsIDB4N2ZdIHJhbmdlLCB0aGF0IGJ5dGUgaXMgaXRzIG93biBSTFAgZW5jb2RpbmcuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBpbnB1dC5zbGljZSgwLCAxKSxcbiAgICAgICAgICAgIHJlbWFpbmRlcjogaW5wdXQuc2xpY2UoMSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGZpcnN0Qnl0ZSA8PSAweGI3KSB7XG4gICAgICAgIC8vIHN0cmluZyBpcyAwLTU1IGJ5dGVzIGxvbmcuIEEgc2luZ2xlIGJ5dGUgd2l0aCB2YWx1ZSAweDgwIHBsdXMgdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIGZvbGxvd2VkIGJ5IHRoZSBzdHJpbmdcbiAgICAgICAgLy8gVGhlIHJhbmdlIG9mIHRoZSBmaXJzdCBieXRlIGlzIFsweDgwLCAweGI3XVxuICAgICAgICBsZW5ndGggPSBmaXJzdEJ5dGUgLSAweDdmO1xuICAgICAgICAvLyBzZXQgMHg4MCBudWxsIHRvIDBcbiAgICAgICAgaWYgKGZpcnN0Qnl0ZSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgZGF0YSA9IFVpbnQ4QXJyYXkuZnJvbShbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gc2FmZVNsaWNlKGlucHV0LCAxLCBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggPT09IDIgJiYgZGF0YVswXSA8IDB4ODApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFAgZW5jb2Rpbmc6IGludmFsaWQgcHJlZml4LCBzaW5nbGUgYnl0ZSA8IDB4ODAgYXJlIG5vdCBwcmVmaXhlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcmVtYWluZGVyOiBpbnB1dC5zbGljZShsZW5ndGgpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChmaXJzdEJ5dGUgPD0gMHhiZikge1xuICAgICAgICAvLyBzdHJpbmcgaXMgZ3JlYXRlciB0aGFuIDU1IGJ5dGVzIGxvbmcuIEEgc2luZ2xlIGJ5dGUgd2l0aCB0aGUgdmFsdWUgKDB4YjcgcGx1cyB0aGUgbGVuZ3RoIG9mIHRoZSBsZW5ndGgpLFxuICAgICAgICAvLyBmb2xsb3dlZCBieSB0aGUgbGVuZ3RoLCBmb2xsb3dlZCBieSB0aGUgc3RyaW5nXG4gICAgICAgIGxsZW5ndGggPSBmaXJzdEJ5dGUgLSAweGI2O1xuICAgICAgICBpZiAoaW5wdXQubGVuZ3RoIC0gMSA8IGxsZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFA6IG5vdCBlbm91Z2ggYnl0ZXMgZm9yIHN0cmluZyBsZW5ndGgnKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSBkZWNvZGVMZW5ndGgoc2FmZVNsaWNlKGlucHV0LCAxLCBsbGVuZ3RoKSk7XG4gICAgICAgIGlmIChsZW5ndGggPD0gNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBSTFA6IGV4cGVjdGVkIHN0cmluZyBsZW5ndGggdG8gYmUgZ3JlYXRlciB0aGFuIDU1Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHNhZmVTbGljZShpbnB1dCwgbGxlbmd0aCwgbGVuZ3RoICsgbGxlbmd0aCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcmVtYWluZGVyOiBpbnB1dC5zbGljZShsZW5ndGggKyBsbGVuZ3RoKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlyc3RCeXRlIDw9IDB4ZjcpIHtcbiAgICAgICAgLy8gYSBsaXN0IGJldHdlZW4gMC01NSBieXRlcyBsb25nXG4gICAgICAgIGxlbmd0aCA9IGZpcnN0Qnl0ZSAtIDB4YmY7XG4gICAgICAgIGlubmVyUmVtYWluZGVyID0gc2FmZVNsaWNlKGlucHV0LCAxLCBsZW5ndGgpO1xuICAgICAgICB3aGlsZSAoaW5uZXJSZW1haW5kZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBkID0gX2RlY29kZShpbm5lclJlbWFpbmRlcik7XG4gICAgICAgICAgICBkZWNvZGVkLnB1c2goZC5kYXRhKTtcbiAgICAgICAgICAgIGlubmVyUmVtYWluZGVyID0gZC5yZW1haW5kZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGRlY29kZWQsXG4gICAgICAgICAgICByZW1haW5kZXI6IGlucHV0LnNsaWNlKGxlbmd0aCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBhIGxpc3Qgb3ZlciA1NSBieXRlcyBsb25nXG4gICAgICAgIGxsZW5ndGggPSBmaXJzdEJ5dGUgLSAweGY2O1xuICAgICAgICBsZW5ndGggPSBkZWNvZGVMZW5ndGgoc2FmZVNsaWNlKGlucHV0LCAxLCBsbGVuZ3RoKSk7XG4gICAgICAgIGlmIChsZW5ndGggPCA1Nikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFJMUDogZW5jb2RlZCBsaXN0IHRvbyBzaG9ydCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvdGFsTGVuZ3RoID0gbGxlbmd0aCArIGxlbmd0aDtcbiAgICAgICAgaWYgKHRvdGFsTGVuZ3RoID4gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUkxQOiB0b3RhbCBsZW5ndGggaXMgbGFyZ2VyIHRoYW4gdGhlIGRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICBpbm5lclJlbWFpbmRlciA9IHNhZmVTbGljZShpbnB1dCwgbGxlbmd0aCwgdG90YWxMZW5ndGgpO1xuICAgICAgICB3aGlsZSAoaW5uZXJSZW1haW5kZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBkID0gX2RlY29kZShpbm5lclJlbWFpbmRlcik7XG4gICAgICAgICAgICBkZWNvZGVkLnB1c2goZC5kYXRhKTtcbiAgICAgICAgICAgIGlubmVyUmVtYWluZGVyID0gZC5yZW1haW5kZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IGRlY29kZWQsXG4gICAgICAgICAgICByZW1haW5kZXI6IGlucHV0LnNsaWNlKHRvdGFsTGVuZ3RoKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5jb25zdCBjYWNoZWRIZXhlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAoX3YsIGkpID0+IGkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpO1xuZnVuY3Rpb24gYnl0ZXNUb0hleCh1aW50OGEpIHtcbiAgICAvLyBQcmUtY2FjaGluZyBjaGFycyB3aXRoIGBjYWNoZWRIZXhlc2Agc3BlZWRzIHRoaXMgdXAgNnhcbiAgICBsZXQgaGV4ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1aW50OGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4ICs9IGNhY2hlZEhleGVzW3VpbnQ4YVtpXV07XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG5mdW5jdGlvbiBwYXJzZUhleEJ5dGUoaGV4Qnl0ZSkge1xuICAgIGNvbnN0IGJ5dGUgPSBOdW1iZXIucGFyc2VJbnQoaGV4Qnl0ZSwgMTYpO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oYnl0ZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBieXRlIHNlcXVlbmNlJyk7XG4gICAgcmV0dXJuIGJ5dGU7XG59XG4vLyBDYWNoaW5nIHNsb3dzIGl0IGRvd24gMi0zeFxuZnVuY3Rpb24gaGV4VG9CeXRlcyhoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaGV4VG9CeXRlczogZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJyArIHR5cGVvZiBoZXgpO1xuICAgIH1cbiAgICBpZiAoaGV4Lmxlbmd0aCAlIDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGV4VG9CeXRlczogcmVjZWl2ZWQgaW52YWxpZCB1bnBhZGRlZCBoZXgnKTtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGogPSBpICogMjtcbiAgICAgICAgYXJyYXlbaV0gPSBwYXJzZUhleEJ5dGUoaGV4LnNsaWNlKGosIGogKyAyKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbi8qKiBDb25jYXRlbmF0ZXMgdHdvIFVpbnQ4QXJyYXlzIGludG8gb25lLiAqL1xuZnVuY3Rpb24gY29uY2F0Qnl0ZXMoLi4uYXJyYXlzKSB7XG4gICAgaWYgKGFycmF5cy5sZW5ndGggPT09IDEpXG4gICAgICAgIHJldHVybiBhcnJheXNbMF07XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXlzLnJlZHVjZSgoYSwgYXJyKSA9PiBhICsgYXJyLmxlbmd0aCwgMCk7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgcGFkID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhcnIgPSBhcnJheXNbaV07XG4gICAgICAgIHJlc3VsdC5zZXQoYXJyLCBwYWQpO1xuICAgICAgICBwYWQgKz0gYXJyLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHV0Zikge1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodXRmKTtcbn1cbi8qKiBUcmFuc2Zvcm0gYW4gaW50ZWdlciBpbnRvIGl0cyBoZXhhZGVjaW1hbCB2YWx1ZSAqL1xuZnVuY3Rpb24gbnVtYmVyVG9IZXgoaW50ZWdlcikge1xuICAgIGlmIChpbnRlZ2VyIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW50ZWdlciBhcyBhcmd1bWVudCwgbXVzdCBiZSB1bnNpZ25lZCEnKTtcbiAgICB9XG4gICAgY29uc3QgaGV4ID0gaW50ZWdlci50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggJSAyID8gYDAke2hleH1gIDogaGV4O1xufVxuLyoqIFBhZCBhIHN0cmluZyB0byBiZSBldmVuICovXG5mdW5jdGlvbiBwYWRUb0V2ZW4oYSkge1xuICAgIHJldHVybiBhLmxlbmd0aCAlIDIgPyBgMCR7YX1gIDogYTtcbn1cbi8qKiBDaGVjayBpZiBhIHN0cmluZyBpcyBwcmVmaXhlZCBieSAweCAqL1xuZnVuY3Rpb24gaXNIZXhQcmVmaXhlZChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmxlbmd0aCA+PSAyICYmIHN0clswXSA9PT0gJzAnICYmIHN0clsxXSA9PT0gJ3gnO1xufVxuLyoqIFJlbW92ZXMgMHggZnJvbSBhIGdpdmVuIFN0cmluZyAqL1xuZnVuY3Rpb24gc3RyaXBIZXhQcmVmaXgoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHJldHVybiBpc0hleFByZWZpeGVkKHN0cikgPyBzdHIuc2xpY2UoMikgOiBzdHI7XG59XG4vKiogVHJhbnNmb3JtIGFueXRoaW5nIGludG8gYSBVaW50OEFycmF5ICovXG5mdW5jdGlvbiB0b0J5dGVzKHYpIHtcbiAgICBpZiAodiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGlzSGV4UHJlZml4ZWQodikpIHtcbiAgICAgICAgICAgIHJldHVybiBoZXhUb0J5dGVzKHBhZFRvRXZlbihzdHJpcEhleFByZWZpeCh2KSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyh2KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgaWYgKCF2KSB7XG4gICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4VG9CeXRlcyhudW1iZXJUb0hleCh2KSk7XG4gICAgfVxuICAgIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFtdKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0b0J5dGVzOiByZWNlaXZlZCB1bnN1cHBvcnRlZCB0eXBlICcgKyB0eXBlb2Ygdik7XG59XG5leHBvcnQgY29uc3QgdXRpbHMgPSB7XG4gICAgYnl0ZXNUb0hleCxcbiAgICBjb25jYXRCeXRlcyxcbiAgICBoZXhUb0J5dGVzLFxuICAgIHV0ZjhUb0J5dGVzLFxufTtcbmV4cG9ydCBjb25zdCBSTFAgPSB7IGVuY29kZSwgZGVjb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransaction: function() { return /* binding */ BaseTransaction; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/common */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/common/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nclass BaseTransaction {\n    constructor(txData, opts) {\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n            senderPubKey: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Chain.Mainnet;\n        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n        this._type = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(type)));\n        this.txOptions = opts;\n        const toB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(to === '' ? '0x' : to);\n        const vB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(v === '' ? '0x' : v);\n        const rB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(r === '' ? '0x' : r);\n        const sB = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(s === '' ? '0x' : s);\n        this.nonce = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(nonce === '' ? '0x' : nonce));\n        this.gasLimit = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(gasLimit === '' ? '0x' : gasLimit));\n        this.to = toB.length > 0 ? new _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.Address(toB) : undefined;\n        this.value = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(value === '' ? '0x' : value));\n        this.data = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(vB) : undefined;\n        this.r = rB.length > 0 ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(rB) : undefined;\n        this.s = sB.length > 0 ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(sB) : undefined;\n        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n        const createContract = this.to === undefined || this.to === null;\n        const allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n        const common = opts.common ?? this._getCommon();\n        if (createContract && common.isActivatedEIP(3860) && allowUnlimitedInitCodeSize === false) {\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.checkMaxInitCodeSize)(common, this.data.length);\n        }\n    }\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilities` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    supports(capability) {\n        return this.activeCapabilities.includes(capability);\n    }\n    /**\n     * Validates the transaction signature and minimum gas requirements.\n     * @returns {string[]} an array of error strings\n     */\n    getValidationErrors() {\n        const errors = [];\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        if (this.getBaseFee() > this.gasLimit) {\n            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n        }\n        return errors;\n    }\n    /**\n     * Validates the transaction signature and minimum gas requirements.\n     * @returns {boolean} true if the transaction is valid, false otherwise\n     */\n    isValid() {\n        const errors = this.getValidationErrors();\n        return errors.length === 0;\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    getBaseFee() {\n        const txFee = this.common.param('gasPrices', 'tx');\n        let fee = this.getDataFee();\n        if (txFee)\n            fee += txFee;\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            const txCreationFee = this.common.param('gasPrices', 'txCreation');\n            if (txCreationFee)\n                fee += txCreationFee;\n        }\n        return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        const txDataZero = this.common.param('gasPrices', 'txDataZero');\n        const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        let cost = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0;\n        for (let i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            const dataLength = BigInt(Math.ceil(this.data.length / 32));\n            const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n            cost += initCodeCost;\n        }\n        return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    toCreationAddress() {\n        return this.to === undefined || this.to.bytes.length === 0;\n    }\n    isSigned() {\n        const { v, r, s } = this;\n        if (v === undefined || r === undefined || s === undefined) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Determines if the signature is valid\n     */\n    verifySignature() {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            const publicKey = this.getSenderPublicKey();\n            return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.unpadBytes)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Returns the sender's address\n     */\n    getSenderAddress() {\n        return new _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.Address((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.publicToAddress)(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    sign(privateKey) {\n        if (privateKey.length !== 32) {\n            const msg = this._errorMsg('Private key must be 32 bytes in length.');\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        let hackApplied = false;\n        if (this.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.TransactionType.Legacy &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(_types_js__WEBPACK_IMPORTED_MODULE_2__.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_2__.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        const msgHash = this.getHashedMessageToSign();\n        const { v, r, s } = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.ecsign)(msgHash, privateKey);\n        const tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            const index = this.activeCapabilities.indexOf(_types_js__WEBPACK_IMPORTED_MODULE_2__.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        return {\n            type: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(BigInt(this.type)),\n            nonce: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.nonce),\n            gasLimit: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.value),\n            data: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.data),\n            v: this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    _getCommon(common, chainId) {\n        // Chain ID provided\n        if (chainId !== undefined) {\n            const chainIdBigInt = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(chainId));\n            if (common) {\n                if (common.chainId() !== chainIdBigInt) {\n                    const msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (_ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common.isSupportedChainId(chainIdBigInt)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common({ chain: chainIdBigInt });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common.custom({\n                        name: 'custom-chain',\n                        networkId: chainIdBigInt,\n                        chainId: chainIdBigInt,\n                    }, { baseChain: this.DEFAULT_CHAIN });\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return common?.copy() ?? new _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__.Common({ chain: this.DEFAULT_CHAIN });\n        }\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n    _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n        for (const [key, value] of Object.entries(values)) {\n            switch (bits) {\n                case 64:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                case 256:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                default: {\n                    const msg = this._errorMsg('unimplemented bits value');\n                    throw new Error(msg);\n                }\n            }\n        }\n    }\n    static _validateNotArray(values) {\n        const txDataKeys = [\n            'nonce',\n            'gasPrice',\n            'gasLimit',\n            'to',\n            'value',\n            'data',\n            'v',\n            'r',\n            's',\n            'type',\n            'baseFee',\n            'maxFeePerGas',\n            'chainId',\n        ];\n        for (const [key, value] of Object.entries(values)) {\n            if (txDataKeys.includes(key)) {\n                if (Array.isArray(value)) {\n                    throw new Error(`${key} cannot be an array`);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    _getSharedErrorPostfix() {\n        let hash = '';\n        try {\n            hash = this.isSigned() ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.hash()) : 'not available (unsigned)';\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let isSigned = '';\n        try {\n            isSigned = this.isSigned().toString();\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let hf = '';\n        try {\n            hf = this.common.hardfork();\n        }\n        catch (e) {\n            hf = 'error';\n        }\n        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n        postfix += `signed=${isSigned} hf=${hf}`;\n        return postfix;\n    }\n}\n//# sourceMappingURL=baseTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUpfrontCost: function() { return /* binding */ getUpfrontCost; }\n/* harmony export */ });\nfunction getUpfrontCost(tx, baseFee) {\n    const prio = tx.maxPriorityFeePerGas;\n    const maxBase = tx.maxFeePerGas - baseFee;\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n    const gasPrice = inclusionFeePerGas + baseFee;\n    return tx.gasLimit * gasPrice + tx.value;\n}\n//# sourceMappingURL=eip1559.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMTU1OS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMTU1OS5qcz82MmM4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRVcGZyb250Q29zdCh0eCwgYmFzZUZlZSkge1xuICAgIGNvbnN0IHByaW8gPSB0eC5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICBjb25zdCBtYXhCYXNlID0gdHgubWF4RmVlUGVyR2FzIC0gYmFzZUZlZTtcbiAgICBjb25zdCBpbmNsdXNpb25GZWVQZXJHYXMgPSBwcmlvIDwgbWF4QmFzZSA/IHByaW8gOiBtYXhCYXNlO1xuICAgIGNvbnN0IGdhc1ByaWNlID0gaW5jbHVzaW9uRmVlUGVyR2FzICsgYmFzZUZlZTtcbiAgICByZXR1cm4gdHguZ2FzTGltaXQgKiBnYXNQcmljZSArIHR4LnZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWlwMTU1OS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHashedMessageToSign: function() { return /* binding */ getHashedMessageToSign; },\n/* harmony export */   serialize: function() { return /* binding */ serialize; },\n/* harmony export */   validateYParity: function() { return /* binding */ validateYParity; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legacy.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n\n\n\n\n\nfunction getHashedMessageToSign(tx) {\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(tx.getMessageToSign());\n}\nfunction serialize(tx, base) {\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.concatBytes)((0,_util_js__WEBPACK_IMPORTED_MODULE_3__.txTypeBytes)(tx.type), _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(base ?? tx.raw()));\n}\nfunction validateYParity(tx) {\n    const { v } = tx;\n    if (v !== undefined && v !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0 && v !== _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_1) {\n        const msg = (0,_legacy_js__WEBPACK_IMPORTED_MODULE_4__.errorMsg)(tx, 'The y-parity of the transaction should either be 0 or 1');\n        throw new Error(msg);\n    }\n}\n//# sourceMappingURL=eip2718.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjcxOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzQztBQUM2QjtBQUNQO0FBQ25CO0FBQ0Y7QUFDaEM7QUFDUCxXQUFXLDBFQUFTO0FBQ3BCO0FBQ087QUFDUCxXQUFXLDZEQUFXLENBQUMscURBQVcsV0FBVyxnREFBRztBQUNoRDtBQUNPO0FBQ1AsWUFBWSxJQUFJO0FBQ2hCLGlDQUFpQyxzREFBUSxVQUFVLHNEQUFRO0FBQzNELG9CQUFvQixvREFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjcxOC5qcz9jZGI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJMUCB9IGZyb20gJ0BldGhlcmV1bWpzL3JscCc7XG5pbXBvcnQgeyBCSUdJTlRfMCwgQklHSU5UXzEsIGNvbmNhdEJ5dGVzIH0gZnJvbSAnQGV0aGVyZXVtanMvdXRpbCc7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tICdldGhlcmV1bS1jcnlwdG9ncmFwaHkva2VjY2FrLmpzJztcbmltcG9ydCB7IHR4VHlwZUJ5dGVzIH0gZnJvbSAnLi4vdXRpbC5qcyc7XG5pbXBvcnQgeyBlcnJvck1zZyB9IGZyb20gJy4vbGVnYWN5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYXNoZWRNZXNzYWdlVG9TaWduKHR4KSB7XG4gICAgcmV0dXJuIGtlY2NhazI1Nih0eC5nZXRNZXNzYWdlVG9TaWduKCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSh0eCwgYmFzZSkge1xuICAgIHJldHVybiBjb25jYXRCeXRlcyh0eFR5cGVCeXRlcyh0eC50eXBlKSwgUkxQLmVuY29kZShiYXNlID8/IHR4LnJhdygpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVZUGFyaXR5KHR4KSB7XG4gICAgY29uc3QgeyB2IH0gPSB0eDtcbiAgICBpZiAodiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IEJJR0lOVF8wICYmIHYgIT09IEJJR0lOVF8xKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGVycm9yTXNnKHR4LCAnVGhlIHktcGFyaXR5IG9mIHRoZSB0cmFuc2FjdGlvbiBzaG91bGQgZWl0aGVyIGJlIDAgb3IgMScpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1laXAyNzE4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js ***!
  \***************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDataFee: function() { return /* binding */ getDataFee; }\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legacy.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n\n\n/**\n * The amount of gas paid for the data in this tx\n */\nfunction getDataFee(tx) {\n    return _legacy_js__WEBPACK_IMPORTED_MODULE_1__.getDataFee(tx, BigInt(_util_js__WEBPACK_IMPORTED_MODULE_0__.AccessLists.getDataFeeEIP2930(tx.accessList, tx.common)));\n}\n//# sourceMappingURL=eip2930.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjkzMC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDSDtBQUN0QztBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsa0RBQWlCLFlBQVksaURBQVc7QUFDbkQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvZWlwMjkzMC5qcz83NjMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY2Vzc0xpc3RzIH0gZnJvbSAnLi4vdXRpbC5qcyc7XG5pbXBvcnQgKiBhcyBMZWdhY3kgZnJvbSAnLi9sZWdhY3kuanMnO1xuLyoqXG4gKiBUaGUgYW1vdW50IG9mIGdhcyBwYWlkIGZvciB0aGUgZGF0YSBpbiB0aGlzIHR4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhRmVlKHR4KSB7XG4gICAgcmV0dXJuIExlZ2FjeS5nZXREYXRhRmVlKHR4LCBCaWdJbnQoQWNjZXNzTGlzdHMuZ2V0RGF0YUZlZUVJUDI5MzAodHguYWNjZXNzTGlzdCwgdHguY29tbW9uKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWlwMjkzMC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorMsg: function() { return /* binding */ errorMsg; },\n/* harmony export */   getDataFee: function() { return /* binding */ getDataFee; },\n/* harmony export */   getSenderPublicKey: function() { return /* binding */ getSenderPublicKey; },\n/* harmony export */   hash: function() { return /* binding */ hash; },\n/* harmony export */   isSigned: function() { return /* binding */ isSigned; },\n/* harmony export */   validateHighS: function() { return /* binding */ validateHighS; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../baseTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\nfunction errorMsg(tx, msg) {\n    return `${msg} (${tx.errorStr()})`;\n}\nfunction isSigned(tx) {\n    const { v, r, s } = tx;\n    if (v === undefined || r === undefined || s === undefined) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n/**\n * The amount of gas paid for the data in this tx\n */\nfunction getDataFee(tx, extraCost) {\n    if (tx.cache.dataFee && tx.cache.dataFee.hardfork === tx.common.hardfork()) {\n        return tx.cache.dataFee.value;\n    }\n    const cost = _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction.prototype.getDataFee.bind(tx)() + (extraCost ?? 0n);\n    if (Object.isFrozen(tx)) {\n        tx.cache.dataFee = {\n            value: cost,\n            hardfork: tx.common.hardfork(),\n        };\n    }\n    return cost;\n}\nfunction hash(tx) {\n    if (!tx.isSigned()) {\n        const msg = errorMsg(tx, 'Cannot call hash method if transaction is not signed');\n        throw new Error(msg);\n    }\n    if (Object.isFrozen(tx)) {\n        if (!tx.cache.hash) {\n            tx.cache.hash = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(tx.serialize());\n        }\n        return tx.cache.hash;\n    }\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(tx.serialize());\n}\n/**\n * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n * Reasoning: https://ethereum.stackexchange.com/a/55728\n */\nfunction validateHighS(tx) {\n    const { s } = tx;\n    if (tx.common.gteHardfork('homestead') && s !== undefined && s > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.SECP256K1_ORDER_DIV_2) {\n        const msg = errorMsg(tx, 'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        throw new Error(msg);\n    }\n}\nfunction getSenderPublicKey(tx) {\n    if (tx.cache.senderPubKey !== undefined) {\n        return tx.cache.senderPubKey;\n    }\n    const msgHash = tx.getMessageToVerifySignature();\n    const { v, r, s } = tx;\n    validateHighS(tx);\n    try {\n        const sender = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.ecrecover)(msgHash, v, (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bigIntToUnpaddedBytes)(r), (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bigIntToUnpaddedBytes)(s), tx.supports(_types_js__WEBPACK_IMPORTED_MODULE_3__.Capability.EIP155ReplayProtection) ? tx.common.chainId() : undefined);\n        if (Object.isFrozen(tx)) {\n            tx.cache.senderPubKey = sender;\n        }\n        return sender;\n    }\n    catch (e) {\n        const msg = errorMsg(tx, 'Invalid Signature');\n        throw new Error(msg);\n    }\n}\n//# sourceMappingURL=legacy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jYXBhYmlsaXRpZXMvbGVnYWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkY7QUFDL0I7QUFDSjtBQUNmO0FBQ2xDO0FBQ1AsY0FBYyxLQUFLLEdBQUcsY0FBYztBQUNwQztBQUNPO0FBQ1AsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0VBQWU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBFQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMEVBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxJQUFJO0FBQ2hCLHFFQUFxRSxtRUFBcUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQSx1QkFBdUIsMkRBQVMsYUFBYSx1RUFBcUIsS0FBSyx1RUFBcUIsaUJBQWlCLGlEQUFVO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdHgvZGlzdC9lc20vY2FwYWJpbGl0aWVzL2xlZ2FjeS5qcz8xMTE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNFQ1AyNTZLMV9PUkRFUl9ESVZfMiwgYmlnSW50VG9VbnBhZGRlZEJ5dGVzLCBlY3JlY292ZXIgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9rZWNjYWsuanMnO1xuaW1wb3J0IHsgQmFzZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vYmFzZVRyYW5zYWN0aW9uLmpzJztcbmltcG9ydCB7IENhcGFiaWxpdHkgfSBmcm9tICcuLi90eXBlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JNc2codHgsIG1zZykge1xuICAgIHJldHVybiBgJHttc2d9ICgke3R4LmVycm9yU3RyKCl9KWA7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTaWduZWQodHgpIHtcbiAgICBjb25zdCB7IHYsIHIsIHMgfSA9IHR4O1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgciA9PT0gdW5kZWZpbmVkIHx8IHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4vKipcbiAqIFRoZSBhbW91bnQgb2YgZ2FzIHBhaWQgZm9yIHRoZSBkYXRhIGluIHRoaXMgdHhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFGZWUodHgsIGV4dHJhQ29zdCkge1xuICAgIGlmICh0eC5jYWNoZS5kYXRhRmVlICYmIHR4LmNhY2hlLmRhdGFGZWUuaGFyZGZvcmsgPT09IHR4LmNvbW1vbi5oYXJkZm9yaygpKSB7XG4gICAgICAgIHJldHVybiB0eC5jYWNoZS5kYXRhRmVlLnZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBjb3N0ID0gQmFzZVRyYW5zYWN0aW9uLnByb3RvdHlwZS5nZXREYXRhRmVlLmJpbmQodHgpKCkgKyAoZXh0cmFDb3N0ID8/IDBuKTtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHR4KSkge1xuICAgICAgICB0eC5jYWNoZS5kYXRhRmVlID0ge1xuICAgICAgICAgICAgdmFsdWU6IGNvc3QsXG4gICAgICAgICAgICBoYXJkZm9yazogdHguY29tbW9uLmhhcmRmb3JrKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjb3N0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc2godHgpIHtcbiAgICBpZiAoIXR4LmlzU2lnbmVkKCkpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZXJyb3JNc2codHgsICdDYW5ub3QgY2FsbCBoYXNoIG1ldGhvZCBpZiB0cmFuc2FjdGlvbiBpcyBub3Qgc2lnbmVkJyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHR4KSkge1xuICAgICAgICBpZiAoIXR4LmNhY2hlLmhhc2gpIHtcbiAgICAgICAgICAgIHR4LmNhY2hlLmhhc2ggPSBrZWNjYWsyNTYodHguc2VyaWFsaXplKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eC5jYWNoZS5oYXNoO1xuICAgIH1cbiAgICByZXR1cm4ga2VjY2FrMjU2KHR4LnNlcmlhbGl6ZSgpKTtcbn1cbi8qKlxuICogRUlQLTI6IEFsbCB0cmFuc2FjdGlvbiBzaWduYXR1cmVzIHdob3NlIHMtdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHNlY3AyNTZrMW4vMmFyZSBjb25zaWRlcmVkIGludmFsaWQuXG4gKiBSZWFzb25pbmc6IGh0dHBzOi8vZXRoZXJldW0uc3RhY2tleGNoYW5nZS5jb20vYS81NTcyOFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVIaWdoUyh0eCkge1xuICAgIGNvbnN0IHsgcyB9ID0gdHg7XG4gICAgaWYgKHR4LmNvbW1vbi5ndGVIYXJkZm9yaygnaG9tZXN0ZWFkJykgJiYgcyAhPT0gdW5kZWZpbmVkICYmIHMgPiBTRUNQMjU2SzFfT1JERVJfRElWXzIpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZXJyb3JNc2codHgsICdJbnZhbGlkIFNpZ25hdHVyZTogcy12YWx1ZXMgZ3JlYXRlciB0aGFuIHNlY3AyNTZrMW4vMiBhcmUgY29uc2lkZXJlZCBpbnZhbGlkJyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZW5kZXJQdWJsaWNLZXkodHgpIHtcbiAgICBpZiAodHguY2FjaGUuc2VuZGVyUHViS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHR4LmNhY2hlLnNlbmRlclB1YktleTtcbiAgICB9XG4gICAgY29uc3QgbXNnSGFzaCA9IHR4LmdldE1lc3NhZ2VUb1ZlcmlmeVNpZ25hdHVyZSgpO1xuICAgIGNvbnN0IHsgdiwgciwgcyB9ID0gdHg7XG4gICAgdmFsaWRhdGVIaWdoUyh0eCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2VuZGVyID0gZWNyZWNvdmVyKG1zZ0hhc2gsIHYsIGJpZ0ludFRvVW5wYWRkZWRCeXRlcyhyKSwgYmlnSW50VG9VbnBhZGRlZEJ5dGVzKHMpLCB0eC5zdXBwb3J0cyhDYXBhYmlsaXR5LkVJUDE1NVJlcGxheVByb3RlY3Rpb24pID8gdHguY29tbW9uLmNoYWluSWQoKSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4odHgpKSB7XG4gICAgICAgICAgICB0eC5jYWNoZS5zZW5kZXJQdWJLZXkgPSBzZW5kZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbmRlcjtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZXJyb3JNc2codHgsICdJbnZhbGlkIFNpZ25hdHVyZScpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZWdhY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BYTES_PER_FIELD_ELEMENT: function() { return /* binding */ BYTES_PER_FIELD_ELEMENT; },\n/* harmony export */   FIELD_ELEMENTS_PER_BLOB: function() { return /* binding */ FIELD_ELEMENTS_PER_BLOB; },\n/* harmony export */   LIMIT_BLOBS_PER_TX: function() { return /* binding */ LIMIT_BLOBS_PER_TX; },\n/* harmony export */   MAX_ACCESS_LIST_SIZE: function() { return /* binding */ MAX_ACCESS_LIST_SIZE; },\n/* harmony export */   MAX_CALLDATA_SIZE: function() { return /* binding */ MAX_CALLDATA_SIZE; },\n/* harmony export */   MAX_TX_WRAP_KZG_COMMITMENTS: function() { return /* binding */ MAX_TX_WRAP_KZG_COMMITMENTS; },\n/* harmony export */   MAX_VERSIONED_HASHES_LIST_SIZE: function() { return /* binding */ MAX_VERSIONED_HASHES_LIST_SIZE; }\n/* harmony export */ });\n/** EIP4844 constants */\nconst MAX_CALLDATA_SIZE = 16777216; // 2 ** 24\nconst MAX_ACCESS_LIST_SIZE = 16777216; // 2 ** 24\nconst MAX_VERSIONED_HASHES_LIST_SIZE = 16777216; // 2 ** 24\nconst LIMIT_BLOBS_PER_TX = 16777216; // 2 ** 24\nconst MAX_TX_WRAP_KZG_COMMITMENTS = 16777216; // 2 ** 24\nconst FIELD_ELEMENTS_PER_BLOB = 4096; // This is also in the Common 4844 parameters but needed here since types can't access Common params\nconst BYTES_PER_FIELD_ELEMENT = 32;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ08sb0NBQW9DO0FBQ3BDLHVDQUF1QztBQUN2QyxpREFBaUQ7QUFDakQscUNBQXFDO0FBQ3JDLDhDQUE4QztBQUM5QyxzQ0FBc0M7QUFDdEM7QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9jb25zdGFudHMuanM/MjkxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogRUlQNDg0NCBjb25zdGFudHMgKi9cbmV4cG9ydCBjb25zdCBNQVhfQ0FMTERBVEFfU0laRSA9IDE2Nzc3MjE2OyAvLyAyICoqIDI0XG5leHBvcnQgY29uc3QgTUFYX0FDQ0VTU19MSVNUX1NJWkUgPSAxNjc3NzIxNjsgLy8gMiAqKiAyNFxuZXhwb3J0IGNvbnN0IE1BWF9WRVJTSU9ORURfSEFTSEVTX0xJU1RfU0laRSA9IDE2Nzc3MjE2OyAvLyAyICoqIDI0XG5leHBvcnQgY29uc3QgTElNSVRfQkxPQlNfUEVSX1RYID0gMTY3NzcyMTY7IC8vIDIgKiogMjRcbmV4cG9ydCBjb25zdCBNQVhfVFhfV1JBUF9LWkdfQ09NTUlUTUVOVFMgPSAxNjc3NzIxNjsgLy8gMiAqKiAyNFxuZXhwb3J0IGNvbnN0IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CID0gNDA5NjsgLy8gVGhpcyBpcyBhbHNvIGluIHRoZSBDb21tb24gNDg0NCBwYXJhbWV0ZXJzIGJ1dCBuZWVkZWQgaGVyZSBzaW5jZSB0eXBlcyBjYW4ndCBhY2Nlc3MgQ29tbW9uIHBhcmFtc1xuZXhwb3J0IGNvbnN0IEJZVEVTX1BFUl9GSUVMRF9FTEVNRU5UID0gMzI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FeeMarketEIP1559Transaction: function() { return /* binding */ FeeMarketEIP1559Transaction; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./capabilities/eip1559.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js\");\n/* harmony import */ var _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/eip2718.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\");\n/* harmony import */ var _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./capabilities/eip2930.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nclass FeeMarketEIP1559Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: _types_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.FeeMarketEIP1559 }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = _util_js__WEBPACK_IMPORTED_MODULE_8__.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        _util_js__WEBPACK_IMPORTED_MODULE_8__.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.validateYParity(this);\n        _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_8__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.FeeMarketEIP1559)) ===\n            false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_7__.TransactionType.FeeMarketEIP1559}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            v: v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0) {\n        return _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.chainId),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this, this.raw().slice(0, 9));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.getSenderPublicKey(this);\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_27,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = _util_js__WEBPACK_IMPORTED_MODULE_8__.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.errorMsg(this, msg);\n    }\n}\n//# sourceMappingURL=eip1559Transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: function() { return /* binding */ AccessListEIP2930Transaction; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./capabilities/eip2718.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\");\n/* harmony import */ var _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/eip2930.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n\n\n\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nclass AccessListEIP2930Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930 }, opts);\n        const { chainId, accessList, gasPrice } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        // EIP-2718 check is done in Common\n        if (!this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        const accessListData = _util_js__WEBPACK_IMPORTED_MODULE_7__.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        _util_js__WEBPACK_IMPORTED_MODULE_7__.AccessLists.verifyAccessList(this.accessList);\n        this.gasPrice = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(gasPrice === '' ? '0x' : gasPrice));\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice,\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction._validateNotArray(txData);\n        if (this.gasPrice * this.gasLimit > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n            throw new Error(msg);\n        }\n        _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.validateYParity(this);\n        _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930)) ===\n            false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(Uint8Array.from(serialized.subarray(1)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({ chainId, v });\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        const emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(chainId),\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? emptyAccessList,\n            v: v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_4__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytess of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.chainId),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.serialize(this, this.raw().slice(0, 8));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_3__.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.getSenderPublicKey(this);\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_27,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = _util_js__WEBPACK_IMPORTED_MODULE_7__.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.chainId),\n            gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.gasPrice),\n            accessList: accessListJSON,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_5__.errorMsg(this, msg);\n    }\n}\n//# sourceMappingURL=eip2930Transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobEIP4844Transaction: function() { return /* binding */ BlobEIP4844Transaction; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./capabilities/eip1559.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip1559.js\");\n/* harmony import */ var _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/eip2718.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2718.js\");\n/* harmony import */ var _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./capabilities/eip2930.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/eip2930.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\");\n\n\n\n\n\n\n\n\n\n\nconst validateBlobTransactionNetworkWrapper = (blobVersionedHashes, blobs, commitments, kzgProofs, version) => {\n    if (!(blobVersionedHashes.length === blobs.length && blobs.length === commitments.length)) {\n        throw new Error('Number of blobVersionedHashes, blobs, and commitments not all equal');\n    }\n    if (blobVersionedHashes.length === 0) {\n        throw new Error('Invalid transaction with empty blobs');\n    }\n    let isValid;\n    try {\n        isValid = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.kzg.verifyBlobKzgProofBatch(blobs, commitments, kzgProofs);\n    }\n    catch (error) {\n        throw new Error(`KZG verification of blobs fail with error=${error}`);\n    }\n    if (!isValid) {\n        throw new Error('KZG proof cannot be verified from blobs/commitments');\n    }\n    for (let x = 0; x < blobVersionedHashes.length; x++) {\n        const computedVersionedHash = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.computeVersionedHash)(commitments[x], version);\n        if (!(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(computedVersionedHash, blobVersionedHashes[x])) {\n            throw new Error(`commitment for blob at index ${x} does not match versionedHash`);\n        }\n    }\n};\n/**\n * Typed transaction with a new gas fee market mechanism for transactions that include \"blobs\" of data\n *\n * - TransactionType: 3\n * - EIP: [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)\n */\nclass BlobEIP4844Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static constructors or factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: _types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844 }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas, maxFeePerBlobGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        if (this.common.isActivatedEIP(4844) === false) {\n            throw new Error('EIP-4844 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = _util_js__WEBPACK_IMPORTED_MODULE_9__.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        _util_js__WEBPACK_IMPORTED_MODULE_9__.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_2__.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        this.maxFeePerBlobGas = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)((maxFeePerBlobGas ?? '') === '' ? '0x' : maxFeePerBlobGas));\n        this.blobVersionedHashes = (txData.blobVersionedHashes ?? []).map((vh) => (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(vh));\n        _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.validateYParity(this);\n        _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.validateHighS(this);\n        for (const hash of this.blobVersionedHashes) {\n            if (hash.length !== 32) {\n                const msg = this._errorMsg('versioned hash is invalid length');\n                throw new Error(msg);\n            }\n            if (BigInt(hash[0]) !== this.common.param('sharding', 'blobCommitmentVersionKzg')) {\n                const msg = this._errorMsg('versioned hash does not start with KZG commitment version');\n                throw new Error(msg);\n            }\n        }\n        if (this.blobVersionedHashes.length > _constants_js__WEBPACK_IMPORTED_MODULE_7__.LIMIT_BLOBS_PER_TX) {\n            const msg = this._errorMsg(`tx can contain at most ${_constants_js__WEBPACK_IMPORTED_MODULE_7__.LIMIT_BLOBS_PER_TX} blobs`);\n            throw new Error(msg);\n        }\n        this.blobs = txData.blobs?.map((blob) => (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(blob));\n        this.kzgCommitments = txData.kzgCommitments?.map((commitment) => (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(commitment));\n        this.kzgProofs = txData.kzgProofs?.map((proof) => (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(proof));\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    static fromTxData(txData, opts) {\n        if (txData.blobsData !== undefined) {\n            if (txData.blobs !== undefined) {\n                throw new Error('cannot have both raw blobs data and encoded blobs in constructor');\n            }\n            if (txData.kzgCommitments !== undefined) {\n                throw new Error('cannot have both raw blobs data and KZG commitments in constructor');\n            }\n            if (txData.blobVersionedHashes !== undefined) {\n                throw new Error('cannot have both raw blobs data and versioned hashes in constructor');\n            }\n            if (txData.kzgProofs !== undefined) {\n                throw new Error('cannot have both raw blobs data and KZG proofs in constructor');\n            }\n            txData.blobs = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.getBlobs)(txData.blobsData.reduce((acc, cur) => acc + cur));\n            txData.kzgCommitments = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.blobsToCommitments)(txData.blobs);\n            txData.blobVersionedHashes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.commitmentsToVersionedHashes)(txData.kzgCommitments);\n            txData.kzgProofs = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.blobsToProofs)(txData.blobs, txData.kzgCommitments);\n        }\n        return new BlobEIP4844Transaction(txData, opts);\n    }\n    /**\n     * Creates the minimal representation of a blob transaction from the network wrapper version.\n     * The minimal representation is used when adding transactions to an execution payload/block\n     * @param txData a {@link BlobEIP4844Transaction} containing optional blobs/kzg commitments\n     * @param opts - dictionary of {@link TxOptions}\n     * @returns the \"minimal\" representation of a BlobEIP4844Transaction (i.e. transaction object minus blobs and kzg commitments)\n     */\n    static minimalFromNetworkWrapper(txData, opts) {\n        const tx = BlobEIP4844Transaction.fromTxData({\n            ...txData,\n            ...{ blobs: undefined, kzgCommitments: undefined, kzgProofs: undefined },\n        }, opts);\n        return tx;\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return BlobEIP4844Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 11 && values.length !== 14) {\n            throw new Error('Invalid EIP-4844 transaction. Only expecting 11 values (for unsigned tx) or 14 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            value,\n            maxFeePerBlobGas,\n            v,\n            r,\n            s,\n        });\n        return new BlobEIP4844Transaction({\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            maxFeePerBlobGas,\n            blobVersionedHashes,\n            v: v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * Creates a transaction from the network encoding of a blob transaction (with blobs/commitments/proof)\n     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper\n     * @param opts any TxOptions defined\n     * @returns a BlobEIP4844Transaction\n     */\n    static fromSerializedBlobTxNetworkWrapper(serialized, opts) {\n        if (!opts || !opts.common) {\n            throw new Error('common instance required to validate versioned hashes');\n        }\n        if ((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(serialized.subarray(0, 1), (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.txTypeBytes)(_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${_types_js__WEBPACK_IMPORTED_MODULE_8__.TransactionType.BlobEIP4844}, received: ${(0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        // Validate network wrapper\n        const networkTxValues = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized.subarray(1));\n        if (networkTxValues.length !== 4) {\n            throw Error(`Expected 4 values in the deserialized network transaction`);\n        }\n        const [txValues, blobs, kzgCommitments, kzgProofs] = networkTxValues;\n        // Construct the tx but don't freeze yet, we will assign blobs etc once validated\n        const decodedTx = BlobEIP4844Transaction.fromValuesArray(txValues, { ...opts, freeze: false });\n        if (decodedTx.to === undefined) {\n            throw Error('BlobEIP4844Transaction can not be send without a valid `to`');\n        }\n        const version = Number(opts.common.param('sharding', 'blobCommitmentVersionKzg'));\n        validateBlobTransactionNetworkWrapper(decodedTx.blobVersionedHashes, blobs, kzgCommitments, kzgProofs, version);\n        // set the network blob data on the tx\n        decodedTx.blobs = blobs;\n        decodedTx.kzgCommitments = kzgCommitments;\n        decodedTx.kzgProofs = kzgProofs;\n        // freeze the tx\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(decodedTx);\n        }\n        return decodedTx;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return _capabilities_eip2930_js__WEBPACK_IMPORTED_MODULE_5__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_0) {\n        return _capabilities_eip1559_js__WEBPACK_IMPORTED_MODULE_3__.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-4844 transaction, in order.\n     *\n     * Format: [chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s]`.\n     *\n     * Use {@link BlobEIP4844Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link BlobEIP4844Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.chainId),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.maxFeePerBlobGas),\n            this.blobVersionedHashes,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-4844 transaction.\n     *\n     * Format: `0x03 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`.\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this);\n    }\n    /**\n     * @returns the serialized form of a blob transaction in the network wrapper format (used for gossipping mempool transactions over devp2p)\n     */\n    serializeNetworkWrapper() {\n        if (this.blobs === undefined ||\n            this.kzgCommitments === undefined ||\n            this.kzgProofs === undefined) {\n            throw new Error('cannot serialize network wrapper without blobs, KZG commitments and KZG proofs provided');\n        }\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this, [this.raw(), this.blobs, this.kzgCommitments, this.kzgProofs]);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.serialize(this, this.raw().slice(0, 11));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return _capabilities_eip2718_js__WEBPACK_IMPORTED_MODULE_4__.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link BlobEIP4844Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.hash(this);\n    }\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.getSenderPublicKey(this);\n    }\n    toJSON() {\n        const accessListJSON = _util_js__WEBPACK_IMPORTED_MODULE_9__.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON,\n            maxFeePerBlobGas: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.maxFeePerBlobGas),\n            blobVersionedHashes: this.blobVersionedHashes.map((hash) => (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(hash)),\n        };\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return BlobEIP4844Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_27,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s),\n            maxFeePerBlobGas: this.maxFeePerBlobGas,\n            blobVersionedHashes: this.blobVersionedHashes,\n            blobs: this.blobs,\n            kzgCommitments: this.kzgCommitments,\n            kzgProofs: this.kzgProofs,\n        }, opts);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_6__.errorMsg(this, msg);\n    }\n    /**\n     * @returns the number of blobs included with this transaction\n     */\n    numBlobs() {\n        return this.blobVersionedHashes.length;\n    }\n}\n//# sourceMappingURL=eip4844Transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeTxParams: function() { return /* binding */ normalizeTxParams; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\nconst normalizeTxParams = (_txParams) => {\n    const txParams = Object.assign({}, _txParams);\n    txParams.gasLimit = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(txParams.gasLimit ?? txParams.gas, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;\n    // check and convert gasPrice and value params\n    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;\n    // strict byte length checking\n    txParams.to =\n        txParams.to !== null && txParams.to !== undefined\n            ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txParams.to), 20)\n            : null;\n    // Normalize the v/r/s values. If RPC returns '0x0', ensure v/r/s are set to `undefined` in the tx.\n    // If this is not done, then the transaction creation will throw, because `v` is `0`.\n    // Note: this still means that `isSigned` will return `false`.\n    // v/r/s values are `0x0` on networks like Optimism, where the tx is a system tx.\n    // For instance: https://optimistic.etherscan.io/tx/0xf4304cb09b3f58a8e5d20fec5f393c96ccffe0269aaf632cb2be7a8a0f0c91cc\n    txParams.v = txParams.v === '0x0' ? '0x' : txParams.v;\n    txParams.r = txParams.r === '0x0' ? '0x' : txParams.r;\n    txParams.s = txParams.s === '0x0' ? '0x' : txParams.s;\n    if (txParams.v !== '0x' || txParams.r !== '0x' || txParams.s !== '0x') {\n        txParams.v = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toType)(txParams.v, _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.TypeOutput.BigInt);\n    }\n    return txParams;\n};\n//# sourceMappingURL=fromRpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9mcm9tUnBjLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThFO0FBQ3ZFO0FBQ1AscUNBQXFDO0FBQ3JDLHdCQUF3Qix3REFBTSxvQ0FBb0Msd0RBQVU7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLCtEQUFhLENBQUMseURBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0RBQU0sYUFBYSx3REFBVTtBQUNsRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9mcm9tUnBjLmpzPzE5YzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZU91dHB1dCwgc2V0TGVuZ3RoTGVmdCwgdG9CeXRlcywgdG9UeXBlIH0gZnJvbSAnQGV0aGVyZXVtanMvdXRpbCc7XG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVHhQYXJhbXMgPSAoX3R4UGFyYW1zKSA9PiB7XG4gICAgY29uc3QgdHhQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBfdHhQYXJhbXMpO1xuICAgIHR4UGFyYW1zLmdhc0xpbWl0ID0gdG9UeXBlKHR4UGFyYW1zLmdhc0xpbWl0ID8/IHR4UGFyYW1zLmdhcywgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgIHR4UGFyYW1zLmRhdGEgPSB0eFBhcmFtcy5kYXRhID09PSB1bmRlZmluZWQgPyB0eFBhcmFtcy5pbnB1dCA6IHR4UGFyYW1zLmRhdGE7XG4gICAgLy8gY2hlY2sgYW5kIGNvbnZlcnQgZ2FzUHJpY2UgYW5kIHZhbHVlIHBhcmFtc1xuICAgIHR4UGFyYW1zLmdhc1ByaWNlID0gdHhQYXJhbXMuZ2FzUHJpY2UgIT09IHVuZGVmaW5lZCA/IEJpZ0ludCh0eFBhcmFtcy5nYXNQcmljZSkgOiB1bmRlZmluZWQ7XG4gICAgdHhQYXJhbXMudmFsdWUgPSB0eFBhcmFtcy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gQmlnSW50KHR4UGFyYW1zLnZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAvLyBzdHJpY3QgYnl0ZSBsZW5ndGggY2hlY2tpbmdcbiAgICB0eFBhcmFtcy50byA9XG4gICAgICAgIHR4UGFyYW1zLnRvICE9PSBudWxsICYmIHR4UGFyYW1zLnRvICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gc2V0TGVuZ3RoTGVmdCh0b0J5dGVzKHR4UGFyYW1zLnRvKSwgMjApXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgLy8gTm9ybWFsaXplIHRoZSB2L3IvcyB2YWx1ZXMuIElmIFJQQyByZXR1cm5zICcweDAnLCBlbnN1cmUgdi9yL3MgYXJlIHNldCB0byBgdW5kZWZpbmVkYCBpbiB0aGUgdHguXG4gICAgLy8gSWYgdGhpcyBpcyBub3QgZG9uZSwgdGhlbiB0aGUgdHJhbnNhY3Rpb24gY3JlYXRpb24gd2lsbCB0aHJvdywgYmVjYXVzZSBgdmAgaXMgYDBgLlxuICAgIC8vIE5vdGU6IHRoaXMgc3RpbGwgbWVhbnMgdGhhdCBgaXNTaWduZWRgIHdpbGwgcmV0dXJuIGBmYWxzZWAuXG4gICAgLy8gdi9yL3MgdmFsdWVzIGFyZSBgMHgwYCBvbiBuZXR3b3JrcyBsaWtlIE9wdGltaXNtLCB3aGVyZSB0aGUgdHggaXMgYSBzeXN0ZW0gdHguXG4gICAgLy8gRm9yIGluc3RhbmNlOiBodHRwczovL29wdGltaXN0aWMuZXRoZXJzY2FuLmlvL3R4LzB4ZjQzMDRjYjA5YjNmNThhOGU1ZDIwZmVjNWYzOTNjOTZjY2ZmZTAyNjlhYWY2MzJjYjJiZTdhOGEwZjBjOTFjY1xuICAgIHR4UGFyYW1zLnYgPSB0eFBhcmFtcy52ID09PSAnMHgwJyA/ICcweCcgOiB0eFBhcmFtcy52O1xuICAgIHR4UGFyYW1zLnIgPSB0eFBhcmFtcy5yID09PSAnMHgwJyA/ICcweCcgOiB0eFBhcmFtcy5yO1xuICAgIHR4UGFyYW1zLnMgPSB0eFBhcmFtcy5zID09PSAnMHgwJyA/ICcweCcgOiB0eFBhcmFtcy5zO1xuICAgIGlmICh0eFBhcmFtcy52ICE9PSAnMHgnIHx8IHR4UGFyYW1zLnIgIT09ICcweCcgfHwgdHhQYXJhbXMucyAhPT0gJzB4Jykge1xuICAgICAgICB0eFBhcmFtcy52ID0gdG9UeXBlKHR4UGFyYW1zLnYsIFR5cGVPdXRwdXQuQmlnSW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHR4UGFyYW1zO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21ScGMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: function() { return /* reexport safe */ _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_1__.AccessListEIP2930Transaction; },\n/* harmony export */   BlobEIP4844Transaction: function() { return /* reexport safe */ _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_2__.BlobEIP4844Transaction; },\n/* harmony export */   FeeMarketEIP1559Transaction: function() { return /* reexport safe */ _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_0__.FeeMarketEIP1559Transaction; },\n/* harmony export */   LegacyTransaction: function() { return /* reexport safe */ _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_3__.LegacyTransaction; },\n/* harmony export */   TransactionFactory: function() { return /* reexport safe */ _transactionFactory_js__WEBPACK_IMPORTED_MODULE_4__.TransactionFactory; }\n/* harmony export */ });\n/* harmony import */ var _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eip1559Transaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js\");\n/* harmony import */ var _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eip2930Transaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js\");\n/* harmony import */ var _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eip4844Transaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js\");\n/* harmony import */ var _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./legacyTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js\");\n/* harmony import */ var _transactionFactory_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transactionFactory.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types_js__WEBPACK_IMPORTED_MODULE_5__) if([\"default\",\"FeeMarketEIP1559Transaction\",\"AccessListEIP2930Transaction\",\"BlobEIP4844Transaction\",\"LegacyTransaction\",\"TransactionFactory\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types_js__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRTtBQUNDO0FBQ047QUFDTjtBQUNFO0FBQ2xDO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3R4L2Rpc3QvZXNtL2luZGV4LmpzPzUxOTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgRmVlTWFya2V0RUlQMTU1OVRyYW5zYWN0aW9uIH0gZnJvbSAnLi9laXAxNTU5VHJhbnNhY3Rpb24uanMnO1xuZXhwb3J0IHsgQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbiB9IGZyb20gJy4vZWlwMjkzMFRyYW5zYWN0aW9uLmpzJztcbmV4cG9ydCB7IEJsb2JFSVA0ODQ0VHJhbnNhY3Rpb24gfSBmcm9tICcuL2VpcDQ4NDRUcmFuc2FjdGlvbi5qcyc7XG5leHBvcnQgeyBMZWdhY3lUcmFuc2FjdGlvbiB9IGZyb20gJy4vbGVnYWN5VHJhbnNhY3Rpb24uanMnO1xuZXhwb3J0IHsgVHJhbnNhY3Rpb25GYWN0b3J5IH0gZnJvbSAnLi90cmFuc2FjdGlvbkZhY3RvcnkuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LegacyTransaction: function() { return /* binding */ LegacyTransaction; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/baseTransaction.js\");\n/* harmony import */ var _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./capabilities/legacy.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/capabilities/legacy.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\n\n\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nclass LegacyTransaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_3__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: _types_js__WEBPACK_IMPORTED_MODULE_5__.TransactionType.Legacy }, opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.gasPrice = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_3__.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork('spuriousDragon')) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new LegacyTransaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Uint8Arrays, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        return new LegacyTransaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Bytes values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.v !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    /**\n     * Returns the raw unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: the raw message message format for the legacy tx is not RLP encoded\n     * and you might need to do yourself with:\n     *\n     * ```javascript\n     * import { RLP } from '@ethereumjs/rlp'\n     * const message = tx.getMessageToSign()\n     * const serializedMessage = RLP.encode(message)) // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        const message = [\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n        ];\n        if (this.supports(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection)) {\n            message.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToUnpaddedBytes)(this.common.chainId()));\n            message.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.unpadBytes)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(0)));\n            message.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.unpadBytes)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.toBytes)(0)));\n        }\n        return message;\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     */\n    getHashedMessageToSign() {\n        const message = this.getMessageToSign();\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_2__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(message));\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.getSenderPublicKey(this);\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    _processSignature(v, r, s) {\n        if (this.supports(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_2 + _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_8;\n        }\n        const opts = { ...this.txOptions, common: this.common };\n        return LegacyTransaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(r),\n            s: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    toJSON() {\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            gasPrice: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.gasPrice),\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */\n    _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            v !== 0 &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            v !== 27 &&\n            v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            }\n            else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / _ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.BIGINT_2;\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return _capabilities_legacy_js__WEBPACK_IMPORTED_MODULE_4__.errorMsg(this, msg);\n    }\n}\n//# sourceMappingURL=legacyTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionFactory: function() { return /* binding */ TransactionFactory; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eip1559Transaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip1559Transaction.js\");\n/* harmony import */ var _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eip2930Transaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip2930Transaction.js\");\n/* harmony import */ var _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eip4844Transaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/eip4844Transaction.js\");\n/* harmony import */ var _fromRpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromRpc.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/fromRpc.js\");\n/* harmony import */ var _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./legacyTransaction.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/legacyTransaction.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\n\n\n\n\n\nclass TransactionFactory {\n    // It is not possible to instantiate a TransactionFactory object.\n    constructor() { }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    static fromTxData(txData, txOptions = {}) {\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromTxData(txData, txOptions);\n        }\n        else {\n            if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isLegacyTxData)(txData)) {\n                return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromTxData(txData, txOptions);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isAccessListEIP2930TxData)(txData)) {\n                return _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_2__.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isFeeMarketEIP1559TxData)(txData)) {\n                return _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_1__.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_6__.isBlobEIP4844TxData)(txData)) {\n                return _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_3__.BlobEIP4844Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(`Tx instantiation with type ${txData?.type} not supported`);\n            }\n        }\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Uint8Array\n     * @param txOptions - The transaction options\n     */\n    static fromSerializedData(data, txOptions = {}) {\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            switch (data[0]) {\n                case _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.AccessListEIP2930:\n                    return _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_2__.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n                case _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.FeeMarketEIP1559:\n                    return _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_1__.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n                case _types_js__WEBPACK_IMPORTED_MODULE_6__.TransactionType.BlobEIP4844:\n                    return _eip4844Transaction_js__WEBPACK_IMPORTED_MODULE_3__.BlobEIP4844Transaction.fromSerializedTx(data, txOptions);\n                default:\n                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n            }\n        }\n        else {\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromSerializedTx(data, txOptions);\n        }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Uint8Array[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Uint8Array or Uint8Array[]\n     * @param txOptions - The transaction options\n     */\n    static fromBlockBodyData(data, txOptions = {}) {\n        if (data instanceof Uint8Array) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_5__.LegacyTransaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    }\n    /**\n     *  Method to retrieve a transaction from the provider\n     * @param provider - a url string for a JSON-RPC provider or an Ethers JsonRPCProvider object\n     * @param txHash - Transaction hash\n     * @param txOptions - The transaction options\n     * @returns the transaction specified by `txHash`\n     */\n    static async fromJsonRpcProvider(provider, txHash, txOptions) {\n        const prov = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.getProvider)(provider);\n        const txData = await (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.fetchFromProvider)(prov, {\n            method: 'eth_getTransactionByHash',\n            params: [txHash],\n        });\n        if (txData === null) {\n            throw new Error('No data returned from provider');\n        }\n        return TransactionFactory.fromRPC(txData, txOptions);\n    }\n    /**\n     * Method to decode data retrieved from RPC, such as `eth_getTransactionByHash`\n     * Note that this normalizes some of the parameters\n     * @param txData The RPC-encoded data\n     * @param txOptions The transaction options\n     * @returns\n     */\n    static async fromRPC(txData, txOptions = {}) {\n        return TransactionFactory.fromTxData((0,_fromRpc_js__WEBPACK_IMPORTED_MODULE_4__.normalizeTxParams)(txData), txOptions);\n    }\n}\n//# sourceMappingURL=transactionFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS90cmFuc2FjdGlvbkZhY3RvcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBa0U7QUFDSTtBQUNDO0FBQ047QUFDaEI7QUFDVTtBQUM2RTtBQUNqSTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLG1CQUFtQixvRUFBaUI7QUFDcEM7QUFDQTtBQUNBLGdCQUFnQix5REFBYztBQUM5Qix1QkFBdUIsb0VBQWlCO0FBQ3hDO0FBQ0EscUJBQXFCLG9FQUF5QjtBQUM5Qyx1QkFBdUIsZ0ZBQTRCO0FBQ25EO0FBQ0EscUJBQXFCLG1FQUF3QjtBQUM3Qyx1QkFBdUIsK0VBQTJCO0FBQ2xEO0FBQ0EscUJBQXFCLDhEQUFtQjtBQUN4Qyx1QkFBdUIsMEVBQXNCO0FBQzdDO0FBQ0E7QUFDQSw4REFBOEQsY0FBYztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNEQUFlO0FBQ3BDLDJCQUEyQixnRkFBNEI7QUFDdkQscUJBQXFCLHNEQUFlO0FBQ3BDLDJCQUEyQiwrRUFBMkI7QUFDdEQscUJBQXFCLHNEQUFlO0FBQ3BDLDJCQUEyQiwwRUFBc0I7QUFDakQ7QUFDQSxnRUFBZ0UsU0FBUztBQUN6RTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0VBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvRUFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQVc7QUFDaEMsNkJBQTZCLG1FQUFpQjtBQUM5QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQyw2Q0FBNkMsOERBQWlCO0FBQzlEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS90cmFuc2FjdGlvbkZhY3RvcnkuanM/MGUyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmZXRjaEZyb21Qcm92aWRlciwgZ2V0UHJvdmlkZXIgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbmltcG9ydCB7IEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbiB9IGZyb20gJy4vZWlwMTU1OVRyYW5zYWN0aW9uLmpzJztcbmltcG9ydCB7IEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24gfSBmcm9tICcuL2VpcDI5MzBUcmFuc2FjdGlvbi5qcyc7XG5pbXBvcnQgeyBCbG9iRUlQNDg0NFRyYW5zYWN0aW9uIH0gZnJvbSAnLi9laXA0ODQ0VHJhbnNhY3Rpb24uanMnO1xuaW1wb3J0IHsgbm9ybWFsaXplVHhQYXJhbXMgfSBmcm9tICcuL2Zyb21ScGMuanMnO1xuaW1wb3J0IHsgTGVnYWN5VHJhbnNhY3Rpb24gfSBmcm9tICcuL2xlZ2FjeVRyYW5zYWN0aW9uLmpzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uVHlwZSwgaXNBY2Nlc3NMaXN0RUlQMjkzMFR4RGF0YSwgaXNCbG9iRUlQNDg0NFR4RGF0YSwgaXNGZWVNYXJrZXRFSVAxNTU5VHhEYXRhLCBpc0xlZ2FjeVR4RGF0YSwgfSBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbkZhY3Rvcnkge1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbnN0YW50aWF0ZSBhIFRyYW5zYWN0aW9uRmFjdG9yeSBvYmplY3QuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0cmFuc2FjdGlvbiBmcm9tIGEgYHR4RGF0YWAgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHhEYXRhIC0gVGhlIHRyYW5zYWN0aW9uIGRhdGEuIFRoZSBgdHlwZWAgZmllbGQgd2lsbCBkZXRlcm1pbmUgd2hpY2ggdHJhbnNhY3Rpb24gdHlwZSBpcyByZXR1cm5lZCAoaWYgdW5kZWZpbmVkLCBjcmVhdGVzIGEgbGVnYWN5IHRyYW5zYWN0aW9uKVxuICAgICAqIEBwYXJhbSB0eE9wdGlvbnMgLSBPcHRpb25zIHRvIHBhc3Mgb24gdG8gdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tVHhEYXRhKHR4RGF0YSwgdHhPcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKCEoJ3R5cGUnIGluIHR4RGF0YSkgfHwgdHhEYXRhLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gQXNzdW1lIGxlZ2FjeSB0cmFuc2FjdGlvblxuICAgICAgICAgICAgcmV0dXJuIExlZ2FjeVRyYW5zYWN0aW9uLmZyb21UeERhdGEodHhEYXRhLCB0eE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzTGVnYWN5VHhEYXRhKHR4RGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGVnYWN5VHJhbnNhY3Rpb24uZnJvbVR4RGF0YSh0eERhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FjY2Vzc0xpc3RFSVAyOTMwVHhEYXRhKHR4RGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbi5mcm9tVHhEYXRhKHR4RGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRmVlTWFya2V0RUlQMTU1OVR4RGF0YSh0eERhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbi5mcm9tVHhEYXRhKHR4RGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQmxvYkVJUDQ4NDRUeERhdGEodHhEYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCbG9iRUlQNDg0NFRyYW5zYWN0aW9uLmZyb21UeERhdGEodHhEYXRhLCB0eE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUeCBpbnN0YW50aWF0aW9uIHdpdGggdHlwZSAke3R4RGF0YT8udHlwZX0gbm90IHN1cHBvcnRlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHRyaWVzIHRvIGRlY29kZSBzZXJpYWxpemVkIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIFVpbnQ4QXJyYXlcbiAgICAgKiBAcGFyYW0gdHhPcHRpb25zIC0gVGhlIHRyYW5zYWN0aW9uIG9wdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVNlcmlhbGl6ZWREYXRhKGRhdGEsIHR4T3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmIChkYXRhWzBdIDw9IDB4N2YpIHtcbiAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgdHlwZS5cbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YVswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25UeXBlLkFjY2Vzc0xpc3RFSVAyOTMwOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbi5mcm9tU2VyaWFsaXplZFR4KGRhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuRmVlTWFya2V0RUlQMTU1OTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbi5mcm9tU2VyaWFsaXplZFR4KGRhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuQmxvYkVJUDQ4NDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCbG9iRUlQNDg0NFRyYW5zYWN0aW9uLmZyb21TZXJpYWxpemVkVHgoZGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGVkVHJhbnNhY3Rpb24gd2l0aCBJRCAke2RhdGFbMF19IHVua25vd25gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBMZWdhY3lUcmFuc2FjdGlvbi5mcm9tU2VyaWFsaXplZFR4KGRhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiBkZWNvZGluZyBhIEJsb2NrQm9keSwgaW4gdGhlIHRyYW5zYWN0aW9ucyBmaWVsZCwgYSBmaWVsZCBpcyBlaXRoZXI6XG4gICAgICogQSBVaW50OEFycmF5IChhIFR5cGVkVHJhbnNhY3Rpb24gLSBlbmNvZGVkIGFzIFRyYW5zYWN0aW9uVHlwZSB8fCBybHAoVHJhbnNhY3Rpb25QYXlsb2FkKSlcbiAgICAgKiBBIFVpbnQ4QXJyYXlbXSAoTGVnYWN5IFRyYW5zYWN0aW9uKVxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIHJpZ2h0IHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgLSBBIFVpbnQ4QXJyYXkgb3IgVWludDhBcnJheVtdXG4gICAgICogQHBhcmFtIHR4T3B0aW9ucyAtIFRoZSB0cmFuc2FjdGlvbiBvcHRpb25zXG4gICAgICovXG4gICAgc3RhdGljIGZyb21CbG9ja0JvZHlEYXRhKGRhdGEsIHR4T3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVNlcmlhbGl6ZWREYXRhKGRhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgLy8gSXQgaXMgYSBsZWdhY3kgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIHJldHVybiBMZWdhY3lUcmFuc2FjdGlvbi5mcm9tVmFsdWVzQXJyYXkoZGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlY29kZSB0cmFuc2FjdGlvbjogdW5rbm93biB0eXBlIGlucHV0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIE1ldGhvZCB0byByZXRyaWV2ZSBhIHRyYW5zYWN0aW9uIGZyb20gdGhlIHByb3ZpZGVyXG4gICAgICogQHBhcmFtIHByb3ZpZGVyIC0gYSB1cmwgc3RyaW5nIGZvciBhIEpTT04tUlBDIHByb3ZpZGVyIG9yIGFuIEV0aGVycyBKc29uUlBDUHJvdmlkZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHR4SGFzaCAtIFRyYW5zYWN0aW9uIGhhc2hcbiAgICAgKiBAcGFyYW0gdHhPcHRpb25zIC0gVGhlIHRyYW5zYWN0aW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB0aGUgdHJhbnNhY3Rpb24gc3BlY2lmaWVkIGJ5IGB0eEhhc2hgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZyb21Kc29uUnBjUHJvdmlkZXIocHJvdmlkZXIsIHR4SGFzaCwgdHhPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHByb3YgPSBnZXRQcm92aWRlcihwcm92aWRlcik7XG4gICAgICAgIGNvbnN0IHR4RGF0YSA9IGF3YWl0IGZldGNoRnJvbVByb3ZpZGVyKHByb3YsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCcsXG4gICAgICAgICAgICBwYXJhbXM6IFt0eEhhc2hdLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR4RGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhIHJldHVybmVkIGZyb20gcHJvdmlkZXInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVHJhbnNhY3Rpb25GYWN0b3J5LmZyb21SUEModHhEYXRhLCB0eE9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gZGVjb2RlIGRhdGEgcmV0cmlldmVkIGZyb20gUlBDLCBzdWNoIGFzIGBldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2hgXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbm9ybWFsaXplcyBzb21lIG9mIHRoZSBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIHR4RGF0YSBUaGUgUlBDLWVuY29kZWQgZGF0YVxuICAgICAqIEBwYXJhbSB0eE9wdGlvbnMgVGhlIHRyYW5zYWN0aW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmcm9tUlBDKHR4RGF0YSwgdHhPcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uRmFjdG9yeS5mcm9tVHhEYXRhKG5vcm1hbGl6ZVR4UGFyYW1zKHR4RGF0YSksIHR4T3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNhY3Rpb25GYWN0b3J5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/transactionFactory.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Capability: function() { return /* binding */ Capability; },\n/* harmony export */   TransactionType: function() { return /* binding */ TransactionType; },\n/* harmony export */   isAccessList: function() { return /* binding */ isAccessList; },\n/* harmony export */   isAccessListBytes: function() { return /* binding */ isAccessListBytes; },\n/* harmony export */   isAccessListEIP2930Tx: function() { return /* binding */ isAccessListEIP2930Tx; },\n/* harmony export */   isAccessListEIP2930TxData: function() { return /* binding */ isAccessListEIP2930TxData; },\n/* harmony export */   isBlobEIP4844Tx: function() { return /* binding */ isBlobEIP4844Tx; },\n/* harmony export */   isBlobEIP4844TxData: function() { return /* binding */ isBlobEIP4844TxData; },\n/* harmony export */   isFeeMarketEIP1559Tx: function() { return /* binding */ isFeeMarketEIP1559Tx; },\n/* harmony export */   isFeeMarketEIP1559TxData: function() { return /* binding */ isFeeMarketEIP1559TxData; },\n/* harmony export */   isLegacyTx: function() { return /* binding */ isLegacyTx; },\n/* harmony export */   isLegacyTxData: function() { return /* binding */ isLegacyTxData; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n\n/**\n * Can be used in conjunction with {@link Transaction[TransactionType].supports}\n * to query on tx capabilities\n */\nvar Capability;\n(function (Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechanism\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability || (Capability = {}));\nfunction isAccessListBytes(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nfunction isAccessList(input) {\n    return !isAccessListBytes(input); // This is exactly the same method, except the output is negated.\n}\n/**\n * Encompassing type for all transaction types.\n */\nvar TransactionType;\n(function (TransactionType) {\n    TransactionType[TransactionType[\"Legacy\"] = 0] = \"Legacy\";\n    TransactionType[TransactionType[\"AccessListEIP2930\"] = 1] = \"AccessListEIP2930\";\n    TransactionType[TransactionType[\"FeeMarketEIP1559\"] = 2] = \"FeeMarketEIP1559\";\n    TransactionType[TransactionType[\"BlobEIP4844\"] = 3] = \"BlobEIP4844\";\n})(TransactionType || (TransactionType = {}));\nfunction isLegacyTx(tx) {\n    return tx.type === TransactionType.Legacy;\n}\nfunction isAccessListEIP2930Tx(tx) {\n    return tx.type === TransactionType.AccessListEIP2930;\n}\nfunction isFeeMarketEIP1559Tx(tx) {\n    return tx.type === TransactionType.FeeMarketEIP1559;\n}\nfunction isBlobEIP4844Tx(tx) {\n    return tx.type === TransactionType.BlobEIP4844;\n}\nfunction isLegacyTxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.Legacy;\n}\nfunction isAccessListEIP2930TxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.AccessListEIP2930;\n}\nfunction isFeeMarketEIP1559TxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.FeeMarketEIP1559;\n}\nfunction isBlobEIP4844TxData(txData) {\n    const txType = Number((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.toBytes)(txData.type)));\n    return txType === TransactionType.BlobEIP4844;\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQTBEO0FBQzFEO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDO0FBQzFCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUNwQztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQLDBCQUEwQiwrREFBYSxDQUFDLHlEQUFPO0FBQy9DO0FBQ0E7QUFDTztBQUNQLDBCQUEwQiwrREFBYSxDQUFDLHlEQUFPO0FBQy9DO0FBQ0E7QUFDTztBQUNQLDBCQUEwQiwrREFBYSxDQUFDLHlEQUFPO0FBQy9DO0FBQ0E7QUFDTztBQUNQLDBCQUEwQiwrREFBYSxDQUFDLHlEQUFPO0FBQy9DO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS90eXBlcy5qcz9lNzk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5dGVzVG9CaWdJbnQsIHRvQnl0ZXMgfSBmcm9tICdAZXRoZXJldW1qcy91dGlsJztcbi8qKlxuICogQ2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB7QGxpbmsgVHJhbnNhY3Rpb25bVHJhbnNhY3Rpb25UeXBlXS5zdXBwb3J0c31cbiAqIHRvIHF1ZXJ5IG9uIHR4IGNhcGFiaWxpdGllc1xuICovXG5leHBvcnQgdmFyIENhcGFiaWxpdHk7XG4oZnVuY3Rpb24gKENhcGFiaWxpdHkpIHtcbiAgICAvKipcbiAgICAgKiBUeCBzdXBwb3J0cyBFSVAtMTU1IHJlcGxheSBwcm90ZWN0aW9uXG4gICAgICogU2VlOiBbMTU1XShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTE1NSkgUmVwbGF5IEF0dGFjayBQcm90ZWN0aW9uIEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDE1NVJlcGxheVByb3RlY3Rpb25cIl0gPSAxNTVdID0gXCJFSVAxNTVSZXBsYXlQcm90ZWN0aW9uXCI7XG4gICAgLyoqXG4gICAgICogVHggc3VwcG9ydHMgRUlQLTE1NTkgZ2FzIGZlZSBtYXJrZXQgbWVjaGFuaXNtXG4gICAgICogU2VlOiBbMTU1OV0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNTU5KSBGZWUgTWFya2V0IEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDE1NTlGZWVNYXJrZXRcIl0gPSAxNTU5XSA9IFwiRUlQMTU1OUZlZU1hcmtldFwiO1xuICAgIC8qKlxuICAgICAqIFR4IGlzIGEgdHlwZWQgdHJhbnNhY3Rpb24gYXMgZGVmaW5lZCBpbiBFSVAtMjcxOFxuICAgICAqIFNlZTogWzI3MThdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjcxOCkgVHJhbnNhY3Rpb24gVHlwZSBFSVBcbiAgICAgKi9cbiAgICBDYXBhYmlsaXR5W0NhcGFiaWxpdHlbXCJFSVAyNzE4VHlwZWRUcmFuc2FjdGlvblwiXSA9IDI3MThdID0gXCJFSVAyNzE4VHlwZWRUcmFuc2FjdGlvblwiO1xuICAgIC8qKlxuICAgICAqIFR4IHN1cHBvcnRzIGFjY2VzcyBsaXN0IGdlbmVyYXRpb24gYXMgZGVmaW5lZCBpbiBFSVAtMjkzMFxuICAgICAqIFNlZTogWzI5MzBdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjkzMCkgQWNjZXNzIExpc3RzIEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDI5MzBBY2Nlc3NMaXN0c1wiXSA9IDI5MzBdID0gXCJFSVAyOTMwQWNjZXNzTGlzdHNcIjtcbn0pKENhcGFiaWxpdHkgfHwgKENhcGFiaWxpdHkgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdEJ5dGVzKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RJdGVtID0gaW5wdXRbMF07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmlyc3RJdGVtKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdChpbnB1dCkge1xuICAgIHJldHVybiAhaXNBY2Nlc3NMaXN0Qnl0ZXMoaW5wdXQpOyAvLyBUaGlzIGlzIGV4YWN0bHkgdGhlIHNhbWUgbWV0aG9kLCBleGNlcHQgdGhlIG91dHB1dCBpcyBuZWdhdGVkLlxufVxuLyoqXG4gKiBFbmNvbXBhc3NpbmcgdHlwZSBmb3IgYWxsIHRyYW5zYWN0aW9uIHR5cGVzLlxuICovXG5leHBvcnQgdmFyIFRyYW5zYWN0aW9uVHlwZTtcbihmdW5jdGlvbiAoVHJhbnNhY3Rpb25UeXBlKSB7XG4gICAgVHJhbnNhY3Rpb25UeXBlW1RyYW5zYWN0aW9uVHlwZVtcIkxlZ2FjeVwiXSA9IDBdID0gXCJMZWdhY3lcIjtcbiAgICBUcmFuc2FjdGlvblR5cGVbVHJhbnNhY3Rpb25UeXBlW1wiQWNjZXNzTGlzdEVJUDI5MzBcIl0gPSAxXSA9IFwiQWNjZXNzTGlzdEVJUDI5MzBcIjtcbiAgICBUcmFuc2FjdGlvblR5cGVbVHJhbnNhY3Rpb25UeXBlW1wiRmVlTWFya2V0RUlQMTU1OVwiXSA9IDJdID0gXCJGZWVNYXJrZXRFSVAxNTU5XCI7XG4gICAgVHJhbnNhY3Rpb25UeXBlW1RyYW5zYWN0aW9uVHlwZVtcIkJsb2JFSVA0ODQ0XCJdID0gM10gPSBcIkJsb2JFSVA0ODQ0XCI7XG59KShUcmFuc2FjdGlvblR5cGUgfHwgKFRyYW5zYWN0aW9uVHlwZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gaXNMZWdhY3lUeCh0eCkge1xuICAgIHJldHVybiB0eC50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuTGVnYWN5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdEVJUDI5MzBUeCh0eCkge1xuICAgIHJldHVybiB0eC50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuQWNjZXNzTGlzdEVJUDI5MzA7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGZWVNYXJrZXRFSVAxNTU5VHgodHgpIHtcbiAgICByZXR1cm4gdHgudHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLkZlZU1hcmtldEVJUDE1NTk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCbG9iRUlQNDg0NFR4KHR4KSB7XG4gICAgcmV0dXJuIHR4LnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5CbG9iRUlQNDg0NDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xlZ2FjeVR4RGF0YSh0eERhdGEpIHtcbiAgICBjb25zdCB0eFR5cGUgPSBOdW1iZXIoYnl0ZXNUb0JpZ0ludCh0b0J5dGVzKHR4RGF0YS50eXBlKSkpO1xuICAgIHJldHVybiB0eFR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5MZWdhY3k7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBY2Nlc3NMaXN0RUlQMjkzMFR4RGF0YSh0eERhdGEpIHtcbiAgICBjb25zdCB0eFR5cGUgPSBOdW1iZXIoYnl0ZXNUb0JpZ0ludCh0b0J5dGVzKHR4RGF0YS50eXBlKSkpO1xuICAgIHJldHVybiB0eFR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5BY2Nlc3NMaXN0RUlQMjkzMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ZlZU1hcmtldEVJUDE1NTlUeERhdGEodHhEYXRhKSB7XG4gICAgY29uc3QgdHhUeXBlID0gTnVtYmVyKGJ5dGVzVG9CaWdJbnQodG9CeXRlcyh0eERhdGEudHlwZSkpKTtcbiAgICByZXR1cm4gdHhUeXBlID09PSBUcmFuc2FjdGlvblR5cGUuRmVlTWFya2V0RUlQMTU1OTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Jsb2JFSVA0ODQ0VHhEYXRhKHR4RGF0YSkge1xuICAgIGNvbnN0IHR4VHlwZSA9IE51bWJlcihieXRlc1RvQmlnSW50KHRvQnl0ZXModHhEYXRhLnR5cGUpKSk7XG4gICAgcmV0dXJuIHR4VHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLkJsb2JFSVA0ODQ0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessLists: function() { return /* binding */ AccessLists; },\n/* harmony export */   checkMaxInitCodeSize: function() { return /* binding */ checkMaxInitCodeSize; },\n/* harmony export */   txTypeBytes: function() { return /* binding */ txTypeBytes; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/util */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/types.js\");\n\n\nfunction checkMaxInitCodeSize(common, length) {\n    const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n    }\n}\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        if ((0,_types_js__WEBPACK_IMPORTED_MODULE_1__.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for (let i = 0; i < accessList.length; i++) {\n                const item = accessList[i];\n                const addressBytes = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(item.address);\n                const storageItems = [];\n                for (let index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBytes, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList ?? [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAccessList.length; i++) {\n                const data = bufferAccessList[i];\n                const address = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data[0]);\n                const storageKeys = [];\n                for (let item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data[1][item]));\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    }\n    static verifyAccessList(accessList) {\n        for (let key = 0; key < accessList.length; key++) {\n            const accessListItem = accessList[key];\n            const address = accessListItem[0];\n            const storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length !== 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length !== 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    }\n    static getAccessListJSON(accessList) {\n        const accessListJSON = [];\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const JSONItem = {\n                address: (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)(item[0], 20)),\n                storageKeys: [],\n            };\n            const storageSlots = item[1];\n            for (let slot = 0; slot < storageSlots.length; slot++) {\n                const storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.setLengthLeft)(storageSlot, 32)));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    }\n    static getDataFeeEIP2930(accessList, common) {\n        const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        let slots = 0;\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        const addresses = accessList.length;\n        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n    }\n}\nfunction txTypeBytes(txType) {\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)('0x' + txType.toString(16).padStart(2, '0'));\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS91dGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlFO0FBQy9CO0FBQ25DO0FBQ1A7QUFDQTtBQUNBLHFGQUFxRixRQUFRLG1CQUFtQixzQ0FBc0M7QUFDdEo7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1REFBWTtBQUN4QjtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBLHFDQUFxQyw0REFBVTtBQUMvQztBQUNBLG9DQUFvQyxpQ0FBaUM7QUFDckUsc0NBQXNDLDREQUFVO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw2QkFBNkI7QUFDekQ7QUFDQSxnQ0FBZ0MsNERBQVU7QUFDMUM7QUFDQSxtQ0FBbUMsdUJBQXVCO0FBQzFELHFDQUFxQyw0REFBVTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseUJBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxtQ0FBbUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQTtBQUNBLHlCQUF5Qiw0REFBVSxDQUFDLCtEQUFhO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw0QkFBNEI7QUFDM0Q7QUFDQSwwQ0FBMEMsNERBQVUsQ0FBQywrREFBYTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkJBQTJCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsNERBQVU7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy90eC9kaXN0L2VzbS91dGlsLmpzPzdiNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0hleCwgaGV4VG9CeXRlcywgc2V0TGVuZ3RoTGVmdCB9IGZyb20gJ0BldGhlcmV1bWpzL3V0aWwnO1xuaW1wb3J0IHsgaXNBY2Nlc3NMaXN0IH0gZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tNYXhJbml0Q29kZVNpemUoY29tbW9uLCBsZW5ndGgpIHtcbiAgICBjb25zdCBtYXhJbml0Q29kZVNpemUgPSBjb21tb24ucGFyYW0oJ3ZtJywgJ21heEluaXRDb2RlU2l6ZScpO1xuICAgIGlmIChtYXhJbml0Q29kZVNpemUgJiYgQmlnSW50KGxlbmd0aCkgPiBtYXhJbml0Q29kZVNpemUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0aGUgaW5pdGNvZGUgc2l6ZSBvZiB0aGlzIHRyYW5zYWN0aW9uIGlzIHRvbyBsYXJnZTogaXQgaXMgJHtsZW5ndGh9IHdoaWxlIHRoZSBtYXggaXMgJHtjb21tb24ucGFyYW0oJ3ZtJywgJ21heEluaXRDb2RlU2l6ZScpfWApO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY2Nlc3NMaXN0cyB7XG4gICAgc3RhdGljIGdldEFjY2Vzc0xpc3REYXRhKGFjY2Vzc0xpc3QpIHtcbiAgICAgICAgbGV0IEFjY2Vzc0xpc3RKU09OO1xuICAgICAgICBsZXQgYnVmZmVyQWNjZXNzTGlzdDtcbiAgICAgICAgaWYgKGlzQWNjZXNzTGlzdChhY2Nlc3NMaXN0KSkge1xuICAgICAgICAgICAgQWNjZXNzTGlzdEpTT04gPSBhY2Nlc3NMaXN0O1xuICAgICAgICAgICAgY29uc3QgbmV3QWNjZXNzTGlzdCA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY2Nlc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGFjY2Vzc0xpc3RbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzc0J5dGVzID0gaGV4VG9CeXRlcyhpdGVtLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VJdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpdGVtLnN0b3JhZ2VLZXlzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlSXRlbXMucHVzaChoZXhUb0J5dGVzKGl0ZW0uc3RvcmFnZUtleXNbaW5kZXhdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0FjY2Vzc0xpc3QucHVzaChbYWRkcmVzc0J5dGVzLCBzdG9yYWdlSXRlbXNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlckFjY2Vzc0xpc3QgPSBuZXdBY2Nlc3NMaXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyQWNjZXNzTGlzdCA9IGFjY2Vzc0xpc3QgPz8gW107XG4gICAgICAgICAgICAvLyBidWlsZCB0aGUgSlNPTlxuICAgICAgICAgICAgY29uc3QganNvbiA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXJBY2Nlc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGJ1ZmZlckFjY2Vzc0xpc3RbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IGJ5dGVzVG9IZXgoZGF0YVswXSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZUtleXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdGVtID0gMDsgaXRlbSA8IGRhdGFbMV0ubGVuZ3RoOyBpdGVtKyspIHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZUtleXMucHVzaChieXRlc1RvSGV4KGRhdGFbMV1baXRlbV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QganNvbkl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VLZXlzLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAganNvbi5wdXNoKGpzb25JdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEFjY2Vzc0xpc3RKU09OID0ganNvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgQWNjZXNzTGlzdEpTT04sXG4gICAgICAgICAgICBhY2Nlc3NMaXN0OiBidWZmZXJBY2Nlc3NMaXN0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgdmVyaWZ5QWNjZXNzTGlzdChhY2Nlc3NMaXN0KSB7XG4gICAgICAgIGZvciAobGV0IGtleSA9IDA7IGtleSA8IGFjY2Vzc0xpc3QubGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgY29uc3QgYWNjZXNzTGlzdEl0ZW0gPSBhY2Nlc3NMaXN0W2tleV07XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gYWNjZXNzTGlzdEl0ZW1bMF07XG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlU2xvdHMgPSBhY2Nlc3NMaXN0SXRlbVsxXTtcbiAgICAgICAgICAgIGlmIChhY2Nlc3NMaXN0SXRlbVsyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY2Nlc3MgbGlzdCBpdGVtIGNhbm5vdCBoYXZlIDMgZWxlbWVudHMuIEl0IGNhbiBvbmx5IGhhdmUgYW4gYWRkcmVzcywgYW5kIGFuIGFycmF5IG9mIHN0b3JhZ2Ugc2xvdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRkcmVzcy5sZW5ndGggIT09IDIwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEVJUC0yOTMwIHRyYW5zYWN0aW9uOiBhZGRyZXNzIGxlbmd0aCBzaG91bGQgYmUgMjAgYnl0ZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IHN0b3JhZ2VTbG90ID0gMDsgc3RvcmFnZVNsb3QgPCBzdG9yYWdlU2xvdHMubGVuZ3RoOyBzdG9yYWdlU2xvdCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0b3JhZ2VTbG90c1tzdG9yYWdlU2xvdF0ubGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRUlQLTI5MzAgdHJhbnNhY3Rpb246IHN0b3JhZ2Ugc2xvdCBsZW5ndGggc2hvdWxkIGJlIDMyIGJ5dGVzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBnZXRBY2Nlc3NMaXN0SlNPTihhY2Nlc3NMaXN0KSB7XG4gICAgICAgIGNvbnN0IGFjY2Vzc0xpc3RKU09OID0gW107XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhY2Nlc3NMaXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGFjY2Vzc0xpc3RbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgSlNPTkl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzczogYnl0ZXNUb0hleChzZXRMZW5ndGhMZWZ0KGl0ZW1bMF0sIDIwKSksXG4gICAgICAgICAgICAgICAgc3RvcmFnZUtleXM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VTbG90cyA9IGl0ZW1bMV07XG4gICAgICAgICAgICBmb3IgKGxldCBzbG90ID0gMDsgc2xvdCA8IHN0b3JhZ2VTbG90cy5sZW5ndGg7IHNsb3QrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VTbG90ID0gc3RvcmFnZVNsb3RzW3Nsb3RdO1xuICAgICAgICAgICAgICAgIEpTT05JdGVtLnN0b3JhZ2VLZXlzLnB1c2goYnl0ZXNUb0hleChzZXRMZW5ndGhMZWZ0KHN0b3JhZ2VTbG90LCAzMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjY2Vzc0xpc3RKU09OLnB1c2goSlNPTkl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2Nlc3NMaXN0SlNPTjtcbiAgICB9XG4gICAgc3RhdGljIGdldERhdGFGZWVFSVAyOTMwKGFjY2Vzc0xpc3QsIGNvbW1vbikge1xuICAgICAgICBjb25zdCBhY2Nlc3NMaXN0U3RvcmFnZUtleUNvc3QgPSBjb21tb24ucGFyYW0oJ2dhc1ByaWNlcycsICdhY2Nlc3NMaXN0U3RvcmFnZUtleUNvc3QnKTtcbiAgICAgICAgY29uc3QgYWNjZXNzTGlzdEFkZHJlc3NDb3N0ID0gY29tbW9uLnBhcmFtKCdnYXNQcmljZXMnLCAnYWNjZXNzTGlzdEFkZHJlc3NDb3N0Jyk7XG4gICAgICAgIGxldCBzbG90cyA9IDA7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhY2Nlc3NMaXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGFjY2Vzc0xpc3RbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgc3RvcmFnZVNsb3RzID0gaXRlbVsxXTtcbiAgICAgICAgICAgIHNsb3RzICs9IHN0b3JhZ2VTbG90cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gYWNjZXNzTGlzdC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBhZGRyZXNzZXMgKiBOdW1iZXIoYWNjZXNzTGlzdEFkZHJlc3NDb3N0KSArIHNsb3RzICogTnVtYmVyKGFjY2Vzc0xpc3RTdG9yYWdlS2V5Q29zdCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHR4VHlwZUJ5dGVzKHR4VHlwZSkge1xuICAgIHJldHVybiBoZXhUb0J5dGVzKCcweCcgKyB0eFR5cGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/tx/dist/esm/util.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: function() { return /* binding */ Account; },\n/* harmony export */   accountBodyFromSlim: function() { return /* binding */ accountBodyFromSlim; },\n/* harmony export */   accountBodyToRLP: function() { return /* binding */ accountBodyToRLP; },\n/* harmony export */   accountBodyToSlim: function() { return /* binding */ accountBodyToSlim; },\n/* harmony export */   generateAddress: function() { return /* binding */ generateAddress; },\n/* harmony export */   generateAddress2: function() { return /* binding */ generateAddress2; },\n/* harmony export */   importPublic: function() { return /* binding */ importPublic; },\n/* harmony export */   isValidAddress: function() { return /* binding */ isValidAddress; },\n/* harmony export */   isValidChecksumAddress: function() { return /* binding */ isValidChecksumAddress; },\n/* harmony export */   isValidPrivate: function() { return /* binding */ isValidPrivate; },\n/* harmony export */   isValidPublic: function() { return /* binding */ isValidPublic; },\n/* harmony export */   isZeroAddress: function() { return /* binding */ isZeroAddress; },\n/* harmony export */   privateToAddress: function() { return /* binding */ privateToAddress; },\n/* harmony export */   privateToPublic: function() { return /* binding */ privateToPublic; },\n/* harmony export */   pubToAddress: function() { return /* binding */ pubToAddress; },\n/* harmony export */   publicToAddress: function() { return /* binding */ publicToAddress; },\n/* harmony export */   toChecksumAddress: function() { return /* binding */ toChecksumAddress; },\n/* harmony export */   zeroAddress: function() { return /* binding */ zeroAddress; }\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/rlp/dist/esm/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n\n\n\n\n\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    constructor(nonce = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, balance = _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0, storageRoot = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP, codeHash = _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) {\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(nonce)) : undefined, balance !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance < _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error('storageRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */\n    raw() {\n        return [\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.nonce),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash,\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */\n    serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        return !(0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        return (this.balance === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 &&\n            this.nonce === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0 &&\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(this.codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL));\n    }\n}\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsHexString)(hexAddress);\n    const address = (0,_internal_js__WEBPACK_IMPORTED_MODULE_6__.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + '0x';\n    }\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)(prefix + address);\n    const hash = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(bytes)).slice(2);\n    let ret = '0x';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(nonce);\n    if ((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToBigInt)(nonce) === _constants_js__WEBPACK_IMPORTED_MODULE_4__.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([from, Uint8Array.from([])])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode([from, nonce])).subarray(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(from);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(salt);\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error('Expected from to be of length 20');\n    }\n    if (salt.length !== 32) {\n        throw new Error('Expected salt to be of length 32');\n    }\n    const address = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)('0xff'), from, salt, (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(initCode)));\n    return address.subarray(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.utils.isValidPrivateKey(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex((0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(Uint8Array.from([4]), publicKey));\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey, sanitize = false) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(pubKey).subarray(-20);\n};\nconst publicToAddress = pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n    return publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n    const addressLength = 20;\n    const addr = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(addressLength);\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n    try {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = zeroAddress();\n    return zeroAddr === hexAddress;\n};\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL : codeHash,\n    ];\n}\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(storageRoot, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_3__.equalsBytes)(codeHash, _constants_js__WEBPACK_IMPORTED_MODULE_4__.KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n    ];\n}\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(accountBody);\n}\n//# sourceMappingURL=account.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: function() { return /* binding */ Address; }\n/* harmony export */ });\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n\n\n/**\n * Handling and generating Ethereum addresses\n */\nclass Address {\n    constructor(bytes) {\n        if (bytes.length !== 20) {\n            throw new Error('Invalid address length');\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        if (!(0,_account_js__WEBPACK_IMPORTED_MODULE_0__.isValidAddress)(str)) {\n            throw new Error('Invalid address');\n        }\n        return new Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error('Public key should be Uint8Array');\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error('Private key should be Uint8Array');\n        }\n        const bytes = (0,_account_js__WEBPACK_IMPORTED_MODULE_0__.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        if (typeof nonce !== 'bigint') {\n            throw new Error('Expected nonce to be a bigint');\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress)(from.bytes, (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error('Expected salt to be a Uint8Array');\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error('Expected initCode to be a Uint8Array');\n        }\n        return new Address((0,_account_js__WEBPACK_IMPORTED_MODULE_0__.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToBigInt)(this.bytes);\n        const rangeMin = _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0;\n        const rangeMax = BigInt('0xffff');\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */\n    toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n}\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrSDtBQUNmO0FBQ3pEO0FBQzFDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0RBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwyREFBYztBQUMzQjtBQUNBO0FBQ0EsMkJBQTJCLGtEQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5REFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0REFBZSxhQUFhLHdEQUFhO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNkRBQWdCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3REFBYTtBQUNyQyx5QkFBeUIsbURBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFEQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2FkZHJlc3MuanM/YjcwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmF0ZUFkZHJlc3MsIGdlbmVyYXRlQWRkcmVzczIsIGlzVmFsaWRBZGRyZXNzLCBwcml2YXRlVG9BZGRyZXNzLCBwdWJUb0FkZHJlc3MsIH0gZnJvbSAnLi9hY2NvdW50LmpzJztcbmltcG9ydCB7IGJpZ0ludFRvQnl0ZXMsIGJ5dGVzVG9CaWdJbnQsIGJ5dGVzVG9IZXgsIGVxdWFsc0J5dGVzLCB0b0J5dGVzLCB6ZXJvcyB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgQklHSU5UXzAgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG4vKipcbiAqIEhhbmRsaW5nIGFuZCBnZW5lcmF0aW5nIEV0aGVyZXVtIGFkZHJlc3Nlc1xuICovXG5leHBvcnQgY2xhc3MgQWRkcmVzcyB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCAhPT0gMjApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhZGRyZXNzIGxlbmd0aCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnl0ZXMgPSBieXRlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgemVybyBhZGRyZXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyB6ZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoemVyb3MoMjApKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBBZGRyZXNzIG9iamVjdCBmcm9tIGEgaGV4LWVuY29kZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBzdHIgLSBIZXgtZW5jb2RlZCBhZGRyZXNzXG4gICAgICovXG4gICAgc3RhdGljIGZyb21TdHJpbmcoc3RyKSB7XG4gICAgICAgIGlmICghaXNWYWxpZEFkZHJlc3Moc3RyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFkZHJlc3MnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3ModG9CeXRlcyhzdHIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhZGRyZXNzIGZvciBhIGdpdmVuIHB1YmxpYyBrZXkuXG4gICAgICogQHBhcmFtIHB1YktleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5XG4gICAgICovXG4gICAgc3RhdGljIGZyb21QdWJsaWNLZXkocHViS2V5KSB7XG4gICAgICAgIGlmICghKHB1YktleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1B1YmxpYyBrZXkgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBieXRlcyA9IHB1YlRvQWRkcmVzcyhwdWJLZXkpO1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoYnl0ZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgZm9yIGEgZ2l2ZW4gcHJpdmF0ZSBrZXkuXG4gICAgICogQHBhcmFtIHByaXZhdGVLZXkgQSBwcml2YXRlIGtleSBtdXN0IGJlIDI1NiBiaXRzIHdpZGVcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVByaXZhdGVLZXkocHJpdmF0ZUtleSkge1xuICAgICAgICBpZiAoIShwcml2YXRlS2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHJpdmF0ZSBrZXkgc2hvdWxkIGJlIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBieXRlcyA9IHByaXZhdGVUb0FkZHJlc3MocHJpdmF0ZUtleSk7XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhieXRlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhbiBhZGRyZXNzIGZvciBhIG5ld2x5IGNyZWF0ZWQgY29udHJhY3QuXG4gICAgICogQHBhcmFtIGZyb20gVGhlIGFkZHJlc3Mgd2hpY2ggaXMgY3JlYXRpbmcgdGhpcyBuZXcgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBub25jZSBUaGUgbm9uY2Ugb2YgdGhlIGZyb20gYWNjb3VudFxuICAgICAqL1xuICAgIHN0YXRpYyBnZW5lcmF0ZShmcm9tLCBub25jZSkge1xuICAgICAgICBpZiAodHlwZW9mIG5vbmNlICE9PSAnYmlnaW50Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBub25jZSB0byBiZSBhIGJpZ2ludCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQWRkcmVzcyhnZW5lcmF0ZUFkZHJlc3MoZnJvbS5ieXRlcywgYmlnSW50VG9CeXRlcyhub25jZSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGFuIGFkZHJlc3MgZm9yIGEgY29udHJhY3QgY3JlYXRlZCB1c2luZyBDUkVBVEUyLlxuICAgICAqIEBwYXJhbSBmcm9tIFRoZSBhZGRyZXNzIHdoaWNoIGlzIGNyZWF0aW5nIHRoaXMgbmV3IGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gc2FsdCBBIHNhbHRcbiAgICAgKiBAcGFyYW0gaW5pdENvZGUgVGhlIGluaXQgY29kZSBvZiB0aGUgY29udHJhY3QgYmVpbmcgY3JlYXRlZFxuICAgICAqL1xuICAgIHN0YXRpYyBnZW5lcmF0ZTIoZnJvbSwgc2FsdCwgaW5pdENvZGUpIHtcbiAgICAgICAgaWYgKCEoc2FsdCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHNhbHQgdG8gYmUgYSBVaW50OEFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoaW5pdENvZGUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBpbml0Q29kZSB0byBiZSBhIFVpbnQ4QXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoZ2VuZXJhdGVBZGRyZXNzMihmcm9tLmJ5dGVzLCBzYWx0LCBpbml0Q29kZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJcyBhZGRyZXNzIGVxdWFsIHRvIGFub3RoZXIuXG4gICAgICovXG4gICAgZXF1YWxzKGFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIGVxdWFsc0J5dGVzKHRoaXMuYnl0ZXMsIGFkZHJlc3MuYnl0ZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJcyBhZGRyZXNzIHplcm8uXG4gICAgICovXG4gICAgaXNaZXJvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHMoQWRkcmVzcy56ZXJvKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIGFkZHJlc3MgaXMgaW4gdGhlIGFkZHJlc3MgcmFuZ2UgZGVmaW5lZFxuICAgICAqIGJ5IEVJUC0xMzUyXG4gICAgICovXG4gICAgaXNQcmVjb21waWxlT3JTeXN0ZW1BZGRyZXNzKCkge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYnl0ZXNUb0JpZ0ludCh0aGlzLmJ5dGVzKTtcbiAgICAgICAgY29uc3QgcmFuZ2VNaW4gPSBCSUdJTlRfMDtcbiAgICAgICAgY29uc3QgcmFuZ2VNYXggPSBCaWdJbnQoJzB4ZmZmZicpO1xuICAgICAgICByZXR1cm4gYWRkcmVzcyA+PSByYW5nZU1pbiAmJiBhZGRyZXNzIDw9IHJhbmdlTWF4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGhleCBlbmNvZGluZyBvZiBhZGRyZXNzLlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYnl0ZXNUb0hleCh0aGlzLmJ5dGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBVaW50OEFycmF5IHJlcHJlc2VudGF0aW9uIG9mIGFkZHJlc3MuXG4gICAgICovXG4gICAgdG9CeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuYnl0ZXMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js ***!
  \**************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncEventEmitter: function() { return /* binding */ AsyncEventEmitter; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\n\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks) {\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    task.call(context, data, (error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        }\n        catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === 'function') {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === 'newListener' || event === 'removeListener') {\n            data = {\n                event: data,\n                fn: callback,\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [listeners];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function (e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        }\n        else {\n            g = function (e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, 'after');\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === 'after' ? 1 : 0;\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        if (typeof target !== 'function') {\n            throw new TypeError('target must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        index = listeners.length;\n        for (i = listeners.length; i--;) {\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\n//# sourceMappingURL=asyncEventEmitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobsToCommitments: function() { return /* binding */ blobsToCommitments; },\n/* harmony export */   blobsToProofs: function() { return /* binding */ blobsToProofs; },\n/* harmony export */   commitmentsToVersionedHashes: function() { return /* binding */ commitmentsToVersionedHashes; },\n/* harmony export */   computeVersionedHash: function() { return /* binding */ computeVersionedHash; },\n/* harmony export */   getBlobs: function() { return /* binding */ getBlobs; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/sha256.js */ \"./node_modules/ethereum-cryptography/esm/sha256.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./kzg.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n\n\n\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */\nconst BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input) => {\n    const data = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error('invalid blob data');\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error('blob data is too large');\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for (let i = 0; i < blobs_len; i++) {\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nconst blobsToCommitments = (blobs) => {\n    const commitments = [];\n    for (const blob of blobs) {\n        commitments.push(_kzg_js__WEBPACK_IMPORTED_MODULE_2__.kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nconst blobsToProofs = (blobs, commitments) => {\n    const proofs = blobs.map((blob, ctx) => _kzg_js__WEBPACK_IMPORTED_MODULE_2__.kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */\nconst computeVersionedHash = (commitment, blobCommitmentVersion) => {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    computedVersionedHash.set((0,ethereum_cryptography_sha256_js__WEBPACK_IMPORTED_MODULE_0__.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */\nconst commitmentsToVersionedHashes = (commitments) => {\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(computeVersionedHash(commitment, 0x01));\n    }\n    return hashes;\n};\n//# sourceMappingURL=blobs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2Jsb2JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXlEO0FBQ2hCO0FBQ1Y7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIsc0RBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSx5QkFBeUIsd0NBQUc7QUFDNUI7QUFDQTtBQUNBO0FBQ087QUFDUCw0Q0FBNEMsd0NBQUc7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSw4QkFBOEIsdUVBQU07QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9ibG9icy5qcz9hZmQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zaGEyNTYuanMnO1xuaW1wb3J0IHsgdXRmOFRvQnl0ZXMgfSBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCB7IGt6ZyB9IGZyb20gJy4va3pnLmpzJztcbi8qKlxuICogVGhlc2UgdXRpbGl0aWVzIGZvciBjb25zdHJ1Y3RpbmcgYmxvYnMgYXJlIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL0lucGhpL2VpcDQ4NDQtaW50ZXJvcC5naXRcbiAqL1xuY29uc3QgQllURVNfUEVSX0ZJRUxEX0VMRU1FTlQgPSAzMjtcbmNvbnN0IEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CID0gNDA5NjtcbmNvbnN0IFVTRUZVTF9CWVRFU19QRVJfQkxPQiA9IDMyICogRklFTERfRUxFTUVOVFNfUEVSX0JMT0I7XG5jb25zdCBNQVhfQkxPQlNfUEVSX1RYID0gMjtcbmNvbnN0IE1BWF9VU0VGVUxfQllURVNfUEVSX1RYID0gVVNFRlVMX0JZVEVTX1BFUl9CTE9CICogTUFYX0JMT0JTX1BFUl9UWCAtIDE7XG5jb25zdCBCTE9CX1NJWkUgPSBCWVRFU19QRVJfRklFTERfRUxFTUVOVCAqIEZJRUxEX0VMRU1FTlRTX1BFUl9CTE9CO1xuZnVuY3Rpb24gZ2V0X3BhZGRlZChkYXRhLCBibG9ic19sZW4pIHtcbiAgICBjb25zdCBwZGF0YSA9IG5ldyBVaW50OEFycmF5KGJsb2JzX2xlbiAqIFVTRUZVTF9CWVRFU19QRVJfQkxPQikuZmlsbCgwKTtcbiAgICBwZGF0YS5zZXQoZGF0YSk7XG4gICAgcGRhdGFbZGF0YS5ieXRlTGVuZ3RoXSA9IDB4ODA7XG4gICAgcmV0dXJuIHBkYXRhO1xufVxuZnVuY3Rpb24gZ2V0X2Jsb2IoZGF0YSkge1xuICAgIGNvbnN0IGJsb2IgPSBuZXcgVWludDhBcnJheShCTE9CX1NJWkUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgRklFTERfRUxFTUVOVFNfUEVSX0JMT0I7IGkrKykge1xuICAgICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICAgICAgY2h1bmsuc2V0KGRhdGEuc3ViYXJyYXkoaSAqIDMxLCAoaSArIDEpICogMzEpLCAwKTtcbiAgICAgICAgYmxvYi5zZXQoY2h1bmssIGkgKiAzMik7XG4gICAgfVxuICAgIHJldHVybiBibG9iO1xufVxuZXhwb3J0IGNvbnN0IGdldEJsb2JzID0gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHV0ZjhUb0J5dGVzKGlucHV0KTtcbiAgICBjb25zdCBsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICB0aHJvdyBFcnJvcignaW52YWxpZCBibG9iIGRhdGEnKTtcbiAgICB9XG4gICAgaWYgKGxlbiA+IE1BWF9VU0VGVUxfQllURVNfUEVSX1RYKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdibG9iIGRhdGEgaXMgdG9vIGxhcmdlJyk7XG4gICAgfVxuICAgIGNvbnN0IGJsb2JzX2xlbiA9IE1hdGguY2VpbChsZW4gLyBVU0VGVUxfQllURVNfUEVSX0JMT0IpO1xuICAgIGNvbnN0IHBkYXRhID0gZ2V0X3BhZGRlZChkYXRhLCBibG9ic19sZW4pO1xuICAgIGNvbnN0IGJsb2JzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ic19sZW47IGkrKykge1xuICAgICAgICBjb25zdCBjaHVuayA9IHBkYXRhLnN1YmFycmF5KGkgKiBVU0VGVUxfQllURVNfUEVSX0JMT0IsIChpICsgMSkgKiBVU0VGVUxfQllURVNfUEVSX0JMT0IpO1xuICAgICAgICBjb25zdCBibG9iID0gZ2V0X2Jsb2IoY2h1bmspO1xuICAgICAgICBibG9icy5wdXNoKGJsb2IpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvYnM7XG59O1xuZXhwb3J0IGNvbnN0IGJsb2JzVG9Db21taXRtZW50cyA9IChibG9icykgPT4ge1xuICAgIGNvbnN0IGNvbW1pdG1lbnRzID0gW107XG4gICAgZm9yIChjb25zdCBibG9iIG9mIGJsb2JzKSB7XG4gICAgICAgIGNvbW1pdG1lbnRzLnB1c2goa3pnLmJsb2JUb0t6Z0NvbW1pdG1lbnQoYmxvYikpO1xuICAgIH1cbiAgICByZXR1cm4gY29tbWl0bWVudHM7XG59O1xuZXhwb3J0IGNvbnN0IGJsb2JzVG9Qcm9vZnMgPSAoYmxvYnMsIGNvbW1pdG1lbnRzKSA9PiB7XG4gICAgY29uc3QgcHJvb2ZzID0gYmxvYnMubWFwKChibG9iLCBjdHgpID0+IGt6Zy5jb21wdXRlQmxvYkt6Z1Byb29mKGJsb2IsIGNvbW1pdG1lbnRzW2N0eF0pKTtcbiAgICByZXR1cm4gcHJvb2ZzO1xufTtcbi8qKlxuICogQ29udmVydHMgYSB2ZWN0b3IgY29tbWl0bWVudCBmb3IgYSBnaXZlbiBkYXRhIGJsb2IgdG8gaXRzIHZlcnNpb25lZCBoYXNoLiAgRm9yIDQ4NDQsIHRoaXMgdmVyc2lvblxuICogbnVtYmVyIHdpbGwgYmUgMHgwMSBmb3IgS1pHIHZlY3RvciBjb21taXRtZW50cyBidXQgY291bGQgYmUgZGlmZmVyZW50IGlmIGZ1dHVyZSB2ZWN0b3IgY29tbWl0bWVudFxuICogdHlwZXMgYXJlIGludHJvZHVjZWRcbiAqIEBwYXJhbSBjb21taXRtZW50IGEgdmVjdG9yIGNvbW1pdG1lbnQgdG8gYSBibG9iXG4gKiBAcGFyYW0gYmxvYkNvbW1pdG1lbnRWZXJzaW9uIHRoZSB2ZXJzaW9uIG51bWJlciBjb3JyZXNwb25kaW5nIHRvIHRoZSB0eXBlIG9mIHZlY3RvciBjb21taXRtZW50XG4gKiBAcmV0dXJucyBhIHZlcnNpb25lZCBoYXNoIGNvcnJlc3BvbmRpbmcgdG8gYSBnaXZlbiBibG9iIHZlY3RvciBjb21taXRtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBjb21wdXRlVmVyc2lvbmVkSGFzaCA9IChjb21taXRtZW50LCBibG9iQ29tbWl0bWVudFZlcnNpb24pID0+IHtcbiAgICBjb25zdCBjb21wdXRlZFZlcnNpb25lZEhhc2ggPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgY29tcHV0ZWRWZXJzaW9uZWRIYXNoLnNldChbYmxvYkNvbW1pdG1lbnRWZXJzaW9uXSwgMCk7XG4gICAgY29tcHV0ZWRWZXJzaW9uZWRIYXNoLnNldChzaGEyNTYoY29tbWl0bWVudCkuc3ViYXJyYXkoMSksIDEpO1xuICAgIHJldHVybiBjb21wdXRlZFZlcnNpb25lZEhhc2g7XG59O1xuLyoqXG4gKiBHZW5lcmF0ZSBhbiBhcnJheSBvZiB2ZXJzaW9uZWQgaGFzaGVzIGZyb20gY29ycmVzcG9uZGluZyBremcgY29tbWl0bWVudHNcbiAqIEBwYXJhbSBjb21taXRtZW50cyBhcnJheSBvZiBremcgY29tbWl0bWVudHNcbiAqIEByZXR1cm5zIGFycmF5IG9mIHZlcnNpb25lZCBoYXNoZXNcbiAqIE5vdGU6IGFzc3VtZXMgS1pHIGNvbW1pdG1lbnRzICh2ZXJzaW9uIDEgdmVyc2lvbiBoYXNoZXMpXG4gKi9cbmV4cG9ydCBjb25zdCBjb21taXRtZW50c1RvVmVyc2lvbmVkSGFzaGVzID0gKGNvbW1pdG1lbnRzKSA9PiB7XG4gICAgY29uc3QgaGFzaGVzID0gW107XG4gICAgZm9yIChjb25zdCBjb21taXRtZW50IG9mIGNvbW1pdG1lbnRzKSB7XG4gICAgICAgIGhhc2hlcy5wdXNoKGNvbXB1dGVWZXJzaW9uZWRIYXNoKGNvbW1pdG1lbnQsIDB4MDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc2hlcztcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9icy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHexPrefix: function() { return /* binding */ addHexPrefix; },\n/* harmony export */   bigInt64ToBytes: function() { return /* binding */ bigInt64ToBytes; },\n/* harmony export */   bigIntToBytes: function() { return /* binding */ bigIntToBytes; },\n/* harmony export */   bigIntToHex: function() { return /* binding */ bigIntToHex; },\n/* harmony export */   bigIntToUnpaddedBytes: function() { return /* binding */ bigIntToUnpaddedBytes; },\n/* harmony export */   bytesToBigInt: function() { return /* binding */ bytesToBigInt; },\n/* harmony export */   bytesToBigInt64: function() { return /* binding */ bytesToBigInt64; },\n/* harmony export */   bytesToHex: function() { return /* binding */ bytesToHex; },\n/* harmony export */   bytesToInt: function() { return /* binding */ bytesToInt; },\n/* harmony export */   bytesToInt32: function() { return /* binding */ bytesToInt32; },\n/* harmony export */   bytesToUnprefixedHex: function() { return /* binding */ bytesToUnprefixedHex; },\n/* harmony export */   bytesToUtf8: function() { return /* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToUtf8; },\n/* harmony export */   compareBytes: function() { return /* binding */ compareBytes; },\n/* harmony export */   concatBytes: function() { return /* binding */ concatBytes; },\n/* harmony export */   equalsBytes: function() { return /* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.equalsBytes; },\n/* harmony export */   fromSigned: function() { return /* binding */ fromSigned; },\n/* harmony export */   hexToBytes: function() { return /* binding */ hexToBytes; },\n/* harmony export */   int32ToBytes: function() { return /* binding */ int32ToBytes; },\n/* harmony export */   intToBytes: function() { return /* binding */ intToBytes; },\n/* harmony export */   intToHex: function() { return /* binding */ intToHex; },\n/* harmony export */   intToUnpaddedBytes: function() { return /* binding */ intToUnpaddedBytes; },\n/* harmony export */   randomBytes: function() { return /* binding */ randomBytes; },\n/* harmony export */   setLengthLeft: function() { return /* binding */ setLengthLeft; },\n/* harmony export */   setLengthRight: function() { return /* binding */ setLengthRight; },\n/* harmony export */   short: function() { return /* binding */ short; },\n/* harmony export */   toBytes: function() { return /* binding */ toBytes; },\n/* harmony export */   toUnsigned: function() { return /* binding */ toUnsigned; },\n/* harmony export */   unpadArray: function() { return /* binding */ unpadArray; },\n/* harmony export */   unpadBytes: function() { return /* binding */ unpadBytes; },\n/* harmony export */   unpadHex: function() { return /* binding */ unpadHex; },\n/* harmony export */   unprefixedHexToBytes: function() { return /* binding */ unprefixedHexToBytes; },\n/* harmony export */   utf8ToBytes: function() { return /* reexport safe */ ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes; },\n/* harmony export */   validateNoLeadingZeroes: function() { return /* binding */ validateNoLeadingZeroes; },\n/* harmony export */   zeros: function() { return /* binding */ zeros; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/random.js */ \"./node_modules/ethereum-cryptography/esm/random.js\");\n/* harmony import */ var ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/utils.js */ \"./node_modules/ethereum-cryptography/esm/utils.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n// eslint-disable-next-line no-restricted-imports\n\n\n\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */\nconst bytesToUnprefixedHex = ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex;\n/**\n * @deprecated\n */\nconst unprefixedHexToBytes = (inp) => {\n    if (inp.slice(0, 2) === '0x') {\n        throw new Error('hex string is prefixed with 0x, should be unprefixed');\n    }\n    else {\n        return (0,ethereum_cryptography_utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)((0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(inp));\n    }\n};\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nconst bytesToHex = (bytes) => {\n    let hex = '0x';\n    if (bytes === undefined || bytes.length === 0)\n        return hex;\n    for (const byte of bytes) {\n        hex += hexByByte[byte];\n    }\n    return hex;\n};\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor (let i = 0; i <= 256 * 256 - 1; i++) {\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */\nconst bytesToBigInt = (bytes) => {\n    const hex = bytesToHex(bytes);\n    if (hex === '0x') {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */\nconst bytesToInt = (bytes) => {\n    const res = Number(bytesToBigInt(bytes));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nconst hexToBytes = (hex) => {\n    if (typeof hex !== 'string') {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!hex.startsWith('0x')) {\n        throw new Error(`prefixed hex input should start with 0x, got ${hex.substring(0, 2)}`);\n    }\n    hex = hex.slice(2);\n    if (hex.length % 2 !== 0) {\n        hex = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(hex);\n    }\n    const byteLen = hex.length / 2;\n    const bytes = new Uint8Array(byteLen);\n    for (let i = 0; i < byteLen; i++) {\n        const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);\n        bytes[i] = byte;\n    }\n    return bytes;\n};\n/******************************************/\n/**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */\nconst intToHex = (i) => {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToBytes = (i) => {\n    const hex = intToHex(i);\n    return hexToBytes(hex);\n};\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToBytes = (num) => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return toBytes('0x' + (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.padToEven)(num.toString(16)));\n};\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */\nconst zeros = (bytes) => {\n    return new Uint8Array(bytes);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */\nconst setLength = (msg, length, right) => {\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([...msg, ...zeros(length - msg.length)]);\n        }\n        return msg.subarray(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            return new Uint8Array([...zeros(length - msg.length), ...msg]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthLeft = (msg, length) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthRight = (msg, length) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or PrefixedHexString`.\n * @param {Uint8Array|number[]|PrefixedHexString} a\n * @return {Uint8Array|number[]|PrefixedHexString}\n */\nconst stripZeros = (a) => {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */\nconst unpadBytes = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsBytes)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */\nconst unpadArray = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsArray)(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString} a\n * @return {PrefixedHexString}\n */\nconst unpadHex = (a) => {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.assertIsHexString)(a);\n    a = (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(a);\n    return '0x' + stripZeros(a);\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\nconst toBytes = (v) => {\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return hexToBytes(v);\n    }\n    if (typeof v === 'number') {\n        return intToBytes(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return unprefixedHexToBytes(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error('invalid type');\n};\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */\nconst fromSigned = (num) => {\n    return BigInt.asIntN(256, bytesToBigInt(num));\n};\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */\nconst toUnsigned = (num) => {\n    return bigIntToBytes(BigInt.asUintN(256, num));\n};\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */\nconst addHexPrefix = (str) => {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_3__.isHexPrefixed)(str) ? str : '0x' + str;\n};\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */\nconst short = (bytes, maxLength = 50) => {\n    const byteStr = bytes instanceof Uint8Array ? bytesToHex(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + '…';\n};\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = (values) => {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${bytesToHex(v)}`);\n        }\n    }\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */\nconst bigIntToHex = (num) => {\n    return '0x' + num.toString(16);\n};\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToUnpaddedBytes = (value) => {\n    return unpadBytes(bigIntToBytes(value));\n};\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst intToUnpaddedBytes = (value) => {\n    return unpadBytes(intToBytes(value));\n};\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */\nconst compareBytes = (value1, value2) => {\n    const bigIntValue1 = bytesToBigInt(value1);\n    const bigIntValue2 = bytesToBigInt(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */\nconst randomBytes = (length) => {\n    return (0,ethereum_cryptography_random_js__WEBPACK_IMPORTED_MODULE_0__.getRandomBytesSync)(length);\n};\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */\nconst concatBytes = (...arrays) => {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @throws {Error} If the input Uint8Array has a length less than 4.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */\nfunction bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        throw new Error('The input Uint8Array must have at least 4 bytes.');\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getInt32(0, littleEndian);\n}\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @throws {Error} If the input Uint8Array has a length less than 8.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */\nfunction bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        throw new Error('The input Uint8Array must have at least 8 bytes.');\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigInt64(0, littleEndian);\n}\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */\nfunction int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setInt32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */\nfunction bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigInt64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\n// eslint-disable-next-line no-restricted-imports\n\n//# sourceMappingURL=bytes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIGINT_0: function() { return /* binding */ BIGINT_0; },\n/* harmony export */   BIGINT_1: function() { return /* binding */ BIGINT_1; },\n/* harmony export */   BIGINT_100: function() { return /* binding */ BIGINT_100; },\n/* harmony export */   BIGINT_128: function() { return /* binding */ BIGINT_128; },\n/* harmony export */   BIGINT_160: function() { return /* binding */ BIGINT_160; },\n/* harmony export */   BIGINT_2: function() { return /* binding */ BIGINT_2; },\n/* harmony export */   BIGINT_224: function() { return /* binding */ BIGINT_224; },\n/* harmony export */   BIGINT_255: function() { return /* binding */ BIGINT_255; },\n/* harmony export */   BIGINT_256: function() { return /* binding */ BIGINT_256; },\n/* harmony export */   BIGINT_27: function() { return /* binding */ BIGINT_27; },\n/* harmony export */   BIGINT_28: function() { return /* binding */ BIGINT_28; },\n/* harmony export */   BIGINT_2EXP160: function() { return /* binding */ BIGINT_2EXP160; },\n/* harmony export */   BIGINT_2EXP224: function() { return /* binding */ BIGINT_2EXP224; },\n/* harmony export */   BIGINT_2EXP256: function() { return /* binding */ BIGINT_2EXP256; },\n/* harmony export */   BIGINT_2EXP96: function() { return /* binding */ BIGINT_2EXP96; },\n/* harmony export */   BIGINT_3: function() { return /* binding */ BIGINT_3; },\n/* harmony export */   BIGINT_31: function() { return /* binding */ BIGINT_31; },\n/* harmony export */   BIGINT_32: function() { return /* binding */ BIGINT_32; },\n/* harmony export */   BIGINT_64: function() { return /* binding */ BIGINT_64; },\n/* harmony export */   BIGINT_7: function() { return /* binding */ BIGINT_7; },\n/* harmony export */   BIGINT_8: function() { return /* binding */ BIGINT_8; },\n/* harmony export */   BIGINT_96: function() { return /* binding */ BIGINT_96; },\n/* harmony export */   BIGINT_NEG1: function() { return /* binding */ BIGINT_NEG1; },\n/* harmony export */   KECCAK256_NULL: function() { return /* binding */ KECCAK256_NULL; },\n/* harmony export */   KECCAK256_NULL_S: function() { return /* binding */ KECCAK256_NULL_S; },\n/* harmony export */   KECCAK256_RLP: function() { return /* binding */ KECCAK256_RLP; },\n/* harmony export */   KECCAK256_RLP_ARRAY: function() { return /* binding */ KECCAK256_RLP_ARRAY; },\n/* harmony export */   KECCAK256_RLP_ARRAY_S: function() { return /* binding */ KECCAK256_RLP_ARRAY_S; },\n/* harmony export */   KECCAK256_RLP_S: function() { return /* binding */ KECCAK256_RLP_S; },\n/* harmony export */   MAX_INTEGER: function() { return /* binding */ MAX_INTEGER; },\n/* harmony export */   MAX_INTEGER_BIGINT: function() { return /* binding */ MAX_INTEGER_BIGINT; },\n/* harmony export */   MAX_UINT64: function() { return /* binding */ MAX_UINT64; },\n/* harmony export */   MAX_WITHDRAWALS_PER_PAYLOAD: function() { return /* binding */ MAX_WITHDRAWALS_PER_PAYLOAD; },\n/* harmony export */   RIPEMD160_ADDRESS_STRING: function() { return /* binding */ RIPEMD160_ADDRESS_STRING; },\n/* harmony export */   RLP_EMPTY_STRING: function() { return /* binding */ RLP_EMPTY_STRING; },\n/* harmony export */   SECP256K1_ORDER: function() { return /* binding */ SECP256K1_ORDER; },\n/* harmony export */   SECP256K1_ORDER_DIV_2: function() { return /* binding */ SECP256K1_ORDER_DIV_2; },\n/* harmony export */   TWO_POW256: function() { return /* binding */ TWO_POW256; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\n\n/**\n * 2^64-1\n */\nconst MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nconst MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nconst MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nconst SECP256K1_ORDER = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nconst TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nconst KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nconst KECCAK256_NULL = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */\nconst KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nconst KECCAK256_RLP_ARRAY = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */\nconst KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nconst KECCAK256_RLP = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */\nconst RLP_EMPTY_STRING = Uint8Array.from([0x80]);\nconst MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nconst RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';\n/**\n * BigInt constants\n */\nconst BIGINT_NEG1 = BigInt(-1);\nconst BIGINT_0 = BigInt(0);\nconst BIGINT_1 = BigInt(1);\nconst BIGINT_2 = BigInt(2);\nconst BIGINT_3 = BigInt(3);\nconst BIGINT_7 = BigInt(7);\nconst BIGINT_8 = BigInt(8);\nconst BIGINT_27 = BigInt(27);\nconst BIGINT_28 = BigInt(28);\nconst BIGINT_31 = BigInt(31);\nconst BIGINT_32 = BigInt(32);\nconst BIGINT_64 = BigInt(64);\nconst BIGINT_128 = BigInt(128);\nconst BIGINT_255 = BigInt(255);\nconst BIGINT_256 = BigInt(256);\nconst BIGINT_96 = BigInt(96);\nconst BIGINT_100 = BigInt(100);\nconst BIGINT_160 = BigInt(160);\nconst BIGINT_224 = BigInt(224);\nconst BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nconst BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nconst BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nconst BIGINT_2EXP256 = BIGINT_2 ** BIGINT_256;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStEO0FBQ3ZCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQSx3QkFBd0IseUVBQVM7QUFDakMsOEJBQThCLHlFQUFTO0FBQzlDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyx1QkFBdUIscURBQVU7QUFDeEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIscURBQVU7QUFDN0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyxzQkFBc0IscURBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vY29uc3RhbnRzLmpzPzI2ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L3NlY3AyNTZrMS5qcyc7XG5pbXBvcnQgeyBoZXhUb0J5dGVzIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG4vKipcbiAqIDJeNjQtMVxuICovXG5leHBvcnQgY29uc3QgTUFYX1VJTlQ2NCA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJyk7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoZSBldm0gY2FuIGhhbmRsZSAoMl4yNTYtMSlcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9JTlRFR0VSID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhlIGV2bSBjYW4gaGFuZGxlICgyXjI1Ni0xKSBhcyBhIGJpZ2ludFxuICogMl4yNTYtMSBlcXVhbHMgdG8gMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU1XG4gKiBXZSB1c2UgbGl0ZXJhbCB2YWx1ZSBpbnN0ZWFkIG9mIGNhbGN1bGF0ZWQgdmFsdWUgZm9yIGNvbXBhdGliaWxpdHkgaXNzdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfSU5URUdFUl9CSUdJTlQgPSBCaWdJbnQoJzExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMzEyOTYzOTkzNScpO1xuZXhwb3J0IGNvbnN0IFNFQ1AyNTZLMV9PUkRFUiA9IHNlY3AyNTZrMS5DVVJWRS5uO1xuZXhwb3J0IGNvbnN0IFNFQ1AyNTZLMV9PUkRFUl9ESVZfMiA9IHNlY3AyNTZrMS5DVVJWRS5uIC8gQmlnSW50KDIpO1xuLyoqXG4gKiAyXjI1NlxuICovXG5leHBvcnQgY29uc3QgVFdPX1BPVzI1NiA9IEJpZ0ludCgnMHgxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X05VTExfUyA9ICcweGM1ZDI0NjAxODZmNzIzM2M5MjdlN2RiMmRjYzcwM2MwZTUwMGI2NTNjYTgyMjczYjdiZmFkODA0NWQ4NWE0NzAnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X05VTEwgPSBoZXhUb0J5dGVzKEtFQ0NBSzI1Nl9OVUxMX1MpO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzB4MWRjYzRkZThkZWM3NWQ3YWFiODViNTY3YjZjY2Q0MWFkMzEyNDUxYjk0OGE3NDEzZjBhMTQyZmQ0MGQ0OTM0Nyc7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQX0FSUkFZID0gaGV4VG9CeXRlcyhLRUNDQUsyNTZfUkxQX0FSUkFZX1MpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBLRUNDQUsyNTZfUkxQX1MgPSAnMHg1NmU4MWYxNzFiY2M1NWE2ZmY4MzQ1ZTY5MmMwZjg2ZTViNDhlMDFiOTk2Y2FkYzAwMTYyMmZiNWUzNjNiNDIxJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnQgY29uc3QgS0VDQ0FLMjU2X1JMUCA9IGhleFRvQnl0ZXMoS0VDQ0FLMjU2X1JMUF9TKTtcbi8qKlxuICogIFJMUCBlbmNvZGVkIGVtcHR5IHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgUkxQX0VNUFRZX1NUUklORyA9IFVpbnQ4QXJyYXkuZnJvbShbMHg4MF0pO1xuZXhwb3J0IGNvbnN0IE1BWF9XSVRIRFJBV0FMU19QRVJfUEFZTE9BRCA9IDE2O1xuZXhwb3J0IGNvbnN0IFJJUEVNRDE2MF9BRERSRVNTX1NUUklORyA9ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzJztcbi8qKlxuICogQmlnSW50IGNvbnN0YW50c1xuICovXG5leHBvcnQgY29uc3QgQklHSU5UX05FRzEgPSBCaWdJbnQoLTEpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8wID0gQmlnSW50KDApO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xID0gQmlnSW50KDEpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yID0gQmlnSW50KDIpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8zID0gQmlnSW50KDMpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF83ID0gQmlnSW50KDcpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF84ID0gQmlnSW50KDgpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yNyA9IEJpZ0ludCgyNyk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI4ID0gQmlnSW50KDI4KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMzEgPSBCaWdJbnQoMzEpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8zMiA9IEJpZ0ludCgzMik7XG5leHBvcnQgY29uc3QgQklHSU5UXzY0ID0gQmlnSW50KDY0KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMTI4ID0gQmlnSW50KDEyOCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzI1NSA9IEJpZ0ludCgyNTUpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yNTYgPSBCaWdJbnQoMjU2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfOTYgPSBCaWdJbnQoOTYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8xMDAgPSBCaWdJbnQoMTAwKTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMTYwID0gQmlnSW50KDE2MCk7XG5leHBvcnQgY29uc3QgQklHSU5UXzIyNCA9IEJpZ0ludCgyMjQpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQOTYgPSBCaWdJbnQoNzkyMjgxNjI1MTQyNjQzMzc1OTM1NDM5NTAzMzYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQMTYwID0gQmlnSW50KDE0NjE1MDE2MzczMzA5MDI5MTgyMDM2ODQ4MzI3MTYyODMwMTk2NTU5MzI1NDI5NzYpO1xuZXhwb3J0IGNvbnN0IEJJR0lOVF8yRVhQMjI0ID0gQmlnSW50KDI2OTU5OTQ2NjY3MTUwNjM5Nzk0NjY3MDE1MDg3MDE5NjMwNjczNjM3MTQ0NDIyNTQwNTcyNDgxMTAzNjEwMjQ5MjE2KTtcbmV4cG9ydCBjb25zdCBCSUdJTlRfMkVYUDI1NiA9IEJJR0lOVF8yICoqIEJJR0lOVF8yNTY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyEncoding: function() { return /* binding */ KeyEncoding; },\n/* harmony export */   ValueEncoding: function() { return /* binding */ ValueEncoding; }\n/* harmony export */ });\nvar KeyEncoding;\n(function (KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding || (KeyEncoding = {}));\nvar ValueEncoding;\n(function (ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding || (ValueEncoding = {}));\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2RiLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0NBQWtDO0FBQzVCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2RiLmpzPzgzZmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBLZXlFbmNvZGluZztcbihmdW5jdGlvbiAoS2V5RW5jb2RpbmcpIHtcbiAgICBLZXlFbmNvZGluZ1tcIlN0cmluZ1wiXSA9IFwic3RyaW5nXCI7XG4gICAgS2V5RW5jb2RpbmdbXCJCeXRlc1wiXSA9IFwidmlld1wiO1xuICAgIEtleUVuY29kaW5nW1wiTnVtYmVyXCJdID0gXCJudW1iZXJcIjtcbn0pKEtleUVuY29kaW5nIHx8IChLZXlFbmNvZGluZyA9IHt9KSk7XG5leHBvcnQgdmFyIFZhbHVlRW5jb2Rpbmc7XG4oZnVuY3Rpb24gKFZhbHVlRW5jb2RpbmcpIHtcbiAgICBWYWx1ZUVuY29kaW5nW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICBWYWx1ZUVuY29kaW5nW1wiQnl0ZXNcIl0gPSBcInZpZXdcIjtcbiAgICBWYWx1ZUVuY29kaW5nW1wiSlNPTlwiXSA9IFwianNvblwiO1xufSkoVmFsdWVFbmNvZGluZyB8fCAoVmFsdWVFbmNvZGluZyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseGethGenesisState: function() { return /* binding */ parseGethGenesisState; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nfunction parseGethGenesisState(json) {\n    const state = {};\n    for (let address of Object.keys(json.alloc)) {\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        address = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(address.toLowerCase());\n        balance = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexPrefixed)(balance) ? balance : (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(nonce) : undefined;\n        state[address] = [balance, code, storage, nonce];\n    }\n    return state;\n}\n//# sourceMappingURL=genesis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2dlbmVzaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ1Q7QUFDOUM7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGNBQWMsZ0NBQWdDO0FBQzlDO0FBQ0Esa0JBQWtCLHVEQUFZO0FBQzlCLGtCQUFrQiwyREFBYSxzQkFBc0Isc0RBQVc7QUFDaEUsb0NBQW9DLHVEQUFZO0FBQ2hEO0FBQ0Esc0NBQXNDLHVEQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9nZW5lc2lzLmpzP2ZkYzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkSGV4UHJlZml4LCBiaWdJbnRUb0hleCB9IGZyb20gJy4vYnl0ZXMuanMnO1xuaW1wb3J0IHsgaXNIZXhQcmVmaXhlZCB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuLyoqXG4gKiBQYXJzZXMgdGhlIGdldGggZ2VuZXNpcyBzdGF0ZSBpbnRvIEJsb2NrY2hhaW4ge0BsaW5rIEdlbmVzaXNTdGF0ZX1cbiAqIEBwYXJhbSBqc29uIHJlcHJlc2VudGluZyB0aGUgYGFsbG9jYCBrZXkgaW4gYSBHZXRoIGdlbmVzaXMgZmlsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZXRoR2VuZXNpc1N0YXRlKGpzb24pIHtcbiAgICBjb25zdCBzdGF0ZSA9IHt9O1xuICAgIGZvciAobGV0IGFkZHJlc3Mgb2YgT2JqZWN0LmtleXMoanNvbi5hbGxvYykpIHtcbiAgICAgICAgbGV0IHsgYmFsYW5jZSwgY29kZSwgc3RvcmFnZSwgbm9uY2UgfSA9IGpzb24uYWxsb2NbYWRkcmVzc107XG4gICAgICAgIC8vIGNyZWF0ZSBhIG1hcCB3aXRoIGxvd2VyY2FzZSBmb3IgZWFzeSBsb29rdXBzXG4gICAgICAgIGFkZHJlc3MgPSBhZGRIZXhQcmVmaXgoYWRkcmVzcy50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgYmFsYW5jZSA9IGlzSGV4UHJlZml4ZWQoYmFsYW5jZSkgPyBiYWxhbmNlIDogYmlnSW50VG9IZXgoQmlnSW50KGJhbGFuY2UpKTtcbiAgICAgICAgY29kZSA9IGNvZGUgIT09IHVuZGVmaW5lZCA/IGFkZEhleFByZWZpeChjb2RlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgc3RvcmFnZSA9IHN0b3JhZ2UgIT09IHVuZGVmaW5lZCA/IE9iamVjdC5lbnRyaWVzKHN0b3JhZ2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBub25jZSA9IG5vbmNlICE9PSB1bmRlZmluZWQgPyBhZGRIZXhQcmVmaXgobm9uY2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBzdGF0ZVthZGRyZXNzXSA9IFtiYWxhbmNlLCBjb2RlLCBzdG9yYWdlLCBub25jZV07XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVzaXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsArray: function() { return /* binding */ assertIsArray; },\n/* harmony export */   assertIsBytes: function() { return /* binding */ assertIsBytes; },\n/* harmony export */   assertIsHexString: function() { return /* binding */ assertIsHexString; },\n/* harmony export */   assertIsString: function() { return /* binding */ assertIsString; }\n/* harmony export */ });\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBytes = function (input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEM7QUFDNUM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1AsU0FBUyx5REFBVztBQUNwQix3RkFBd0YsTUFBTTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ087QUFDUDtBQUNBLDJFQUEyRSxNQUFNO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDTztBQUNQO0FBQ0EsOEVBQThFLE1BQU07QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1A7QUFDQSx3RUFBd0UsTUFBTTtBQUM5RTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2hlbHBlcnMuanM/MGFmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0hleFN0cmluZyB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuLyoqXG4gKiBUaHJvd3MgaWYgYSBzdHJpbmcgaXMgbm90IGhleCBwcmVmaXhlZFxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHN0cmluZyB0byBjaGVjayBoZXggcHJlZml4IG9mXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NlcnRJc0hleFN0cmluZyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghaXNIZXhTdHJpbmcoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIDB4LXByZWZpeGVkIGhleCBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhIGJ1ZmZlclxuICogQHBhcmFtIHtCdWZmZXJ9IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbmV4cG9ydCBjb25zdCBhc3NlcnRJc0J5dGVzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCEoaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBVaW50OEFycmF5IGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhbiBhcnJheVxuICogQHBhcmFtIHtudW1iZXJbXX0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzQXJyYXkgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIG51bWJlciBhcnJheXMgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUaHJvd3MgaWYgaW5wdXQgaXMgbm90IGEgc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydElzU3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgc3RyaW5ncyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.arrayContainsArray; },\n/* harmony export */   fromAscii: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromAscii; },\n/* harmony export */   fromUtf8: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.fromUtf8; },\n/* harmony export */   getBinarySize: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getBinarySize; },\n/* harmony export */   getKeys: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.getKeys; },\n/* harmony export */   isHexPrefixed: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexPrefixed; },\n/* harmony export */   isHexString: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.isHexString; },\n/* harmony export */   padToEven: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.padToEven; },\n/* harmony export */   stripHexPrefix: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.stripHexPrefix; },\n/* harmony export */   toAscii: function() { return /* reexport safe */ _internal_js__WEBPACK_IMPORTED_MODULE_12__.toAscii; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _constants_js__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _constants_js__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _units_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _units_js__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _units_js__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/account.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _account_js__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _account_js__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./address.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _address_js__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _address_js__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./db.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/db.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _db_js__WEBPACK_IMPORTED_MODULE_4__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _db_js__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withdrawal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _withdrawal_js__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _signature_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./signature.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _signature_js__WEBPACK_IMPORTED_MODULE_6__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _signature_js__WEBPACK_IMPORTED_MODULE_6__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _bytes_js__WEBPACK_IMPORTED_MODULE_7__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _bytes_js__WEBPACK_IMPORTED_MODULE_7__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types_js__WEBPACK_IMPORTED_MODULE_8__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types_js__WEBPACK_IMPORTED_MODULE_8__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asyncEventEmitter.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/asyncEventEmitter.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _asyncEventEmitter_js__WEBPACK_IMPORTED_MODULE_9__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _blobs_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./blobs.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/blobs.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _blobs_js__WEBPACK_IMPORTED_MODULE_10__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _blobs_js__WEBPACK_IMPORTED_MODULE_10__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _genesis_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./genesis.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/genesis.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _genesis_js__WEBPACK_IMPORTED_MODULE_11__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _genesis_js__WEBPACK_IMPORTED_MODULE_11__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n/* harmony import */ var _kzg_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./kzg.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _kzg_js__WEBPACK_IMPORTED_MODULE_13__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _kzg_js__WEBPACK_IMPORTED_MODULE_13__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _lock_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lock.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _lock_js__WEBPACK_IMPORTED_MODULE_14__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _lock_js__WEBPACK_IMPORTED_MODULE_14__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _mapDB_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mapDB.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _mapDB_js__WEBPACK_IMPORTED_MODULE_15__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _mapDB_js__WEBPACK_IMPORTED_MODULE_15__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _provider_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./provider.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _provider_js__WEBPACK_IMPORTED_MODULE_16__) if([\"default\",\"arrayContainsArray\",\"fromAscii\",\"fromUtf8\",\"getBinarySize\",\"getKeys\",\"isHexPrefixed\",\"isHexString\",\"padToEven\",\"stripHexPrefix\",\"toAscii\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _provider_js__WEBPACK_IMPORTED_MODULE_16__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/**\n * Constants\n */\n\n/**\n * Units helpers\n */\n\n/**\n * Account class and helper functions\n */\n\n/**\n * Address type\n */\n\n/**\n * DB type\n */\n\n/**\n * Withdrawal type\n */\n\n/**\n * ECDSA signature\n */\n\n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */\n\n/**\n * Helpful TypeScript types\n */\n\n/**\n * Export ethjs-util methods\n */\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNBO0FBQzZCO0FBQzdCO0FBQ0E7QUFDQTtBQUM2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ2dDO0FBQ2hDO0FBQ0E7QUFDQTtBQUMrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNBO0FBQzJCO0FBQzNCO0FBQ0E7QUFDQTtBQUN1QztBQUNaO0FBQ0U7QUFDb0k7QUFDeEk7QUFDQztBQUNDO0FBQ0c7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9pbmRleC5qcz84M2RlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29uc3RhbnRzXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnRzLmpzJztcbi8qKlxuICogVW5pdHMgaGVscGVyc1xuICovXG5leHBvcnQgKiBmcm9tICcuL3VuaXRzLmpzJztcbi8qKlxuICogQWNjb3VudCBjbGFzcyBhbmQgaGVscGVyIGZ1bmN0aW9uc1xuICovXG5leHBvcnQgKiBmcm9tICcuL2FjY291bnQuanMnO1xuLyoqXG4gKiBBZGRyZXNzIHR5cGVcbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9hZGRyZXNzLmpzJztcbi8qKlxuICogREIgdHlwZVxuICovXG5leHBvcnQgKiBmcm9tICcuL2RiLmpzJztcbi8qKlxuICogV2l0aGRyYXdhbCB0eXBlXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vd2l0aGRyYXdhbC5qcyc7XG4vKipcbiAqIEVDRFNBIHNpZ25hdHVyZVxuICovXG5leHBvcnQgKiBmcm9tICcuL3NpZ25hdHVyZS5qcyc7XG4vKipcbiAqIFV0aWxpdGllcyBmb3IgbWFuaXB1bGF0aW5nIGJ5dGVzLCBVaW50OEFycmF5cywgZXRjLlxuICovXG5leHBvcnQgKiBmcm9tICcuL2J5dGVzLmpzJztcbi8qKlxuICogSGVscGZ1bCBUeXBlU2NyaXB0IHR5cGVzXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuLyoqXG4gKiBFeHBvcnQgZXRoanMtdXRpbCBtZXRob2RzXG4gKi9cbmV4cG9ydCAqIGZyb20gJy4vYXN5bmNFdmVudEVtaXR0ZXIuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9ibG9icy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2dlbmVzaXMuanMnO1xuZXhwb3J0IHsgYXJyYXlDb250YWluc0FycmF5LCBmcm9tQXNjaWksIGZyb21VdGY4LCBnZXRCaW5hcnlTaXplLCBnZXRLZXlzLCBpc0hleFByZWZpeGVkLCBpc0hleFN0cmluZywgcGFkVG9FdmVuLCBzdHJpcEhleFByZWZpeCwgdG9Bc2NpaSwgfSBmcm9tICcuL2ludGVybmFsLmpzJztcbmV4cG9ydCAqIGZyb20gJy4va3pnLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbG9jay5qcyc7XG5leHBvcnQgKiBmcm9tICcuL21hcERCLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vcHJvdmlkZXIuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayContainsArray: function() { return /* binding */ arrayContainsArray; },\n/* harmony export */   fromAscii: function() { return /* binding */ fromAscii; },\n/* harmony export */   fromUtf8: function() { return /* binding */ fromUtf8; },\n/* harmony export */   getBinarySize: function() { return /* binding */ getBinarySize; },\n/* harmony export */   getKeys: function() { return /* binding */ getKeys; },\n/* harmony export */   isHexPrefixed: function() { return /* binding */ isHexPrefixed; },\n/* harmony export */   isHexString: function() { return /* binding */ isHexString; },\n/* harmony export */   padToEven: function() { return /* binding */ padToEven; },\n/* harmony export */   stripHexPrefix: function() { return /* binding */ stripHexPrefix; },\n/* harmony export */   toAscii: function() { return /* binding */ toAscii; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nfunction isHexPrefixed(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === '0' && str[1] === 'x';\n}\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = (str) => {\n    if (typeof str !== 'string')\n        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n    let a = value;\n    if (typeof a !== 'string') {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2)\n        a = `0${a}`;\n    return a;\n}\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nfunction getBinarySize(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(str).byteLength;\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nfunction arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);\n}\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nfunction toAscii(hex) {\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x')\n        i = 2;\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n    const str = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, '')}`;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nfunction fromAscii(stringValue) {\n    let hex = '';\n    for (let i = 0; i < stringValue.length; i++) {\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== 'string') {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for (let i = 0; i < params.length; i++) {\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = '';\n        }\n        else if (typeof value !== 'string') {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nfunction isHexString(value, length) {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n        return false;\n    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n        return false;\n    return true;\n}\n//# sourceMappingURL=internal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initKZG: function() { return /* binding */ initKZG; },\n/* harmony export */   kzg: function() { return /* binding */ kzg; }\n/* harmony export */ });\nfunction kzgNotLoaded() {\n    throw Error('kzg library not loaded');\n}\n// eslint-disable-next-line import/no-mutable-exports\nlet kzg = {\n    loadTrustedSetup: kzgNotLoaded,\n    blobToKzgCommitment: kzgNotLoaded,\n    computeBlobKzgProof: kzgNotLoaded,\n    verifyKzgProof: kzgNotLoaded,\n    verifyBlobKzgProofBatch: kzgNotLoaded,\n};\n/**\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param trustedSetupPath the full path (e.g. \"/home/linux/devnet4.txt\") to a kzg trusted setup text file\n */\nfunction initKZG(kzgLib, trustedSetupPath) {\n    kzg = kzgLib;\n    kzg.loadTrustedSetup(trustedSetupPath);\n}\n//# sourceMappingURL=kzg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2t6Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9remcuanM/MGEzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBremdOb3RMb2FkZWQoKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2t6ZyBsaWJyYXJ5IG5vdCBsb2FkZWQnKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG5leHBvcnQgbGV0IGt6ZyA9IHtcbiAgICBsb2FkVHJ1c3RlZFNldHVwOiBremdOb3RMb2FkZWQsXG4gICAgYmxvYlRvS3pnQ29tbWl0bWVudDoga3pnTm90TG9hZGVkLFxuICAgIGNvbXB1dGVCbG9iS3pnUHJvb2Y6IGt6Z05vdExvYWRlZCxcbiAgICB2ZXJpZnlLemdQcm9vZjoga3pnTm90TG9hZGVkLFxuICAgIHZlcmlmeUJsb2JLemdQcm9vZkJhdGNoOiBremdOb3RMb2FkZWQsXG59O1xuLyoqXG4gKiBAcGFyYW0ga3pnTGliIGEgS1pHIGltcGxlbWVudGF0aW9uIChkZWZhdWx0cyB0byBjLWt6ZylcbiAqIEBwYXJhbSB0cnVzdGVkU2V0dXBQYXRoIHRoZSBmdWxsIHBhdGggKGUuZy4gXCIvaG9tZS9saW51eC9kZXZuZXQ0LnR4dFwiKSB0byBhIGt6ZyB0cnVzdGVkIHNldHVwIHRleHQgZmlsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdEtaRyhremdMaWIsIHRydXN0ZWRTZXR1cFBhdGgpIHtcbiAgICBremcgPSBremdMaWI7XG4gICAga3pnLmxvYWRUcnVzdGVkU2V0dXAodHJ1c3RlZFNldHVwUGF0aCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1remcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/kzg.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lock: function() { return /* binding */ Lock; }\n/* harmony export */ });\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor() {\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\n//# sourceMappingURL=lock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL2xvY2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS9sb2NrLmpzPzdlNDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pzb2VuZGVybWFubi9zZW1hcGhvcmUtYXN5bmMtYXdhaXQvYmxvYi9tYXN0ZXIvc3JjL1NlbWFwaG9yZS50c1xuZXhwb3J0IGNsYXNzIExvY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnBlcm1pdHMgPSAxO1xuICAgICAgICB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBwcm9taXNlIHVzZWQgdG8gd2FpdCBmb3IgYSBwZXJtaXQgdG8gYmVjb21lIGF2YWlsYWJsZS4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGF3YWl0ZWQgb24uXG4gICAgICogQHJldHVybnMgIEEgcHJvbWlzZSB0aGF0IGdldHMgcmVzb2x2ZWQgd2hlbiBleGVjdXRpb24gaXMgYWxsb3dlZCB0byBwcm9jZWVkLlxuICAgICAqL1xuICAgIGFzeW5jIGFjcXVpcmUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBlcm1pdHMgLT0gMTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcGVybWl0IGF2YWlsYWJsZSwgd2UgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgdGhlIHNlbWFwaG9yZSBnZXRzXG4gICAgICAgIC8vIHNpZ25hbGVkIGVub3VnaCB0aW1lcyB0aGF0IHBlcm1pdHMgaXMgZXF1YWwgdG8gb25lLlxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmVyKSA9PiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnB1c2gocmVzb2x2ZXIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVybWl0cyBieSBvbmUuIElmIHRoZXJlIGFyZSBvdGhlciBmdW5jdGlvbnMgd2FpdGluZywgb25lIG9mIHRoZW0gd2lsbFxuICAgICAqIGNvbnRpbnVlIHRvIGV4ZWN1dGUgaW4gYSBmdXR1cmUgaXRlcmF0aW9uIG9mIHRoZSBldmVudCBsb29wLlxuICAgICAqL1xuICAgIHJlbGVhc2UoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyArPSAxO1xuICAgICAgICBpZiAodGhpcy5wZXJtaXRzID4gMSAmJiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2sucGVybWl0cyBzaG91bGQgbmV2ZXIgYmUgPiAwIHdoZW4gdGhlcmUgaXMgc29tZW9uZSB3YWl0aW5nLicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVybWl0cyA9PT0gMSAmJiB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIHNvbWVvbmUgZWxzZSB3YWl0aW5nLCBpbW1lZGlhdGVseSBjb25zdW1lIHRoZSBwZXJtaXQgdGhhdCB3YXMgcmVsZWFzZWRcbiAgICAgICAgICAgIC8vIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBmdW5jdGlvbiBhbmQgbGV0IHRoZSB3YWl0aW5nIGZ1bmN0aW9uIHJlc3VtZS5cbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgY29uc3QgbmV4dFJlc29sdmVyID0gdGhpcy5wcm9taXNlUmVzb2x2ZXJRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKG5leHRSZXNvbHZlcikge1xuICAgICAgICAgICAgICAgIG5leHRSZXNvbHZlcih0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2suanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/lock.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDB: function() { return /* binding */ MapDB; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n\nclass MapDB {\n    constructor(database) {\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack) {\n            if (op.type === 'del') {\n                await this.del(op.key);\n            }\n            if (op.type === 'put') {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */\n    shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=mapDB.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL21hcERCLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQzNDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsK0RBQW9CO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCwrREFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELCtEQUFvQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL21hcERCLmpzP2JmZGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb1VucHJlZml4ZWRIZXggfSBmcm9tICcuL2J5dGVzLmpzJztcbmV4cG9ydCBjbGFzcyBNYXBEQiB7XG4gICAgY29uc3RydWN0b3IoZGF0YWJhc2UpIHtcbiAgICAgICAgdGhpcy5fZGF0YWJhc2UgPSBkYXRhYmFzZSA/PyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGFzeW5jIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgZGJLZXkgPSBrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYnl0ZXNUb1VucHJlZml4ZWRIZXgoa2V5KSA6IGtleS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YWJhc2UuZ2V0KGRiS2V5KTtcbiAgICB9XG4gICAgYXN5bmMgcHV0KGtleSwgdmFsKSB7XG4gICAgICAgIGNvbnN0IGRiS2V5ID0ga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ5dGVzVG9VbnByZWZpeGVkSGV4KGtleSkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5fZGF0YWJhc2Uuc2V0KGRiS2V5LCB2YWwpO1xuICAgIH1cbiAgICBhc3luYyBkZWwoa2V5KSB7XG4gICAgICAgIGNvbnN0IGRiS2V5ID0ga2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGJ5dGVzVG9VbnByZWZpeGVkSGV4KGtleSkgOiBrZXkudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5fZGF0YWJhc2UuZGVsZXRlKGRiS2V5KTtcbiAgICB9XG4gICAgYXN5bmMgYmF0Y2gob3BTdGFjaykge1xuICAgICAgICBmb3IgKGNvbnN0IG9wIG9mIG9wU3RhY2spIHtcbiAgICAgICAgICAgIGlmIChvcC50eXBlID09PSAnZGVsJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGVsKG9wLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3AudHlwZSA9PT0gJ3B1dCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnB1dChvcC5rZXksIG9wLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RlIHRoYXQgdGhlIHJldHVybmVkIHNoYWxsb3cgY29weSB3aWxsIHNoYXJlIHRoZSB1bmRlcmx5aW5nIGRhdGFiYXNlIHdpdGggdGhlIG9yaWdpbmFsXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBEQlxuICAgICAqL1xuICAgIHNoYWxsb3dDb3B5KCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcERCKHRoaXMuX2RhdGFiYXNlKTtcbiAgICB9XG4gICAgb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcERCLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/mapDB.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchFromProvider: function() { return /* binding */ fetchFromProvider; },\n/* harmony export */   getProvider: function() { return /* binding */ getProvider; }\n/* harmony export */ });\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n */\nconst fetchFromProvider = async (url, params) => {\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: '2.0',\n        id: 1,\n    });\n    const res = await fetch(url, {\n        headers: {\n            'content-type': 'application/json',\n        },\n        method: 'POST',\n        body: data,\n    });\n    const json = await res.json();\n    return json.result;\n};\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nconst getProvider = (provider) => {\n    if (typeof provider === 'string') {\n        return provider;\n    }\n    else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    }\n    else {\n        throw new Error('Must provide valid provider URL or Web3Provider');\n    }\n};\n//# sourceMappingURL=provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzPzk3NWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYWtlcyBhIHNpbXBsZSBSUEMgY2FsbCB0byBhIHJlbW90ZSBFdGhlcmV1bSBKU09OLVJQQyBwcm92aWRlciBhbmQgcGFzc2VzIHRocm91Z2ggdGhlIHJlc3BvbnNlLlxuICogTm8gcGFyYW1ldGVyIG9yIHJlc3BvbnNlIHZhbGlkYXRpb24gaXMgZG9uZS5cbiAqXG4gKiBAcGFyYW0gdXJsIHRoZSBVUkwgZm9yIHRoZSBKU09OIFJQQyBwcm92aWRlclxuICogQHBhcmFtIHBhcmFtcyB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIEpTT04tUlBDIG1ldGhvZCAtIHJlZmVyIHRvXG4gKiBodHRwczovL2V0aGVyZXVtLm9yZy9lbi9kZXZlbG9wZXJzL2RvY3MvYXBpcy9qc29uLXJwYy8gZm9yIGRldGFpbHMgb24gUlBDIG1ldGhvZHNcbiAqIEByZXR1cm5zIHRoZSBgcmVzdWx0YCBmaWVsZCBmcm9tIHRoZSBKU09OLVJQQyByZXNwb25zZVxuICovXG5leHBvcnQgY29uc3QgZmV0Y2hGcm9tUHJvdmlkZXIgPSBhc3luYyAodXJsLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBtZXRob2Q6IHBhcmFtcy5tZXRob2QsXG4gICAgICAgIHBhcmFtczogcGFyYW1zLnBhcmFtcyxcbiAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgIGlkOiAxLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5yZXN1bHQ7XG59O1xuLyoqXG4gKlxuICogQHBhcmFtIHByb3ZpZGVyIGEgVVJMIHN0cmluZyBvciB7QGxpbmsgRXRoZXJzUHJvdmlkZXJ9XG4gKiBAcmV0dXJucyB0aGUgZXh0cmFjdGVkIFVSTCBzdHJpbmcgZm9yIHRoZSBKU09OLVJQQyBQcm92aWRlclxuICovXG5leHBvcnQgY29uc3QgZ2V0UHJvdmlkZXIgPSAocHJvdmlkZXIpID0+IHtcbiAgICBpZiAodHlwZW9mIHByb3ZpZGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgcHJvdmlkZXIuX2dldENvbm5lY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXIuX2dldENvbm5lY3Rpb24oKS51cmw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSB2YWxpZCBwcm92aWRlciBVUkwgb3IgV2ViM1Byb3ZpZGVyJyk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/provider.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ecrecover: function() { return /* binding */ ecrecover; },\n/* harmony export */   ecsign: function() { return /* binding */ ecsign; },\n/* harmony export */   fromRpcSig: function() { return /* binding */ fromRpcSig; },\n/* harmony export */   hashPersonalMessage: function() { return /* binding */ hashPersonalMessage; },\n/* harmony export */   isValidSignature: function() { return /* binding */ isValidSignature; },\n/* harmony export */   toCompactSig: function() { return /* binding */ toCompactSig; },\n/* harmony export */   toRpcSig: function() { return /* binding */ toRpcSig; }\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"./node_modules/ethereum-cryptography/esm/secp256k1.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/helpers.js\");\n\n\n\n\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2;\n    return { r, s, v };\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1)\n        return v;\n    if (chainId === undefined) {\n        return v - _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return v - (chainId * _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 || recovery === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(s, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(v)));\n};\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const ss = Uint8Array.from([...s]);\n    if ((v > BigInt(28) && v % _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_2 === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1) || v === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(r, 32), (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.setLengthLeft)(ss, 32)));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(bytes.subarray(64));\n    }\n    else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(r);\n    const sBigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.bytesToBigInt)(s);\n    if (rBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ||\n        rBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER ||\n        sBigInt === _constants_js__WEBPACK_IMPORTED_MODULE_3__.BIGINT_0 ||\n        sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.assertIsBytes)(message);\n    const prefix = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_bytes_js__WEBPACK_IMPORTED_MODULE_2__.concatBytes)(prefix, message));\n};\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/signature.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: function() { return /* binding */ TypeOutput; },\n/* harmony export */   toType: function() { return /* binding */ toType; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/internal.js\");\n\n\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === 'string' && !(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    const output = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(input);\n    switch (outputType) {\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n        case TypeOutput.Number: {\n            const bigInt = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToBigInt)(output);\n            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n            }\n            return Number(bigInt);\n        }\n        case TypeOutput.PrefixedHexString:\n            return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(output);\n        default:\n            throw new Error('unknown outputType');\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0U7QUFDcEI7QUFDNUM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MseURBQVc7QUFDakQsOEVBQThFLE1BQU07QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0RBQWE7QUFDaEM7QUFDQSwyQkFBMkIsd0RBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFVO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS90eXBlcy5qcz83YTE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5dGVzVG9CaWdJbnQsIGJ5dGVzVG9IZXgsIHRvQnl0ZXMgfSBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCB7IGlzSGV4U3RyaW5nIH0gZnJvbSAnLi9pbnRlcm5hbC5qcyc7XG4vKipcbiAqIFR5cGUgb3V0cHV0IG9wdGlvbnNcbiAqL1xuZXhwb3J0IHZhciBUeXBlT3V0cHV0O1xuKGZ1bmN0aW9uIChUeXBlT3V0cHV0KSB7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiTnVtYmVyXCJdID0gMF0gPSBcIk51bWJlclwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIkJpZ0ludFwiXSA9IDFdID0gXCJCaWdJbnRcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJVaW50OEFycmF5XCJdID0gMl0gPSBcIlVpbnQ4QXJyYXlcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJQcmVmaXhlZEhleFN0cmluZ1wiXSA9IDNdID0gXCJQcmVmaXhlZEhleFN0cmluZ1wiO1xufSkoVHlwZU91dHB1dCB8fCAoVHlwZU91dHB1dCA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gdG9UeXBlKGlucHV0LCBvdXRwdXRUeXBlKSB7XG4gICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiAhaXNIZXhTdHJpbmcoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBzdHJpbmcgbXVzdCBiZSBwcm92aWRlZCB3aXRoIGEgMHgtcHJlZml4LCBnaXZlbjogJHtpbnB1dH1gKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIG51bWJlciBpcyBncmVhdGVyIHRoYW4gTUFYX1NBRkVfSU5URUdFUiAocGxlYXNlIHVzZSBhbiBhbHRlcm5hdGl2ZSBpbnB1dCB0eXBlKScpO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSB0b0J5dGVzKGlucHV0KTtcbiAgICBzd2l0Y2ggKG91dHB1dFR5cGUpIHtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LlVpbnQ4QXJyYXk6XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuQmlnSW50OlxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzVG9CaWdJbnQob3V0cHV0KTtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0Lk51bWJlcjoge1xuICAgICAgICAgICAgY29uc3QgYmlnSW50ID0gYnl0ZXNUb0JpZ0ludChvdXRwdXQpO1xuICAgICAgICAgICAgaWYgKGJpZ0ludCA+IEJpZ0ludChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgb3V0cHV0IHR5cGUpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKGJpZ0ludCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LlByZWZpeGVkSGV4U3RyaW5nOlxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzVG9IZXgob3V0cHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBvdXRwdXRUeXBlJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GWEI_TO_WEI: function() { return /* binding */ GWEI_TO_WEI; },\n/* harmony export */   formatBigDecimal: function() { return /* binding */ formatBigDecimal; }\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n\n/** Easy conversion from Gwei to wei */\nconst GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_0) {\n        denominator = _constants_js__WEBPACK_IMPORTED_MODULE_0__.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = ((numerator - full * denominator) * maxDecimalFactor) / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`;\n}\n//# sourceMappingURL=units.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3VuaXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUNwRDtBQUNPO0FBQ0E7QUFDUCx3QkFBd0IsbURBQVE7QUFDaEMsc0JBQXNCLG1EQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUssR0FBRyw2QkFBNkIsRUFBRSxTQUFTO0FBQzlEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9ldGhlcmV1bS1wcm92aWRlci9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2VzbS91bml0cy5qcz8yMzcyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJJR0lOVF8wLCBCSUdJTlRfMSB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbi8qKiBFYXN5IGNvbnZlcnNpb24gZnJvbSBHd2VpIHRvIHdlaSAqL1xuZXhwb3J0IGNvbnN0IEdXRUlfVE9fV0VJID0gQmlnSW50KDEwMDAwMDAwMDApO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJpZ0RlY2ltYWwobnVtZXJhdG9yLCBkZW5vbWluYXRvciwgbWF4RGVjaW1hbEZhY3Rvcikge1xuICAgIGlmIChkZW5vbWluYXRvciA9PT0gQklHSU5UXzApIHtcbiAgICAgICAgZGVub21pbmF0b3IgPSBCSUdJTlRfMTtcbiAgICB9XG4gICAgY29uc3QgZnVsbCA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICAgIGNvbnN0IGZyYWN0aW9uID0gKChudW1lcmF0b3IgLSBmdWxsICogZGVub21pbmF0b3IpICogbWF4RGVjaW1hbEZhY3RvcikgLyBkZW5vbWluYXRvcjtcbiAgICAvLyB6ZXJvcyB0byBiZSBhZGRlZCBwb3N0IGRlY2ltYWwgYXJlIG51bWJlciBvZiB6ZXJvcyBpbiBtYXhEZWNpbWFsRmFjdG9yIC0gbnVtYmVyIG9mIGRpZ2l0cyBpbiBmcmFjdGlvblxuICAgIGNvbnN0IHplcm9zUG9zdERlY2ltYWwgPSBTdHJpbmcobWF4RGVjaW1hbEZhY3RvcikubGVuZ3RoIC0gMSAtIFN0cmluZyhmcmFjdGlvbikubGVuZ3RoO1xuICAgIHJldHVybiBgJHtmdWxsfS4keycwJy5yZXBlYXQoemVyb3NQb3N0RGVjaW1hbCl9JHtmcmFjdGlvbn1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/units.js\n"));

/***/ }),

/***/ "./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Withdrawal: function() { return /* binding */ Withdrawal; }\n/* harmony export */ });\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./address.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/address.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/bytes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/constants.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/types.js\");\n\n\n\n\n/**\n * Representation of EIP-4895 withdrawal data\n */\nclass Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */\n    constructor(index, validatorIndex, address, \n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    amount) {\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;\n        const index = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(indexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const validatorIndex = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndexData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        const address = addressData instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? addressData : new _address_js__WEBPACK_IMPORTED_MODULE_0__.Address((0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(addressData));\n        const amount = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amountData, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */\n    static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(index, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(validatorIndex, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof _address_js__WEBPACK_IMPORTED_MODULE_0__.Address ? address.bytes : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(address, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        const amountBytes = (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.BigInt) === _constants_js__WEBPACK_IMPORTED_MODULE_2__.BIGINT_0\n            ? new Uint8Array()\n            : (0,_types_js__WEBPACK_IMPORTED_MODULE_3__.toType)(amount, _types_js__WEBPACK_IMPORTED_MODULE_3__.TypeOutput.Uint8Array);\n        return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount,\n        };\n    }\n    toJSON() {\n        return {\n            index: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.index),\n            validatorIndex: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.validatorIndex),\n            address: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.address.bytes),\n            amount: (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.bigIntToHex)(this.amount),\n        };\n    }\n}\n//# sourceMappingURL=withdrawal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvZXNtL3dpdGhkcmF3YWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUM7QUFDdUI7QUFDcEI7QUFDTTtBQUNoRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtHQUFrRztBQUNsSCxzQkFBc0IsaURBQU0sWUFBWSxpREFBVTtBQUNsRCwrQkFBK0IsaURBQU0scUJBQXFCLGlEQUFVO0FBQ3BFLCtDQUErQyxnREFBTyxxQkFBcUIsZ0RBQU8sQ0FBQyxrREFBTztBQUMxRix1QkFBdUIsaURBQU0sYUFBYSxpREFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSx1QkFBdUI7QUFDbkc7QUFDQTtBQUNBLCtDQUErQyx3Q0FBd0M7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pELDJCQUEyQixpREFBTSxRQUFRLGlEQUFVLGFBQWEsbURBQVE7QUFDeEU7QUFDQSxjQUFjLGlEQUFNLFFBQVEsaURBQVU7QUFDdEMsb0NBQW9DLGlEQUFNLGlCQUFpQixpREFBVSxhQUFhLG1EQUFRO0FBQzFGO0FBQ0EsY0FBYyxpREFBTSxpQkFBaUIsaURBQVU7QUFDL0MsZ0RBQWdELGdEQUFPLG1CQUFtQixpREFBTSxVQUFVLGlEQUFVO0FBQ3BHLDRCQUE0QixpREFBTSxTQUFTLGlEQUFVLGFBQWEsbURBQVE7QUFDMUU7QUFDQSxjQUFjLGlEQUFNLFNBQVMsaURBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNEQUFXO0FBQzlCLDRCQUE0QixzREFBVztBQUN2QyxxQkFBcUIscURBQVU7QUFDL0Isb0JBQW9CLHNEQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvZXRoZXJldW0tcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC9lc20vd2l0aGRyYXdhbC5qcz9hMDU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuL2FkZHJlc3MuanMnO1xuaW1wb3J0IHsgYmlnSW50VG9IZXgsIGJ5dGVzVG9IZXgsIHRvQnl0ZXMgfSBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCB7IEJJR0lOVF8wIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVHlwZU91dHB1dCwgdG9UeXBlIH0gZnJvbSAnLi90eXBlcy5qcyc7XG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIEVJUC00ODk1IHdpdGhkcmF3YWwgZGF0YVxuICovXG5leHBvcnQgY2xhc3MgV2l0aGRyYXdhbCB7XG4gICAgLyoqXG4gICAgICogVGhpcyBjb25zdHJ1Y3RvciBhc3NpZ25zIGFuZCB2YWxpZGF0ZXMgdGhlIHZhbHVlcy5cbiAgICAgKiBVc2UgdGhlIHN0YXRpYyBmYWN0b3J5IG1ldGhvZHMgdG8gYXNzaXN0IGluIGNyZWF0aW5nIGEgV2l0aGRyYXdhbCBvYmplY3QgZnJvbSB2YXJ5aW5nIGRhdGEgdHlwZXMuXG4gICAgICogSXRzIGFtb3VudCBpcyBpbiBHd2VpIHRvIG1hdGNoIENMIHJlcHJlc2VudGF0aW9uIGFuZCBmb3IgZXZlbnR1YWwgc3N6IHdpdGhkcmF3YWxzUm9vdFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGluZGV4LCB2YWxpZGF0b3JJbmRleCwgYWRkcmVzcywgXG4gICAgLyoqXG4gICAgICogd2l0aGRyYXdhbCBhbW91bnQgaW4gR3dlaSB0byBtYXRjaCB0aGUgQ0wgcmVwZXNlbnRhdGlvbiBhbmQgZXZlbnR1YWxseSBzc3ogd2l0aGRyYXdhbHNSb290XG4gICAgICovXG4gICAgYW1vdW50KSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy52YWxpZGF0b3JJbmRleCA9IHZhbGlkYXRvckluZGV4O1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLmFtb3VudCA9IGFtb3VudDtcbiAgICB9XG4gICAgc3RhdGljIGZyb21XaXRoZHJhd2FsRGF0YSh3aXRoZHJhd2FsRGF0YSkge1xuICAgICAgICBjb25zdCB7IGluZGV4OiBpbmRleERhdGEsIHZhbGlkYXRvckluZGV4OiB2YWxpZGF0b3JJbmRleERhdGEsIGFkZHJlc3M6IGFkZHJlc3NEYXRhLCBhbW91bnQ6IGFtb3VudERhdGEsIH0gPSB3aXRoZHJhd2FsRGF0YTtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0b1R5cGUoaW5kZXhEYXRhLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRvckluZGV4ID0gdG9UeXBlKHZhbGlkYXRvckluZGV4RGF0YSwgVHlwZU91dHB1dC5CaWdJbnQpO1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYWRkcmVzc0RhdGEgaW5zdGFuY2VvZiBBZGRyZXNzID8gYWRkcmVzc0RhdGEgOiBuZXcgQWRkcmVzcyh0b0J5dGVzKGFkZHJlc3NEYXRhKSk7XG4gICAgICAgIGNvbnN0IGFtb3VudCA9IHRvVHlwZShhbW91bnREYXRhLCBUeXBlT3V0cHV0LkJpZ0ludCk7XG4gICAgICAgIHJldHVybiBuZXcgV2l0aGRyYXdhbChpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tVmFsdWVzQXJyYXkod2l0aGRyYXdhbEFycmF5KSB7XG4gICAgICAgIGlmICh3aXRoZHJhd2FsQXJyYXkubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgSW52YWxpZCB3aXRoZHJhd2FsQXJyYXkgbGVuZ3RoIGV4cGVjdGVkPTQgYWN0dWFsPSR7d2l0aGRyYXdhbEFycmF5Lmxlbmd0aH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBhbW91bnRdID0gd2l0aGRyYXdhbEFycmF5O1xuICAgICAgICByZXR1cm4gV2l0aGRyYXdhbC5mcm9tV2l0aGRyYXdhbERhdGEoeyBpbmRleCwgdmFsaWRhdG9ySW5kZXgsIGFkZHJlc3MsIGFtb3VudCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhIHdpdGhkcmF3YWwgdG8gYSBidWZmZXIgYXJyYXlcbiAgICAgKiBAcGFyYW0gd2l0aGRyYXdhbCB0aGUgd2l0aGRyYXdhbCB0byBjb252ZXJ0XG4gICAgICogQHJldHVybnMgYnVmZmVyIGFycmF5IG9mIHRoZSB3aXRoZHJhd2FsXG4gICAgICovXG4gICAgc3RhdGljIHRvQnl0ZXNBcnJheSh3aXRoZHJhd2FsKSB7XG4gICAgICAgIGNvbnN0IHsgaW5kZXgsIHZhbGlkYXRvckluZGV4LCBhZGRyZXNzLCBhbW91bnQgfSA9IHdpdGhkcmF3YWw7XG4gICAgICAgIGNvbnN0IGluZGV4Qnl0ZXMgPSB0b1R5cGUoaW5kZXgsIFR5cGVPdXRwdXQuQmlnSW50KSA9PT0gQklHSU5UXzBcbiAgICAgICAgICAgID8gbmV3IFVpbnQ4QXJyYXkoKVxuICAgICAgICAgICAgOiB0b1R5cGUoaW5kZXgsIFR5cGVPdXRwdXQuVWludDhBcnJheSk7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRvckluZGV4Qnl0ZXMgPSB0b1R5cGUodmFsaWRhdG9ySW5kZXgsIFR5cGVPdXRwdXQuQmlnSW50KSA9PT0gQklHSU5UXzBcbiAgICAgICAgICAgID8gbmV3IFVpbnQ4QXJyYXkoKVxuICAgICAgICAgICAgOiB0b1R5cGUodmFsaWRhdG9ySW5kZXgsIFR5cGVPdXRwdXQuVWludDhBcnJheSk7XG4gICAgICAgIGNvbnN0IGFkZHJlc3NCeXRlcyA9IGFkZHJlc3MgaW5zdGFuY2VvZiBBZGRyZXNzID8gYWRkcmVzcy5ieXRlcyA6IHRvVHlwZShhZGRyZXNzLCBUeXBlT3V0cHV0LlVpbnQ4QXJyYXkpO1xuICAgICAgICBjb25zdCBhbW91bnRCeXRlcyA9IHRvVHlwZShhbW91bnQsIFR5cGVPdXRwdXQuQmlnSW50KSA9PT0gQklHSU5UXzBcbiAgICAgICAgICAgID8gbmV3IFVpbnQ4QXJyYXkoKVxuICAgICAgICAgICAgOiB0b1R5cGUoYW1vdW50LCBUeXBlT3V0cHV0LlVpbnQ4QXJyYXkpO1xuICAgICAgICByZXR1cm4gW2luZGV4Qnl0ZXMsIHZhbGlkYXRvckluZGV4Qnl0ZXMsIGFkZHJlc3NCeXRlcywgYW1vdW50Qnl0ZXNdO1xuICAgIH1cbiAgICByYXcoKSB7XG4gICAgICAgIHJldHVybiBXaXRoZHJhd2FsLnRvQnl0ZXNBcnJheSh0aGlzKTtcbiAgICB9XG4gICAgdG9WYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgdmFsaWRhdG9ySW5kZXg6IHRoaXMudmFsaWRhdG9ySW5kZXgsXG4gICAgICAgICAgICBhZGRyZXNzOiB0aGlzLmFkZHJlc3MuYnl0ZXMsXG4gICAgICAgICAgICBhbW91bnQ6IHRoaXMuYW1vdW50LFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogYmlnSW50VG9IZXgodGhpcy5pbmRleCksXG4gICAgICAgICAgICB2YWxpZGF0b3JJbmRleDogYmlnSW50VG9IZXgodGhpcy52YWxpZGF0b3JJbmRleCksXG4gICAgICAgICAgICBhZGRyZXNzOiBieXRlc1RvSGV4KHRoaXMuYWRkcmVzcy5ieXRlcyksXG4gICAgICAgICAgICBhbW91bnQ6IGJpZ0ludFRvSGV4KHRoaXMuYW1vdW50KSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoZHJhd2FsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/ethereum-provider/node_modules/@ethereumjs/util/dist/esm/withdrawal.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc1.js":
/*!**************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc1.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nconst crc1 = (current, previous = 0) => {\n    let crc = ~~previous;\n    let accum = 0;\n    for (let index = 0; index < current.length; index++) {\n        accum += current[index];\n    }\n    crc += accum % 256;\n    return crc % 256;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxJQUFJLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY2FsY3VsYXRvcnMvY3JjMS5qcz8zM2RmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyYzEgPSAoY3VycmVudCwgcHJldmlvdXMgPSAwKSA9PiB7XG4gICAgbGV0IGNyYyA9IH5+cHJldmlvdXM7XG4gICAgbGV0IGFjY3VtID0gMDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgYWNjdW0gKz0gY3VycmVudFtpbmRleF07XG4gICAgfVxuICAgIGNyYyArPSBhY2N1bSAlIDI1NjtcbiAgICByZXR1cm4gY3JjICUgMjU2O1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyYzE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc1.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16.js":
/*!***************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16 --generate=c`\nlet TABLE = [\n    0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741,\n    0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,\n    0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941,\n    0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,\n    0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341,\n    0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,\n    0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40,\n    0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,\n    0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41,\n    0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,\n    0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141,\n    0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,\n    0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,\n    0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,\n    0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541,\n    0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,\n    0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741,\n    0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,\n    0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941,\n    0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,\n    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341,\n    0x4100, 0x81c1, 0x8081, 0x4040,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc16 = (current, previous = 0) => {\n    let crc = ~~previous;\n    for (let index = 0; index < current.length; index++) {\n        crc = (TABLE[(crc ^ current[index]) & 0xff] ^ (crc >> 8)) & 0xffff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc16);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNi5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLEtBQUssRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNi5qcz8wODNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBgLi9weWNyYy5weSAtLWFsZ29yaXRobT10YWJsZS1kcml2ZW4gLS1tb2RlbD1jcmMtMTYgLS1nZW5lcmF0ZT1jYFxubGV0IFRBQkxFID0gW1xuICAgIDB4MDAwMCwgMHhjMGMxLCAweGMxODEsIDB4MDE0MCwgMHhjMzAxLCAweDAzYzAsIDB4MDI4MCwgMHhjMjQxLCAweGM2MDEsIDB4MDZjMCwgMHgwNzgwLCAweGM3NDEsXG4gICAgMHgwNTAwLCAweGM1YzEsIDB4YzQ4MSwgMHgwNDQwLCAweGNjMDEsIDB4MGNjMCwgMHgwZDgwLCAweGNkNDEsIDB4MGYwMCwgMHhjZmMxLCAweGNlODEsIDB4MGU0MCxcbiAgICAweDBhMDAsIDB4Y2FjMSwgMHhjYjgxLCAweDBiNDAsIDB4YzkwMSwgMHgwOWMwLCAweDA4ODAsIDB4Yzg0MSwgMHhkODAxLCAweDE4YzAsIDB4MTk4MCwgMHhkOTQxLFxuICAgIDB4MWIwMCwgMHhkYmMxLCAweGRhODEsIDB4MWE0MCwgMHgxZTAwLCAweGRlYzEsIDB4ZGY4MSwgMHgxZjQwLCAweGRkMDEsIDB4MWRjMCwgMHgxYzgwLCAweGRjNDEsXG4gICAgMHgxNDAwLCAweGQ0YzEsIDB4ZDU4MSwgMHgxNTQwLCAweGQ3MDEsIDB4MTdjMCwgMHgxNjgwLCAweGQ2NDEsIDB4ZDIwMSwgMHgxMmMwLCAweDEzODAsIDB4ZDM0MSxcbiAgICAweDExMDAsIDB4ZDFjMSwgMHhkMDgxLCAweDEwNDAsIDB4ZjAwMSwgMHgzMGMwLCAweDMxODAsIDB4ZjE0MSwgMHgzMzAwLCAweGYzYzEsIDB4ZjI4MSwgMHgzMjQwLFxuICAgIDB4MzYwMCwgMHhmNmMxLCAweGY3ODEsIDB4Mzc0MCwgMHhmNTAxLCAweDM1YzAsIDB4MzQ4MCwgMHhmNDQxLCAweDNjMDAsIDB4ZmNjMSwgMHhmZDgxLCAweDNkNDAsXG4gICAgMHhmZjAxLCAweDNmYzAsIDB4M2U4MCwgMHhmZTQxLCAweGZhMDEsIDB4M2FjMCwgMHgzYjgwLCAweGZiNDEsIDB4MzkwMCwgMHhmOWMxLCAweGY4ODEsIDB4Mzg0MCxcbiAgICAweDI4MDAsIDB4ZThjMSwgMHhlOTgxLCAweDI5NDAsIDB4ZWIwMSwgMHgyYmMwLCAweDJhODAsIDB4ZWE0MSwgMHhlZTAxLCAweDJlYzAsIDB4MmY4MCwgMHhlZjQxLFxuICAgIDB4MmQwMCwgMHhlZGMxLCAweGVjODEsIDB4MmM0MCwgMHhlNDAxLCAweDI0YzAsIDB4MjU4MCwgMHhlNTQxLCAweDI3MDAsIDB4ZTdjMSwgMHhlNjgxLCAweDI2NDAsXG4gICAgMHgyMjAwLCAweGUyYzEsIDB4ZTM4MSwgMHgyMzQwLCAweGUxMDEsIDB4MjFjMCwgMHgyMDgwLCAweGUwNDEsIDB4YTAwMSwgMHg2MGMwLCAweDYxODAsIDB4YTE0MSxcbiAgICAweDYzMDAsIDB4YTNjMSwgMHhhMjgxLCAweDYyNDAsIDB4NjYwMCwgMHhhNmMxLCAweGE3ODEsIDB4Njc0MCwgMHhhNTAxLCAweDY1YzAsIDB4NjQ4MCwgMHhhNDQxLFxuICAgIDB4NmMwMCwgMHhhY2MxLCAweGFkODEsIDB4NmQ0MCwgMHhhZjAxLCAweDZmYzAsIDB4NmU4MCwgMHhhZTQxLCAweGFhMDEsIDB4NmFjMCwgMHg2YjgwLCAweGFiNDEsXG4gICAgMHg2OTAwLCAweGE5YzEsIDB4YTg4MSwgMHg2ODQwLCAweDc4MDAsIDB4YjhjMSwgMHhiOTgxLCAweDc5NDAsIDB4YmIwMSwgMHg3YmMwLCAweDdhODAsIDB4YmE0MSxcbiAgICAweGJlMDEsIDB4N2VjMCwgMHg3ZjgwLCAweGJmNDEsIDB4N2QwMCwgMHhiZGMxLCAweGJjODEsIDB4N2M0MCwgMHhiNDAxLCAweDc0YzAsIDB4NzU4MCwgMHhiNTQxLFxuICAgIDB4NzcwMCwgMHhiN2MxLCAweGI2ODEsIDB4NzY0MCwgMHg3MjAwLCAweGIyYzEsIDB4YjM4MSwgMHg3MzQwLCAweGIxMDEsIDB4NzFjMCwgMHg3MDgwLCAweGIwNDEsXG4gICAgMHg1MDAwLCAweDkwYzEsIDB4OTE4MSwgMHg1MTQwLCAweDkzMDEsIDB4NTNjMCwgMHg1MjgwLCAweDkyNDEsIDB4OTYwMSwgMHg1NmMwLCAweDU3ODAsIDB4OTc0MSxcbiAgICAweDU1MDAsIDB4OTVjMSwgMHg5NDgxLCAweDU0NDAsIDB4OWMwMSwgMHg1Y2MwLCAweDVkODAsIDB4OWQ0MSwgMHg1ZjAwLCAweDlmYzEsIDB4OWU4MSwgMHg1ZTQwLFxuICAgIDB4NWEwMCwgMHg5YWMxLCAweDliODEsIDB4NWI0MCwgMHg5OTAxLCAweDU5YzAsIDB4NTg4MCwgMHg5ODQxLCAweDg4MDEsIDB4NDhjMCwgMHg0OTgwLCAweDg5NDEsXG4gICAgMHg0YjAwLCAweDhiYzEsIDB4OGE4MSwgMHg0YTQwLCAweDRlMDAsIDB4OGVjMSwgMHg4ZjgxLCAweDRmNDAsIDB4OGQwMSwgMHg0ZGMwLCAweDRjODAsIDB4OGM0MSxcbiAgICAweDQ0MDAsIDB4ODRjMSwgMHg4NTgxLCAweDQ1NDAsIDB4ODcwMSwgMHg0N2MwLCAweDQ2ODAsIDB4ODY0MSwgMHg4MjAxLCAweDQyYzAsIDB4NDM4MCwgMHg4MzQxLFxuICAgIDB4NDEwMCwgMHg4MWMxLCAweDgwODEsIDB4NDA0MCxcbl07XG5pZiAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgVEFCTEUgPSBuZXcgSW50MzJBcnJheShUQUJMRSk7XG59XG5jb25zdCBjcmMxNiA9IChjdXJyZW50LCBwcmV2aW91cyA9IDApID0+IHtcbiAgICBsZXQgY3JjID0gfn5wcmV2aW91cztcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3JjID0gKFRBQkxFWyhjcmMgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSBeIChjcmMgPj4gOCkpICYgMHhmZmZmO1xuICAgIH1cbiAgICByZXR1cm4gY3JjO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyYzE2O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc16.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16ccitt.js":
/*!********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16ccitt.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=ccitt --generate=c`\nlet TABLE = [\n    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b,\n    0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,\n    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,\n    0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,\n    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738,\n    0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96,\n    0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,\n    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,\n    0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,\n    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb,\n    0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2,\n    0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,\n    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,\n    0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,\n    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827,\n    0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d,\n    0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,\n    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,\n    0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc16ccitt = (current, previous) => {\n    let crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;\n    for (let index = 0; index < current.length; index++) {\n        crc = (TABLE[((crc >> 8) ^ current[index]) & 0xff] ^ (crc << 8)) & 0xffff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc16ccitt);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNmNjaXR0LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsVUFBVSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NhbGN1bGF0b3JzL2NyYzE2Y2NpdHQuanM/ODgwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgYC4vcHljcmMucHkgLS1hbGdvcml0aG09dGFibGUtZHJpdmVuIC0tbW9kZWw9Y2NpdHQgLS1nZW5lcmF0ZT1jYFxubGV0IFRBQkxFID0gW1xuICAgIDB4MDAwMCwgMHgxMDIxLCAweDIwNDIsIDB4MzA2MywgMHg0MDg0LCAweDUwYTUsIDB4NjBjNiwgMHg3MGU3LCAweDgxMDgsIDB4OTEyOSwgMHhhMTRhLCAweGIxNmIsXG4gICAgMHhjMThjLCAweGQxYWQsIDB4ZTFjZSwgMHhmMWVmLCAweDEyMzEsIDB4MDIxMCwgMHgzMjczLCAweDIyNTIsIDB4NTJiNSwgMHg0Mjk0LCAweDcyZjcsIDB4NjJkNixcbiAgICAweDkzMzksIDB4ODMxOCwgMHhiMzdiLCAweGEzNWEsIDB4ZDNiZCwgMHhjMzljLCAweGYzZmYsIDB4ZTNkZSwgMHgyNDYyLCAweDM0NDMsIDB4MDQyMCwgMHgxNDAxLFxuICAgIDB4NjRlNiwgMHg3NGM3LCAweDQ0YTQsIDB4NTQ4NSwgMHhhNTZhLCAweGI1NGIsIDB4ODUyOCwgMHg5NTA5LCAweGU1ZWUsIDB4ZjVjZiwgMHhjNWFjLCAweGQ1OGQsXG4gICAgMHgzNjUzLCAweDI2NzIsIDB4MTYxMSwgMHgwNjMwLCAweDc2ZDcsIDB4NjZmNiwgMHg1Njk1LCAweDQ2YjQsIDB4Yjc1YiwgMHhhNzdhLCAweDk3MTksIDB4ODczOCxcbiAgICAweGY3ZGYsIDB4ZTdmZSwgMHhkNzlkLCAweGM3YmMsIDB4NDhjNCwgMHg1OGU1LCAweDY4ODYsIDB4NzhhNywgMHgwODQwLCAweDE4NjEsIDB4MjgwMiwgMHgzODIzLFxuICAgIDB4YzljYywgMHhkOWVkLCAweGU5OGUsIDB4ZjlhZiwgMHg4OTQ4LCAweDk5NjksIDB4YTkwYSwgMHhiOTJiLCAweDVhZjUsIDB4NGFkNCwgMHg3YWI3LCAweDZhOTYsXG4gICAgMHgxYTcxLCAweDBhNTAsIDB4M2EzMywgMHgyYTEyLCAweGRiZmQsIDB4Y2JkYywgMHhmYmJmLCAweGViOWUsIDB4OWI3OSwgMHg4YjU4LCAweGJiM2IsIDB4YWIxYSxcbiAgICAweDZjYTYsIDB4N2M4NywgMHg0Y2U0LCAweDVjYzUsIDB4MmMyMiwgMHgzYzAzLCAweDBjNjAsIDB4MWM0MSwgMHhlZGFlLCAweGZkOGYsIDB4Y2RlYywgMHhkZGNkLFxuICAgIDB4YWQyYSwgMHhiZDBiLCAweDhkNjgsIDB4OWQ0OSwgMHg3ZTk3LCAweDZlYjYsIDB4NWVkNSwgMHg0ZWY0LCAweDNlMTMsIDB4MmUzMiwgMHgxZTUxLCAweDBlNzAsXG4gICAgMHhmZjlmLCAweGVmYmUsIDB4ZGZkZCwgMHhjZmZjLCAweGJmMWIsIDB4YWYzYSwgMHg5ZjU5LCAweDhmNzgsIDB4OTE4OCwgMHg4MWE5LCAweGIxY2EsIDB4YTFlYixcbiAgICAweGQxMGMsIDB4YzEyZCwgMHhmMTRlLCAweGUxNmYsIDB4MTA4MCwgMHgwMGExLCAweDMwYzIsIDB4MjBlMywgMHg1MDA0LCAweDQwMjUsIDB4NzA0NiwgMHg2MDY3LFxuICAgIDB4ODNiOSwgMHg5Mzk4LCAweGEzZmIsIDB4YjNkYSwgMHhjMzNkLCAweGQzMWMsIDB4ZTM3ZiwgMHhmMzVlLCAweDAyYjEsIDB4MTI5MCwgMHgyMmYzLCAweDMyZDIsXG4gICAgMHg0MjM1LCAweDUyMTQsIDB4NjI3NywgMHg3MjU2LCAweGI1ZWEsIDB4YTVjYiwgMHg5NWE4LCAweDg1ODksIDB4ZjU2ZSwgMHhlNTRmLCAweGQ1MmMsIDB4YzUwZCxcbiAgICAweDM0ZTIsIDB4MjRjMywgMHgxNGEwLCAweDA0ODEsIDB4NzQ2NiwgMHg2NDQ3LCAweDU0MjQsIDB4NDQwNSwgMHhhN2RiLCAweGI3ZmEsIDB4ODc5OSwgMHg5N2I4LFxuICAgIDB4ZTc1ZiwgMHhmNzdlLCAweGM3MWQsIDB4ZDczYywgMHgyNmQzLCAweDM2ZjIsIDB4MDY5MSwgMHgxNmIwLCAweDY2NTcsIDB4NzY3NiwgMHg0NjE1LCAweDU2MzQsXG4gICAgMHhkOTRjLCAweGM5NmQsIDB4ZjkwZSwgMHhlOTJmLCAweDk5YzgsIDB4ODllOSwgMHhiOThhLCAweGE5YWIsIDB4NTg0NCwgMHg0ODY1LCAweDc4MDYsIDB4NjgyNyxcbiAgICAweDE4YzAsIDB4MDhlMSwgMHgzODgyLCAweDI4YTMsIDB4Y2I3ZCwgMHhkYjVjLCAweGViM2YsIDB4ZmIxZSwgMHg4YmY5LCAweDliZDgsIDB4YWJiYiwgMHhiYjlhLFxuICAgIDB4NGE3NSwgMHg1YTU0LCAweDZhMzcsIDB4N2ExNiwgMHgwYWYxLCAweDFhZDAsIDB4MmFiMywgMHgzYTkyLCAweGZkMmUsIDB4ZWQwZiwgMHhkZDZjLCAweGNkNGQsXG4gICAgMHhiZGFhLCAweGFkOGIsIDB4OWRlOCwgMHg4ZGM5LCAweDdjMjYsIDB4NmMwNywgMHg1YzY0LCAweDRjNDUsIDB4M2NhMiwgMHgyYzgzLCAweDFjZTAsIDB4MGNjMSxcbiAgICAweGVmMWYsIDB4ZmYzZSwgMHhjZjVkLCAweGRmN2MsIDB4YWY5YiwgMHhiZmJhLCAweDhmZDksIDB4OWZmOCwgMHg2ZTE3LCAweDdlMzYsIDB4NGU1NSwgMHg1ZTc0LFxuICAgIDB4MmU5MywgMHgzZWIyLCAweDBlZDEsIDB4MWVmMCxcbl07XG5pZiAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgVEFCTEUgPSBuZXcgSW50MzJBcnJheShUQUJMRSk7XG59XG5jb25zdCBjcmMxNmNjaXR0ID0gKGN1cnJlbnQsIHByZXZpb3VzKSA9PiB7XG4gICAgbGV0IGNyYyA9IHR5cGVvZiBwcmV2aW91cyAhPT0gJ3VuZGVmaW5lZCcgPyB+fnByZXZpb3VzIDogMHhmZmZmO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjdXJyZW50Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjcmMgPSAoVEFCTEVbKChjcmMgPj4gOCkgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSBeIChjcmMgPDwgOCkpICYgMHhmZmZmO1xuICAgIH1cbiAgICByZXR1cm4gY3JjO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyYzE2Y2NpdHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc16ccitt.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16kermit.js":
/*!*********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16kermit.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=kermit --generate=c`\nlet TABLE = [\n    0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3,\n    0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,\n    0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399,\n    0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,\n    0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50,\n    0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,\n    0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e,\n    0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,\n    0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5,\n    0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,\n    0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693,\n    0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,\n    0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a,\n    0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,\n    0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710,\n    0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,\n    0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df,\n    0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,\n    0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595,\n    0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,\n    0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c,\n    0x3de3, 0x2c6a, 0x1ef1, 0x0f78,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc16kermit = (current, previous) => {\n    let crc = typeof previous !== 'undefined' ? ~~previous : 0x0000;\n    for (let index = 0; index < current.length; index++) {\n        crc = (TABLE[(crc ^ current[index]) & 0xff] ^ (crc >> 8)) & 0xffff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc16kermit);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNmtlcm1pdC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLFdBQVcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNmtlcm1pdC5qcz9mYzY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBgLi9weWNyYy5weSAtLWFsZ29yaXRobT10YWJsZS1kcml2ZW4gLS1tb2RlbD1rZXJtaXQgLS1nZW5lcmF0ZT1jYFxubGV0IFRBQkxFID0gW1xuICAgIDB4MDAwMCwgMHgxMTg5LCAweDIzMTIsIDB4MzI5YiwgMHg0NjI0LCAweDU3YWQsIDB4NjUzNiwgMHg3NGJmLCAweDhjNDgsIDB4OWRjMSwgMHhhZjVhLCAweGJlZDMsXG4gICAgMHhjYTZjLCAweGRiZTUsIDB4ZTk3ZSwgMHhmOGY3LCAweDEwODEsIDB4MDEwOCwgMHgzMzkzLCAweDIyMWEsIDB4NTZhNSwgMHg0NzJjLCAweDc1YjcsIDB4NjQzZSxcbiAgICAweDljYzksIDB4OGQ0MCwgMHhiZmRiLCAweGFlNTIsIDB4ZGFlZCwgMHhjYjY0LCAweGY5ZmYsIDB4ZTg3NiwgMHgyMTAyLCAweDMwOGIsIDB4MDIxMCwgMHgxMzk5LFxuICAgIDB4NjcyNiwgMHg3NmFmLCAweDQ0MzQsIDB4NTViZCwgMHhhZDRhLCAweGJjYzMsIDB4OGU1OCwgMHg5ZmQxLCAweGViNmUsIDB4ZmFlNywgMHhjODdjLCAweGQ5ZjUsXG4gICAgMHgzMTgzLCAweDIwMGEsIDB4MTI5MSwgMHgwMzE4LCAweDc3YTcsIDB4NjYyZSwgMHg1NGI1LCAweDQ1M2MsIDB4YmRjYiwgMHhhYzQyLCAweDllZDksIDB4OGY1MCxcbiAgICAweGZiZWYsIDB4ZWE2NiwgMHhkOGZkLCAweGM5NzQsIDB4NDIwNCwgMHg1MzhkLCAweDYxMTYsIDB4NzA5ZiwgMHgwNDIwLCAweDE1YTksIDB4MjczMiwgMHgzNmJiLFxuICAgIDB4Y2U0YywgMHhkZmM1LCAweGVkNWUsIDB4ZmNkNywgMHg4ODY4LCAweDk5ZTEsIDB4YWI3YSwgMHhiYWYzLCAweDUyODUsIDB4NDMwYywgMHg3MTk3LCAweDYwMWUsXG4gICAgMHgxNGExLCAweDA1MjgsIDB4MzdiMywgMHgyNjNhLCAweGRlY2QsIDB4Y2Y0NCwgMHhmZGRmLCAweGVjNTYsIDB4OThlOSwgMHg4OTYwLCAweGJiZmIsIDB4YWE3MixcbiAgICAweDYzMDYsIDB4NzI4ZiwgMHg0MDE0LCAweDUxOWQsIDB4MjUyMiwgMHgzNGFiLCAweDA2MzAsIDB4MTdiOSwgMHhlZjRlLCAweGZlYzcsIDB4Y2M1YywgMHhkZGQ1LFxuICAgIDB4YTk2YSwgMHhiOGUzLCAweDhhNzgsIDB4OWJmMSwgMHg3Mzg3LCAweDYyMGUsIDB4NTA5NSwgMHg0MTFjLCAweDM1YTMsIDB4MjQyYSwgMHgxNmIxLCAweDA3MzgsXG4gICAgMHhmZmNmLCAweGVlNDYsIDB4ZGNkZCwgMHhjZDU0LCAweGI5ZWIsIDB4YTg2MiwgMHg5YWY5LCAweDhiNzAsIDB4ODQwOCwgMHg5NTgxLCAweGE3MWEsIDB4YjY5MyxcbiAgICAweGMyMmMsIDB4ZDNhNSwgMHhlMTNlLCAweGYwYjcsIDB4MDg0MCwgMHgxOWM5LCAweDJiNTIsIDB4M2FkYiwgMHg0ZTY0LCAweDVmZWQsIDB4NmQ3NiwgMHg3Y2ZmLFxuICAgIDB4OTQ4OSwgMHg4NTAwLCAweGI3OWIsIDB4YTYxMiwgMHhkMmFkLCAweGMzMjQsIDB4ZjFiZiwgMHhlMDM2LCAweDE4YzEsIDB4MDk0OCwgMHgzYmQzLCAweDJhNWEsXG4gICAgMHg1ZWU1LCAweDRmNmMsIDB4N2RmNywgMHg2YzdlLCAweGE1MGEsIDB4YjQ4MywgMHg4NjE4LCAweDk3OTEsIDB4ZTMyZSwgMHhmMmE3LCAweGMwM2MsIDB4ZDFiNSxcbiAgICAweDI5NDIsIDB4MzhjYiwgMHgwYTUwLCAweDFiZDksIDB4NmY2NiwgMHg3ZWVmLCAweDRjNzQsIDB4NWRmZCwgMHhiNThiLCAweGE0MDIsIDB4OTY5OSwgMHg4NzEwLFxuICAgIDB4ZjNhZiwgMHhlMjI2LCAweGQwYmQsIDB4YzEzNCwgMHgzOWMzLCAweDI4NGEsIDB4MWFkMSwgMHgwYjU4LCAweDdmZTcsIDB4NmU2ZSwgMHg1Y2Y1LCAweDRkN2MsXG4gICAgMHhjNjBjLCAweGQ3ODUsIDB4ZTUxZSwgMHhmNDk3LCAweDgwMjgsIDB4OTFhMSwgMHhhMzNhLCAweGIyYjMsIDB4NGE0NCwgMHg1YmNkLCAweDY5NTYsIDB4NzhkZixcbiAgICAweDBjNjAsIDB4MWRlOSwgMHgyZjcyLCAweDNlZmIsIDB4ZDY4ZCwgMHhjNzA0LCAweGY1OWYsIDB4ZTQxNiwgMHg5MGE5LCAweDgxMjAsIDB4YjNiYiwgMHhhMjMyLFxuICAgIDB4NWFjNSwgMHg0YjRjLCAweDc5ZDcsIDB4Njg1ZSwgMHgxY2UxLCAweDBkNjgsIDB4M2ZmMywgMHgyZTdhLCAweGU3MGUsIDB4ZjY4NywgMHhjNDFjLCAweGQ1OTUsXG4gICAgMHhhMTJhLCAweGIwYTMsIDB4ODIzOCwgMHg5M2IxLCAweDZiNDYsIDB4N2FjZiwgMHg0ODU0LCAweDU5ZGQsIDB4MmQ2MiwgMHgzY2ViLCAweDBlNzAsIDB4MWZmOSxcbiAgICAweGY3OGYsIDB4ZTYwNiwgMHhkNDlkLCAweGM1MTQsIDB4YjFhYiwgMHhhMDIyLCAweDkyYjksIDB4ODMzMCwgMHg3YmM3LCAweDZhNGUsIDB4NThkNSwgMHg0OTVjLFxuICAgIDB4M2RlMywgMHgyYzZhLCAweDFlZjEsIDB4MGY3OCxcbl07XG5pZiAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgVEFCTEUgPSBuZXcgSW50MzJBcnJheShUQUJMRSk7XG59XG5jb25zdCBjcmMxNmtlcm1pdCA9IChjdXJyZW50LCBwcmV2aW91cykgPT4ge1xuICAgIGxldCBjcmMgPSB0eXBlb2YgcHJldmlvdXMgIT09ICd1bmRlZmluZWQnID8gfn5wcmV2aW91cyA6IDB4MDAwMDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3JjID0gKFRBQkxFWyhjcmMgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSBeIChjcmMgPj4gOCkpICYgMHhmZmZmO1xuICAgIH1cbiAgICByZXR1cm4gY3JjO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyYzE2a2VybWl0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc16kermit.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16modbus.js":
/*!*********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16modbus.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16-modbus --generate=c`\nlet TABLE = [\n    0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741,\n    0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,\n    0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941,\n    0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,\n    0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341,\n    0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,\n    0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40,\n    0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,\n    0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41,\n    0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,\n    0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141,\n    0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,\n    0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,\n    0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,\n    0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541,\n    0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,\n    0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741,\n    0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,\n    0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941,\n    0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,\n    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341,\n    0x4100, 0x81c1, 0x8081, 0x4040,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc16modbus = (current, previous) => {\n    let crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;\n    for (let index = 0; index < current.length; index++) {\n        crc = (TABLE[(crc ^ current[index]) & 0xff] ^ (crc >> 8)) & 0xffff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc16modbus);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNm1vZGJ1cy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLFdBQVcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNm1vZGJ1cy5qcz8zYjEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBgLi9weWNyYy5weSAtLWFsZ29yaXRobT10YWJsZS1kcml2ZW4gLS1tb2RlbD1jcmMtMTYtbW9kYnVzIC0tZ2VuZXJhdGU9Y2BcbmxldCBUQUJMRSA9IFtcbiAgICAweDAwMDAsIDB4YzBjMSwgMHhjMTgxLCAweDAxNDAsIDB4YzMwMSwgMHgwM2MwLCAweDAyODAsIDB4YzI0MSwgMHhjNjAxLCAweDA2YzAsIDB4MDc4MCwgMHhjNzQxLFxuICAgIDB4MDUwMCwgMHhjNWMxLCAweGM0ODEsIDB4MDQ0MCwgMHhjYzAxLCAweDBjYzAsIDB4MGQ4MCwgMHhjZDQxLCAweDBmMDAsIDB4Y2ZjMSwgMHhjZTgxLCAweDBlNDAsXG4gICAgMHgwYTAwLCAweGNhYzEsIDB4Y2I4MSwgMHgwYjQwLCAweGM5MDEsIDB4MDljMCwgMHgwODgwLCAweGM4NDEsIDB4ZDgwMSwgMHgxOGMwLCAweDE5ODAsIDB4ZDk0MSxcbiAgICAweDFiMDAsIDB4ZGJjMSwgMHhkYTgxLCAweDFhNDAsIDB4MWUwMCwgMHhkZWMxLCAweGRmODEsIDB4MWY0MCwgMHhkZDAxLCAweDFkYzAsIDB4MWM4MCwgMHhkYzQxLFxuICAgIDB4MTQwMCwgMHhkNGMxLCAweGQ1ODEsIDB4MTU0MCwgMHhkNzAxLCAweDE3YzAsIDB4MTY4MCwgMHhkNjQxLCAweGQyMDEsIDB4MTJjMCwgMHgxMzgwLCAweGQzNDEsXG4gICAgMHgxMTAwLCAweGQxYzEsIDB4ZDA4MSwgMHgxMDQwLCAweGYwMDEsIDB4MzBjMCwgMHgzMTgwLCAweGYxNDEsIDB4MzMwMCwgMHhmM2MxLCAweGYyODEsIDB4MzI0MCxcbiAgICAweDM2MDAsIDB4ZjZjMSwgMHhmNzgxLCAweDM3NDAsIDB4ZjUwMSwgMHgzNWMwLCAweDM0ODAsIDB4ZjQ0MSwgMHgzYzAwLCAweGZjYzEsIDB4ZmQ4MSwgMHgzZDQwLFxuICAgIDB4ZmYwMSwgMHgzZmMwLCAweDNlODAsIDB4ZmU0MSwgMHhmYTAxLCAweDNhYzAsIDB4M2I4MCwgMHhmYjQxLCAweDM5MDAsIDB4ZjljMSwgMHhmODgxLCAweDM4NDAsXG4gICAgMHgyODAwLCAweGU4YzEsIDB4ZTk4MSwgMHgyOTQwLCAweGViMDEsIDB4MmJjMCwgMHgyYTgwLCAweGVhNDEsIDB4ZWUwMSwgMHgyZWMwLCAweDJmODAsIDB4ZWY0MSxcbiAgICAweDJkMDAsIDB4ZWRjMSwgMHhlYzgxLCAweDJjNDAsIDB4ZTQwMSwgMHgyNGMwLCAweDI1ODAsIDB4ZTU0MSwgMHgyNzAwLCAweGU3YzEsIDB4ZTY4MSwgMHgyNjQwLFxuICAgIDB4MjIwMCwgMHhlMmMxLCAweGUzODEsIDB4MjM0MCwgMHhlMTAxLCAweDIxYzAsIDB4MjA4MCwgMHhlMDQxLCAweGEwMDEsIDB4NjBjMCwgMHg2MTgwLCAweGExNDEsXG4gICAgMHg2MzAwLCAweGEzYzEsIDB4YTI4MSwgMHg2MjQwLCAweDY2MDAsIDB4YTZjMSwgMHhhNzgxLCAweDY3NDAsIDB4YTUwMSwgMHg2NWMwLCAweDY0ODAsIDB4YTQ0MSxcbiAgICAweDZjMDAsIDB4YWNjMSwgMHhhZDgxLCAweDZkNDAsIDB4YWYwMSwgMHg2ZmMwLCAweDZlODAsIDB4YWU0MSwgMHhhYTAxLCAweDZhYzAsIDB4NmI4MCwgMHhhYjQxLFxuICAgIDB4NjkwMCwgMHhhOWMxLCAweGE4ODEsIDB4Njg0MCwgMHg3ODAwLCAweGI4YzEsIDB4Yjk4MSwgMHg3OTQwLCAweGJiMDEsIDB4N2JjMCwgMHg3YTgwLCAweGJhNDEsXG4gICAgMHhiZTAxLCAweDdlYzAsIDB4N2Y4MCwgMHhiZjQxLCAweDdkMDAsIDB4YmRjMSwgMHhiYzgxLCAweDdjNDAsIDB4YjQwMSwgMHg3NGMwLCAweDc1ODAsIDB4YjU0MSxcbiAgICAweDc3MDAsIDB4YjdjMSwgMHhiNjgxLCAweDc2NDAsIDB4NzIwMCwgMHhiMmMxLCAweGIzODEsIDB4NzM0MCwgMHhiMTAxLCAweDcxYzAsIDB4NzA4MCwgMHhiMDQxLFxuICAgIDB4NTAwMCwgMHg5MGMxLCAweDkxODEsIDB4NTE0MCwgMHg5MzAxLCAweDUzYzAsIDB4NTI4MCwgMHg5MjQxLCAweDk2MDEsIDB4NTZjMCwgMHg1NzgwLCAweDk3NDEsXG4gICAgMHg1NTAwLCAweDk1YzEsIDB4OTQ4MSwgMHg1NDQwLCAweDljMDEsIDB4NWNjMCwgMHg1ZDgwLCAweDlkNDEsIDB4NWYwMCwgMHg5ZmMxLCAweDllODEsIDB4NWU0MCxcbiAgICAweDVhMDAsIDB4OWFjMSwgMHg5YjgxLCAweDViNDAsIDB4OTkwMSwgMHg1OWMwLCAweDU4ODAsIDB4OTg0MSwgMHg4ODAxLCAweDQ4YzAsIDB4NDk4MCwgMHg4OTQxLFxuICAgIDB4NGIwMCwgMHg4YmMxLCAweDhhODEsIDB4NGE0MCwgMHg0ZTAwLCAweDhlYzEsIDB4OGY4MSwgMHg0ZjQwLCAweDhkMDEsIDB4NGRjMCwgMHg0YzgwLCAweDhjNDEsXG4gICAgMHg0NDAwLCAweDg0YzEsIDB4ODU4MSwgMHg0NTQwLCAweDg3MDEsIDB4NDdjMCwgMHg0NjgwLCAweDg2NDEsIDB4ODIwMSwgMHg0MmMwLCAweDQzODAsIDB4ODM0MSxcbiAgICAweDQxMDAsIDB4ODFjMSwgMHg4MDgxLCAweDQwNDAsXG5dO1xuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIFRBQkxFID0gbmV3IEludDMyQXJyYXkoVEFCTEUpO1xufVxuY29uc3QgY3JjMTZtb2RidXMgPSAoY3VycmVudCwgcHJldmlvdXMpID0+IHtcbiAgICBsZXQgY3JjID0gdHlwZW9mIHByZXZpb3VzICE9PSAndW5kZWZpbmVkJyA/IH5+cHJldmlvdXMgOiAweGZmZmY7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGN1cnJlbnQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNyYyA9IChUQUJMRVsoY3JjIF4gY3VycmVudFtpbmRleF0pICYgMHhmZl0gXiAoY3JjID4+IDgpKSAmIDB4ZmZmZjtcbiAgICB9XG4gICAgcmV0dXJuIGNyYztcbn07XG5leHBvcnQgZGVmYXVsdCBjcmMxNm1vZGJ1cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc16modbus.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16xmodem.js":
/*!*********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16xmodem.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nconst crc16xmodem = (current, previous) => {\n    let crc = typeof previous !== 'undefined' ? ~~previous : 0x0;\n    for (let index = 0; index < current.length; index++) {\n        let code = (crc >>> 8) & 0xff;\n        code ^= current[index] & 0xff;\n        code ^= code >>> 4;\n        crc = (crc << 8) & 0xffff;\n        crc ^= code;\n        code = (code << 5) & 0xffff;\n        crc ^= code;\n        code = (code << 7) & 0xffff;\n        crc ^= code;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc16xmodem);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMxNnhtb2RlbS5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NhbGN1bGF0b3JzL2NyYzE2eG1vZGVtLmpzP2RmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JjMTZ4bW9kZW0gPSAoY3VycmVudCwgcHJldmlvdXMpID0+IHtcbiAgICBsZXQgY3JjID0gdHlwZW9mIHByZXZpb3VzICE9PSAndW5kZWZpbmVkJyA/IH5+cHJldmlvdXMgOiAweDA7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGN1cnJlbnQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGxldCBjb2RlID0gKGNyYyA+Pj4gOCkgJiAweGZmO1xuICAgICAgICBjb2RlIF49IGN1cnJlbnRbaW5kZXhdICYgMHhmZjtcbiAgICAgICAgY29kZSBePSBjb2RlID4+PiA0O1xuICAgICAgICBjcmMgPSAoY3JjIDw8IDgpICYgMHhmZmZmO1xuICAgICAgICBjcmMgXj0gY29kZTtcbiAgICAgICAgY29kZSA9IChjb2RlIDw8IDUpICYgMHhmZmZmO1xuICAgICAgICBjcmMgXj0gY29kZTtcbiAgICAgICAgY29kZSA9IChjb2RlIDw8IDcpICYgMHhmZmZmO1xuICAgICAgICBjcmMgXj0gY29kZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyYztcbn07XG5leHBvcnQgZGVmYXVsdCBjcmMxNnhtb2RlbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc16xmodem.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc24.js":
/*!***************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc24.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-drive --model=crc-24 --generate=c`\nlet TABLE = [\n    0x000000, 0x864cfb, 0x8ad50d, 0x0c99f6, 0x93e6e1, 0x15aa1a, 0x1933ec, 0x9f7f17, 0xa18139,\n    0x27cdc2, 0x2b5434, 0xad18cf, 0x3267d8, 0xb42b23, 0xb8b2d5, 0x3efe2e, 0xc54e89, 0x430272,\n    0x4f9b84, 0xc9d77f, 0x56a868, 0xd0e493, 0xdc7d65, 0x5a319e, 0x64cfb0, 0xe2834b, 0xee1abd,\n    0x685646, 0xf72951, 0x7165aa, 0x7dfc5c, 0xfbb0a7, 0x0cd1e9, 0x8a9d12, 0x8604e4, 0x00481f,\n    0x9f3708, 0x197bf3, 0x15e205, 0x93aefe, 0xad50d0, 0x2b1c2b, 0x2785dd, 0xa1c926, 0x3eb631,\n    0xb8faca, 0xb4633c, 0x322fc7, 0xc99f60, 0x4fd39b, 0x434a6d, 0xc50696, 0x5a7981, 0xdc357a,\n    0xd0ac8c, 0x56e077, 0x681e59, 0xee52a2, 0xe2cb54, 0x6487af, 0xfbf8b8, 0x7db443, 0x712db5,\n    0xf7614e, 0x19a3d2, 0x9fef29, 0x9376df, 0x153a24, 0x8a4533, 0x0c09c8, 0x00903e, 0x86dcc5,\n    0xb822eb, 0x3e6e10, 0x32f7e6, 0xb4bb1d, 0x2bc40a, 0xad88f1, 0xa11107, 0x275dfc, 0xdced5b,\n    0x5aa1a0, 0x563856, 0xd074ad, 0x4f0bba, 0xc94741, 0xc5deb7, 0x43924c, 0x7d6c62, 0xfb2099,\n    0xf7b96f, 0x71f594, 0xee8a83, 0x68c678, 0x645f8e, 0xe21375, 0x15723b, 0x933ec0, 0x9fa736,\n    0x19ebcd, 0x8694da, 0x00d821, 0x0c41d7, 0x8a0d2c, 0xb4f302, 0x32bff9, 0x3e260f, 0xb86af4,\n    0x2715e3, 0xa15918, 0xadc0ee, 0x2b8c15, 0xd03cb2, 0x567049, 0x5ae9bf, 0xdca544, 0x43da53,\n    0xc596a8, 0xc90f5e, 0x4f43a5, 0x71bd8b, 0xf7f170, 0xfb6886, 0x7d247d, 0xe25b6a, 0x641791,\n    0x688e67, 0xeec29c, 0x3347a4, 0xb50b5f, 0xb992a9, 0x3fde52, 0xa0a145, 0x26edbe, 0x2a7448,\n    0xac38b3, 0x92c69d, 0x148a66, 0x181390, 0x9e5f6b, 0x01207c, 0x876c87, 0x8bf571, 0x0db98a,\n    0xf6092d, 0x7045d6, 0x7cdc20, 0xfa90db, 0x65efcc, 0xe3a337, 0xef3ac1, 0x69763a, 0x578814,\n    0xd1c4ef, 0xdd5d19, 0x5b11e2, 0xc46ef5, 0x42220e, 0x4ebbf8, 0xc8f703, 0x3f964d, 0xb9dab6,\n    0xb54340, 0x330fbb, 0xac70ac, 0x2a3c57, 0x26a5a1, 0xa0e95a, 0x9e1774, 0x185b8f, 0x14c279,\n    0x928e82, 0x0df195, 0x8bbd6e, 0x872498, 0x016863, 0xfad8c4, 0x7c943f, 0x700dc9, 0xf64132,\n    0x693e25, 0xef72de, 0xe3eb28, 0x65a7d3, 0x5b59fd, 0xdd1506, 0xd18cf0, 0x57c00b, 0xc8bf1c,\n    0x4ef3e7, 0x426a11, 0xc426ea, 0x2ae476, 0xaca88d, 0xa0317b, 0x267d80, 0xb90297, 0x3f4e6c,\n    0x33d79a, 0xb59b61, 0x8b654f, 0x0d29b4, 0x01b042, 0x87fcb9, 0x1883ae, 0x9ecf55, 0x9256a3,\n    0x141a58, 0xefaaff, 0x69e604, 0x657ff2, 0xe33309, 0x7c4c1e, 0xfa00e5, 0xf69913, 0x70d5e8,\n    0x4e2bc6, 0xc8673d, 0xc4fecb, 0x42b230, 0xddcd27, 0x5b81dc, 0x57182a, 0xd154d1, 0x26359f,\n    0xa07964, 0xace092, 0x2aac69, 0xb5d37e, 0x339f85, 0x3f0673, 0xb94a88, 0x87b4a6, 0x01f85d,\n    0x0d61ab, 0x8b2d50, 0x145247, 0x921ebc, 0x9e874a, 0x18cbb1, 0xe37b16, 0x6537ed, 0x69ae1b,\n    0xefe2e0, 0x709df7, 0xf6d10c, 0xfa48fa, 0x7c0401, 0x42fa2f, 0xc4b6d4, 0xc82f22, 0x4e63d9,\n    0xd11cce, 0x575035, 0x5bc9c3, 0xdd8538,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc24 = (current, previous) => {\n    let crc = typeof previous !== 'undefined' ? ~~previous : 0xb704ce;\n    for (let index = 0; index < current.length; index++) {\n        crc = (TABLE[((crc >> 16) ^ current[index]) & 0xff] ^ (crc << 8)) & 0xffffff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc24);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMyNC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsS0FBSyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NhbGN1bGF0b3JzL2NyYzI0LmpzPzNjNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IGAuL3B5Y3JjLnB5IC0tYWxnb3JpdGhtPXRhYmxlLWRyaXZlIC0tbW9kZWw9Y3JjLTI0IC0tZ2VuZXJhdGU9Y2BcbmxldCBUQUJMRSA9IFtcbiAgICAweDAwMDAwMCwgMHg4NjRjZmIsIDB4OGFkNTBkLCAweDBjOTlmNiwgMHg5M2U2ZTEsIDB4MTVhYTFhLCAweDE5MzNlYywgMHg5ZjdmMTcsIDB4YTE4MTM5LFxuICAgIDB4MjdjZGMyLCAweDJiNTQzNCwgMHhhZDE4Y2YsIDB4MzI2N2Q4LCAweGI0MmIyMywgMHhiOGIyZDUsIDB4M2VmZTJlLCAweGM1NGU4OSwgMHg0MzAyNzIsXG4gICAgMHg0ZjliODQsIDB4YzlkNzdmLCAweDU2YTg2OCwgMHhkMGU0OTMsIDB4ZGM3ZDY1LCAweDVhMzE5ZSwgMHg2NGNmYjAsIDB4ZTI4MzRiLCAweGVlMWFiZCxcbiAgICAweDY4NTY0NiwgMHhmNzI5NTEsIDB4NzE2NWFhLCAweDdkZmM1YywgMHhmYmIwYTcsIDB4MGNkMWU5LCAweDhhOWQxMiwgMHg4NjA0ZTQsIDB4MDA0ODFmLFxuICAgIDB4OWYzNzA4LCAweDE5N2JmMywgMHgxNWUyMDUsIDB4OTNhZWZlLCAweGFkNTBkMCwgMHgyYjFjMmIsIDB4Mjc4NWRkLCAweGExYzkyNiwgMHgzZWI2MzEsXG4gICAgMHhiOGZhY2EsIDB4YjQ2MzNjLCAweDMyMmZjNywgMHhjOTlmNjAsIDB4NGZkMzliLCAweDQzNGE2ZCwgMHhjNTA2OTYsIDB4NWE3OTgxLCAweGRjMzU3YSxcbiAgICAweGQwYWM4YywgMHg1NmUwNzcsIDB4NjgxZTU5LCAweGVlNTJhMiwgMHhlMmNiNTQsIDB4NjQ4N2FmLCAweGZiZjhiOCwgMHg3ZGI0NDMsIDB4NzEyZGI1LFxuICAgIDB4Zjc2MTRlLCAweDE5YTNkMiwgMHg5ZmVmMjksIDB4OTM3NmRmLCAweDE1M2EyNCwgMHg4YTQ1MzMsIDB4MGMwOWM4LCAweDAwOTAzZSwgMHg4NmRjYzUsXG4gICAgMHhiODIyZWIsIDB4M2U2ZTEwLCAweDMyZjdlNiwgMHhiNGJiMWQsIDB4MmJjNDBhLCAweGFkODhmMSwgMHhhMTExMDcsIDB4Mjc1ZGZjLCAweGRjZWQ1YixcbiAgICAweDVhYTFhMCwgMHg1NjM4NTYsIDB4ZDA3NGFkLCAweDRmMGJiYSwgMHhjOTQ3NDEsIDB4YzVkZWI3LCAweDQzOTI0YywgMHg3ZDZjNjIsIDB4ZmIyMDk5LFxuICAgIDB4ZjdiOTZmLCAweDcxZjU5NCwgMHhlZThhODMsIDB4NjhjNjc4LCAweDY0NWY4ZSwgMHhlMjEzNzUsIDB4MTU3MjNiLCAweDkzM2VjMCwgMHg5ZmE3MzYsXG4gICAgMHgxOWViY2QsIDB4ODY5NGRhLCAweDAwZDgyMSwgMHgwYzQxZDcsIDB4OGEwZDJjLCAweGI0ZjMwMiwgMHgzMmJmZjksIDB4M2UyNjBmLCAweGI4NmFmNCxcbiAgICAweDI3MTVlMywgMHhhMTU5MTgsIDB4YWRjMGVlLCAweDJiOGMxNSwgMHhkMDNjYjIsIDB4NTY3MDQ5LCAweDVhZTliZiwgMHhkY2E1NDQsIDB4NDNkYTUzLFxuICAgIDB4YzU5NmE4LCAweGM5MGY1ZSwgMHg0ZjQzYTUsIDB4NzFiZDhiLCAweGY3ZjE3MCwgMHhmYjY4ODYsIDB4N2QyNDdkLCAweGUyNWI2YSwgMHg2NDE3OTEsXG4gICAgMHg2ODhlNjcsIDB4ZWVjMjljLCAweDMzNDdhNCwgMHhiNTBiNWYsIDB4Yjk5MmE5LCAweDNmZGU1MiwgMHhhMGExNDUsIDB4MjZlZGJlLCAweDJhNzQ0OCxcbiAgICAweGFjMzhiMywgMHg5MmM2OWQsIDB4MTQ4YTY2LCAweDE4MTM5MCwgMHg5ZTVmNmIsIDB4MDEyMDdjLCAweDg3NmM4NywgMHg4YmY1NzEsIDB4MGRiOThhLFxuICAgIDB4ZjYwOTJkLCAweDcwNDVkNiwgMHg3Y2RjMjAsIDB4ZmE5MGRiLCAweDY1ZWZjYywgMHhlM2EzMzcsIDB4ZWYzYWMxLCAweDY5NzYzYSwgMHg1Nzg4MTQsXG4gICAgMHhkMWM0ZWYsIDB4ZGQ1ZDE5LCAweDViMTFlMiwgMHhjNDZlZjUsIDB4NDIyMjBlLCAweDRlYmJmOCwgMHhjOGY3MDMsIDB4M2Y5NjRkLCAweGI5ZGFiNixcbiAgICAweGI1NDM0MCwgMHgzMzBmYmIsIDB4YWM3MGFjLCAweDJhM2M1NywgMHgyNmE1YTEsIDB4YTBlOTVhLCAweDllMTc3NCwgMHgxODViOGYsIDB4MTRjMjc5LFxuICAgIDB4OTI4ZTgyLCAweDBkZjE5NSwgMHg4YmJkNmUsIDB4ODcyNDk4LCAweDAxNjg2MywgMHhmYWQ4YzQsIDB4N2M5NDNmLCAweDcwMGRjOSwgMHhmNjQxMzIsXG4gICAgMHg2OTNlMjUsIDB4ZWY3MmRlLCAweGUzZWIyOCwgMHg2NWE3ZDMsIDB4NWI1OWZkLCAweGRkMTUwNiwgMHhkMThjZjAsIDB4NTdjMDBiLCAweGM4YmYxYyxcbiAgICAweDRlZjNlNywgMHg0MjZhMTEsIDB4YzQyNmVhLCAweDJhZTQ3NiwgMHhhY2E4OGQsIDB4YTAzMTdiLCAweDI2N2Q4MCwgMHhiOTAyOTcsIDB4M2Y0ZTZjLFxuICAgIDB4MzNkNzlhLCAweGI1OWI2MSwgMHg4YjY1NGYsIDB4MGQyOWI0LCAweDAxYjA0MiwgMHg4N2ZjYjksIDB4MTg4M2FlLCAweDllY2Y1NSwgMHg5MjU2YTMsXG4gICAgMHgxNDFhNTgsIDB4ZWZhYWZmLCAweDY5ZTYwNCwgMHg2NTdmZjIsIDB4ZTMzMzA5LCAweDdjNGMxZSwgMHhmYTAwZTUsIDB4ZjY5OTEzLCAweDcwZDVlOCxcbiAgICAweDRlMmJjNiwgMHhjODY3M2QsIDB4YzRmZWNiLCAweDQyYjIzMCwgMHhkZGNkMjcsIDB4NWI4MWRjLCAweDU3MTgyYSwgMHhkMTU0ZDEsIDB4MjYzNTlmLFxuICAgIDB4YTA3OTY0LCAweGFjZTA5MiwgMHgyYWFjNjksIDB4YjVkMzdlLCAweDMzOWY4NSwgMHgzZjA2NzMsIDB4Yjk0YTg4LCAweDg3YjRhNiwgMHgwMWY4NWQsXG4gICAgMHgwZDYxYWIsIDB4OGIyZDUwLCAweDE0NTI0NywgMHg5MjFlYmMsIDB4OWU4NzRhLCAweDE4Y2JiMSwgMHhlMzdiMTYsIDB4NjUzN2VkLCAweDY5YWUxYixcbiAgICAweGVmZTJlMCwgMHg3MDlkZjcsIDB4ZjZkMTBjLCAweGZhNDhmYSwgMHg3YzA0MDEsIDB4NDJmYTJmLCAweGM0YjZkNCwgMHhjODJmMjIsIDB4NGU2M2Q5LFxuICAgIDB4ZDExY2NlLCAweDU3NTAzNSwgMHg1YmM5YzMsIDB4ZGQ4NTM4LFxuXTtcbmlmICh0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBUQUJMRSA9IG5ldyBJbnQzMkFycmF5KFRBQkxFKTtcbn1cbmNvbnN0IGNyYzI0ID0gKGN1cnJlbnQsIHByZXZpb3VzKSA9PiB7XG4gICAgbGV0IGNyYyA9IHR5cGVvZiBwcmV2aW91cyAhPT0gJ3VuZGVmaW5lZCcgPyB+fnByZXZpb3VzIDogMHhiNzA0Y2U7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGN1cnJlbnQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNyYyA9IChUQUJMRVsoKGNyYyA+PiAxNikgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSBeIChjcmMgPDwgOCkpICYgMHhmZmZmZmY7XG4gICAgfVxuICAgIHJldHVybiBjcmM7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JjMjQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc24.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc32.js":
/*!***************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc32.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc32 = (current, previous) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    let crc = previous === 0 ? 0 : ~~previous ^ -1;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc32);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMzMi5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxLQUFLLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY2FsY3VsYXRvcnMvY3JjMzIuanM/ZGYwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgYC4vcHljcmMucHkgLS1hbGdvcml0aG09dGFibGUtZHJpdmVuIC0tbW9kZWw9Y3JjLTMyIC0tZ2VuZXJhdGU9Y2BcbmxldCBUQUJMRSA9IFtcbiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweGVlMGU2MTJjLCAweDk5MDk1MWJhLCAweDA3NmRjNDE5LCAweDcwNmFmNDhmLCAweGU5NjNhNTM1LCAweDllNjQ5NWEzLFxuICAgIDB4MGVkYjg4MzIsIDB4NzlkY2I4YTQsIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsIDB4OTBiZjFkOTEsXG4gICAgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSwgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNyxcbiAgICAweDEzNmM5ODU2LCAweDY0NmJhOGMwLCAweGZkNjJmOTdhLCAweDhhNjVjOWVjLCAweDE0MDE1YzRmLCAweDYzMDY2Y2Q5LCAweGZhMGYzZDYzLCAweDhkMDgwZGY1LFxuICAgIDB4M2I2ZTIwYzgsIDB4NGM2OTEwNWUsIDB4ZDU2MDQxZTQsIDB4YTI2NzcxNzIsIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsXG4gICAgMHgzNWI1YThmYSwgMHg0MmIyOTg2YywgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMywgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSxcbiAgICAweDI2ZDkzMGFjLCAweDUxZGUwMDNhLCAweGM4ZDc1MTgwLCAweGJmZDA2MTE2LCAweDIxYjRmNGI1LCAweDU2YjNjNDIzLCAweGNmYmE5NTk5LCAweGI4YmRhNTBmLFxuICAgIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsIDB4MmY2ZjdjODcsIDB4NTg2ODRjMTEsIDB4YzE2MTFkYWIsIDB4YjY2NjJkM2QsXG4gICAgMHg3NmRjNDE5MCwgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZiwgMHg5ZmJmZTRhNSwgMHhlOGI4ZDQzMyxcbiAgICAweDc4MDdjOWEyLCAweDBmMDBmOTM0LCAweDk2MDlhODhlLCAweGUxMGU5ODE4LCAweDdmNmEwZGJiLCAweDA4NmQzZDJkLCAweDkxNjQ2Yzk3LCAweGU2NjM1YzAxLFxuICAgIDB4NmI2YjUxZjQsIDB4MWM2YzYxNjIsIDB4ODU2NTMwZDgsIDB4ZjI2MjAwNGUsIDB4NmMwNjk1ZWQsIDB4MWIwMWE1N2IsIDB4ODIwOGY0YzEsIDB4ZjUwZmM0NTcsXG4gICAgMHg2NWIwZDljNiwgMHgxMmI3ZTk1MCwgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMywgMHhmYmQ0NGM2NSxcbiAgICAweDRkYjI2MTU4LCAweDNhYjU1MWNlLCAweGEzYmMwMDc0LCAweGQ0YmIzMGUyLCAweDRhZGZhNTQxLCAweDNkZDg5NWQ3LCAweGE0ZDFjNDZkLCAweGQzZDZmNGZiLFxuICAgIDB4NDM2OWU5NmEsIDB4MzQ2ZWQ5ZmMsIDB4YWQ2Nzg4NDYsIDB4ZGE2MGI4ZDAsIDB4NDQwNDJkNzMsIDB4MzMwMzFkZTUsIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksXG4gICAgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCwgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcbiAgICAweDVlZGVmOTBlLCAweDI5ZDljOTk4LCAweGIwZDA5ODIyLCAweGM3ZDdhOGI0LCAweDU5YjMzZDE3LCAweDJlYjQwZDgxLCAweGI3YmQ1YzNiLCAweGMwYmE2Y2FkLFxuICAgIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsIDB4ZWFkNTQ3MzksIDB4OWRkMjc3YWYsIDB4MDRkYjI2MTUsIDB4NzNkYzE2ODMsXG4gICAgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCwgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSxcbiAgICAweGYwMGY5MzQ0LCAweDg3MDhhM2QyLCAweDFlMDFmMjY4LCAweDY5MDZjMmZlLCAweGY3NjI1NzVkLCAweDgwNjU2N2NiLCAweDE5NmMzNjcxLCAweDZlNmIwNmU3LFxuICAgIDB4ZmVkNDFiNzYsIDB4ODlkMzJiZTAsIDB4MTBkYTdhNWEsIDB4NjdkZDRhY2MsIDB4ZjliOWRmNmYsIDB4OGViZWVmZjksIDB4MTdiN2JlNDMsIDB4NjBiMDhlZDUsXG4gICAgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSwgMHgzOGQ4YzJjNCwgMHg0ZmRmZjI1MiwgMHhkMWJiNjdmMSwgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YixcbiAgICAweGQ4MGQyYmRhLCAweGFmMGExYjRjLCAweDM2MDM0YWY2LCAweDQxMDQ3YTYwLCAweGRmNjBlZmMzLCAweGE4NjdkZjU1LCAweDMxNmU4ZWVmLCAweDQ2NjliZTc5LFxuICAgIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsIDB4Y2MwYzc3OTUsIDB4YmIwYjQ3MDMsIDB4MjIwMjE2YjksIDB4NTUwNTI2MmYsXG4gICAgMHhjNWJhM2JiZSwgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSwgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCxcbiAgICAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLCAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLCAweDcyMDc2Nzg1LCAweDA1MDA1NzEzLFxuICAgIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsIDB4MGJkYmRmMjEsXG4gICAgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MiwgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSwgMHgxOGI3NDc3NyxcbiAgICAweDg4MDg1YWU2LCAweGZmMGY2YTcwLCAweDY2MDYzYmNhLCAweDExMDEwYjVjLCAweDhmNjU5ZWZmLCAweGY4NjJhZTY5LCAweDYxNmJmZmQzLCAweDE2NmNjZjQ1LFxuICAgIDB4YTAwYWUyNzgsIDB4ZDcwZGQyZWUsIDB4NGUwNDgzNTQsIDB4MzkwM2IzYzIsIDB4YTc2NzI2NjEsIDB4ZDA2MDE2ZjcsIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsXG4gICAgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NiwgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSxcbiAgICAweGJkYmRmMjFjLCAweGNhYmFjMjhhLCAweDUzYjM5MzMwLCAweDI0YjRhM2E2LCAweGJhZDAzNjA1LCAweGNkZDcwNjkzLCAweDU0ZGU1NzI5LCAweDIzZDk2N2JmLFxuICAgIDB4YjM2NjdhMmUsIDB4YzQ2MTRhYjgsIDB4NWQ2ODFiMDIsIDB4MmE2ZjJiOTQsIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsIDB4MmQwMmVmOGQsXG5dO1xuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIFRBQkxFID0gbmV3IEludDMyQXJyYXkoVEFCTEUpO1xufVxuY29uc3QgY3JjMzIgPSAoY3VycmVudCwgcHJldmlvdXMpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIGxldCBjcmMgPSBwcmV2aW91cyA9PT0gMCA/IDAgOiB+fnByZXZpb3VzIF4gLTE7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGN1cnJlbnQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNyYyA9IFRBQkxFWyhjcmMgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSBeIChjcmMgPj4+IDgpO1xuICAgIH1cbiAgICByZXR1cm4gY3JjIF4gLTE7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JjMzI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc32.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc32mpeg2.js":
/*!********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc32mpeg2.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32-mpeg --generate=c`\nlet TABLE = [\n    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,\n    0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,\n    0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,\n    0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,\n    0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,\n    0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,\n    0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,\n    0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,\n    0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,\n    0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,\n    0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,\n    0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,\n    0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,\n    0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,\n    0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,\n    0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,\n    0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,\n    0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,\n    0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,\n    0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,\n    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,\n    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc32mpeg2 = (current, previous) => {\n    let crc = typeof previous !== 'undefined' ? ~~previous : 0xffffffff;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[((crc >> 24) ^ current[index]) & 0xff] ^ (crc << 8);\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc32mpeg2);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmMzMm1wZWcyLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY2FsY3VsYXRvcnMvY3JjMzJtcGVnMi5qcz81MDQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBgLi9weWNyYy5weSAtLWFsZ29yaXRobT10YWJsZS1kcml2ZW4gLS1tb2RlbD1jcmMtMzItbXBlZyAtLWdlbmVyYXRlPWNgXG5sZXQgVEFCTEUgPSBbXG4gICAgMHgwMDAwMDAwMCwgMHgwNGMxMWRiNywgMHgwOTgyM2I2ZSwgMHgwZDQzMjZkOSwgMHgxMzA0NzZkYywgMHgxN2M1NmI2YiwgMHgxYTg2NGRiMiwgMHgxZTQ3NTAwNSxcbiAgICAweDI2MDhlZGI4LCAweDIyYzlmMDBmLCAweDJmOGFkNmQ2LCAweDJiNGJjYjYxLCAweDM1MGM5YjY0LCAweDMxY2Q4NmQzLCAweDNjOGVhMDBhLCAweDM4NGZiZGJkLFxuICAgIDB4NGMxMWRiNzAsIDB4NDhkMGM2YzcsIDB4NDU5M2UwMWUsIDB4NDE1MmZkYTksIDB4NWYxNWFkYWMsIDB4NWJkNGIwMWIsIDB4NTY5Nzk2YzIsIDB4NTI1NjhiNzUsXG4gICAgMHg2YTE5MzZjOCwgMHg2ZWQ4MmI3ZiwgMHg2MzliMGRhNiwgMHg2NzVhMTAxMSwgMHg3OTFkNDAxNCwgMHg3ZGRjNWRhMywgMHg3MDlmN2I3YSwgMHg3NDVlNjZjZCxcbiAgICAweDk4MjNiNmUwLCAweDljZTJhYjU3LCAweDkxYTE4ZDhlLCAweDk1NjA5MDM5LCAweDhiMjdjMDNjLCAweDhmZTZkZDhiLCAweDgyYTVmYjUyLCAweDg2NjRlNmU1LFxuICAgIDB4YmUyYjViNTgsIDB4YmFlYTQ2ZWYsIDB4YjdhOTYwMzYsIDB4YjM2ODdkODEsIDB4YWQyZjJkODQsIDB4YTllZTMwMzMsIDB4YTRhZDE2ZWEsIDB4YTA2YzBiNWQsXG4gICAgMHhkNDMyNmQ5MCwgMHhkMGYzNzAyNywgMHhkZGIwNTZmZSwgMHhkOTcxNGI0OSwgMHhjNzM2MWI0YywgMHhjM2Y3MDZmYiwgMHhjZWI0MjAyMiwgMHhjYTc1M2Q5NSxcbiAgICAweGYyM2E4MDI4LCAweGY2ZmI5ZDlmLCAweGZiYjhiYjQ2LCAweGZmNzlhNmYxLCAweGUxM2VmNmY0LCAweGU1ZmZlYjQzLCAweGU4YmNjZDlhLCAweGVjN2RkMDJkLFxuICAgIDB4MzQ4NjcwNzcsIDB4MzA0NzZkYzAsIDB4M2QwNDRiMTksIDB4MzljNTU2YWUsIDB4Mjc4MjA2YWIsIDB4MjM0MzFiMWMsIDB4MmUwMDNkYzUsIDB4MmFjMTIwNzIsXG4gICAgMHgxMjhlOWRjZiwgMHgxNjRmODA3OCwgMHgxYjBjYTZhMSwgMHgxZmNkYmIxNiwgMHgwMThhZWIxMywgMHgwNTRiZjZhNCwgMHgwODA4ZDA3ZCwgMHgwY2M5Y2RjYSxcbiAgICAweDc4OTdhYjA3LCAweDdjNTZiNmIwLCAweDcxMTU5MDY5LCAweDc1ZDQ4ZGRlLCAweDZiOTNkZGRiLCAweDZmNTJjMDZjLCAweDYyMTFlNmI1LCAweDY2ZDBmYjAyLFxuICAgIDB4NWU5ZjQ2YmYsIDB4NWE1ZTViMDgsIDB4NTcxZDdkZDEsIDB4NTNkYzYwNjYsIDB4NGQ5YjMwNjMsIDB4NDk1YTJkZDQsIDB4NDQxOTBiMGQsIDB4NDBkODE2YmEsXG4gICAgMHhhY2E1YzY5NywgMHhhODY0ZGIyMCwgMHhhNTI3ZmRmOSwgMHhhMWU2ZTA0ZSwgMHhiZmExYjA0YiwgMHhiYjYwYWRmYywgMHhiNjIzOGIyNSwgMHhiMmUyOTY5MixcbiAgICAweDhhYWQyYjJmLCAweDhlNmMzNjk4LCAweDgzMmYxMDQxLCAweDg3ZWUwZGY2LCAweDk5YTk1ZGYzLCAweDlkNjg0MDQ0LCAweDkwMmI2NjlkLCAweDk0ZWE3YjJhLFxuICAgIDB4ZTBiNDFkZTcsIDB4ZTQ3NTAwNTAsIDB4ZTkzNjI2ODksIDB4ZWRmNzNiM2UsIDB4ZjNiMDZiM2IsIDB4Zjc3MTc2OGMsIDB4ZmEzMjUwNTUsIDB4ZmVmMzRkZTIsXG4gICAgMHhjNmJjZjA1ZiwgMHhjMjdkZWRlOCwgMHhjZjNlY2IzMSwgMHhjYmZmZDY4NiwgMHhkNWI4ODY4MywgMHhkMTc5OWIzNCwgMHhkYzNhYmRlZCwgMHhkOGZiYTA1YSxcbiAgICAweDY5MGNlMGVlLCAweDZkY2RmZDU5LCAweDYwOGVkYjgwLCAweDY0NGZjNjM3LCAweDdhMDg5NjMyLCAweDdlYzk4Yjg1LCAweDczOGFhZDVjLCAweDc3NGJiMGViLFxuICAgIDB4NGYwNDBkNTYsIDB4NGJjNTEwZTEsIDB4NDY4NjM2MzgsIDB4NDI0NzJiOGYsIDB4NWMwMDdiOGEsIDB4NThjMTY2M2QsIDB4NTU4MjQwZTQsIDB4NTE0MzVkNTMsXG4gICAgMHgyNTFkM2I5ZSwgMHgyMWRjMjYyOSwgMHgyYzlmMDBmMCwgMHgyODVlMWQ0NywgMHgzNjE5NGQ0MiwgMHgzMmQ4NTBmNSwgMHgzZjliNzYyYywgMHgzYjVhNmI5YixcbiAgICAweDAzMTVkNjI2LCAweDA3ZDRjYjkxLCAweDBhOTdlZDQ4LCAweDBlNTZmMGZmLCAweDEwMTFhMGZhLCAweDE0ZDBiZDRkLCAweDE5OTM5Yjk0LCAweDFkNTI4NjIzLFxuICAgIDB4ZjEyZjU2MGUsIDB4ZjVlZTRiYjksIDB4ZjhhZDZkNjAsIDB4ZmM2YzcwZDcsIDB4ZTIyYjIwZDIsIDB4ZTZlYTNkNjUsIDB4ZWJhOTFiYmMsIDB4ZWY2ODA2MGIsXG4gICAgMHhkNzI3YmJiNiwgMHhkM2U2YTYwMSwgMHhkZWE1ODBkOCwgMHhkYTY0OWQ2ZiwgMHhjNDIzY2Q2YSwgMHhjMGUyZDBkZCwgMHhjZGExZjYwNCwgMHhjOTYwZWJiMyxcbiAgICAweGJkM2U4ZDdlLCAweGI5ZmY5MGM5LCAweGI0YmNiNjEwLCAweGIwN2RhYmE3LCAweGFlM2FmYmEyLCAweGFhZmJlNjE1LCAweGE3YjhjMGNjLCAweGEzNzlkZDdiLFxuICAgIDB4OWIzNjYwYzYsIDB4OWZmNzdkNzEsIDB4OTJiNDViYTgsIDB4OTY3NTQ2MWYsIDB4ODgzMjE2MWEsIDB4OGNmMzBiYWQsIDB4ODFiMDJkNzQsIDB4ODU3MTMwYzMsXG4gICAgMHg1ZDhhOTA5OSwgMHg1OTRiOGQyZSwgMHg1NDA4YWJmNywgMHg1MGM5YjY0MCwgMHg0ZThlZTY0NSwgMHg0YTRmZmJmMiwgMHg0NzBjZGQyYiwgMHg0M2NkYzA5YyxcbiAgICAweDdiODI3ZDIxLCAweDdmNDM2MDk2LCAweDcyMDA0NjRmLCAweDc2YzE1YmY4LCAweDY4ODYwYmZkLCAweDZjNDcxNjRhLCAweDYxMDQzMDkzLCAweDY1YzUyZDI0LFxuICAgIDB4MTE5YjRiZTksIDB4MTU1YTU2NWUsIDB4MTgxOTcwODcsIDB4MWNkODZkMzAsIDB4MDI5ZjNkMzUsIDB4MDY1ZTIwODIsIDB4MGIxZDA2NWIsIDB4MGZkYzFiZWMsXG4gICAgMHgzNzkzYTY1MSwgMHgzMzUyYmJlNiwgMHgzZTExOWQzZiwgMHgzYWQwODA4OCwgMHgyNDk3ZDA4ZCwgMHgyMDU2Y2QzYSwgMHgyZDE1ZWJlMywgMHgyOWQ0ZjY1NCxcbiAgICAweGM1YTkyNjc5LCAweGMxNjgzYmNlLCAweGNjMmIxZDE3LCAweGM4ZWEwMGEwLCAweGQ2YWQ1MGE1LCAweGQyNmM0ZDEyLCAweGRmMmY2YmNiLCAweGRiZWU3NjdjLFxuICAgIDB4ZTNhMWNiYzEsIDB4ZTc2MGQ2NzYsIDB4ZWEyM2YwYWYsIDB4ZWVlMmVkMTgsIDB4ZjBhNWJkMWQsIDB4ZjQ2NGEwYWEsIDB4ZjkyNzg2NzMsIDB4ZmRlNjliYzQsXG4gICAgMHg4OWI4ZmQwOSwgMHg4ZDc5ZTBiZSwgMHg4MDNhYzY2NywgMHg4NGZiZGJkMCwgMHg5YWJjOGJkNSwgMHg5ZTdkOTY2MiwgMHg5MzNlYjBiYiwgMHg5N2ZmYWQwYyxcbiAgICAweGFmYjAxMGIxLCAweGFiNzEwZDA2LCAweGE2MzIyYmRmLCAweGEyZjMzNjY4LCAweGJjYjQ2NjZkLCAweGI4NzU3YmRhLCAweGI1MzY1ZDAzLCAweGIxZjc0MGI0LFxuXTtcbmlmICh0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBUQUJMRSA9IG5ldyBJbnQzMkFycmF5KFRBQkxFKTtcbn1cbmNvbnN0IGNyYzMybXBlZzIgPSAoY3VycmVudCwgcHJldmlvdXMpID0+IHtcbiAgICBsZXQgY3JjID0gdHlwZW9mIHByZXZpb3VzICE9PSAndW5kZWZpbmVkJyA/IH5+cHJldmlvdXMgOiAweGZmZmZmZmZmO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjdXJyZW50Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjcmMgPSBUQUJMRVsoKGNyYyA+PiAyNCkgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSBeIChjcmMgPDwgOCk7XG4gICAgfVxuICAgIHJldHVybiBjcmM7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JjMzJtcGVnMjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc32mpeg2.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc8.js":
/*!**************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc8.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-8 --generate=c`\nlet TABLE = [\n    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,\n    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,\n    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,\n    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,\n    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,\n    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,\n    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,\n    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,\n    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,\n    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,\n    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,\n    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,\n    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,\n    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,\n    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,\n    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc8 = (current, previous = 0) => {\n    let crc = ~~previous;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc8);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmM4LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsSUFBSSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NhbGN1bGF0b3JzL2NyYzguanM/MDQ0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgYC4vcHljcmMucHkgLS1hbGdvcml0aG09dGFibGUtZHJpdmVuIC0tbW9kZWw9Y3JjLTggLS1nZW5lcmF0ZT1jYFxubGV0IFRBQkxFID0gW1xuICAgIDB4MDAsIDB4MDcsIDB4MGUsIDB4MDksIDB4MWMsIDB4MWIsIDB4MTIsIDB4MTUsIDB4MzgsIDB4M2YsIDB4MzYsIDB4MzEsIDB4MjQsIDB4MjMsIDB4MmEsIDB4MmQsXG4gICAgMHg3MCwgMHg3NywgMHg3ZSwgMHg3OSwgMHg2YywgMHg2YiwgMHg2MiwgMHg2NSwgMHg0OCwgMHg0ZiwgMHg0NiwgMHg0MSwgMHg1NCwgMHg1MywgMHg1YSwgMHg1ZCxcbiAgICAweGUwLCAweGU3LCAweGVlLCAweGU5LCAweGZjLCAweGZiLCAweGYyLCAweGY1LCAweGQ4LCAweGRmLCAweGQ2LCAweGQxLCAweGM0LCAweGMzLCAweGNhLCAweGNkLFxuICAgIDB4OTAsIDB4OTcsIDB4OWUsIDB4OTksIDB4OGMsIDB4OGIsIDB4ODIsIDB4ODUsIDB4YTgsIDB4YWYsIDB4YTYsIDB4YTEsIDB4YjQsIDB4YjMsIDB4YmEsIDB4YmQsXG4gICAgMHhjNywgMHhjMCwgMHhjOSwgMHhjZSwgMHhkYiwgMHhkYywgMHhkNSwgMHhkMiwgMHhmZiwgMHhmOCwgMHhmMSwgMHhmNiwgMHhlMywgMHhlNCwgMHhlZCwgMHhlYSxcbiAgICAweGI3LCAweGIwLCAweGI5LCAweGJlLCAweGFiLCAweGFjLCAweGE1LCAweGEyLCAweDhmLCAweDg4LCAweDgxLCAweDg2LCAweDkzLCAweDk0LCAweDlkLCAweDlhLFxuICAgIDB4MjcsIDB4MjAsIDB4MjksIDB4MmUsIDB4M2IsIDB4M2MsIDB4MzUsIDB4MzIsIDB4MWYsIDB4MTgsIDB4MTEsIDB4MTYsIDB4MDMsIDB4MDQsIDB4MGQsIDB4MGEsXG4gICAgMHg1NywgMHg1MCwgMHg1OSwgMHg1ZSwgMHg0YiwgMHg0YywgMHg0NSwgMHg0MiwgMHg2ZiwgMHg2OCwgMHg2MSwgMHg2NiwgMHg3MywgMHg3NCwgMHg3ZCwgMHg3YSxcbiAgICAweDg5LCAweDhlLCAweDg3LCAweDgwLCAweDk1LCAweDkyLCAweDliLCAweDljLCAweGIxLCAweGI2LCAweGJmLCAweGI4LCAweGFkLCAweGFhLCAweGEzLCAweGE0LFxuICAgIDB4ZjksIDB4ZmUsIDB4ZjcsIDB4ZjAsIDB4ZTUsIDB4ZTIsIDB4ZWIsIDB4ZWMsIDB4YzEsIDB4YzYsIDB4Y2YsIDB4YzgsIDB4ZGQsIDB4ZGEsIDB4ZDMsIDB4ZDQsXG4gICAgMHg2OSwgMHg2ZSwgMHg2NywgMHg2MCwgMHg3NSwgMHg3MiwgMHg3YiwgMHg3YywgMHg1MSwgMHg1NiwgMHg1ZiwgMHg1OCwgMHg0ZCwgMHg0YSwgMHg0MywgMHg0NCxcbiAgICAweDE5LCAweDFlLCAweDE3LCAweDEwLCAweDA1LCAweDAyLCAweDBiLCAweDBjLCAweDIxLCAweDI2LCAweDJmLCAweDI4LCAweDNkLCAweDNhLCAweDMzLCAweDM0LFxuICAgIDB4NGUsIDB4NDksIDB4NDAsIDB4NDcsIDB4NTIsIDB4NTUsIDB4NWMsIDB4NWIsIDB4NzYsIDB4NzEsIDB4NzgsIDB4N2YsIDB4NmEsIDB4NmQsIDB4NjQsIDB4NjMsXG4gICAgMHgzZSwgMHgzOSwgMHgzMCwgMHgzNywgMHgyMiwgMHgyNSwgMHgyYywgMHgyYiwgMHgwNiwgMHgwMSwgMHgwOCwgMHgwZiwgMHgxYSwgMHgxZCwgMHgxNCwgMHgxMyxcbiAgICAweGFlLCAweGE5LCAweGEwLCAweGE3LCAweGIyLCAweGI1LCAweGJjLCAweGJiLCAweDk2LCAweDkxLCAweDk4LCAweDlmLCAweDhhLCAweDhkLCAweDg0LCAweDgzLFxuICAgIDB4ZGUsIDB4ZDksIDB4ZDAsIDB4ZDcsIDB4YzIsIDB4YzUsIDB4Y2MsIDB4Y2IsIDB4ZTYsIDB4ZTEsIDB4ZTgsIDB4ZWYsIDB4ZmEsIDB4ZmQsIDB4ZjQsIDB4ZjMsXG5dO1xuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIFRBQkxFID0gbmV3IEludDMyQXJyYXkoVEFCTEUpO1xufVxuY29uc3QgY3JjOCA9IChjdXJyZW50LCBwcmV2aW91cyA9IDApID0+IHtcbiAgICBsZXQgY3JjID0gfn5wcmV2aW91cztcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3JjID0gVEFCTEVbKGNyYyBeIGN1cnJlbnRbaW5kZXhdKSAmIDB4ZmZdICYgMHhmZjtcbiAgICB9XG4gICAgcmV0dXJuIGNyYztcbn07XG5leHBvcnQgZGVmYXVsdCBjcmM4O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc8.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc81wire.js":
/*!*******************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc81wire.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=dallas-1-wire --generate=c`\nlet TABLE = [\n    0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,\n    0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,\n    0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,\n    0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,\n    0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,\n    0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,\n    0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,\n    0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,\n    0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,\n    0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,\n    0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,\n    0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,\n    0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,\n    0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,\n    0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,\n    0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc81wire = (current, previous = 0) => {\n    let crc = ~~previous;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc81wire);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmM4MXdpcmUuanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY2FsY3VsYXRvcnMvY3JjODF3aXJlLmpzP2RkYjQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IGAuL3B5Y3JjLnB5IC0tYWxnb3JpdGhtPXRhYmxlLWRyaXZlbiAtLW1vZGVsPWRhbGxhcy0xLXdpcmUgLS1nZW5lcmF0ZT1jYFxubGV0IFRBQkxFID0gW1xuICAgIDB4MDAsIDB4NWUsIDB4YmMsIDB4ZTIsIDB4NjEsIDB4M2YsIDB4ZGQsIDB4ODMsIDB4YzIsIDB4OWMsIDB4N2UsIDB4MjAsIDB4YTMsIDB4ZmQsIDB4MWYsIDB4NDEsXG4gICAgMHg5ZCwgMHhjMywgMHgyMSwgMHg3ZiwgMHhmYywgMHhhMiwgMHg0MCwgMHgxZSwgMHg1ZiwgMHgwMSwgMHhlMywgMHhiZCwgMHgzZSwgMHg2MCwgMHg4MiwgMHhkYyxcbiAgICAweDIzLCAweDdkLCAweDlmLCAweGMxLCAweDQyLCAweDFjLCAweGZlLCAweGEwLCAweGUxLCAweGJmLCAweDVkLCAweDAzLCAweDgwLCAweGRlLCAweDNjLCAweDYyLFxuICAgIDB4YmUsIDB4ZTAsIDB4MDIsIDB4NWMsIDB4ZGYsIDB4ODEsIDB4NjMsIDB4M2QsIDB4N2MsIDB4MjIsIDB4YzAsIDB4OWUsIDB4MWQsIDB4NDMsIDB4YTEsIDB4ZmYsXG4gICAgMHg0NiwgMHgxOCwgMHhmYSwgMHhhNCwgMHgyNywgMHg3OSwgMHg5YiwgMHhjNSwgMHg4NCwgMHhkYSwgMHgzOCwgMHg2NiwgMHhlNSwgMHhiYiwgMHg1OSwgMHgwNyxcbiAgICAweGRiLCAweDg1LCAweDY3LCAweDM5LCAweGJhLCAweGU0LCAweDA2LCAweDU4LCAweDE5LCAweDQ3LCAweGE1LCAweGZiLCAweDc4LCAweDI2LCAweGM0LCAweDlhLFxuICAgIDB4NjUsIDB4M2IsIDB4ZDksIDB4ODcsIDB4MDQsIDB4NWEsIDB4YjgsIDB4ZTYsIDB4YTcsIDB4ZjksIDB4MWIsIDB4NDUsIDB4YzYsIDB4OTgsIDB4N2EsIDB4MjQsXG4gICAgMHhmOCwgMHhhNiwgMHg0NCwgMHgxYSwgMHg5OSwgMHhjNywgMHgyNSwgMHg3YiwgMHgzYSwgMHg2NCwgMHg4NiwgMHhkOCwgMHg1YiwgMHgwNSwgMHhlNywgMHhiOSxcbiAgICAweDhjLCAweGQyLCAweDMwLCAweDZlLCAweGVkLCAweGIzLCAweDUxLCAweDBmLCAweDRlLCAweDEwLCAweGYyLCAweGFjLCAweDJmLCAweDcxLCAweDkzLCAweGNkLFxuICAgIDB4MTEsIDB4NGYsIDB4YWQsIDB4ZjMsIDB4NzAsIDB4MmUsIDB4Y2MsIDB4OTIsIDB4ZDMsIDB4OGQsIDB4NmYsIDB4MzEsIDB4YjIsIDB4ZWMsIDB4MGUsIDB4NTAsXG4gICAgMHhhZiwgMHhmMSwgMHgxMywgMHg0ZCwgMHhjZSwgMHg5MCwgMHg3MiwgMHgyYywgMHg2ZCwgMHgzMywgMHhkMSwgMHg4ZiwgMHgwYywgMHg1MiwgMHhiMCwgMHhlZSxcbiAgICAweDMyLCAweDZjLCAweDhlLCAweGQwLCAweDUzLCAweDBkLCAweGVmLCAweGIxLCAweGYwLCAweGFlLCAweDRjLCAweDEyLCAweDkxLCAweGNmLCAweDJkLCAweDczLFxuICAgIDB4Y2EsIDB4OTQsIDB4NzYsIDB4MjgsIDB4YWIsIDB4ZjUsIDB4MTcsIDB4NDksIDB4MDgsIDB4NTYsIDB4YjQsIDB4ZWEsIDB4NjksIDB4MzcsIDB4ZDUsIDB4OGIsXG4gICAgMHg1NywgMHgwOSwgMHhlYiwgMHhiNSwgMHgzNiwgMHg2OCwgMHg4YSwgMHhkNCwgMHg5NSwgMHhjYiwgMHgyOSwgMHg3NywgMHhmNCwgMHhhYSwgMHg0OCwgMHgxNixcbiAgICAweGU5LCAweGI3LCAweDU1LCAweDBiLCAweDg4LCAweGQ2LCAweDM0LCAweDZhLCAweDJiLCAweDc1LCAweDk3LCAweGM5LCAweDRhLCAweDE0LCAweGY2LCAweGE4LFxuICAgIDB4NzQsIDB4MmEsIDB4YzgsIDB4OTYsIDB4MTUsIDB4NGIsIDB4YTksIDB4ZjcsIDB4YjYsIDB4ZTgsIDB4MGEsIDB4NTQsIDB4ZDcsIDB4ODksIDB4NmIsIDB4MzUsXG5dO1xuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIFRBQkxFID0gbmV3IEludDMyQXJyYXkoVEFCTEUpO1xufVxuY29uc3QgY3JjODF3aXJlID0gKGN1cnJlbnQsIHByZXZpb3VzID0gMCkgPT4ge1xuICAgIGxldCBjcmMgPSB+fnByZXZpb3VzO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjdXJyZW50Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjcmMgPSBUQUJMRVsoY3JjIF4gY3VycmVudFtpbmRleF0pICYgMHhmZl0gJiAweGZmO1xuICAgIH1cbiAgICByZXR1cm4gY3JjO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyYzgxd2lyZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc81wire.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc8dvbs2.js":
/*!*******************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc8dvbs2.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --generate=c --width=8 --poly=0xd5 --reflect-in=false --reflect-out=false --xor-in=0xff --xor-out=0x00`\nlet TABLE = [\n    0x00, 0xd5, 0x7f, 0xaa, 0xfe, 0x2b, 0x81, 0x54, 0x29, 0xfc, 0x56, 0x83, 0xd7, 0x02, 0xa8, 0x7d,\n    0x52, 0x87, 0x2d, 0xf8, 0xac, 0x79, 0xd3, 0x06, 0x7b, 0xae, 0x04, 0xd1, 0x85, 0x50, 0xfa, 0x2f,\n    0xa4, 0x71, 0xdb, 0x0e, 0x5a, 0x8f, 0x25, 0xf0, 0x8d, 0x58, 0xf2, 0x27, 0x73, 0xa6, 0x0c, 0xd9,\n    0xf6, 0x23, 0x89, 0x5c, 0x08, 0xdd, 0x77, 0xa2, 0xdf, 0x0a, 0xa0, 0x75, 0x21, 0xf4, 0x5e, 0x8b,\n    0x9d, 0x48, 0xe2, 0x37, 0x63, 0xb6, 0x1c, 0xc9, 0xb4, 0x61, 0xcb, 0x1e, 0x4a, 0x9f, 0x35, 0xe0,\n    0xcf, 0x1a, 0xb0, 0x65, 0x31, 0xe4, 0x4e, 0x9b, 0xe6, 0x33, 0x99, 0x4c, 0x18, 0xcd, 0x67, 0xb2,\n    0x39, 0xec, 0x46, 0x93, 0xc7, 0x12, 0xb8, 0x6d, 0x10, 0xc5, 0x6f, 0xba, 0xee, 0x3b, 0x91, 0x44,\n    0x6b, 0xbe, 0x14, 0xc1, 0x95, 0x40, 0xea, 0x3f, 0x42, 0x97, 0x3d, 0xe8, 0xbc, 0x69, 0xc3, 0x16,\n    0xef, 0x3a, 0x90, 0x45, 0x11, 0xc4, 0x6e, 0xbb, 0xc6, 0x13, 0xb9, 0x6c, 0x38, 0xed, 0x47, 0x92,\n    0xbd, 0x68, 0xc2, 0x17, 0x43, 0x96, 0x3c, 0xe9, 0x94, 0x41, 0xeb, 0x3e, 0x6a, 0xbf, 0x15, 0xc0,\n    0x4b, 0x9e, 0x34, 0xe1, 0xb5, 0x60, 0xca, 0x1f, 0x62, 0xb7, 0x1d, 0xc8, 0x9c, 0x49, 0xe3, 0x36,\n    0x19, 0xcc, 0x66, 0xb3, 0xe7, 0x32, 0x98, 0x4d, 0x30, 0xe5, 0x4f, 0x9a, 0xce, 0x1b, 0xb1, 0x64,\n    0x72, 0xa7, 0x0d, 0xd8, 0x8c, 0x59, 0xf3, 0x26, 0x5b, 0x8e, 0x24, 0xf1, 0xa5, 0x70, 0xda, 0x0f,\n    0x20, 0xf5, 0x5f, 0x8a, 0xde, 0x0b, 0xa1, 0x74, 0x09, 0xdc, 0x76, 0xa3, 0xf7, 0x22, 0x88, 0x5d,\n    0xd6, 0x03, 0xa9, 0x7c, 0x28, 0xfd, 0x57, 0x82, 0xff, 0x2a, 0x80, 0x55, 0x01, 0xd4, 0x7e, 0xab,\n    0x84, 0x51, 0xfb, 0x2e, 0x7a, 0xaf, 0x05, 0xd0, 0xad, 0x78, 0xd2, 0x07, 0x53, 0x86, 0x2c, 0xf9,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc8dvbs2 = (current, previous = 0) => {\n    let crc = ~~previous;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crc8dvbs2);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmM4ZHZiczIuanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxTQUFTLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY2FsY3VsYXRvcnMvY3JjOGR2YnMyLmpzP2I1MDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IGAuL3B5Y3JjLnB5IC0tYWxnb3JpdGhtPXRhYmxlLWRyaXZlbiAtLWdlbmVyYXRlPWMgLS13aWR0aD04IC0tcG9seT0weGQ1IC0tcmVmbGVjdC1pbj1mYWxzZSAtLXJlZmxlY3Qtb3V0PWZhbHNlIC0teG9yLWluPTB4ZmYgLS14b3Itb3V0PTB4MDBgXG5sZXQgVEFCTEUgPSBbXG4gICAgMHgwMCwgMHhkNSwgMHg3ZiwgMHhhYSwgMHhmZSwgMHgyYiwgMHg4MSwgMHg1NCwgMHgyOSwgMHhmYywgMHg1NiwgMHg4MywgMHhkNywgMHgwMiwgMHhhOCwgMHg3ZCxcbiAgICAweDUyLCAweDg3LCAweDJkLCAweGY4LCAweGFjLCAweDc5LCAweGQzLCAweDA2LCAweDdiLCAweGFlLCAweDA0LCAweGQxLCAweDg1LCAweDUwLCAweGZhLCAweDJmLFxuICAgIDB4YTQsIDB4NzEsIDB4ZGIsIDB4MGUsIDB4NWEsIDB4OGYsIDB4MjUsIDB4ZjAsIDB4OGQsIDB4NTgsIDB4ZjIsIDB4MjcsIDB4NzMsIDB4YTYsIDB4MGMsIDB4ZDksXG4gICAgMHhmNiwgMHgyMywgMHg4OSwgMHg1YywgMHgwOCwgMHhkZCwgMHg3NywgMHhhMiwgMHhkZiwgMHgwYSwgMHhhMCwgMHg3NSwgMHgyMSwgMHhmNCwgMHg1ZSwgMHg4YixcbiAgICAweDlkLCAweDQ4LCAweGUyLCAweDM3LCAweDYzLCAweGI2LCAweDFjLCAweGM5LCAweGI0LCAweDYxLCAweGNiLCAweDFlLCAweDRhLCAweDlmLCAweDM1LCAweGUwLFxuICAgIDB4Y2YsIDB4MWEsIDB4YjAsIDB4NjUsIDB4MzEsIDB4ZTQsIDB4NGUsIDB4OWIsIDB4ZTYsIDB4MzMsIDB4OTksIDB4NGMsIDB4MTgsIDB4Y2QsIDB4NjcsIDB4YjIsXG4gICAgMHgzOSwgMHhlYywgMHg0NiwgMHg5MywgMHhjNywgMHgxMiwgMHhiOCwgMHg2ZCwgMHgxMCwgMHhjNSwgMHg2ZiwgMHhiYSwgMHhlZSwgMHgzYiwgMHg5MSwgMHg0NCxcbiAgICAweDZiLCAweGJlLCAweDE0LCAweGMxLCAweDk1LCAweDQwLCAweGVhLCAweDNmLCAweDQyLCAweDk3LCAweDNkLCAweGU4LCAweGJjLCAweDY5LCAweGMzLCAweDE2LFxuICAgIDB4ZWYsIDB4M2EsIDB4OTAsIDB4NDUsIDB4MTEsIDB4YzQsIDB4NmUsIDB4YmIsIDB4YzYsIDB4MTMsIDB4YjksIDB4NmMsIDB4MzgsIDB4ZWQsIDB4NDcsIDB4OTIsXG4gICAgMHhiZCwgMHg2OCwgMHhjMiwgMHgxNywgMHg0MywgMHg5NiwgMHgzYywgMHhlOSwgMHg5NCwgMHg0MSwgMHhlYiwgMHgzZSwgMHg2YSwgMHhiZiwgMHgxNSwgMHhjMCxcbiAgICAweDRiLCAweDllLCAweDM0LCAweGUxLCAweGI1LCAweDYwLCAweGNhLCAweDFmLCAweDYyLCAweGI3LCAweDFkLCAweGM4LCAweDljLCAweDQ5LCAweGUzLCAweDM2LFxuICAgIDB4MTksIDB4Y2MsIDB4NjYsIDB4YjMsIDB4ZTcsIDB4MzIsIDB4OTgsIDB4NGQsIDB4MzAsIDB4ZTUsIDB4NGYsIDB4OWEsIDB4Y2UsIDB4MWIsIDB4YjEsIDB4NjQsXG4gICAgMHg3MiwgMHhhNywgMHgwZCwgMHhkOCwgMHg4YywgMHg1OSwgMHhmMywgMHgyNiwgMHg1YiwgMHg4ZSwgMHgyNCwgMHhmMSwgMHhhNSwgMHg3MCwgMHhkYSwgMHgwZixcbiAgICAweDIwLCAweGY1LCAweDVmLCAweDhhLCAweGRlLCAweDBiLCAweGExLCAweDc0LCAweDA5LCAweGRjLCAweDc2LCAweGEzLCAweGY3LCAweDIyLCAweDg4LCAweDVkLFxuICAgIDB4ZDYsIDB4MDMsIDB4YTksIDB4N2MsIDB4MjgsIDB4ZmQsIDB4NTcsIDB4ODIsIDB4ZmYsIDB4MmEsIDB4ODAsIDB4NTUsIDB4MDEsIDB4ZDQsIDB4N2UsIDB4YWIsXG4gICAgMHg4NCwgMHg1MSwgMHhmYiwgMHgyZSwgMHg3YSwgMHhhZiwgMHgwNSwgMHhkMCwgMHhhZCwgMHg3OCwgMHhkMiwgMHgwNywgMHg1MywgMHg4NiwgMHgyYywgMHhmOSxcbl07XG5pZiAodHlwZW9mIEludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgVEFCTEUgPSBuZXcgSW50MzJBcnJheShUQUJMRSk7XG59XG5jb25zdCBjcmM4ZHZiczIgPSAoY3VycmVudCwgcHJldmlvdXMgPSAwKSA9PiB7XG4gICAgbGV0IGNyYyA9IH5+cHJldmlvdXM7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGN1cnJlbnQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNyYyA9IFRBQkxFWyhjcmMgXiBjdXJyZW50W2luZGV4XSkgJiAweGZmXSAmIDB4ZmY7XG4gICAgfVxuICAgIHJldHVybiBjcmM7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JjOGR2YnMyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crc8dvbs2.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crcjam.js":
/*!****************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crcjam.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// Generated by `./pycrc.py --algorithm=table-driven --model=jam --generate=c`\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crcjam = (current, previous = -1) => {\n    let crc = previous === 0 ? 0 : ~~previous;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (crcjam);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmNqYW0uanMiLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLE1BQU0sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jYWxjdWxhdG9ycy9jcmNqYW0uanM/NDU4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgYC4vcHljcmMucHkgLS1hbGdvcml0aG09dGFibGUtZHJpdmVuIC0tbW9kZWw9amFtIC0tZ2VuZXJhdGU9Y2BcbmxldCBUQUJMRSA9IFtcbiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweGVlMGU2MTJjLCAweDk5MDk1MWJhLCAweDA3NmRjNDE5LCAweDcwNmFmNDhmLCAweGU5NjNhNTM1LCAweDllNjQ5NWEzLFxuICAgIDB4MGVkYjg4MzIsIDB4NzlkY2I4YTQsIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsIDB4OTBiZjFkOTEsXG4gICAgMHgxZGI3MTA2NCwgMHg2YWIwMjBmMiwgMHhmM2I5NzE0OCwgMHg4NGJlNDFkZSwgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNyxcbiAgICAweDEzNmM5ODU2LCAweDY0NmJhOGMwLCAweGZkNjJmOTdhLCAweDhhNjVjOWVjLCAweDE0MDE1YzRmLCAweDYzMDY2Y2Q5LCAweGZhMGYzZDYzLCAweDhkMDgwZGY1LFxuICAgIDB4M2I2ZTIwYzgsIDB4NGM2OTEwNWUsIDB4ZDU2MDQxZTQsIDB4YTI2NzcxNzIsIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsXG4gICAgMHgzNWI1YThmYSwgMHg0MmIyOTg2YywgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMywgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSxcbiAgICAweDI2ZDkzMGFjLCAweDUxZGUwMDNhLCAweGM4ZDc1MTgwLCAweGJmZDA2MTE2LCAweDIxYjRmNGI1LCAweDU2YjNjNDIzLCAweGNmYmE5NTk5LCAweGI4YmRhNTBmLFxuICAgIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsIDB4MmY2ZjdjODcsIDB4NTg2ODRjMTEsIDB4YzE2MTFkYWIsIDB4YjY2NjJkM2QsXG4gICAgMHg3NmRjNDE5MCwgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZiwgMHg5ZmJmZTRhNSwgMHhlOGI4ZDQzMyxcbiAgICAweDc4MDdjOWEyLCAweDBmMDBmOTM0LCAweDk2MDlhODhlLCAweGUxMGU5ODE4LCAweDdmNmEwZGJiLCAweDA4NmQzZDJkLCAweDkxNjQ2Yzk3LCAweGU2NjM1YzAxLFxuICAgIDB4NmI2YjUxZjQsIDB4MWM2YzYxNjIsIDB4ODU2NTMwZDgsIDB4ZjI2MjAwNGUsIDB4NmMwNjk1ZWQsIDB4MWIwMWE1N2IsIDB4ODIwOGY0YzEsIDB4ZjUwZmM0NTcsXG4gICAgMHg2NWIwZDljNiwgMHgxMmI3ZTk1MCwgMHg4YmJlYjhlYSwgMHhmY2I5ODg3YywgMHg2MmRkMWRkZiwgMHgxNWRhMmQ0OSwgMHg4Y2QzN2NmMywgMHhmYmQ0NGM2NSxcbiAgICAweDRkYjI2MTU4LCAweDNhYjU1MWNlLCAweGEzYmMwMDc0LCAweGQ0YmIzMGUyLCAweDRhZGZhNTQxLCAweDNkZDg5NWQ3LCAweGE0ZDFjNDZkLCAweGQzZDZmNGZiLFxuICAgIDB4NDM2OWU5NmEsIDB4MzQ2ZWQ5ZmMsIDB4YWQ2Nzg4NDYsIDB4ZGE2MGI4ZDAsIDB4NDQwNDJkNzMsIDB4MzMwMzFkZTUsIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksXG4gICAgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCwgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcbiAgICAweDVlZGVmOTBlLCAweDI5ZDljOTk4LCAweGIwZDA5ODIyLCAweGM3ZDdhOGI0LCAweDU5YjMzZDE3LCAweDJlYjQwZDgxLCAweGI3YmQ1YzNiLCAweGMwYmE2Y2FkLFxuICAgIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsIDB4ZWFkNTQ3MzksIDB4OWRkMjc3YWYsIDB4MDRkYjI2MTUsIDB4NzNkYzE2ODMsXG4gICAgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCwgMHgwZDZkNmEzZSwgMHg3YTZhNWFhOCwgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSxcbiAgICAweGYwMGY5MzQ0LCAweDg3MDhhM2QyLCAweDFlMDFmMjY4LCAweDY5MDZjMmZlLCAweGY3NjI1NzVkLCAweDgwNjU2N2NiLCAweDE5NmMzNjcxLCAweDZlNmIwNmU3LFxuICAgIDB4ZmVkNDFiNzYsIDB4ODlkMzJiZTAsIDB4MTBkYTdhNWEsIDB4NjdkZDRhY2MsIDB4ZjliOWRmNmYsIDB4OGViZWVmZjksIDB4MTdiN2JlNDMsIDB4NjBiMDhlZDUsXG4gICAgMHhkNmQ2YTNlOCwgMHhhMWQxOTM3ZSwgMHgzOGQ4YzJjNCwgMHg0ZmRmZjI1MiwgMHhkMWJiNjdmMSwgMHhhNmJjNTc2NywgMHgzZmI1MDZkZCwgMHg0OGIyMzY0YixcbiAgICAweGQ4MGQyYmRhLCAweGFmMGExYjRjLCAweDM2MDM0YWY2LCAweDQxMDQ3YTYwLCAweGRmNjBlZmMzLCAweGE4NjdkZjU1LCAweDMxNmU4ZWVmLCAweDQ2NjliZTc5LFxuICAgIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsIDB4Y2MwYzc3OTUsIDB4YmIwYjQ3MDMsIDB4MjIwMjE2YjksIDB4NTUwNTI2MmYsXG4gICAgMHhjNWJhM2JiZSwgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSwgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCxcbiAgICAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLCAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLCAweDcyMDc2Nzg1LCAweDA1MDA1NzEzLFxuICAgIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsIDB4OTJkMjhlOWIsIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsIDB4MGJkYmRmMjEsXG4gICAgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MiwgMHg2OGRkYjNmOCwgMHgxZmRhODM2ZSwgMHg4MWJlMTZjZCwgMHhmNmI5MjY1YiwgMHg2ZmIwNzdlMSwgMHgxOGI3NDc3NyxcbiAgICAweDg4MDg1YWU2LCAweGZmMGY2YTcwLCAweDY2MDYzYmNhLCAweDExMDEwYjVjLCAweDhmNjU5ZWZmLCAweGY4NjJhZTY5LCAweDYxNmJmZmQzLCAweDE2NmNjZjQ1LFxuICAgIDB4YTAwYWUyNzgsIDB4ZDcwZGQyZWUsIDB4NGUwNDgzNTQsIDB4MzkwM2IzYzIsIDB4YTc2NzI2NjEsIDB4ZDA2MDE2ZjcsIDB4NDk2OTQ3NGQsIDB4M2U2ZTc3ZGIsXG4gICAgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NiwgMHgzN2Q4M2JmMCwgMHhhOWJjYWU1MywgMHhkZWJiOWVjNSwgMHg0N2IyY2Y3ZiwgMHgzMGI1ZmZlOSxcbiAgICAweGJkYmRmMjFjLCAweGNhYmFjMjhhLCAweDUzYjM5MzMwLCAweDI0YjRhM2E2LCAweGJhZDAzNjA1LCAweGNkZDcwNjkzLCAweDU0ZGU1NzI5LCAweDIzZDk2N2JmLFxuICAgIDB4YjM2NjdhMmUsIDB4YzQ2MTRhYjgsIDB4NWQ2ODFiMDIsIDB4MmE2ZjJiOTQsIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsIDB4MmQwMmVmOGQsXG5dO1xuaWYgKHR5cGVvZiBJbnQzMkFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIFRBQkxFID0gbmV3IEludDMyQXJyYXkoVEFCTEUpO1xufVxuY29uc3QgY3JjamFtID0gKGN1cnJlbnQsIHByZXZpb3VzID0gLTEpID0+IHtcbiAgICBsZXQgY3JjID0gcHJldmlvdXMgPT09IDAgPyAwIDogfn5wcmV2aW91cztcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3JjID0gVEFCTEVbKGNyYyBeIGN1cnJlbnRbaW5kZXhdKSAmIDB4ZmZdIF4gKGNyYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiBjcmM7XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JjamFtO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/calculators/crcjam.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc1.js":
/*!**************************************!*\
  !*** ./node_modules/crc/mjs/crc1.js ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc1.js */ \"./node_modules/crc/mjs/calculators/crc1.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc1', _calculators_crc1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxLmpzIiwibWFwcGluZ3MiOiI7OztBQUF5QztBQUNEO0FBQ3hDLCtEQUFlLDBEQUFTLFNBQVMsNERBQUksQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NyYzEuanM/N2Y2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JjMSBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzEuanMnO1xuaW1wb3J0IGRlZmluZUNyYyBmcm9tICcuL2RlZmluZV9jcmMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ3JjKCdjcmMxJywgY3JjMSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc1.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc16.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/crc16.js ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc16_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16.js */ \"./node_modules/crc/mjs/calculators/crc16.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-16', _calculators_crc16_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBMkM7QUFDSDtBQUN4QywrREFBZSwwREFBUyxXQUFXLDZEQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNi5qcz80MTY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmMxNiBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzE2LmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygnY3JjLTE2JywgY3JjMTYpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc16.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc16ccitt.js":
/*!********************************************!*\
  !*** ./node_modules/crc/mjs/crc16ccitt.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc16ccitt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16ccitt.js */ \"./node_modules/crc/mjs/calculators/crc16ccitt.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('ccitt', _calculators_crc16ccitt_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNmNjaXR0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFxRDtBQUNiO0FBQ3hDLCtEQUFlLDBEQUFTLFVBQVUsa0VBQVUsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NyYzE2Y2NpdHQuanM/ZTU5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JjMTZjY2l0dCBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzE2Y2NpdHQuanMnO1xuaW1wb3J0IGRlZmluZUNyYyBmcm9tICcuL2RlZmluZV9jcmMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ3JjKCdjY2l0dCcsIGNyYzE2Y2NpdHQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc16ccitt.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc16kermit.js":
/*!*********************************************!*\
  !*** ./node_modules/crc/mjs/crc16kermit.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc16kermit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16kermit.js */ \"./node_modules/crc/mjs/calculators/crc16kermit.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('kermit', _calculators_crc16kermit_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNmtlcm1pdC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBdUQ7QUFDZjtBQUN4QywrREFBZSwwREFBUyxXQUFXLG1FQUFXLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNmtlcm1pdC5qcz8yYTYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmMxNmtlcm1pdCBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzE2a2VybWl0LmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygna2VybWl0JywgY3JjMTZrZXJtaXQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc16kermit.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc16modbus.js":
/*!*********************************************!*\
  !*** ./node_modules/crc/mjs/crc16modbus.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc16modbus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16modbus.js */ \"./node_modules/crc/mjs/calculators/crc16modbus.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-16-modbus', _calculators_crc16modbus_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNm1vZGJ1cy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBdUQ7QUFDZjtBQUN4QywrREFBZSwwREFBUyxrQkFBa0IsbUVBQVcsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NyYzE2bW9kYnVzLmpzPzBiMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyYzE2bW9kYnVzIGZyb20gJy4vY2FsY3VsYXRvcnMvY3JjMTZtb2RidXMuanMnO1xuaW1wb3J0IGRlZmluZUNyYyBmcm9tICcuL2RlZmluZV9jcmMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ3JjKCdjcmMtMTYtbW9kYnVzJywgY3JjMTZtb2RidXMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc16modbus.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc16xmodem.js":
/*!*********************************************!*\
  !*** ./node_modules/crc/mjs/crc16xmodem.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc16xmodem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16xmodem.js */ \"./node_modules/crc/mjs/calculators/crc16xmodem.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('xmodem', _calculators_crc16xmodem_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNnhtb2RlbS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBdUQ7QUFDZjtBQUN4QywrREFBZSwwREFBUyxXQUFXLG1FQUFXLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMxNnhtb2RlbS5qcz80Y2Y1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmMxNnhtb2RlbSBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzE2eG1vZGVtLmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygneG1vZGVtJywgY3JjMTZ4bW9kZW0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc16xmodem.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc24.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/crc24.js ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc24_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc24.js */ \"./node_modules/crc/mjs/calculators/crc24.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-24', _calculators_crc24_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMyNC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBMkM7QUFDSDtBQUN4QywrREFBZSwwREFBUyxXQUFXLDZEQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMyNC5qcz9jNjJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmMyNCBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzI0LmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygnY3JjLTI0JywgY3JjMjQpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc24.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc32.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/crc32.js ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc32.js */ \"./node_modules/crc/mjs/calculators/crc32.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-32', _calculators_crc32_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMzMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBMkM7QUFDSDtBQUN4QywrREFBZSwwREFBUyxXQUFXLDZEQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMzMi5qcz83ZDNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmMzMiBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzMyLmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygnY3JjLTMyJywgY3JjMzIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc32.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc32mpeg2.js":
/*!********************************************!*\
  !*** ./node_modules/crc/mjs/crc32mpeg2.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc32mpeg2.js */ \"./node_modules/crc/mjs/calculators/crc32mpeg2.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-32-mpeg', _calculators_crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmMzMm1wZWcyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFxRDtBQUNiO0FBQ3hDLCtEQUFlLDBEQUFTLGdCQUFnQixrRUFBVSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY3JjMzJtcGVnMi5qcz8wYTQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmMzMm1wZWcyIGZyb20gJy4vY2FsY3VsYXRvcnMvY3JjMzJtcGVnMi5qcyc7XG5pbXBvcnQgZGVmaW5lQ3JjIGZyb20gJy4vZGVmaW5lX2NyYy5qcyc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDcmMoJ2NyYy0zMi1tcGVnJywgY3JjMzJtcGVnMik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc32mpeg2.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc8.js":
/*!**************************************!*\
  !*** ./node_modules/crc/mjs/crc8.js ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc8_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc8.js */ \"./node_modules/crc/mjs/calculators/crc8.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-8', _calculators_crc8_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmM4LmpzIiwibWFwcGluZ3MiOiI7OztBQUF5QztBQUNEO0FBQ3hDLCtEQUFlLDBEQUFTLFVBQVUsNERBQUksQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NyYzguanM/Y2E0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JjOCBmcm9tICcuL2NhbGN1bGF0b3JzL2NyYzguanMnO1xuaW1wb3J0IGRlZmluZUNyYyBmcm9tICcuL2RlZmluZV9jcmMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ3JjKCdjcmMtOCcsIGNyYzgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc8.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc81wire.js":
/*!*******************************************!*\
  !*** ./node_modules/crc/mjs/crc81wire.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc81wire_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc81wire.js */ \"./node_modules/crc/mjs/calculators/crc81wire.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('dallas-1-wire', _calculators_crc81wire_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmM4MXdpcmUuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQW1EO0FBQ1g7QUFDeEMsK0RBQWUsMERBQVMsa0JBQWtCLGlFQUFTLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmM4MXdpcmUuanM/YjAzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JjODF3aXJlIGZyb20gJy4vY2FsY3VsYXRvcnMvY3JjODF3aXJlLmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygnZGFsbGFzLTEtd2lyZScsIGNyYzgxd2lyZSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc81wire.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crc8dvbs2.js":
/*!*******************************************!*\
  !*** ./node_modules/crc/mjs/crc8dvbs2.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc8dvbs2.js */ \"./node_modules/crc/mjs/calculators/crc8dvbs2.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('crc-8-dvbs2', _calculators_crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmM4ZHZiczIuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQW1EO0FBQ1g7QUFDeEMsK0RBQWUsMERBQVMsZ0JBQWdCLGlFQUFTLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmM4ZHZiczIuanM/OTJlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JjOGR2YnMyIGZyb20gJy4vY2FsY3VsYXRvcnMvY3JjOGR2YnMyLmpzJztcbmltcG9ydCBkZWZpbmVDcmMgZnJvbSAnLi9kZWZpbmVfY3JjLmpzJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNyYygnY3JjLTgtZHZiczInLCBjcmM4ZHZiczIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crc8dvbs2.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/crcjam.js":
/*!****************************************!*\
  !*** ./node_modules/crc/mjs/crcjam.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calculators_crcjam_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crcjam.js */ \"./node_modules/crc/mjs/calculators/crcjam.js\");\n/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ \"./node_modules/crc/mjs/define_crc.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('jam', _calculators_crcjam_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmNqYW0uanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTZDO0FBQ0w7QUFDeEMsK0RBQWUsMERBQVMsUUFBUSw4REFBTSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvY3JjamFtLmpzPzk0MzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyY2phbSBmcm9tICcuL2NhbGN1bGF0b3JzL2NyY2phbS5qcyc7XG5pbXBvcnQgZGVmaW5lQ3JjIGZyb20gJy4vZGVmaW5lX2NyYy5qcyc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDcmMoJ2phbScsIGNyY2phbSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/crcjam.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/create_buffer.js":
/*!***********************************************!*\
  !*** ./node_modules/crc/mjs/create_buffer.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-prototype-builtins */\n\nconst createBuffer = (value, encoding) => buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, encoding);\n/* harmony default export */ __webpack_exports__[\"default\"] = (createBuffer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9jcmVhdGVfYnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNnQztBQUNoQywwQ0FBMEMsMENBQU07QUFDaEQsK0RBQWUsWUFBWSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jcmMvbWpzL2NyZWF0ZV9idWZmZXIuanM/NDcwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5jb25zdCBjcmVhdGVCdWZmZXIgPSAodmFsdWUsIGVuY29kaW5nKSA9PiBCdWZmZXIuZnJvbSh2YWx1ZSwgZW5jb2RpbmcpO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnVmZmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/create_buffer.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/define_crc.js":
/*!********************************************!*\
  !*** ./node_modules/crc/mjs/define_crc.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ defineCrc; }\n/* harmony export */ });\n/* harmony import */ var _create_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create_buffer.js */ \"./node_modules/crc/mjs/create_buffer.js\");\n\nfunction defineCrc(model, calculator) {\n    const result = (value, previous) => calculator((0,_create_buffer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value), previous) >>> 0;\n    result.signed = (value, previous) => calculator((0,_create_buffer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value), previous);\n    result.unsigned = result;\n    result.model = model;\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9kZWZpbmVfY3JjLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDO0FBQy9CO0FBQ2YsbURBQW1ELDZEQUFZO0FBQy9ELG9EQUFvRCw2REFBWTtBQUNoRTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY3JjL21qcy9kZWZpbmVfY3JjLmpzPzljNzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJ1ZmZlciBmcm9tICcuL2NyZWF0ZV9idWZmZXIuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5lQ3JjKG1vZGVsLCBjYWxjdWxhdG9yKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gKHZhbHVlLCBwcmV2aW91cykgPT4gY2FsY3VsYXRvcihjcmVhdGVCdWZmZXIodmFsdWUpLCBwcmV2aW91cykgPj4+IDA7XG4gICAgcmVzdWx0LnNpZ25lZCA9ICh2YWx1ZSwgcHJldmlvdXMpID0+IGNhbGN1bGF0b3IoY3JlYXRlQnVmZmVyKHZhbHVlKSwgcHJldmlvdXMpO1xuICAgIHJlc3VsdC51bnNpZ25lZCA9IHJlc3VsdDtcbiAgICByZXN1bHQubW9kZWwgPSBtb2RlbDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/define_crc.js\n"));

/***/ }),

/***/ "./node_modules/crc/mjs/index.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crc1: function() { return /* reexport safe */ _crc1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; },\n/* harmony export */   crc16: function() { return /* reexport safe */ _crc16_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; },\n/* harmony export */   crc16ccitt: function() { return /* reexport safe */ _crc16ccitt_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; },\n/* harmony export */   crc16kermit: function() { return /* reexport safe */ _crc16kermit_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; },\n/* harmony export */   crc16modbus: function() { return /* reexport safe */ _crc16modbus_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; },\n/* harmony export */   crc16xmodem: function() { return /* reexport safe */ _crc16xmodem_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; },\n/* harmony export */   crc24: function() { return /* reexport safe */ _crc24_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; },\n/* harmony export */   crc32: function() { return /* reexport safe */ _crc32_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; },\n/* harmony export */   crc32mpeg2: function() { return /* reexport safe */ _crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; },\n/* harmony export */   crc8: function() { return /* reexport safe */ _crc8_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; },\n/* harmony export */   crc81wire: function() { return /* reexport safe */ _crc81wire_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; },\n/* harmony export */   crc8dvbs2: function() { return /* reexport safe */ _crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; },\n/* harmony export */   crcjam: function() { return /* reexport safe */ _crcjam_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _crc1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc1.js */ \"./node_modules/crc/mjs/crc1.js\");\n/* harmony import */ var _crc8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crc8.js */ \"./node_modules/crc/mjs/crc8.js\");\n/* harmony import */ var _crc81wire_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crc81wire.js */ \"./node_modules/crc/mjs/crc81wire.js\");\n/* harmony import */ var _crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crc8dvbs2.js */ \"./node_modules/crc/mjs/crc8dvbs2.js\");\n/* harmony import */ var _crc16_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./crc16.js */ \"./node_modules/crc/mjs/crc16.js\");\n/* harmony import */ var _crc16ccitt_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./crc16ccitt.js */ \"./node_modules/crc/mjs/crc16ccitt.js\");\n/* harmony import */ var _crc16modbus_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./crc16modbus.js */ \"./node_modules/crc/mjs/crc16modbus.js\");\n/* harmony import */ var _crc16xmodem_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./crc16xmodem.js */ \"./node_modules/crc/mjs/crc16xmodem.js\");\n/* harmony import */ var _crc16kermit_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./crc16kermit.js */ \"./node_modules/crc/mjs/crc16kermit.js\");\n/* harmony import */ var _crc24_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./crc24.js */ \"./node_modules/crc/mjs/crc24.js\");\n/* harmony import */ var _crc32_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./crc32.js */ \"./node_modules/crc/mjs/crc32.js\");\n/* harmony import */ var _crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./crc32mpeg2.js */ \"./node_modules/crc/mjs/crc32mpeg2.js\");\n/* harmony import */ var _crcjam_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./crcjam.js */ \"./node_modules/crc/mjs/crcjam.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    crc1: _crc1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    crc8: _crc8_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    crc81wire: _crc81wire_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    crc8dvbs2: _crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    crc16: _crc16_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    crc16ccitt: _crc16ccitt_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    crc16modbus: _crc16modbus_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    crc16xmodem: _crc16xmodem_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    crc16kermit: _crc16kermit_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    crc24: _crc24_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    crc32: _crc32_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    crc32mpeg2: _crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n    crcjam: _crcjam_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3JjL21qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2QjtBQUNBO0FBQ1U7QUFDQTtBQUNSO0FBQ1U7QUFDRTtBQUNBO0FBQ0E7QUFDWjtBQUNBO0FBQ1U7QUFDUjtBQUNqQjtBQUNBO0FBQ0s7QUFDQTtBQUNKO0FBQ0s7QUFDQztBQUNBO0FBQ0E7QUFDTjtBQUNBO0FBQ0s7QUFDSjtBQUNsQiwrREFBZTtBQUNmLFFBQVE7QUFDUixRQUFRO0FBQ1IsYUFBYTtBQUNiLGFBQWE7QUFDYixTQUFTO0FBQ1QsY0FBYztBQUNkLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLFNBQVM7QUFDVCxTQUFTO0FBQ1QsY0FBYztBQUNkLFVBQVU7QUFDVixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NyYy9tanMvaW5kZXguanM/M2MwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JjMSBmcm9tICcuL2NyYzEuanMnO1xuaW1wb3J0IGNyYzggZnJvbSAnLi9jcmM4LmpzJztcbmltcG9ydCBjcmM4MXdpcmUgZnJvbSAnLi9jcmM4MXdpcmUuanMnO1xuaW1wb3J0IGNyYzhkdmJzMiBmcm9tICcuL2NyYzhkdmJzMi5qcyc7XG5pbXBvcnQgY3JjMTYgZnJvbSAnLi9jcmMxNi5qcyc7XG5pbXBvcnQgY3JjMTZjY2l0dCBmcm9tICcuL2NyYzE2Y2NpdHQuanMnO1xuaW1wb3J0IGNyYzE2bW9kYnVzIGZyb20gJy4vY3JjMTZtb2RidXMuanMnO1xuaW1wb3J0IGNyYzE2eG1vZGVtIGZyb20gJy4vY3JjMTZ4bW9kZW0uanMnO1xuaW1wb3J0IGNyYzE2a2VybWl0IGZyb20gJy4vY3JjMTZrZXJtaXQuanMnO1xuaW1wb3J0IGNyYzI0IGZyb20gJy4vY3JjMjQuanMnO1xuaW1wb3J0IGNyYzMyIGZyb20gJy4vY3JjMzIuanMnO1xuaW1wb3J0IGNyYzMybXBlZzIgZnJvbSAnLi9jcmMzMm1wZWcyLmpzJztcbmltcG9ydCBjcmNqYW0gZnJvbSAnLi9jcmNqYW0uanMnO1xuZXhwb3J0IHsgY3JjMSB9O1xuZXhwb3J0IHsgY3JjOCB9O1xuZXhwb3J0IHsgY3JjODF3aXJlIH07XG5leHBvcnQgeyBjcmM4ZHZiczIgfTtcbmV4cG9ydCB7IGNyYzE2IH07XG5leHBvcnQgeyBjcmMxNmNjaXR0IH07XG5leHBvcnQgeyBjcmMxNm1vZGJ1cyB9O1xuZXhwb3J0IHsgY3JjMTZ4bW9kZW0gfTtcbmV4cG9ydCB7IGNyYzE2a2VybWl0IH07XG5leHBvcnQgeyBjcmMyNCB9O1xuZXhwb3J0IHsgY3JjMzIgfTtcbmV4cG9ydCB7IGNyYzMybXBlZzIgfTtcbmV4cG9ydCB7IGNyY2phbSB9O1xuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNyYzEsXG4gICAgY3JjOCxcbiAgICBjcmM4MXdpcmUsXG4gICAgY3JjOGR2YnMyLFxuICAgIGNyYzE2LFxuICAgIGNyYzE2Y2NpdHQsXG4gICAgY3JjMTZtb2RidXMsXG4gICAgY3JjMTZ4bW9kZW0sXG4gICAgY3JjMTZrZXJtaXQsXG4gICAgY3JjMjQsXG4gICAgY3JjMzIsXG4gICAgY3JjMzJtcGVnMixcbiAgICBjcmNqYW0sXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/crc/mjs/index.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Codec: function() { return /* binding */ Codec; },\n/* harmony export */   baseX: function() { return /* binding */ baseX; },\n/* harmony export */   from: function() { return /* binding */ from; },\n/* harmony export */   or: function() { return /* binding */ or; },\n/* harmony export */   rfc4648: function() { return /* binding */ rfc4648; }\n/* harmony export */ });\n/* harmony import */ var _vendor_base_x_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/base-x.js */ \"./node_modules/multiformats/esm/vendor/base-x.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = (0,_vendor_base_x_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.coerce)(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTJDO0FBQ047QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixhQUFhLEdBQUcsd0JBQXdCO0FBQ3pELE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHNCQUFzQixLQUFLLFlBQVksOENBQThDLGFBQWE7QUFDNUo7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiw2REFBNkQsdUJBQXVCLCtCQUErQiw2QkFBNkI7QUFDaEo7QUFDQTtBQUNBO0FBQ087QUFDUCx3QkFBd0IscUJBQXFCO0FBQzdDLHlCQUF5QjtBQUN6QixDQUFDO0FBQ007QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxlQUFlLDZCQUE2QjtBQUM1QyxnQkFBZ0IsdUJBQXVCO0FBQzlDLFNBQVMsZ0JBQWdCLEVBQUUsNkRBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaURBQU07QUFDMUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQkFBcUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0Esb0NBQW9DLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxrQkFBa0Isb0NBQW9DO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlLmpzPzk1YjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJhc2V4IGZyb20gJy4uLy4uL3ZlbmRvci9iYXNlLXguanMnO1xuaW1wb3J0IHsgY29lcmNlIH0gZnJvbSAnLi4vYnl0ZXMuanMnO1xuY2xhc3MgRW5jb2RlciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHByZWZpeCwgYmFzZUVuY29kZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG4gICAgdGhpcy5iYXNlRW5jb2RlID0gYmFzZUVuY29kZTtcbiAgfVxuICBlbmNvZGUoYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICByZXR1cm4gYCR7IHRoaXMucHJlZml4IH0keyB0aGlzLmJhc2VFbmNvZGUoYnl0ZXMpIH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biB0eXBlLCBtdXN0IGJlIGJpbmFyeSB0eXBlJyk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBEZWNvZGVyIHtcbiAgY29uc3RydWN0b3IobmFtZSwgcHJlZml4LCBiYXNlRGVjb2RlKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICBpZiAocHJlZml4LmNvZGVQb2ludEF0KDApID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcmVmaXggY2hhcmFjdGVyJyk7XG4gICAgfVxuICAgIHRoaXMucHJlZml4Q29kZVBvaW50ID0gcHJlZml4LmNvZGVQb2ludEF0KDApO1xuICAgIHRoaXMuYmFzZURlY29kZSA9IGJhc2VEZWNvZGU7XG4gIH1cbiAgZGVjb2RlKHRleHQpIHtcbiAgICBpZiAodHlwZW9mIHRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodGV4dC5jb2RlUG9pbnRBdCgwKSAhPT0gdGhpcy5wcmVmaXhDb2RlUG9pbnQpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYFVuYWJsZSB0byBkZWNvZGUgbXVsdGliYXNlIHN0cmluZyAkeyBKU09OLnN0cmluZ2lmeSh0ZXh0KSB9LCAkeyB0aGlzLm5hbWUgfSBkZWNvZGVyIG9ubHkgc3VwcG9ydHMgaW5wdXRzIHByZWZpeGVkIHdpdGggJHsgdGhpcy5wcmVmaXggfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYmFzZURlY29kZSh0ZXh0LnNsaWNlKHRoaXMucHJlZml4Lmxlbmd0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2FuIG9ubHkgbXVsdGliYXNlIGRlY29kZSBzdHJpbmdzJyk7XG4gICAgfVxuICB9XG4gIG9yKGRlY29kZXIpIHtcbiAgICByZXR1cm4gb3IodGhpcywgZGVjb2Rlcik7XG4gIH1cbn1cbmNsYXNzIENvbXBvc2VkRGVjb2RlciB7XG4gIGNvbnN0cnVjdG9yKGRlY29kZXJzKSB7XG4gICAgdGhpcy5kZWNvZGVycyA9IGRlY29kZXJzO1xuICB9XG4gIG9yKGRlY29kZXIpIHtcbiAgICByZXR1cm4gb3IodGhpcywgZGVjb2Rlcik7XG4gIH1cbiAgZGVjb2RlKGlucHV0KSB7XG4gICAgY29uc3QgcHJlZml4ID0gaW5wdXRbMF07XG4gICAgY29uc3QgZGVjb2RlciA9IHRoaXMuZGVjb2RlcnNbcHJlZml4XTtcbiAgICBpZiAoZGVjb2Rlcikge1xuICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGlucHV0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcihgVW5hYmxlIHRvIGRlY29kZSBtdWx0aWJhc2Ugc3RyaW5nICR7IEpTT04uc3RyaW5naWZ5KGlucHV0KSB9LCBvbmx5IGlucHV0cyBwcmVmaXhlZCB3aXRoICR7IE9iamVjdC5rZXlzKHRoaXMuZGVjb2RlcnMpIH0gYXJlIHN1cHBvcnRlZGApO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGNvbnN0IG9yID0gKGxlZnQsIHJpZ2h0KSA9PiBuZXcgQ29tcG9zZWREZWNvZGVyKHtcbiAgLi4ubGVmdC5kZWNvZGVycyB8fCB7IFtsZWZ0LnByZWZpeF06IGxlZnQgfSxcbiAgLi4ucmlnaHQuZGVjb2RlcnMgfHwgeyBbcmlnaHQucHJlZml4XTogcmlnaHQgfVxufSk7XG5leHBvcnQgY2xhc3MgQ29kZWMge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBwcmVmaXgsIGJhc2VFbmNvZGUsIGJhc2VEZWNvZGUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIHRoaXMuYmFzZUVuY29kZSA9IGJhc2VFbmNvZGU7XG4gICAgdGhpcy5iYXNlRGVjb2RlID0gYmFzZURlY29kZTtcbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgRW5jb2RlcihuYW1lLCBwcmVmaXgsIGJhc2VFbmNvZGUpO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBEZWNvZGVyKG5hbWUsIHByZWZpeCwgYmFzZURlY29kZSk7XG4gIH1cbiAgZW5jb2RlKGlucHV0KSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2Rlci5lbmNvZGUoaW5wdXQpO1xuICB9XG4gIGRlY29kZShpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLmRlY29kZXIuZGVjb2RlKGlucHV0KTtcbiAgfVxufVxuZXhwb3J0IGNvbnN0IGZyb20gPSAoe25hbWUsIHByZWZpeCwgZW5jb2RlLCBkZWNvZGV9KSA9PiBuZXcgQ29kZWMobmFtZSwgcHJlZml4LCBlbmNvZGUsIGRlY29kZSk7XG5leHBvcnQgY29uc3QgYmFzZVggPSAoe3ByZWZpeCwgbmFtZSwgYWxwaGFiZXR9KSA9PiB7XG4gIGNvbnN0IHtlbmNvZGUsIGRlY29kZX0gPSBiYXNleChhbHBoYWJldCwgbmFtZSk7XG4gIHJldHVybiBmcm9tKHtcbiAgICBwcmVmaXgsXG4gICAgbmFtZSxcbiAgICBlbmNvZGUsXG4gICAgZGVjb2RlOiB0ZXh0ID0+IGNvZXJjZShkZWNvZGUodGV4dCkpXG4gIH0pO1xufTtcbmNvbnN0IGRlY29kZSA9IChzdHJpbmcsIGFscGhhYmV0LCBiaXRzUGVyQ2hhciwgbmFtZSkgPT4ge1xuICBjb25zdCBjb2RlcyA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFscGhhYmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29kZXNbYWxwaGFiZXRbaV1dID0gaTtcbiAgfVxuICBsZXQgZW5kID0gc3RyaW5nLmxlbmd0aDtcbiAgd2hpbGUgKHN0cmluZ1tlbmQgLSAxXSA9PT0gJz0nKSB7XG4gICAgLS1lbmQ7XG4gIH1cbiAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kICogYml0c1BlckNoYXIgLyA4IHwgMCk7XG4gIGxldCBiaXRzID0gMDtcbiAgbGV0IGJ1ZmZlciA9IDA7XG4gIGxldCB3cml0dGVuID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmQ7ICsraSkge1xuICAgIGNvbnN0IHZhbHVlID0gY29kZXNbc3RyaW5nW2ldXTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBOb24tJHsgbmFtZSB9IGNoYXJhY3RlcmApO1xuICAgIH1cbiAgICBidWZmZXIgPSBidWZmZXIgPDwgYml0c1BlckNoYXIgfCB2YWx1ZTtcbiAgICBiaXRzICs9IGJpdHNQZXJDaGFyO1xuICAgIGlmIChiaXRzID49IDgpIHtcbiAgICAgIGJpdHMgLT0gODtcbiAgICAgIG91dFt3cml0dGVuKytdID0gMjU1ICYgYnVmZmVyID4+IGJpdHM7XG4gICAgfVxuICB9XG4gIGlmIChiaXRzID49IGJpdHNQZXJDaGFyIHx8IDI1NSAmIGJ1ZmZlciA8PCA4IC0gYml0cykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgZGF0YScpO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuY29uc3QgZW5jb2RlID0gKGRhdGEsIGFscGhhYmV0LCBiaXRzUGVyQ2hhcikgPT4ge1xuICBjb25zdCBwYWQgPSBhbHBoYWJldFthbHBoYWJldC5sZW5ndGggLSAxXSA9PT0gJz0nO1xuICBjb25zdCBtYXNrID0gKDEgPDwgYml0c1BlckNoYXIpIC0gMTtcbiAgbGV0IG91dCA9ICcnO1xuICBsZXQgYml0cyA9IDA7XG4gIGxldCBidWZmZXIgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXIgPSBidWZmZXIgPDwgOCB8IGRhdGFbaV07XG4gICAgYml0cyArPSA4O1xuICAgIHdoaWxlIChiaXRzID4gYml0c1BlckNoYXIpIHtcbiAgICAgIGJpdHMgLT0gYml0c1BlckNoYXI7XG4gICAgICBvdXQgKz0gYWxwaGFiZXRbbWFzayAmIGJ1ZmZlciA+PiBiaXRzXTtcbiAgICB9XG4gIH1cbiAgaWYgKGJpdHMpIHtcbiAgICBvdXQgKz0gYWxwaGFiZXRbbWFzayAmIGJ1ZmZlciA8PCBiaXRzUGVyQ2hhciAtIGJpdHNdO1xuICB9XG4gIGlmIChwYWQpIHtcbiAgICB3aGlsZSAob3V0Lmxlbmd0aCAqIGJpdHNQZXJDaGFyICYgNykge1xuICAgICAgb3V0ICs9ICc9JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5leHBvcnQgY29uc3QgcmZjNDY0OCA9ICh7bmFtZSwgcHJlZml4LCBiaXRzUGVyQ2hhciwgYWxwaGFiZXR9KSA9PiB7XG4gIHJldHVybiBmcm9tKHtcbiAgICBwcmVmaXgsXG4gICAgbmFtZSxcbiAgICBlbmNvZGUoaW5wdXQpIHtcbiAgICAgIHJldHVybiBlbmNvZGUoaW5wdXQsIGFscGhhYmV0LCBiaXRzUGVyQ2hhcik7XG4gICAgfSxcbiAgICBkZWNvZGUoaW5wdXQpIHtcbiAgICAgIHJldHVybiBkZWNvZGUoaW5wdXQsIGFscGhhYmV0LCBiaXRzUGVyQ2hhciwgbmFtZSk7XG4gICAgfVxuICB9KTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base10.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base10.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base10: function() { return /* binding */ base10; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base10 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTEwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBQzNCLGVBQWUsK0NBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTEwLmpzP2Y5MDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzZVggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UxMCA9IGJhc2VYKHtcbiAgcHJlZml4OiAnOScsXG4gIG5hbWU6ICdiYXNlMTAnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODknXG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base10.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base16.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base16.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base16: function() { return /* binding */ base16; },\n/* harmony export */   base16upper: function() { return /* binding */ base16upper; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base16 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nconst base16upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTE2LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUM3QixlQUFlLGlEQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNLG9CQUFvQixpREFBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2UxNi5qcz8zMWQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJmYzQ2NDggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UxNiA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdmJyxcbiAgbmFtZTogJ2Jhc2UxNicsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OWFiY2RlZicsXG4gIGJpdHNQZXJDaGFyOiA0XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMTZ1cHBlciA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdGJyxcbiAgbmFtZTogJ2Jhc2UxNnVwcGVyJyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5QUJDREVGJyxcbiAgYml0c1BlckNoYXI6IDRcbn0pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base16.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base2.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base2.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base2: function() { return /* binding */ base2; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base2 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDN0IsY0FBYyxpREFBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2UyLmpzPzA1NDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnMCcsXG4gIG5hbWU6ICdiYXNlMicsXG4gIGFscGhhYmV0OiAnMDEnLFxuICBiaXRzUGVyQ2hhcjogMVxufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base2.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base256emoji.js":
/*!*****************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base256emoji.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base256emoji: function() { return /* binding */ base256emoji; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nconst base256emoji = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTI1NmVtb2ppLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsTUFBTTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08scUJBQXFCLDhDQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTI1NmVtb2ppLmpzPzZiNGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vYmFzZS5qcyc7XG5jb25zdCBhbHBoYWJldCA9IEFycmF5LmZyb20oJ1xcdUQ4M0RcXHVERTgwXFx1RDgzRVxcdURFOTBcXHUyNjA0XFx1RDgzRFxcdURFRjBcXHVEODNDXFx1REYwQ1xcdUQ4M0NcXHVERjExXFx1RDgzQ1xcdURGMTJcXHVEODNDXFx1REYxM1xcdUQ4M0NcXHVERjE0XFx1RDgzQ1xcdURGMTVcXHVEODNDXFx1REYxNlxcdUQ4M0NcXHVERjE3XFx1RDgzQ1xcdURGMThcXHVEODNDXFx1REYwRFxcdUQ4M0NcXHVERjBGXFx1RDgzQ1xcdURGMEVcXHVEODNEXFx1REMwOVxcdTI2MDBcXHVEODNEXFx1RENCQlxcdUQ4M0RcXHVEREE1XFx1RDgzRFxcdURDQkVcXHVEODNEXFx1RENCRlxcdUQ4M0RcXHVERTAyXFx1Mjc2NFxcdUQ4M0RcXHVERTBEXFx1RDgzRVxcdUREMjNcXHVEODNEXFx1REUwQVxcdUQ4M0RcXHVERTRGXFx1RDgzRFxcdURDOTVcXHVEODNEXFx1REUyRFxcdUQ4M0RcXHVERTE4XFx1RDgzRFxcdURDNERcXHVEODNEXFx1REUwNVxcdUQ4M0RcXHVEQzRGXFx1RDgzRFxcdURFMDFcXHVEODNEXFx1REQyNVxcdUQ4M0VcXHVERDcwXFx1RDgzRFxcdURDOTRcXHVEODNEXFx1REM5NlxcdUQ4M0RcXHVEQzk5XFx1RDgzRFxcdURFMjJcXHVEODNFXFx1REQxNFxcdUQ4M0RcXHVERTA2XFx1RDgzRFxcdURFNDRcXHVEODNEXFx1RENBQVxcdUQ4M0RcXHVERTA5XFx1MjYzQVxcdUQ4M0RcXHVEQzRDXFx1RDgzRVxcdUREMTdcXHVEODNEXFx1REM5Q1xcdUQ4M0RcXHVERTE0XFx1RDgzRFxcdURFMEVcXHVEODNEXFx1REUwN1xcdUQ4M0NcXHVERjM5XFx1RDgzRVxcdUREMjZcXHVEODNDXFx1REY4OVxcdUQ4M0RcXHVEQzlFXFx1MjcwQ1xcdTI3MjhcXHVEODNFXFx1REQzN1xcdUQ4M0RcXHVERTMxXFx1RDgzRFxcdURFMENcXHVEODNDXFx1REYzOFxcdUQ4M0RcXHVERTRDXFx1RDgzRFxcdURFMEJcXHVEODNEXFx1REM5N1xcdUQ4M0RcXHVEQzlBXFx1RDgzRFxcdURFMEZcXHVEODNEXFx1REM5QlxcdUQ4M0RcXHVERTQyXFx1RDgzRFxcdURDOTNcXHVEODNFXFx1REQyOVxcdUQ4M0RcXHVERTA0XFx1RDgzRFxcdURFMDBcXHVEODNEXFx1RERBNFxcdUQ4M0RcXHVERTAzXFx1RDgzRFxcdURDQUZcXHVEODNEXFx1REU0OFxcdUQ4M0RcXHVEQzQ3XFx1RDgzQ1xcdURGQjZcXHVEODNEXFx1REUxMlxcdUQ4M0VcXHVERDJEXFx1Mjc2M1xcdUQ4M0RcXHVERTFDXFx1RDgzRFxcdURDOEJcXHVEODNEXFx1REM0MFxcdUQ4M0RcXHVERTJBXFx1RDgzRFxcdURFMTFcXHVEODNEXFx1RENBNVxcdUQ4M0RcXHVERTRCXFx1RDgzRFxcdURFMUVcXHVEODNEXFx1REUyOVxcdUQ4M0RcXHVERTIxXFx1RDgzRVxcdUREMkFcXHVEODNEXFx1REM0QVxcdUQ4M0VcXHVERDczXFx1RDgzRFxcdURFMjVcXHVEODNFXFx1REQyNFxcdUQ4M0RcXHVEQzQ5XFx1RDgzRFxcdURDODNcXHVEODNEXFx1REUzM1xcdTI3MEJcXHVEODNEXFx1REUxQVxcdUQ4M0RcXHVERTFEXFx1RDgzRFxcdURFMzRcXHVEODNDXFx1REYxRlxcdUQ4M0RcXHVERTJDXFx1RDgzRFxcdURFNDNcXHVEODNDXFx1REY0MFxcdUQ4M0NcXHVERjM3XFx1RDgzRFxcdURFM0JcXHVEODNEXFx1REUxM1xcdTJCNTBcXHUyNzA1XFx1RDgzRVxcdUREN0FcXHVEODNDXFx1REYwOFxcdUQ4M0RcXHVERTA4XFx1RDgzRVxcdUREMThcXHVEODNEXFx1RENBNlxcdTI3MTRcXHVEODNEXFx1REUyM1xcdUQ4M0NcXHVERkMzXFx1RDgzRFxcdURDOTBcXHUyNjM5XFx1RDgzQ1xcdURGOEFcXHVEODNEXFx1REM5OFxcdUQ4M0RcXHVERTIwXFx1MjYxRFxcdUQ4M0RcXHVERTE1XFx1RDgzQ1xcdURGM0FcXHVEODNDXFx1REY4MlxcdUQ4M0NcXHVERjNCXFx1RDgzRFxcdURFMTBcXHVEODNEXFx1REQ5NVxcdUQ4M0RcXHVEQzlEXFx1RDgzRFxcdURFNEFcXHVEODNEXFx1REUzOVxcdUQ4M0RcXHVEREUzXFx1RDgzRFxcdURDQUJcXHVEODNEXFx1REM4MFxcdUQ4M0RcXHVEQzUxXFx1RDgzQ1xcdURGQjVcXHVEODNFXFx1REQxRVxcdUQ4M0RcXHVERTFCXFx1RDgzRFxcdUREMzRcXHVEODNEXFx1REUyNFxcdUQ4M0NcXHVERjNDXFx1RDgzRFxcdURFMkJcXHUyNkJEXFx1RDgzRVxcdUREMTlcXHUyNjE1XFx1RDgzQ1xcdURGQzZcXHVEODNFXFx1REQyQlxcdUQ4M0RcXHVEQzQ4XFx1RDgzRFxcdURFMkVcXHVEODNEXFx1REU0NlxcdUQ4M0NcXHVERjdCXFx1RDgzQ1xcdURGNDNcXHVEODNEXFx1REMzNlxcdUQ4M0RcXHVEQzgxXFx1RDgzRFxcdURFMzJcXHVEODNDXFx1REYzRlxcdUQ4M0VcXHVEREUxXFx1RDgzQ1xcdURGODFcXHUyNkExXFx1RDgzQ1xcdURGMUVcXHVEODNDXFx1REY4OFxcdTI3NENcXHUyNzBBXFx1RDgzRFxcdURDNEJcXHVEODNEXFx1REUzMFxcdUQ4M0VcXHVERDI4XFx1RDgzRFxcdURFMzZcXHVEODNFXFx1REQxRFxcdUQ4M0RcXHVERUI2XFx1RDgzRFxcdURDQjBcXHVEODNDXFx1REY1M1xcdUQ4M0RcXHVEQ0EyXFx1RDgzRVxcdUREMUZcXHVEODNEXFx1REU0MVxcdUQ4M0RcXHVERUE4XFx1RDgzRFxcdURDQThcXHVEODNFXFx1REQyQ1xcdTI3MDhcXHVEODNDXFx1REY4MFxcdUQ4M0NcXHVERjdBXFx1RDgzRVxcdUREMTNcXHVEODNEXFx1REUxOVxcdUQ4M0RcXHVEQzlGXFx1RDgzQ1xcdURGMzFcXHVEODNEXFx1REUxNlxcdUQ4M0RcXHVEQzc2XFx1RDgzRVxcdURENzRcXHUyNUI2XFx1MjdBMVxcdTI3NTNcXHVEODNEXFx1REM4RVxcdUQ4M0RcXHVEQ0I4XFx1MkIwN1xcdUQ4M0RcXHVERTI4XFx1RDgzQ1xcdURGMUFcXHVEODNFXFx1REQ4QlxcdUQ4M0RcXHVERTM3XFx1RDgzRFxcdUREN0FcXHUyNkEwXFx1RDgzRFxcdURFNDVcXHVEODNEXFx1REUxRlxcdUQ4M0RcXHVERTM1XFx1RDgzRFxcdURDNEVcXHVEODNFXFx1REQzMlxcdUQ4M0VcXHVERDIwXFx1RDgzRVxcdUREMjdcXHVEODNEXFx1RENDQ1xcdUQ4M0RcXHVERDM1XFx1RDgzRFxcdURDODVcXHVEODNFXFx1REREMFxcdUQ4M0RcXHVEQzNFXFx1RDgzQ1xcdURGNTJcXHVEODNEXFx1REUxN1xcdUQ4M0VcXHVERDExXFx1RDgzQ1xcdURGMEFcXHVEODNFXFx1REQyRlxcdUQ4M0RcXHVEQzM3XFx1MjYwRVxcdUQ4M0RcXHVEQ0E3XFx1RDgzRFxcdURFMkZcXHVEODNEXFx1REM4NlxcdUQ4M0RcXHVEQzQ2XFx1RDgzQ1xcdURGQTRcXHVEODNEXFx1REU0N1xcdUQ4M0NcXHVERjUxXFx1Mjc0NFxcdUQ4M0NcXHVERjM0XFx1RDgzRFxcdURDQTNcXHVEODNEXFx1REMzOFxcdUQ4M0RcXHVEQzhDXFx1RDgzRFxcdURDQ0RcXHVEODNFXFx1REQ0MFxcdUQ4M0VcXHVERDIyXFx1RDgzRFxcdURDNDVcXHVEODNEXFx1RENBMVxcdUQ4M0RcXHVEQ0E5XFx1RDgzRFxcdURDNTBcXHVEODNEXFx1RENGOFxcdUQ4M0RcXHVEQzdCXFx1RDgzRVxcdUREMTBcXHVEODNFXFx1REQyRVxcdUQ4M0NcXHVERkJDXFx1RDgzRVxcdURENzVcXHVEODNEXFx1REVBOVxcdUQ4M0NcXHVERjRFXFx1RDgzQ1xcdURGNEFcXHVEODNEXFx1REM3Q1xcdUQ4M0RcXHVEQzhEXFx1RDgzRFxcdURDRTNcXHVEODNFXFx1REQ0MicpO1xuY29uc3QgYWxwaGFiZXRCeXRlc1RvQ2hhcnMgPSBhbHBoYWJldC5yZWR1Y2UoKHAsIGMsIGkpID0+IHtcbiAgcFtpXSA9IGM7XG4gIHJldHVybiBwO1xufSwgW10pO1xuY29uc3QgYWxwaGFiZXRDaGFyc1RvQnl0ZXMgPSBhbHBoYWJldC5yZWR1Y2UoKHAsIGMsIGkpID0+IHtcbiAgcFtjLmNvZGVQb2ludEF0KDApXSA9IGk7XG4gIHJldHVybiBwO1xufSwgW10pO1xuZnVuY3Rpb24gZW5jb2RlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEucmVkdWNlKChwLCBjKSA9PiB7XG4gICAgcCArPSBhbHBoYWJldEJ5dGVzVG9DaGFyc1tjXTtcbiAgICByZXR1cm4gcDtcbiAgfSwgJycpO1xufVxuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICBjb25zdCBieXRzID0gW107XG4gIGZvciAoY29uc3QgY2hhciBvZiBzdHIpIHtcbiAgICBjb25zdCBieXQgPSBhbHBoYWJldENoYXJzVG9CeXRlc1tjaGFyLmNvZGVQb2ludEF0KDApXTtcbiAgICBpZiAoYnl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uLWJhc2UyNTZlbW9qaSBjaGFyYWN0ZXI6ICR7IGNoYXIgfWApO1xuICAgIH1cbiAgICBieXRzLnB1c2goYnl0KTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnl0cyk7XG59XG5leHBvcnQgY29uc3QgYmFzZTI1NmVtb2ppID0gZnJvbSh7XG4gIHByZWZpeDogJ1xcdUQ4M0RcXHVERTgwJyxcbiAgbmFtZTogJ2Jhc2UyNTZlbW9qaScsXG4gIGVuY29kZSxcbiAgZGVjb2RlXG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base256emoji.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base32.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base32.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base32: function() { return /* binding */ base32; },\n/* harmony export */   base32hex: function() { return /* binding */ base32hex; },\n/* harmony export */   base32hexpad: function() { return /* binding */ base32hexpad; },\n/* harmony export */   base32hexpadupper: function() { return /* binding */ base32hexpadupper; },\n/* harmony export */   base32hexupper: function() { return /* binding */ base32hexupper; },\n/* harmony export */   base32pad: function() { return /* binding */ base32pad; },\n/* harmony export */   base32padupper: function() { return /* binding */ base32padupper; },\n/* harmony export */   base32upper: function() { return /* binding */ base32upper; },\n/* harmony export */   base32z: function() { return /* binding */ base32z; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base32 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nconst base32upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nconst base32pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nconst base32padupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nconst base32hex = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nconst base32hexupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nconst base32hexpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nconst base32hexpadupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nconst base32z = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTMyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBb0M7QUFDN0IsZUFBZSxpREFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSxvQkFBb0IsaURBQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ00sa0JBQWtCLGlEQUFPO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNLHVCQUF1QixpREFBTztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSxrQkFBa0IsaURBQU87QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ00sdUJBQXVCLGlEQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNLHFCQUFxQixpREFBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSwwQkFBMEIsaURBQU87QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ00sZ0JBQWdCLGlEQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTMyLmpzPzA3NWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTMyID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ2InLFxuICBuYW1lOiAnYmFzZTMyJyxcbiAgYWxwaGFiZXQ6ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2NycsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJ1cHBlciA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdCJyxcbiAgbmFtZTogJ2Jhc2UzMnVwcGVyJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NycsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJwYWQgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnYycsXG4gIG5hbWU6ICdiYXNlMzJwYWQnLFxuICBhbHBoYWJldDogJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3PScsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJwYWR1cHBlciA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdDJyxcbiAgbmFtZTogJ2Jhc2UzMnBhZHVwcGVyJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2Nz0nLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyaGV4ID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ3YnLFxuICBuYW1lOiAnYmFzZTMyaGV4JyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dicsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXh1cHBlciA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdWJyxcbiAgbmFtZTogJ2Jhc2UzMmhleHVwcGVyJyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVicsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXhwYWQgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAndCcsXG4gIG5hbWU6ICdiYXNlMzJoZXhwYWQnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2PScsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXhwYWR1cHBlciA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdUJyxcbiAgbmFtZTogJ2Jhc2UzMmhleHBhZHVwcGVyJyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVj0nLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7XG5leHBvcnQgY29uc3QgYmFzZTMyeiA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdoJyxcbiAgbmFtZTogJ2Jhc2UzMnonLFxuICBhbHBoYWJldDogJ3libmRyZmc4ZWprbWNwcXhvdDF1d2lzemEzNDVoNzY5JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base32.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base36.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base36.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base36: function() { return /* binding */ base36; },\n/* harmony export */   base36upper: function() { return /* binding */ base36upper; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base36 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nconst base36upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrQztBQUMzQixlQUFlLCtDQUFLO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSxvQkFBb0IsK0NBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTM2LmpzPzk2MmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzZVggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UzNiA9IGJhc2VYKHtcbiAgcHJlZml4OiAnaycsXG4gIG5hbWU6ICdiYXNlMzYnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzNnVwcGVyID0gYmFzZVgoe1xuICBwcmVmaXg6ICdLJyxcbiAgbmFtZTogJ2Jhc2UzNnVwcGVyJyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonXG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base36.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base58.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base58.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base58btc: function() { return /* binding */ base58btc; },\n/* harmony export */   base58flickr: function() { return /* binding */ base58flickr; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base58btc = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nconst base58flickr = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTU4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrQztBQUMzQixrQkFBa0IsK0NBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNLHFCQUFxQiwrQ0FBSztBQUNqQztBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNTguanM/NDU3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlWCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTU4YnRjID0gYmFzZVgoe1xuICBuYW1lOiAnYmFzZTU4YnRjJyxcbiAgcHJlZml4OiAneicsXG4gIGFscGhhYmV0OiAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2U1OGZsaWNrciA9IGJhc2VYKHtcbiAgbmFtZTogJ2Jhc2U1OGZsaWNrcicsXG4gIHByZWZpeDogJ1onLFxuICBhbHBoYWJldDogJzEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonXG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base58.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base64.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base64.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64: function() { return /* binding */ base64; },\n/* harmony export */   base64pad: function() { return /* binding */ base64pad; },\n/* harmony export */   base64url: function() { return /* binding */ base64url; },\n/* harmony export */   base64urlpad: function() { return /* binding */ base64urlpad; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base64 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nconst base64pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nconst base64url = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nconst base64urlpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9DO0FBQzdCLGVBQWUsaURBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ00sa0JBQWtCLGlEQUFPO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNLGtCQUFrQixpREFBTztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSxxQkFBcUIsaURBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNjQuanM/ZTIwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZmM0NjQ4IH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjb25zdCBiYXNlNjQgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnbScsXG4gIG5hbWU6ICdiYXNlNjQnLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLFxuICBiaXRzUGVyQ2hhcjogNlxufSk7XG5leHBvcnQgY29uc3QgYmFzZTY0cGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ00nLFxuICBuYW1lOiAnYmFzZTY0cGFkJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScsXG4gIGJpdHNQZXJDaGFyOiA2XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlNjR1cmwgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAndScsXG4gIG5hbWU6ICdiYXNlNjR1cmwnLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nLFxuICBiaXRzUGVyQ2hhcjogNlxufSk7XG5leHBvcnQgY29uc3QgYmFzZTY0dXJscGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ1UnLFxuICBuYW1lOiAnYmFzZTY0dXJscGFkJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fPScsXG4gIGJpdHNQZXJDaGFyOiA2XG59KTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base64.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/base8.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base8.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base8: function() { return /* binding */ base8; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base8 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDN0IsY0FBYyxpREFBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2U4LmpzP2ExZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTggPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnNycsXG4gIG5hbWU6ICdiYXNlOCcsXG4gIGFscGhhYmV0OiAnMDEyMzQ1NjcnLFxuICBiaXRzUGVyQ2hhcjogM1xufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/base8.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bases/identity.js":
/*!*************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/identity.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: function() { return /* binding */ identity; }\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multiformats/esm/src/bases/base.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n\n\nconst identity = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toString)(buf),\n  decode: str => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromString)(str)\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvaWRlbnRpdHkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBSVo7QUFDZCxpQkFBaUIsOENBQUk7QUFDNUI7QUFDQTtBQUNBLGlCQUFpQixtREFBUTtBQUN6QixpQkFBaUIscURBQVU7QUFDM0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvaWRlbnRpdHkuanM/ZGU1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9iYXNlLmpzJztcbmltcG9ydCB7XG4gIGZyb21TdHJpbmcsXG4gIHRvU3RyaW5nXG59IGZyb20gJy4uL2J5dGVzLmpzJztcbmV4cG9ydCBjb25zdCBpZGVudGl0eSA9IGZyb20oe1xuICBwcmVmaXg6ICdcXDAnLFxuICBuYW1lOiAnaWRlbnRpdHknLFxuICBlbmNvZGU6IGJ1ZiA9PiB0b1N0cmluZyhidWYpLFxuICBkZWNvZGU6IHN0ciA9PiBmcm9tU3RyaW5nKHN0cilcbn0pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bases/identity.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/basics.js":
/*!*****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/basics.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.CID; },\n/* harmony export */   bases: function() { return /* binding */ bases; },\n/* harmony export */   bytes: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.bytes; },\n/* harmony export */   codecs: function() { return /* binding */ codecs; },\n/* harmony export */   digest: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.digest; },\n/* harmony export */   hasher: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.hasher; },\n/* harmony export */   hashes: function() { return /* binding */ hashes; },\n/* harmony export */   varint: function() { return /* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.varint; }\n/* harmony export */ });\n/* harmony import */ var _bases_identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bases/identity.js */ \"./node_modules/multiformats/esm/src/bases/identity.js\");\n/* harmony import */ var _bases_base2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bases/base2.js */ \"./node_modules/multiformats/esm/src/bases/base2.js\");\n/* harmony import */ var _bases_base8_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base8.js */ \"./node_modules/multiformats/esm/src/bases/base8.js\");\n/* harmony import */ var _bases_base10_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bases/base10.js */ \"./node_modules/multiformats/esm/src/bases/base10.js\");\n/* harmony import */ var _bases_base16_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bases/base16.js */ \"./node_modules/multiformats/esm/src/bases/base16.js\");\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bases/base32.js */ \"./node_modules/multiformats/esm/src/bases/base32.js\");\n/* harmony import */ var _bases_base36_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bases/base36.js */ \"./node_modules/multiformats/esm/src/bases/base36.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bases/base58.js */ \"./node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var _bases_base64_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bases/base64.js */ \"./node_modules/multiformats/esm/src/bases/base64.js\");\n/* harmony import */ var _bases_base256emoji_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bases/base256emoji.js */ \"./node_modules/multiformats/esm/src/bases/base256emoji.js\");\n/* harmony import */ var _hashes_sha2_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hashes/sha2.js */ \"./node_modules/multiformats/esm/src/hashes/sha2-browser.js\");\n/* harmony import */ var _hashes_identity_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hashes/identity.js */ \"./node_modules/multiformats/esm/src/hashes/identity.js\");\n/* harmony import */ var _codecs_raw_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./codecs/raw.js */ \"./node_modules/multiformats/esm/src/codecs/raw.js\");\n/* harmony import */ var _codecs_json_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./codecs/json.js */ \"./node_modules/multiformats/esm/src/codecs/json.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index.js */ \"./node_modules/multiformats/esm/src/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst bases = {\n  ..._bases_identity_js__WEBPACK_IMPORTED_MODULE_0__,\n  ..._bases_base2_js__WEBPACK_IMPORTED_MODULE_1__,\n  ..._bases_base8_js__WEBPACK_IMPORTED_MODULE_2__,\n  ..._bases_base10_js__WEBPACK_IMPORTED_MODULE_3__,\n  ..._bases_base16_js__WEBPACK_IMPORTED_MODULE_4__,\n  ..._bases_base32_js__WEBPACK_IMPORTED_MODULE_5__,\n  ..._bases_base36_js__WEBPACK_IMPORTED_MODULE_6__,\n  ..._bases_base58_js__WEBPACK_IMPORTED_MODULE_7__,\n  ..._bases_base64_js__WEBPACK_IMPORTED_MODULE_8__,\n  ..._bases_base256emoji_js__WEBPACK_IMPORTED_MODULE_9__\n};\nconst hashes = {\n  ..._hashes_sha2_js__WEBPACK_IMPORTED_MODULE_10__,\n  ..._hashes_identity_js__WEBPACK_IMPORTED_MODULE_11__\n};\nconst codecs = {\n  raw: _codecs_raw_js__WEBPACK_IMPORTED_MODULE_12__,\n  json: _codecs_json_js__WEBPACK_IMPORTED_MODULE_13__\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzaWNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9EO0FBQ1Y7QUFDQTtBQUNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNZO0FBQ2Y7QUFDUTtBQUNWO0FBQ0U7QUFPckI7QUFDcEI7QUFDQSxLQUFLLCtDQUFZO0FBQ2pCLEtBQUssNENBQUs7QUFDVixLQUFLLDRDQUFLO0FBQ1YsS0FBSyw2Q0FBTTtBQUNYLEtBQUssNkNBQU07QUFDWCxLQUFLLDZDQUFNO0FBQ1gsS0FBSyw2Q0FBTTtBQUNYLEtBQUssNkNBQU07QUFDWCxLQUFLLDZDQUFNO0FBQ1gsS0FBSyxtREFBWTtBQUNqQjtBQUNBO0FBQ0EsS0FBSyw2Q0FBSTtBQUNULEtBQUssaURBQVE7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMLE1BQU07QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzaWNzLmpzP2YwYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaWRlbnRpdHlCYXNlIGZyb20gJy4vYmFzZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0ICogYXMgYmFzZTIgZnJvbSAnLi9iYXNlcy9iYXNlMi5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlOCBmcm9tICcuL2Jhc2VzL2Jhc2U4LmpzJztcbmltcG9ydCAqIGFzIGJhc2UxMCBmcm9tICcuL2Jhc2VzL2Jhc2UxMC5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlMTYgZnJvbSAnLi9iYXNlcy9iYXNlMTYuanMnO1xuaW1wb3J0ICogYXMgYmFzZTMyIGZyb20gJy4vYmFzZXMvYmFzZTMyLmpzJztcbmltcG9ydCAqIGFzIGJhc2UzNiBmcm9tICcuL2Jhc2VzL2Jhc2UzNi5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlNTggZnJvbSAnLi9iYXNlcy9iYXNlNTguanMnO1xuaW1wb3J0ICogYXMgYmFzZTY0IGZyb20gJy4vYmFzZXMvYmFzZTY0LmpzJztcbmltcG9ydCAqIGFzIGJhc2UyNTZlbW9qaSBmcm9tICcuL2Jhc2VzL2Jhc2UyNTZlbW9qaS5qcyc7XG5pbXBvcnQgKiBhcyBzaGEyIGZyb20gJy4vaGFzaGVzL3NoYTIuanMnO1xuaW1wb3J0ICogYXMgaWRlbnRpdHkgZnJvbSAnLi9oYXNoZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0ICogYXMgcmF3IGZyb20gJy4vY29kZWNzL3Jhdy5qcyc7XG5pbXBvcnQgKiBhcyBqc29uIGZyb20gJy4vY29kZWNzL2pzb24uanMnO1xuaW1wb3J0IHtcbiAgQ0lELFxuICBoYXNoZXIsXG4gIGRpZ2VzdCxcbiAgdmFyaW50LFxuICBieXRlc1xufSBmcm9tICcuL2luZGV4LmpzJztcbmNvbnN0IGJhc2VzID0ge1xuICAuLi5pZGVudGl0eUJhc2UsXG4gIC4uLmJhc2UyLFxuICAuLi5iYXNlOCxcbiAgLi4uYmFzZTEwLFxuICAuLi5iYXNlMTYsXG4gIC4uLmJhc2UzMixcbiAgLi4uYmFzZTM2LFxuICAuLi5iYXNlNTgsXG4gIC4uLmJhc2U2NCxcbiAgLi4uYmFzZTI1NmVtb2ppXG59O1xuY29uc3QgaGFzaGVzID0ge1xuICAuLi5zaGEyLFxuICAuLi5pZGVudGl0eVxufTtcbmNvbnN0IGNvZGVjcyA9IHtcbiAgcmF3LFxuICBqc29uXG59O1xuZXhwb3J0IHtcbiAgQ0lELFxuICBoYXNoZXIsXG4gIGRpZ2VzdCxcbiAgdmFyaW50LFxuICBieXRlcyxcbiAgaGFzaGVzLFxuICBiYXNlcyxcbiAgY29kZWNzXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/basics.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/bytes.js":
/*!****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bytes.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerce: function() { return /* binding */ coerce; },\n/* harmony export */   empty: function() { return /* binding */ empty; },\n/* harmony export */   equals: function() { return /* binding */ equals; },\n/* harmony export */   fromHex: function() { return /* binding */ fromHex; },\n/* harmony export */   fromString: function() { return /* binding */ fromString; },\n/* harmony export */   isBinary: function() { return /* binding */ isBinary; },\n/* harmony export */   toHex: function() { return /* binding */ toHex; },\n/* harmony export */   toString: function() { return /* binding */ toString; }\n/* harmony export */ });\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9ieXRlcy5qcz81ZmZmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVtcHR5ID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5jb25zdCB0b0hleCA9IGQgPT4gZC5yZWR1Y2UoKGhleCwgYnl0ZSkgPT4gaGV4ICsgYnl0ZS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSwgJycpO1xuY29uc3QgZnJvbUhleCA9IGhleCA9PiB7XG4gIGNvbnN0IGhleGVzID0gaGV4Lm1hdGNoKC8uLi9nKTtcbiAgcmV0dXJuIGhleGVzID8gbmV3IFVpbnQ4QXJyYXkoaGV4ZXMubWFwKGIgPT4gcGFyc2VJbnQoYiwgMTYpKSkgOiBlbXB0eTtcbn07XG5jb25zdCBlcXVhbHMgPSAoYWEsIGJiKSA9PiB7XG4gIGlmIChhYSA9PT0gYmIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChhYS5ieXRlTGVuZ3RoICE9PSBiYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGlpID0gMDsgaWkgPCBhYS5ieXRlTGVuZ3RoOyBpaSsrKSB7XG4gICAgaWYgKGFhW2lpXSAhPT0gYmJbaWldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IGNvZXJjZSA9IG8gPT4ge1xuICBpZiAobyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgby5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpXG4gICAgcmV0dXJuIG87XG4gIGlmIChvIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG8pO1xuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KG8pKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG8uYnVmZmVyLCBvLmJ5dGVPZmZzZXQsIG8uYnl0ZUxlbmd0aCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGUsIG11c3QgYmUgYmluYXJ5IHR5cGUnKTtcbn07XG5jb25zdCBpc0JpbmFyeSA9IG8gPT4gbyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhvKTtcbmNvbnN0IGZyb21TdHJpbmcgPSBzdHIgPT4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG5jb25zdCB0b1N0cmluZyA9IGIgPT4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGIpO1xuZXhwb3J0IHtcbiAgZXF1YWxzLFxuICBjb2VyY2UsXG4gIGlzQmluYXJ5LFxuICBmcm9tSGV4LFxuICB0b0hleCxcbiAgZnJvbVN0cmluZyxcbiAgdG9TdHJpbmcsXG4gIGVtcHR5XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/bytes.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/cid.js":
/*!**************************************************!*\
  !*** ./node_modules/multiformats/esm/src/cid.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: function() { return /* binding */ CID; }\n/* harmony export */ });\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./varint.js */ \"./node_modules/multiformats/esm/src/varint.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashes/digest.js */ \"./node_modules/multiformats/esm/src/hashes/digest.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base58.js */ \"./node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bases/base32.js */ \"./node_modules/multiformats/esm/src/bases/base32.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n\n\n\n\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_4__.coerce)(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = _varint_js__WEBPACK_IMPORTED_MODULE_0__.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n      return [\n        _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n        decoder.decode(`${ _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix }${ source }`)\n      ];\n    }\n  case _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix: {\n      const decoder = base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n      return [\n        _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.prefix: {\n      const decoder = base || _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32;\n      return [\n        _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodingLength(version);\n  const hashOffset = codeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodeTo(version, bytes, 0);\n  _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/cid.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/codecs/json.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/codecs/json.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: function() { return /* binding */ code; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   name: function() { return /* binding */ name; }\n/* harmony export */ });\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nconst name = 'json';\nconst code = 512;\nconst encode = node => textEncoder.encode(JSON.stringify(node));\nconst decode = data => JSON.parse(textDecoder.decode(data));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvY29kZWNzL2pzb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvY29kZWNzL2pzb24uanM/OGQ1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0ZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuY29uc3QgdGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbmV4cG9ydCBjb25zdCBuYW1lID0gJ2pzb24nO1xuZXhwb3J0IGNvbnN0IGNvZGUgPSA1MTI7XG5leHBvcnQgY29uc3QgZW5jb2RlID0gbm9kZSA9PiB0ZXh0RW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkobm9kZSkpO1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IGRhdGEgPT4gSlNPTi5wYXJzZSh0ZXh0RGVjb2Rlci5kZWNvZGUoZGF0YSkpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/codecs/json.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/codecs/raw.js":
/*!*********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/codecs/raw.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: function() { return /* binding */ code; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   name: function() { return /* binding */ name; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n\nconst name = 'raw';\nconst code = 85;\nconst encode = node => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(node);\nconst decode = data => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(data);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvY29kZWNzL3Jhdy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxQztBQUM5QjtBQUNBO0FBQ0EsdUJBQXVCLGlEQUFNO0FBQzdCLHVCQUF1QixpREFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvY29kZWNzL3Jhdy5qcz8wNDllIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZSB9IGZyb20gJy4uL2J5dGVzLmpzJztcbmV4cG9ydCBjb25zdCBuYW1lID0gJ3Jhdyc7XG5leHBvcnQgY29uc3QgY29kZSA9IDg1O1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IG5vZGUgPT4gY29lcmNlKG5vZGUpO1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IGRhdGEgPT4gY29lcmNlKGRhdGEpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/codecs/raw.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/hashes/digest.js":
/*!************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/digest.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Digest: function() { return /* binding */ Digest; },\n/* harmony export */   create: function() { return /* binding */ create; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   equals: function() { return /* binding */ equals; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../varint.js */ \"./node_modules/multiformats/esm/src/varint.js\");\n\n\nconst create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(code);\n  const digestOffset = sizeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(code, bytes, 0);\n  _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nconst decode = multihash => {\n  const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(multihash);\n  const [code, sizeOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes);\n  const [size, digestOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nconst equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.equals)(a.bytes, b.bytes);\n  }\n};\nclass Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2RpZ2VzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHcUI7QUFDa0I7QUFDaEM7QUFDUDtBQUNBLHFCQUFxQixzREFBcUI7QUFDMUMsb0NBQW9DLHNEQUFxQjtBQUN6RDtBQUNBLEVBQUUsZ0RBQWU7QUFDakIsRUFBRSxnREFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDTztBQUNQLGdCQUFnQixpREFBTTtBQUN0Qiw2QkFBNkIsOENBQWE7QUFDMUMsK0JBQStCLDhDQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLElBQUk7QUFDSixxREFBcUQsaURBQVU7QUFDL0Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2hhc2hlcy9kaWdlc3QuanM/NTZmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb2VyY2UsXG4gIGVxdWFscyBhcyBlcXVhbEJ5dGVzXG59IGZyb20gJy4uL2J5dGVzLmpzJztcbmltcG9ydCAqIGFzIHZhcmludCBmcm9tICcuLi92YXJpbnQuanMnO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IChjb2RlLCBkaWdlc3QpID0+IHtcbiAgY29uc3Qgc2l6ZSA9IGRpZ2VzdC5ieXRlTGVuZ3RoO1xuICBjb25zdCBzaXplT2Zmc2V0ID0gdmFyaW50LmVuY29kaW5nTGVuZ3RoKGNvZGUpO1xuICBjb25zdCBkaWdlc3RPZmZzZXQgPSBzaXplT2Zmc2V0ICsgdmFyaW50LmVuY29kaW5nTGVuZ3RoKHNpemUpO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGRpZ2VzdE9mZnNldCArIHNpemUpO1xuICB2YXJpbnQuZW5jb2RlVG8oY29kZSwgYnl0ZXMsIDApO1xuICB2YXJpbnQuZW5jb2RlVG8oc2l6ZSwgYnl0ZXMsIHNpemVPZmZzZXQpO1xuICBieXRlcy5zZXQoZGlnZXN0LCBkaWdlc3RPZmZzZXQpO1xuICByZXR1cm4gbmV3IERpZ2VzdChjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgZGVjb2RlID0gbXVsdGloYXNoID0+IHtcbiAgY29uc3QgYnl0ZXMgPSBjb2VyY2UobXVsdGloYXNoKTtcbiAgY29uc3QgW2NvZGUsIHNpemVPZmZzZXRdID0gdmFyaW50LmRlY29kZShieXRlcyk7XG4gIGNvbnN0IFtzaXplLCBkaWdlc3RPZmZzZXRdID0gdmFyaW50LmRlY29kZShieXRlcy5zdWJhcnJheShzaXplT2Zmc2V0KSk7XG4gIGNvbnN0IGRpZ2VzdCA9IGJ5dGVzLnN1YmFycmF5KHNpemVPZmZzZXQgKyBkaWdlc3RPZmZzZXQpO1xuICBpZiAoZGlnZXN0LmJ5dGVMZW5ndGggIT09IHNpemUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCBsZW5ndGgnKTtcbiAgfVxuICByZXR1cm4gbmV3IERpZ2VzdChjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgZXF1YWxzID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYS5jb2RlID09PSBiLmNvZGUgJiYgYS5zaXplID09PSBiLnNpemUgJiYgZXF1YWxCeXRlcyhhLmJ5dGVzLCBiLmJ5dGVzKTtcbiAgfVxufTtcbmV4cG9ydCBjbGFzcyBEaWdlc3Qge1xuICBjb25zdHJ1Y3Rvcihjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKSB7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuZGlnZXN0ID0gZGlnZXN0O1xuICAgIHRoaXMuYnl0ZXMgPSBieXRlcztcbiAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/hashes/digest.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/hashes/hasher.js":
/*!************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/hasher.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hasher: function() { return /* binding */ Hasher; },\n/* harmony export */   from: function() { return /* binding */ from; }\n/* harmony export */ });\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./digest.js */ \"./node_modules/multiformats/esm/src/hashes/digest.js\");\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? _digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, result) : result.then(digest => _digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2hhc2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFDL0IsZUFBZSxtQkFBbUI7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDhDQUFhLDRDQUE0Qyw4Q0FBYTtBQUNsSCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2hhc2hlcy9oYXNoZXIuanM/ZmEyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBEaWdlc3QgZnJvbSAnLi9kaWdlc3QuanMnO1xuZXhwb3J0IGNvbnN0IGZyb20gPSAoe25hbWUsIGNvZGUsIGVuY29kZX0pID0+IG5ldyBIYXNoZXIobmFtZSwgY29kZSwgZW5jb2RlKTtcbmV4cG9ydCBjbGFzcyBIYXNoZXIge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBjb2RlLCBlbmNvZGUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5lbmNvZGUgPSBlbmNvZGU7XG4gIH1cbiAgZGlnZXN0KGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lbmNvZGUoaW5wdXQpO1xuICAgICAgcmV0dXJuIHJlc3VsdCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBEaWdlc3QuY3JlYXRlKHRoaXMuY29kZSwgcmVzdWx0KSA6IHJlc3VsdC50aGVuKGRpZ2VzdCA9PiBEaWdlc3QuY3JlYXRlKHRoaXMuY29kZSwgZGlnZXN0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHR5cGUsIG11c3QgYmUgYmluYXJ5IHR5cGUnKTtcbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/hashes/hasher.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/hashes/identity.js":
/*!**************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/identity.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: function() { return /* binding */ identity; }\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./digest.js */ \"./node_modules/multiformats/esm/src/hashes/digest.js\");\n\n\nconst code = 0;\nconst name = 'identity';\nconst encode = _bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce;\nconst digest = input => _digest_js__WEBPACK_IMPORTED_MODULE_1__.create(code, encode(input));\nconst identity = {\n  code,\n  name,\n  encode,\n  digest\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2lkZW50aXR5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNDO0FBQ3RDO0FBQ0E7QUFDQSxlQUFlLDZDQUFNO0FBQ3JCLHdCQUF3Qiw4Q0FBYTtBQUM5QjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2hhc2hlcy9pZGVudGl0eS5qcz82NzFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZSB9IGZyb20gJy4uL2J5dGVzLmpzJztcbmltcG9ydCAqIGFzIERpZ2VzdCBmcm9tICcuL2RpZ2VzdC5qcyc7XG5jb25zdCBjb2RlID0gMDtcbmNvbnN0IG5hbWUgPSAnaWRlbnRpdHknO1xuY29uc3QgZW5jb2RlID0gY29lcmNlO1xuY29uc3QgZGlnZXN0ID0gaW5wdXQgPT4gRGlnZXN0LmNyZWF0ZShjb2RlLCBlbmNvZGUoaW5wdXQpKTtcbmV4cG9ydCBjb25zdCBpZGVudGl0eSA9IHtcbiAgY29kZSxcbiAgbmFtZSxcbiAgZW5jb2RlLFxuICBkaWdlc3Rcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/hashes/identity.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/hashes/sha2-browser.js":
/*!******************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/sha2-browser.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: function() { return /* binding */ sha256; },\n/* harmony export */   sha512: function() { return /* binding */ sha512; }\n/* harmony export */ });\n/* harmony import */ var _hasher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hasher.js */ \"./node_modules/multiformats/esm/src/hashes/hasher.js\");\n\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nconst sha256 = (0,_hasher_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nconst sha512 = (0,_hasher_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL3NoYTItYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUM7QUFDbkM7QUFDTyxlQUFlLGdEQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTSxlQUFlLGdEQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2hhc2hlcy9zaGEyLWJyb3dzZXIuanM/YzRjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9oYXNoZXIuanMnO1xuY29uc3Qgc2hhID0gbmFtZSA9PiBhc3luYyBkYXRhID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KG5hbWUsIGRhdGEpKTtcbmV4cG9ydCBjb25zdCBzaGEyNTYgPSBmcm9tKHtcbiAgbmFtZTogJ3NoYTItMjU2JyxcbiAgY29kZTogMTgsXG4gIGVuY29kZTogc2hhKCdTSEEtMjU2Jylcbn0pO1xuZXhwb3J0IGNvbnN0IHNoYTUxMiA9IGZyb20oe1xuICBuYW1lOiAnc2hhMi01MTInLFxuICBjb2RlOiAxOSxcbiAgZW5jb2RlOiBzaGEoJ1NIQS01MTInKVxufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/hashes/sha2-browser.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: function() { return /* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID; },\n/* harmony export */   bytes: function() { return /* reexport module object */ _bytes_js__WEBPACK_IMPORTED_MODULE_2__; },\n/* harmony export */   digest: function() { return /* reexport module object */ _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__; },\n/* harmony export */   hasher: function() { return /* reexport module object */ _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__; },\n/* harmony export */   varint: function() { return /* reexport module object */ _varint_js__WEBPACK_IMPORTED_MODULE_1__; }\n/* harmony export */ });\n/* harmony import */ var _cid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cid.js */ \"./node_modules/multiformats/esm/src/cid.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./varint.js */ \"./node_modules/multiformats/esm/src/varint.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashes/hasher.js */ \"./node_modules/multiformats/esm/src/hashes/hasher.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hashes/digest.js */ \"./node_modules/multiformats/esm/src/hashes/digest.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNPO0FBQ0Y7QUFDUztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9pbmRleC5qcz8xMDNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENJRCB9IGZyb20gJy4vY2lkLmpzJztcbmltcG9ydCAqIGFzIHZhcmludCBmcm9tICcuL3ZhcmludC5qcyc7XG5pbXBvcnQgKiBhcyBieXRlcyBmcm9tICcuL2J5dGVzLmpzJztcbmltcG9ydCAqIGFzIGhhc2hlciBmcm9tICcuL2hhc2hlcy9oYXNoZXIuanMnO1xuaW1wb3J0ICogYXMgZGlnZXN0IGZyb20gJy4vaGFzaGVzL2RpZ2VzdC5qcyc7XG5leHBvcnQge1xuICBDSUQsXG4gIGhhc2hlcixcbiAgZGlnZXN0LFxuICB2YXJpbnQsXG4gIGJ5dGVzXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/index.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/src/varint.js":
/*!*****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/varint.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encodeTo: function() { return /* binding */ encodeTo; },\n/* harmony export */   encodingLength: function() { return /* binding */ encodingLength; }\n/* harmony export */ });\n/* harmony import */ var _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/varint.js */ \"./node_modules/multiformats/esm/vendor/varint.js\");\n\nconst decode = (data, offset = 0) => {\n  const code = _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode(data, offset);\n  return [\n    code,\n    _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode.bytes\n  ];\n};\nconst encodeTo = (int, target, offset = 0) => {\n  _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encode(int, target, offset);\n  return target;\n};\nconst encodingLength = int => {\n  return _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodingLength(int);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvdmFyaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDbEM7QUFDUCxlQUFlLGdFQUFhO0FBQzVCO0FBQ0E7QUFDQSxJQUFJLGdFQUFhO0FBQ2pCO0FBQ0E7QUFDTztBQUNQLEVBQUUsZ0VBQWE7QUFDZjtBQUNBO0FBQ087QUFDUCxTQUFTLHdFQUFxQjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvdmFyaW50LmpzP2Y5NjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhcmludCBmcm9tICcuLi92ZW5kb3IvdmFyaW50LmpzJztcbmV4cG9ydCBjb25zdCBkZWNvZGUgPSAoZGF0YSwgb2Zmc2V0ID0gMCkgPT4ge1xuICBjb25zdCBjb2RlID0gdmFyaW50LmRlY29kZShkYXRhLCBvZmZzZXQpO1xuICByZXR1cm4gW1xuICAgIGNvZGUsXG4gICAgdmFyaW50LmRlY29kZS5ieXRlc1xuICBdO1xufTtcbmV4cG9ydCBjb25zdCBlbmNvZGVUbyA9IChpbnQsIHRhcmdldCwgb2Zmc2V0ID0gMCkgPT4ge1xuICB2YXJpbnQuZW5jb2RlKGludCwgdGFyZ2V0LCBvZmZzZXQpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbmV4cG9ydCBjb25zdCBlbmNvZGluZ0xlbmd0aCA9IGludCA9PiB7XG4gIHJldHVybiB2YXJpbnQuZW5jb2RpbmdMZW5ndGgoaW50KTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/src/varint.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/vendor/base-x.js":
/*!********************************************************!*\
  !*** ./node_modules/multiformats/esm/vendor/base-x.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nfunction base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\n/* harmony default export */ __webpack_exports__[\"default\"] = (_brrp__multiformats_scope_baseX);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS92ZW5kb3IvYmFzZS14LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJDQUEyQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQ0FBMkM7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS92ZW5kb3IvYmFzZS14LmpzPzliZjIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYmFzZShBTFBIQUJFVCwgbmFtZSkge1xuICBpZiAoQUxQSEFCRVQubGVuZ3RoID49IDI1NSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscGhhYmV0IHRvbyBsb25nJyk7XG4gIH1cbiAgdmFyIEJBU0VfTUFQID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBCQVNFX01BUC5sZW5ndGg7IGorKykge1xuICAgIEJBU0VfTUFQW2pdID0gMjU1O1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQUxQSEFCRVQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdChpKTtcbiAgICB2YXIgeGMgPSB4LmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKEJBU0VfTUFQW3hjXSAhPT0gMjU1KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpO1xuICAgIH1cbiAgICBCQVNFX01BUFt4Y10gPSBpO1xuICB9XG4gIHZhciBCQVNFID0gQUxQSEFCRVQubGVuZ3RoO1xuICB2YXIgTEVBREVSID0gQUxQSEFCRVQuY2hhckF0KDApO1xuICB2YXIgRkFDVE9SID0gTWF0aC5sb2coQkFTRSkgLyBNYXRoLmxvZygyNTYpO1xuICB2YXIgaUZBQ1RPUiA9IE1hdGgubG9nKDI1NikgLyBNYXRoLmxvZyhCQVNFKTtcbiAgZnVuY3Rpb24gZW5jb2RlKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KTtcbiAgICBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc291cmNlKSkge1xuICAgICAgc291cmNlID0gbmV3IFVpbnQ4QXJyYXkoc291cmNlLmJ1ZmZlciwgc291cmNlLmJ5dGVPZmZzZXQsIHNvdXJjZS5ieXRlTGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gVWludDhBcnJheS5mcm9tKHNvdXJjZSk7XG4gICAgfVxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciB6ZXJvZXMgPSAwO1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIHZhciBwYmVnaW4gPSAwO1xuICAgIHZhciBwZW5kID0gc291cmNlLmxlbmd0aDtcbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kICYmIHNvdXJjZVtwYmVnaW5dID09PSAwKSB7XG4gICAgICBwYmVnaW4rKztcbiAgICAgIHplcm9lcysrO1xuICAgIH1cbiAgICB2YXIgc2l6ZSA9IChwZW5kIC0gcGJlZ2luKSAqIGlGQUNUT1IgKyAxID4+PiAwO1xuICAgIHZhciBiNTggPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICB2YXIgY2FycnkgPSBzb3VyY2VbcGJlZ2luXTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIGZvciAodmFyIGl0MSA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgaXQxICE9PSAtMTsgaXQxLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAyNTYgKiBiNThbaXQxXSA+Pj4gMDtcbiAgICAgICAgYjU4W2l0MV0gPSBjYXJyeSAlIEJBU0UgPj4+IDA7XG4gICAgICAgIGNhcnJ5ID0gY2FycnkgLyBCQVNFID4+PiAwO1xuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IGk7XG4gICAgICBwYmVnaW4rKztcbiAgICB9XG4gICAgdmFyIGl0MiA9IHNpemUgLSBsZW5ndGg7XG4gICAgd2hpbGUgKGl0MiAhPT0gc2l6ZSAmJiBiNThbaXQyXSA9PT0gMCkge1xuICAgICAgaXQyKys7XG4gICAgfVxuICAgIHZhciBzdHIgPSBMRUFERVIucmVwZWF0KHplcm9lcyk7XG4gICAgZm9yICg7IGl0MiA8IHNpemU7ICsraXQyKSB7XG4gICAgICBzdHIgKz0gQUxQSEFCRVQuY2hhckF0KGI1OFtpdDJdKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUoc291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBTdHJpbmcnKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgpO1xuICAgIH1cbiAgICB2YXIgcHN6ID0gMDtcbiAgICBpZiAoc291cmNlW3Bzel0gPT09ICcgJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgemVyb2VzID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICB3aGlsZSAoc291cmNlW3Bzel0gPT09IExFQURFUikge1xuICAgICAgemVyb2VzKys7XG4gICAgICBwc3orKztcbiAgICB9XG4gICAgdmFyIHNpemUgPSAoc291cmNlLmxlbmd0aCAtIHBzeikgKiBGQUNUT1IgKyAxID4+PiAwO1xuICAgIHZhciBiMjU2ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgd2hpbGUgKHNvdXJjZVtwc3pdKSB7XG4gICAgICB2YXIgY2FycnkgPSBCQVNFX01BUFtzb3VyY2UuY2hhckNvZGVBdChwc3opXTtcbiAgICAgIGlmIChjYXJyeSA9PT0gMjU1KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gMDtcbiAgICAgIGZvciAodmFyIGl0MyA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgaXQzICE9PSAtMTsgaXQzLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSBCQVNFICogYjI1NltpdDNdID4+PiAwO1xuICAgICAgICBiMjU2W2l0M10gPSBjYXJyeSAlIDI1NiA+Pj4gMDtcbiAgICAgICAgY2FycnkgPSBjYXJyeSAvIDI1NiA+Pj4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vbi16ZXJvIGNhcnJ5Jyk7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBpO1xuICAgICAgcHN6Kys7XG4gICAgfVxuICAgIGlmIChzb3VyY2VbcHN6XSA9PT0gJyAnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdDQgPSBzaXplIC0gbGVuZ3RoO1xuICAgIHdoaWxlIChpdDQgIT09IHNpemUgJiYgYjI1NltpdDRdID09PSAwKSB7XG4gICAgICBpdDQrKztcbiAgICB9XG4gICAgdmFyIHZjaCA9IG5ldyBVaW50OEFycmF5KHplcm9lcyArIChzaXplIC0gaXQ0KSk7XG4gICAgdmFyIGogPSB6ZXJvZXM7XG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSkge1xuICAgICAgdmNoW2orK10gPSBiMjU2W2l0NCsrXTtcbiAgICB9XG4gICAgcmV0dXJuIHZjaDtcbiAgfVxuICBmdW5jdGlvbiBkZWNvZGUoc3RyaW5nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IGRlY29kZVVuc2FmZShzdHJpbmcpO1xuICAgIGlmIChidWZmZXIpIHtcbiAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgTm9uLSR7IG5hbWUgfSBjaGFyYWN0ZXJgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH07XG59XG52YXIgc3JjID0gYmFzZTtcbnZhciBfYnJycF9fbXVsdGlmb3JtYXRzX3Njb3BlX2Jhc2VYID0gc3JjO1xuZXhwb3J0IGRlZmF1bHQgX2JycnBfX211bHRpZm9ybWF0c19zY29wZV9iYXNlWDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/vendor/base-x.js\n"));

/***/ }),

/***/ "./node_modules/multiformats/esm/vendor/varint.js":
/*!********************************************************!*\
  !*** ./node_modules/multiformats/esm/vendor/varint.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nvar encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\n/* harmony default export */ __webpack_exports__[\"default\"] = (_brrp_varint);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS92ZW5kb3IvdmFyaW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS92ZW5kb3IvdmFyaW50LmpzPzRjODgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGVuY29kZV8xID0gZW5jb2RlO1xudmFyIE1TQiA9IDEyOCwgUkVTVCA9IDEyNywgTVNCQUxMID0gflJFU1QsIElOVCA9IE1hdGgucG93KDIsIDMxKTtcbmZ1bmN0aW9uIGVuY29kZShudW0sIG91dCwgb2Zmc2V0KSB7XG4gIG91dCA9IG91dCB8fCBbXTtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBvbGRPZmZzZXQgPSBvZmZzZXQ7XG4gIHdoaWxlIChudW0gPj0gSU5UKSB7XG4gICAgb3V0W29mZnNldCsrXSA9IG51bSAmIDI1NSB8IE1TQjtcbiAgICBudW0gLz0gMTI4O1xuICB9XG4gIHdoaWxlIChudW0gJiBNU0JBTEwpIHtcbiAgICBvdXRbb2Zmc2V0KytdID0gbnVtICYgMjU1IHwgTVNCO1xuICAgIG51bSA+Pj49IDc7XG4gIH1cbiAgb3V0W29mZnNldF0gPSBudW0gfCAwO1xuICBlbmNvZGUuYnl0ZXMgPSBvZmZzZXQgLSBvbGRPZmZzZXQgKyAxO1xuICByZXR1cm4gb3V0O1xufVxudmFyIGRlY29kZSA9IHJlYWQ7XG52YXIgTVNCJDEgPSAxMjgsIFJFU1QkMSA9IDEyNztcbmZ1bmN0aW9uIHJlYWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIHJlcyA9IDAsIG9mZnNldCA9IG9mZnNldCB8fCAwLCBzaGlmdCA9IDAsIGNvdW50ZXIgPSBvZmZzZXQsIGIsIGwgPSBidWYubGVuZ3RoO1xuICBkbyB7XG4gICAgaWYgKGNvdW50ZXIgPj0gbCkge1xuICAgICAgcmVhZC5ieXRlcyA9IDA7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ291bGQgbm90IGRlY29kZSB2YXJpbnQnKTtcbiAgICB9XG4gICAgYiA9IGJ1Zltjb3VudGVyKytdO1xuICAgIHJlcyArPSBzaGlmdCA8IDI4ID8gKGIgJiBSRVNUJDEpIDw8IHNoaWZ0IDogKGIgJiBSRVNUJDEpICogTWF0aC5wb3coMiwgc2hpZnQpO1xuICAgIHNoaWZ0ICs9IDc7XG4gIH0gd2hpbGUgKGIgPj0gTVNCJDEpO1xuICByZWFkLmJ5dGVzID0gY291bnRlciAtIG9mZnNldDtcbiAgcmV0dXJuIHJlcztcbn1cbnZhciBOMSA9IE1hdGgucG93KDIsIDcpO1xudmFyIE4yID0gTWF0aC5wb3coMiwgMTQpO1xudmFyIE4zID0gTWF0aC5wb3coMiwgMjEpO1xudmFyIE40ID0gTWF0aC5wb3coMiwgMjgpO1xudmFyIE41ID0gTWF0aC5wb3coMiwgMzUpO1xudmFyIE42ID0gTWF0aC5wb3coMiwgNDIpO1xudmFyIE43ID0gTWF0aC5wb3coMiwgNDkpO1xudmFyIE44ID0gTWF0aC5wb3coMiwgNTYpO1xudmFyIE45ID0gTWF0aC5wb3coMiwgNjMpO1xudmFyIGxlbmd0aCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBOMSA/IDEgOiB2YWx1ZSA8IE4yID8gMiA6IHZhbHVlIDwgTjMgPyAzIDogdmFsdWUgPCBONCA/IDQgOiB2YWx1ZSA8IE41ID8gNSA6IHZhbHVlIDwgTjYgPyA2IDogdmFsdWUgPCBONyA/IDcgOiB2YWx1ZSA8IE44ID8gOCA6IHZhbHVlIDwgTjkgPyA5IDogMTA7XG59O1xudmFyIHZhcmludCA9IHtcbiAgZW5jb2RlOiBlbmNvZGVfMSxcbiAgZGVjb2RlOiBkZWNvZGUsXG4gIGVuY29kaW5nTGVuZ3RoOiBsZW5ndGhcbn07XG52YXIgX2JycnBfdmFyaW50ID0gdmFyaW50O1xuZXhwb3J0IGRlZmF1bHQgX2JycnBfdmFyaW50OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/multiformats/esm/vendor/varint.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/alloc.js":
/*!***************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/alloc.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alloc: function() { return /* binding */ alloc; },\n/* harmony export */   allocUnsafe: function() { return /* binding */ allocUnsafe; }\n/* harmony export */ });\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\nfunction alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__.asUint8Array)(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nfunction allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__.asUint8Array)(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9hbGxvYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDaEQ7QUFDUDtBQUNBLFdBQVcsb0VBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFdBQVcsb0VBQVk7QUFDdkI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2FsbG9jLmpzPzFhZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNVaW50OEFycmF5IH0gZnJvbSAnLi91dGlsL2FzLXVpbnQ4YXJyYXkuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jKHNpemUgPSAwKSB7XG4gIGlmIChnbG9iYWxUaGlzLkJ1ZmZlciAhPSBudWxsICYmIGdsb2JhbFRoaXMuQnVmZmVyLmFsbG9jICE9IG51bGwpIHtcbiAgICByZXR1cm4gYXNVaW50OEFycmF5KGdsb2JhbFRoaXMuQnVmZmVyLmFsbG9jKHNpemUpKTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWxsb2NVbnNhZmUoc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2NVbnNhZmUgIT0gbnVsbCkge1xuICAgIHJldHVybiBhc1VpbnQ4QXJyYXkoZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSkpO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShzaXplKTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/alloc.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/compare.js":
/*!*****************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/compare.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: function() { return /* binding */ compare; }\n/* harmony export */ });\nfunction compare(a, b) {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1;\n    }\n    if (a[i] > b[i]) {\n      return 1;\n    }\n  }\n  if (a.byteLength > b.byteLength) {\n    return 1;\n  }\n  if (a.byteLength < b.byteLength) {\n    return -1;\n  }\n  return 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9jb21wYXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2NvbXBhcmUuanM/NzZiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYVtpXSA8IGJbaV0pIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGFbaV0gPiBiW2ldKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgaWYgKGEuYnl0ZUxlbmd0aCA+IGIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGlmIChhLmJ5dGVMZW5ndGggPCBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIDA7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/compare.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/concat.js":
/*!****************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/concat.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: function() { return /* binding */ concat; }\n/* harmony export */ });\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alloc.js */ \"./node_modules/uint8arrays/esm/src/alloc.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(output);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9jb25jYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2M7QUFDaEQ7QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0RBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0VBQVk7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvY29uY2F0LmpzPzIwM2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuL2FsbG9jLmpzJztcbmltcG9ydCB7IGFzVWludDhBcnJheSB9IGZyb20gJy4vdXRpbC9hcy11aW50OGFycmF5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYXJyYXlzLCBsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBhcnJheXMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIubGVuZ3RoLCAwKTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSBhbGxvY1Vuc2FmZShsZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBhcnIgb2YgYXJyYXlzKSB7XG4gICAgb3V0cHV0LnNldChhcnIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGFyci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGFzVWludDhBcnJheShvdXRwdXQpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/concat.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/equals.js":
/*!****************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/equals.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   equals: function() { return /* binding */ equals; }\n/* harmony export */ });\nfunction equals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9lcXVhbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvZXF1YWxzLmpzPzBlODgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGEuYnl0ZUxlbmd0aCAhPT0gYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/equals.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/from-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/from-string.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromString: function() { return /* binding */ fromString; }\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"./node_modules/uint8arrays/esm/src/util/bases.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction fromString(string, encoding = 'utf8') {\n  const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9mcm9tLXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0M7QUFDbUI7QUFDaEQ7QUFDUCxlQUFlLHNEQUFLO0FBQ3BCO0FBQ0EsOENBQThDLFVBQVU7QUFDeEQ7QUFDQTtBQUNBLFdBQVcsb0VBQVk7QUFDdkI7QUFDQSxpQ0FBaUMsYUFBYSxHQUFHLFFBQVE7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvZnJvbS1zdHJpbmcuanM/MDVkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZXMgZnJvbSAnLi91dGlsL2Jhc2VzLmpzJztcbmltcG9ydCB7IGFzVWludDhBcnJheSB9IGZyb20gJy4vdXRpbC9hcy11aW50OGFycmF5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cmluZywgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiR7IGVuY29kaW5nIH1cImApO1xuICB9XG4gIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi04JykgJiYgZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tICE9IG51bGwpIHtcbiAgICByZXR1cm4gYXNVaW50OEFycmF5KGdsb2JhbFRoaXMuQnVmZmVyLmZyb20oc3RyaW5nLCAndXRmLTgnKSk7XG4gIH1cbiAgcmV0dXJuIGJhc2UuZGVjb2Rlci5kZWNvZGUoYCR7IGJhc2UucHJlZml4IH0keyBzdHJpbmcgfWApO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/from-string.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: function() { return /* reexport safe */ _compare_js__WEBPACK_IMPORTED_MODULE_0__.compare; },\n/* harmony export */   concat: function() { return /* reexport safe */ _concat_js__WEBPACK_IMPORTED_MODULE_1__.concat; },\n/* harmony export */   equals: function() { return /* reexport safe */ _equals_js__WEBPACK_IMPORTED_MODULE_2__.equals; },\n/* harmony export */   fromString: function() { return /* reexport safe */ _from_string_js__WEBPACK_IMPORTED_MODULE_3__.fromString; },\n/* harmony export */   toString: function() { return /* reexport safe */ _to_string_js__WEBPACK_IMPORTED_MODULE_4__.toString; },\n/* harmony export */   xor: function() { return /* reexport safe */ _xor_js__WEBPACK_IMPORTED_MODULE_5__.xor; }\n/* harmony export */ });\n/* harmony import */ var _compare_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare.js */ \"./node_modules/uint8arrays/esm/src/compare.js\");\n/* harmony import */ var _concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./concat.js */ \"./node_modules/uint8arrays/esm/src/concat.js\");\n/* harmony import */ var _equals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./equals.js */ \"./node_modules/uint8arrays/esm/src/equals.js\");\n/* harmony import */ var _from_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./from-string.js */ \"./node_modules/uint8arrays/esm/src/from-string.js\");\n/* harmony import */ var _to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./to-string.js */ \"./node_modules/uint8arrays/esm/src/to-string.js\");\n/* harmony import */ var _xor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xor.js */ \"./node_modules/uint8arrays/esm/src/xor.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDRjtBQUNBO0FBQ1M7QUFDSjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2luZGV4LmpzPzU4MjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFyZSB9IGZyb20gJy4vY29tcGFyZS5qcyc7XG5pbXBvcnQgeyBjb25jYXQgfSBmcm9tICcuL2NvbmNhdC5qcyc7XG5pbXBvcnQgeyBlcXVhbHMgfSBmcm9tICcuL2VxdWFscy5qcyc7XG5pbXBvcnQgeyBmcm9tU3RyaW5nIH0gZnJvbSAnLi9mcm9tLXN0cmluZy5qcyc7XG5pbXBvcnQgeyB0b1N0cmluZyB9IGZyb20gJy4vdG8tc3RyaW5nLmpzJztcbmltcG9ydCB7IHhvciB9IGZyb20gJy4veG9yLmpzJztcbmV4cG9ydCB7XG4gIGNvbXBhcmUsXG4gIGNvbmNhdCxcbiAgZXF1YWxzLFxuICBmcm9tU3RyaW5nLFxuICB0b1N0cmluZyxcbiAgeG9yXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/index.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/to-string.js":
/*!*******************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/to-string.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: function() { return /* binding */ toString; }\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"./node_modules/uint8arrays/esm/src/util/bases.js\");\n\nfunction toString(array, encoding = 'utf8') {\n  const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy90by1zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDN0I7QUFDUCxlQUFlLHNEQUFLO0FBQ3BCO0FBQ0EsOENBQThDLFVBQVU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3RvLXN0cmluZy5qcz8zZGI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlcyBmcm9tICcuL3V0aWwvYmFzZXMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKGFycmF5LCBlbmNvZGluZyA9ICd1dGY4Jykge1xuICBjb25zdCBiYXNlID0gYmFzZXNbZW5jb2RpbmddO1xuICBpZiAoIWJhc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGVuY29kaW5nIFwiJHsgZW5jb2RpbmcgfVwiYCk7XG4gIH1cbiAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnIHx8IGVuY29kaW5nID09PSAndXRmLTgnKSAmJiBnbG9iYWxUaGlzLkJ1ZmZlciAhPSBudWxsICYmIGdsb2JhbFRoaXMuQnVmZmVyLmZyb20gIT0gbnVsbCkge1xuICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tKGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCkudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgfVxuICByZXR1cm4gYmFzZS5lbmNvZGVyLmVuY29kZShhcnJheSkuc3Vic3RyaW5nKDEpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/to-string.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/util/as-uint8array.js":
/*!****************************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/util/as-uint8array.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asUint8Array: function() { return /* binding */ asUint8Array; }\n/* harmony export */ });\nfunction asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy91dGlsL2FzLXVpbnQ4YXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy91dGlsL2FzLXVpbnQ4YXJyYXkuanM/YWY4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYXNVaW50OEFycmF5KGJ1Zikge1xuICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpO1xuICB9XG4gIHJldHVybiBidWY7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/util/as-uint8array.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/util/bases.js":
/*!********************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/util/bases.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/basics */ \"./node_modules/multiformats/esm/src/basics.js\");\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alloc.js */ \"./node_modules/uint8arrays/esm/src/alloc.js\");\n\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (BASES);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy91dGlsL2Jhc2VzLmpzIiwibWFwcGluZ3MiOiI7OztBQUE0QztBQUNGO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxjQUFjLHNEQUFXO0FBQ3pCLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE9BQU8sc0RBQUs7QUFDWjtBQUNBO0FBQ0E7QUFDQSxLQUFLLHNEQUFLO0FBQ1Y7QUFDQSwrREFBZSxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL3V0aWwvYmFzZXMuanM/ZDA4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlcyB9IGZyb20gJ211bHRpZm9ybWF0cy9iYXNpY3MnO1xuaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuLi9hbGxvYy5qcyc7XG5mdW5jdGlvbiBjcmVhdGVDb2RlYyhuYW1lLCBwcmVmaXgsIGVuY29kZSwgZGVjb2RlKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBwcmVmaXgsXG4gICAgZW5jb2Rlcjoge1xuICAgICAgbmFtZSxcbiAgICAgIHByZWZpeCxcbiAgICAgIGVuY29kZVxuICAgIH0sXG4gICAgZGVjb2RlcjogeyBkZWNvZGUgfVxuICB9O1xufVxuY29uc3Qgc3RyaW5nID0gY3JlYXRlQ29kZWMoJ3V0ZjgnLCAndScsIGJ1ZiA9PiB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKTtcbiAgcmV0dXJuICd1JyArIGRlY29kZXIuZGVjb2RlKGJ1Zik7XG59LCBzdHIgPT4ge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIHJldHVybiBlbmNvZGVyLmVuY29kZShzdHIuc3Vic3RyaW5nKDEpKTtcbn0pO1xuY29uc3QgYXNjaWkgPSBjcmVhdGVDb2RlYygnYXNjaWknLCAnYScsIGJ1ZiA9PiB7XG4gIGxldCBzdHJpbmcgPSAnYSc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufSwgc3RyID0+IHtcbiAgc3RyID0gc3RyLnN1YnN0cmluZygxKTtcbiAgY29uc3QgYnVmID0gYWxsb2NVbnNhZmUoc3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYnVmW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn0pO1xuY29uc3QgQkFTRVMgPSB7XG4gIHV0Zjg6IHN0cmluZyxcbiAgJ3V0Zi04Jzogc3RyaW5nLFxuICBoZXg6IGJhc2VzLmJhc2UxNixcbiAgbGF0aW4xOiBhc2NpaSxcbiAgYXNjaWk6IGFzY2lpLFxuICBiaW5hcnk6IGFzY2lpLFxuICAuLi5iYXNlc1xufTtcbmV4cG9ydCBkZWZhdWx0IEJBU0VTOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/util/bases.js\n"));

/***/ }),

/***/ "./node_modules/uint8arrays/esm/src/xor.js":
/*!*************************************************!*\
  !*** ./node_modules/uint8arrays/esm/src/xor.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xor: function() { return /* binding */ xor; }\n/* harmony export */ });\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alloc.js */ \"./node_modules/uint8arrays/esm/src/alloc.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction xor(a, b) {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length');\n  }\n  const result = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i];\n  }\n  return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(result);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy94b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ2M7QUFDaEQ7QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0RBQVc7QUFDNUIsa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTtBQUNBLFNBQVMsb0VBQVk7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMveG9yLmpzP2RmMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuL2FsbG9jLmpzJztcbmltcG9ydCB7IGFzVWludDhBcnJheSB9IGZyb20gJy4vdXRpbC9hcy11aW50OGFycmF5LmpzJztcbmV4cG9ydCBmdW5jdGlvbiB4b3IoYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dHMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgbGVuZ3RoJyk7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gYWxsb2NVbnNhZmUoYS5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBhW2ldIF4gYltpXTtcbiAgfVxuICByZXR1cm4gYXNVaW50OEFycmF5KHJlc3VsdCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uint8arrays/esm/src/xor.js\n"));

/***/ })

}]);