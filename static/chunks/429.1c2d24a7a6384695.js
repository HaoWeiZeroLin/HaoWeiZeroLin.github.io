"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[429],{92003:function(e){e.exports=function({mustBeMetaMask:e=!1,silent:t=!1,timeout:i=3e3}={}){!function(){if("boolean"!=typeof e)throw Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!=typeof t)throw Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!=typeof i)throw Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let n=!1;return new Promise(r=>{window.ethereum?handleEthereum():(window.addEventListener("ethereum#initialized",handleEthereum,{once:!0}),setTimeout(()=>{handleEthereum()},i));function handleEthereum(){if(n)return;n=!0,window.removeEventListener("ethereum#initialized",handleEthereum);let{ethereum:i}=window;if(i&&(!e||i.isMetaMask))r(i);else{let n=e&&i?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";t||console.error("@metamask/detect-provider:",n),r(null)}}})}},35796:function(e,t,i){i.d(t,{d:function(){return BaseEvmAdapter}});var n=i(85783);let BaseEvmAdapter=class BaseEvmAdapter extends n.J5{async init(e){this.chainConfig||(this.chainConfig=(0,n.h2)(n.EN.EIP155,1))}async authenticateUser(){if(!this.provider||this.status!==n.MP.CONNECTED)throw n.RM.notConnectedError();let{chainNamespace:e,chainId:t}=this.chainConfig,i=await this.provider.request({method:"eth_accounts"});if(i&&i.length>0){let r=(0,n.Cb)(i[0],this.name);if(r){let e=(0,n.$E)(r);if(!e)return{idToken:r}}let a={domain:window.location.origin,uri:window.location.href,address:i[0],chainId:parseInt(t,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:new Date().toISOString()},s=await (0,n.tV)(a,e),o=await this.provider.request({method:"personal_sign",params:[s,i[0]]}),h=await (0,n.rn)(e,o,s,this.name,this.sessionTime,this.clientId,this.web3AuthNetwork);return(0,n.Fr)(i[0],this.name,h),{idToken:h}}throw n.RM.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnectSession(){super.checkDisconnectionRequirements();let e=await this.provider.request({method:"eth_accounts"});e&&e.length>0&&(0,n.qz)(e[0],this.name)}async disconnect(){this.rehydrated=!1,this.emit(n.n2.DISCONNECTED)}}},94429:function(e,t,i){i.d(t,{MetamaskAdapter:function(){return MetamaskAdapter}});var n=i(81180),r=i(92003),a=i.n(r),s=i(85783),o=i(35796);let MetamaskAdapter=class MetamaskAdapter extends o.d{constructor(){super(...arguments),(0,n.Z)(this,"adapterNamespace",s.yk.EIP155),(0,n.Z)(this,"currentChainNamespace",s.EN.EIP155),(0,n.Z)(this,"type",s.hN.EXTERNAL),(0,n.Z)(this,"name",s.rW.METAMASK),(0,n.Z)(this,"status",s.MP.NOT_READY),(0,n.Z)(this,"metamaskProvider",null)}get provider(){return this.status!==s.MP.NOT_READY&&this.metamaskProvider?this.metamaskProvider:null}set provider(e){throw Error("Not implemented")}async init(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(await super.init(e),super.checkInitializationRequirements(),this.metamaskProvider=await a()({mustBeMetaMask:!0}),!this.metamaskProvider)throw s.Ty.notInstalled("Metamask extension is not installed");this.status=s.MP.READY,this.emit(s.n2.READY,s.rW.METAMASK);try{s.cM.debug("initializing metamask adapter"),e.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(e){this.emit(s.n2.ERRORED,e)}}async connect(){if(super.checkConnectionRequirements(),!this.metamaskProvider)throw s.RM.notConnectedError("Not able to connect with metamask");let{ethereum:e}=window;if(e&&e.isMetaMask&&"isPhantom"in e){if(e.providers&&e.providers.length>0){let t=e.providers.find(e=>e.isMetaMask&&!e.overrideIsMetaMask);t&&e.setProvider(t)}}else if(e&&(e.providers||[]).length>0){let t=e.providers.find(e=>e.isMetaMask);t&&e.setSelectedProvider(t)}this.status=s.MP.CONNECTING,this.emit(s.n2.CONNECTING,{adapter:s.rW.METAMASK});try{await this.metamaskProvider.request({method:"eth_requestAccounts"});let{chainId:e}=this.metamaskProvider;if(e!==this.chainConfig.chainId&&(await this.addChain(this.chainConfig,!0),await this.switchChain(this.chainConfig,!0)),this.status=s.MP.CONNECTED,!this.provider)throw s.RM.notConnectedError("Failed to connect with provider");let disconnectHandler=()=>{var e;this.disconnect(),null===(e=this.provider)||void 0===e||e.removeListener("disconnect",disconnectHandler)};return this.provider.on("disconnect",disconnectHandler),this.emit(s.n2.CONNECTED,{adapter:s.rW.METAMASK,reconnected:this.rehydrated}),this.provider}catch(e){if(this.status=s.MP.READY,this.rehydrated=!1,this.emit(s.n2.ERRORED,e),e instanceof s.up)throw e;throw s.RM.connectionError("Failed to login with metamask wallet")}}async disconnect(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnectSession(),null===(e=this.provider)||void 0===e||e.removeAllListeners(),t.cleanup?(this.status=s.MP.NOT_READY,this.metamaskProvider=null):this.status=s.MP.READY,await super.disconnect()}async getUserInfo(){if(this.status!==s.MP.CONNECTED)throw s.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async addChain(e){var t;let i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkAddChainRequirements(e,i),await (null===(t=this.metamaskProvider)||void 0===t?void 0:t.request({method:"wallet_addEthereumChain",params:[{chainId:e.chainId,chainName:e.displayName,rpcUrls:[e.rpcTarget],blockExplorerUrls:[e.blockExplorer],nativeCurrency:{name:e.tickerName,symbol:e.ticker,decimals:e.decimals||18}}]})),this.addChainConfig(e)}async switchChain(e){var t;let i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkSwitchChainRequirements(e,i),await (null===(t=this.metamaskProvider)||void 0===t?void 0:t.request({method:"wallet_switchEthereumChain",params:[{chainId:e.chainId}]})),this.setAdapterSettings({chainConfig:this.getChainConfig(e.chainId)})}}}}]);